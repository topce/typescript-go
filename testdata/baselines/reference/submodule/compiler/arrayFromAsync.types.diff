--- old.arrayFromAsync.types
+++ new.arrayFromAsync.types
@@= skipped -109, +109 lines =@@
 >sameArr1 : number[]
 >await Array.fromAsync(arrLike) : number[]
 >Array.fromAsync(arrLike) : Promise<number[]>
->Array.fromAsync : { <T>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T | PromiseLike<T>> | ArrayLike<T | PromiseLike<T>>): Promise<T[]>; <T, U>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T> | ArrayLike<T>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>; }
+>Array.fromAsync : { <T>(iterableOrArrayLike: ArrayLike<T | PromiseLike<T>> | AsyncIterable<T, any, any> | Iterable<T | PromiseLike<T>, any, any>): Promise<T[]>; <T, U>(iterableOrArrayLike: ArrayLike<T> | AsyncIterable<T, any, any> | Iterable<T, any, any>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>; }
 >Array : ArrayConstructor
->fromAsync : { <T>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T | PromiseLike<T>> | ArrayLike<T | PromiseLike<T>>): Promise<T[]>; <T, U>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T> | ArrayLike<T>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>; }
+>fromAsync : { <T>(iterableOrArrayLike: ArrayLike<T | PromiseLike<T>> | AsyncIterable<T, any, any> | Iterable<T | PromiseLike<T>, any, any>): Promise<T[]>; <T, U>(iterableOrArrayLike: ArrayLike<T> | AsyncIterable<T, any, any> | Iterable<T, any, any>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>; }
 >arrLike : { 0: Promise<number>; 1: Promise<number>; 2: Promise<number>; 3: Promise<number>; length: number; }
 
 const sameArr2 = await Array.fromAsync([Promise.resolve(0), Promise.resolve(2), Promise.resolve(4), Promise.resolve(6)]);
 >sameArr2 : number[]
 >await Array.fromAsync([Promise.resolve(0), Promise.resolve(2), Promise.resolve(4), Promise.resolve(6)]) : number[]
 >Array.fromAsync([Promise.resolve(0), Promise.resolve(2), Promise.resolve(4), Promise.resolve(6)]) : Promise<number[]>
->Array.fromAsync : { <T>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T | PromiseLike<T>> | ArrayLike<T | PromiseLike<T>>): Promise<T[]>; <T, U>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T> | ArrayLike<T>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>; }
+>Array.fromAsync : { <T>(iterableOrArrayLike: ArrayLike<T | PromiseLike<T>> | AsyncIterable<T, any, any> | Iterable<T | PromiseLike<T>, any, any>): Promise<T[]>; <T, U>(iterableOrArrayLike: ArrayLike<T> | AsyncIterable<T, any, any> | Iterable<T, any, any>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>; }
 >Array : ArrayConstructor
->fromAsync : { <T>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T | PromiseLike<T>> | ArrayLike<T | PromiseLike<T>>): Promise<T[]>; <T, U>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T> | ArrayLike<T>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>; }
+>fromAsync : { <T>(iterableOrArrayLike: ArrayLike<T | PromiseLike<T>> | AsyncIterable<T, any, any> | Iterable<T | PromiseLike<T>, any, any>): Promise<T[]>; <T, U>(iterableOrArrayLike: ArrayLike<T> | AsyncIterable<T, any, any> | Iterable<T, any, any>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>; }
 >[Promise.resolve(0), Promise.resolve(2), Promise.resolve(4), Promise.resolve(6)] : Promise<number>[]
 >Promise.resolve(0) : Promise<number>
 >Promise.resolve : { (): Promise<void>; <T>(value: T): Promise<Awaited<T>>; <T>(value: T | PromiseLike<T>): Promise<Awaited<T>>; }
@@= skipped -38, +38 lines =@@
 >sameArr3 : number[]
 >await Array.fromAsync(genPromises(4)) : number[]
 >Array.fromAsync(genPromises(4)) : Promise<number[]>
->Array.fromAsync : { <T>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T | PromiseLike<T>> | ArrayLike<T | PromiseLike<T>>): Promise<T[]>; <T, U>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T> | ArrayLike<T>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>; }
+>Array.fromAsync : { <T>(iterableOrArrayLike: ArrayLike<T | PromiseLike<T>> | AsyncIterable<T, any, any> | Iterable<T | PromiseLike<T>, any, any>): Promise<T[]>; <T, U>(iterableOrArrayLike: ArrayLike<T> | AsyncIterable<T, any, any> | Iterable<T, any, any>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>; }
 >Array : ArrayConstructor
->fromAsync : { <T>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T | PromiseLike<T>> | ArrayLike<T | PromiseLike<T>>): Promise<T[]>; <T, U>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T> | ArrayLike<T>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>; }
+>fromAsync : { <T>(iterableOrArrayLike: ArrayLike<T | PromiseLike<T>> | AsyncIterable<T, any, any> | Iterable<T | PromiseLike<T>, any, any>): Promise<T[]>; <T, U>(iterableOrArrayLike: ArrayLike<T> | AsyncIterable<T, any, any> | Iterable<T, any, any>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>; }
 >genPromises(4) : Generator<Promise<number>, void, unknown>
 >genPromises : (n: any) => Generator<Promise<number>, void, unknown>
 >4 : 4
@@= skipped -11, +11 lines =@@
 >sameArr4 : number[]
 >await Array.fromAsync(asyncGen(4)) : number[]
 >Array.fromAsync(asyncGen(4)) : Promise<number[]>
->Array.fromAsync : { <T>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T | PromiseLike<T>> | ArrayLike<T | PromiseLike<T>>): Promise<T[]>; <T, U>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T> | ArrayLike<T>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>; }
+>Array.fromAsync : { <T>(iterableOrArrayLike: ArrayLike<T | PromiseLike<T>> | AsyncIterable<T, any, any> | Iterable<T | PromiseLike<T>, any, any>): Promise<T[]>; <T, U>(iterableOrArrayLike: ArrayLike<T> | AsyncIterable<T, any, any> | Iterable<T, any, any>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>; }
 >Array : ArrayConstructor
->fromAsync : { <T>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T | PromiseLike<T>> | ArrayLike<T | PromiseLike<T>>): Promise<T[]>; <T, U>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T> | ArrayLike<T>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>; }
+>fromAsync : { <T>(iterableOrArrayLike: ArrayLike<T | PromiseLike<T>> | AsyncIterable<T, any, any> | Iterable<T | PromiseLike<T>, any, any>): Promise<T[]>; <T, U>(iterableOrArrayLike: ArrayLike<T> | AsyncIterable<T, any, any> | Iterable<T, any, any>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>; }
 >asyncGen(4) : AsyncGenerator<number, void, unknown>
 >asyncGen : (n: any) => AsyncGenerator<number, void, unknown>
 >4 : 4
 
 function Data (n) {}
->Data : typeof Data
+>Data : { (n: any): void; fromAsync: { <T>(iterableOrArrayLike: ArrayLike<T | PromiseLike<T>> | AsyncIterable<T, any, any> | Iterable<T | PromiseLike<T>, any, any>): Promise<T[]>; <T, U>(iterableOrArrayLike: ArrayLike<T> | AsyncIterable<T, any, any> | Iterable<T, any, any>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>; }; }
 >n : any
 
 Data.fromAsync = Array.fromAsync;
->Data.fromAsync = Array.fromAsync : { <T>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T | PromiseLike<T>> | ArrayLike<T | PromiseLike<T>>): Promise<T[]>; <T, U>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T> | ArrayLike<T>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>; }
->Data.fromAsync : { <T>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T | PromiseLike<T>> | ArrayLike<T | PromiseLike<T>>): Promise<T[]>; <T, U>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T> | ArrayLike<T>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>; }
->Data : typeof Data
->fromAsync : { <T>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T | PromiseLike<T>> | ArrayLike<T | PromiseLike<T>>): Promise<T[]>; <T, U>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T> | ArrayLike<T>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>; }
->Array.fromAsync : { <T>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T | PromiseLike<T>> | ArrayLike<T | PromiseLike<T>>): Promise<T[]>; <T, U>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T> | ArrayLike<T>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>; }
+>Data.fromAsync = Array.fromAsync : { <T>(iterableOrArrayLike: ArrayLike<T | PromiseLike<T>> | AsyncIterable<T, any, any> | Iterable<T | PromiseLike<T>, any, any>): Promise<T[]>; <T, U>(iterableOrArrayLike: ArrayLike<T> | AsyncIterable<T, any, any> | Iterable<T, any, any>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>; }
+>Data.fromAsync : { <T>(iterableOrArrayLike: ArrayLike<T | PromiseLike<T>> | AsyncIterable<T, any, any> | Iterable<T | PromiseLike<T>, any, any>): Promise<T[]>; <T, U>(iterableOrArrayLike: ArrayLike<T> | AsyncIterable<T, any, any> | Iterable<T, any, any>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>; }
+>Data : { (n: any): void; fromAsync: { <T>(iterableOrArrayLike: ArrayLike<T | PromiseLike<T>> | AsyncIterable<T, any, any> | Iterable<T | PromiseLike<T>, any, any>): Promise<T[]>; <T, U>(iterableOrArrayLike: ArrayLike<T> | AsyncIterable<T, any, any> | Iterable<T, any, any>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>; }; }
+>fromAsync : { <T>(iterableOrArrayLike: ArrayLike<T | PromiseLike<T>> | AsyncIterable<T, any, any> | Iterable<T | PromiseLike<T>, any, any>): Promise<T[]>; <T, U>(iterableOrArrayLike: ArrayLike<T> | AsyncIterable<T, any, any> | Iterable<T, any, any>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>; }
+>Array.fromAsync : { <T>(iterableOrArrayLike: ArrayLike<T | PromiseLike<T>> | AsyncIterable<T, any, any> | Iterable<T | PromiseLike<T>, any, any>): Promise<T[]>; <T, U>(iterableOrArrayLike: ArrayLike<T> | AsyncIterable<T, any, any> | Iterable<T, any, any>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>; }
 >Array : ArrayConstructor
->fromAsync : { <T>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T | PromiseLike<T>> | ArrayLike<T | PromiseLike<T>>): Promise<T[]>; <T, U>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T> | ArrayLike<T>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>; }
+>fromAsync : { <T>(iterableOrArrayLike: ArrayLike<T | PromiseLike<T>> | AsyncIterable<T, any, any> | Iterable<T | PromiseLike<T>, any, any>): Promise<T[]>; <T, U>(iterableOrArrayLike: ArrayLike<T> | AsyncIterable<T, any, any> | Iterable<T, any, any>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>; }
 
 const sameArr5 = await Data.fromAsync(asyncGen(4));
 >sameArr5 : number[]
 >await Data.fromAsync(asyncGen(4)) : number[]
 >Data.fromAsync(asyncGen(4)) : Promise<number[]>
->Data.fromAsync : { <T>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T | PromiseLike<T>> | ArrayLike<T | PromiseLike<T>>): Promise<T[]>; <T, U>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T> | ArrayLike<T>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>; }
->Data : typeof Data
->fromAsync : { <T>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T | PromiseLike<T>> | ArrayLike<T | PromiseLike<T>>): Promise<T[]>; <T, U>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T> | ArrayLike<T>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>; }
+>Data.fromAsync : { <T>(iterableOrArrayLike: ArrayLike<T | PromiseLike<T>> | AsyncIterable<T, any, any> | Iterable<T | PromiseLike<T>, any, any>): Promise<T[]>; <T, U>(iterableOrArrayLike: ArrayLike<T> | AsyncIterable<T, any, any> | Iterable<T, any, any>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>; }
+>Data : { (n: any): void; fromAsync: { <T>(iterableOrArrayLike: ArrayLike<T | PromiseLike<T>> | AsyncIterable<T, any, any> | Iterable<T | PromiseLike<T>, any, any>): Promise<T[]>; <T, U>(iterableOrArrayLike: ArrayLike<T> | AsyncIterable<T, any, any> | Iterable<T, any, any>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>; }; }
+>fromAsync : { <T>(iterableOrArrayLike: ArrayLike<T | PromiseLike<T>> | AsyncIterable<T, any, any> | Iterable<T | PromiseLike<T>, any, any>): Promise<T[]>; <T, U>(iterableOrArrayLike: ArrayLike<T> | AsyncIterable<T, any, any> | Iterable<T, any, any>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>; }
 >asyncGen(4) : AsyncGenerator<number, void, unknown>
 >asyncGen : (n: any) => AsyncGenerator<number, void, unknown>
 >4 : 4
@@= skipped -35, +35 lines =@@
 >mapArr1 : number[]
 >await Array.fromAsync(asyncGen(4), v => v ** 2) : number[]
 >Array.fromAsync(asyncGen(4), v => v ** 2) : Promise<number[]>
->Array.fromAsync : { <T>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T | PromiseLike<T>> | ArrayLike<T | PromiseLike<T>>): Promise<T[]>; <T, U>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T> | ArrayLike<T>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>; }
+>Array.fromAsync : { <T>(iterableOrArrayLike: ArrayLike<T | PromiseLike<T>> | AsyncIterable<T, any, any> | Iterable<T | PromiseLike<T>, any, any>): Promise<T[]>; <T, U>(iterableOrArrayLike: ArrayLike<T> | AsyncIterable<T, any, any> | Iterable<T, any, any>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>; }
 >Array : ArrayConstructor
->fromAsync : { <T>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T | PromiseLike<T>> | ArrayLike<T | PromiseLike<T>>): Promise<T[]>; <T, U>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T> | ArrayLike<T>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>; }
+>fromAsync : { <T>(iterableOrArrayLike: ArrayLike<T | PromiseLike<T>> | AsyncIterable<T, any, any> | Iterable<T | PromiseLike<T>, any, any>): Promise<T[]>; <T, U>(iterableOrArrayLike: ArrayLike<T> | AsyncIterable<T, any, any> | Iterable<T, any, any>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>; }
 >asyncGen(4) : AsyncGenerator<number, void, unknown>
 >asyncGen : (n: any) => AsyncGenerator<number, void, unknown>
 >4 : 4
@@= skipped -16, +16 lines =@@
 >mapArr2 : number[]
 >await Array.fromAsync([0,2,4,6], v => Promise.resolve(v ** 2)) : number[]
 >Array.fromAsync([0,2,4,6], v => Promise.resolve(v ** 2)) : Promise<number[]>
->Array.fromAsync : { <T>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T | PromiseLike<T>> | ArrayLike<T | PromiseLike<T>>): Promise<T[]>; <T, U>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T> | ArrayLike<T>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>; }
+>Array.fromAsync : { <T>(iterableOrArrayLike: ArrayLike<T | PromiseLike<T>> | AsyncIterable<T, any, any> | Iterable<T | PromiseLike<T>, any, any>): Promise<T[]>; <T, U>(iterableOrArrayLike: ArrayLike<T> | AsyncIterable<T, any, any> | Iterable<T, any, any>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>; }
 >Array : ArrayConstructor
->fromAsync : { <T>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T | PromiseLike<T>> | ArrayLike<T | PromiseLike<T>>): Promise<T[]>; <T, U>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T> | ArrayLike<T>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>; }
+>fromAsync : { <T>(iterableOrArrayLike: ArrayLike<T | PromiseLike<T>> | AsyncIterable<T, any, any> | Iterable<T | PromiseLike<T>, any, any>): Promise<T[]>; <T, U>(iterableOrArrayLike: ArrayLike<T> | AsyncIterable<T, any, any> | Iterable<T, any, any>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>; }
 >[0,2,4,6] : number[]
 >0 : 0
 >2 : 2
@@= skipped -22, +22 lines =@@
 >mapArr3 : number[]
 >await Array.fromAsync([0,2,4,6], v => v ** 2) : number[]
 >Array.fromAsync([0,2,4,6], v => v ** 2) : Promise<number[]>
->Array.fromAsync : { <T>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T | PromiseLike<T>> | ArrayLike<T | PromiseLike<T>>): Promise<T[]>; <T, U>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T> | ArrayLike<T>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>; }
+>Array.fromAsync : { <T>(iterableOrArrayLike: ArrayLike<T | PromiseLike<T>> | AsyncIterable<T, any, any> | Iterable<T | PromiseLike<T>, any, any>): Promise<T[]>; <T, U>(iterableOrArrayLike: ArrayLike<T> | AsyncIterable<T, any, any> | Iterable<T, any, any>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>; }
 >Array : ArrayConstructor
->fromAsync : { <T>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T | PromiseLike<T>> | ArrayLike<T | PromiseLike<T>>): Promise<T[]>; <T, U>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T> | ArrayLike<T>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>; }
+>fromAsync : { <T>(iterableOrArrayLike: ArrayLike<T | PromiseLike<T>> | AsyncIterable<T, any, any> | Iterable<T | PromiseLike<T>, any, any>): Promise<T[]>; <T, U>(iterableOrArrayLike: ArrayLike<T> | AsyncIterable<T, any, any> | Iterable<T, any, any>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>; }
 >[0,2,4,6] : number[]
 >0 : 0
 >2 : 2
@@= skipped -20, +20 lines =@@
 >Error : ErrorConstructor
 
 const badIterable = { [Symbol.iterator] () { throw err; } };
->badIterable : { [Symbol.iterator](): never; }
->{ [Symbol.iterator] () { throw err; } } : { [Symbol.iterator](): never; }
+>badIterable : { [Symbol.iterator]: () => never; }
+>{ [Symbol.iterator] () { throw err; } } : { [Symbol.iterator]: () => never; }
 >[Symbol.iterator] : () => never
 >Symbol.iterator : unique symbol
 >Symbol : SymbolConstructor
@@= skipped -13, +13 lines =@@
 >badArray : unknown[]
 >await Array.fromAsync(badIterable) : unknown[]
 >Array.fromAsync(badIterable) : Promise<unknown[]>
->Array.fromAsync : { <T>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T | PromiseLike<T>> | ArrayLike<T | PromiseLike<T>>): Promise<T[]>; <T, U>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T> | ArrayLike<T>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>; }
+>Array.fromAsync : { <T>(iterableOrArrayLike: ArrayLike<T | PromiseLike<T>> | AsyncIterable<T, any, any> | Iterable<T | PromiseLike<T>, any, any>): Promise<T[]>; <T, U>(iterableOrArrayLike: ArrayLike<T> | AsyncIterable<T, any, any> | Iterable<T, any, any>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>; }
 >Array : ArrayConstructor
->fromAsync : { <T>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T | PromiseLike<T>> | ArrayLike<T | PromiseLike<T>>): Promise<T[]>; <T, U>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T> | ArrayLike<T>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>; }
->badIterable : { [Symbol.iterator](): never; }
+>fromAsync : { <T>(iterableOrArrayLike: ArrayLike<T | PromiseLike<T>> | AsyncIterable<T, any, any> | Iterable<T | PromiseLike<T>, any, any>): Promise<T[]>; <T, U>(iterableOrArrayLike: ArrayLike<T> | AsyncIterable<T, any, any> | Iterable<T, any, any>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>; }
+>badIterable : { [Symbol.iterator]: () => never; }
 
 const withIndexResult = await Array.fromAsync(["a", "b"], (str, index) => ({ index, str }));
 >withIndexResult : { index: number; str: string; }[]
 >await Array.fromAsync(["a", "b"], (str, index) => ({ index, str })) : { index: number; str: string; }[]
 >Array.fromAsync(["a", "b"], (str, index) => ({ index, str })) : Promise<{ index: number; str: string; }[]>
->Array.fromAsync : { <T>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T | PromiseLike<T>> | ArrayLike<T | PromiseLike<T>>): Promise<T[]>; <T, U>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T> | ArrayLike<T>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>; }
+>Array.fromAsync : { <T>(iterableOrArrayLike: ArrayLike<T | PromiseLike<T>> | AsyncIterable<T, any, any> | Iterable<T | PromiseLike<T>, any, any>): Promise<T[]>; <T, U>(iterableOrArrayLike: ArrayLike<T> | AsyncIterable<T, any, any> | Iterable<T, any, any>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>; }
 >Array : ArrayConstructor
->fromAsync : { <T>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T | PromiseLike<T>> | ArrayLike<T | PromiseLike<T>>): Promise<T[]>; <T, U>(iterableOrArrayLike: AsyncIterable<T> | Iterable<T> | ArrayLike<T>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>; }
+>fromAsync : { <T>(iterableOrArrayLike: ArrayLike<T | PromiseLike<T>> | AsyncIterable<T, any, any> | Iterable<T | PromiseLike<T>, any, any>): Promise<T[]>; <T, U>(iterableOrArrayLike: ArrayLike<T> | AsyncIterable<T, any, any> | Iterable<T, any, any>, mapFn: (value: Awaited<T>, index: number) => U, thisArg?: any): Promise<Awaited<U>[]>; }
 >["a", "b"] : string[]
 >"a" : "a"
 >"b" : "b"
