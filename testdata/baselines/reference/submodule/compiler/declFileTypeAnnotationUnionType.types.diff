--- old.declFileTypeAnnotationUnionType.types
+++ new.declFileTypeAnnotationUnionType.types
@@= skipped -31, +31 lines =@@
 
 // Just the name
 var k: c | m.c = new c() || new m.c();
->k : c | m.c
+>k : c | c
 >m : any
->new c() || new m.c() : c | m.c
+>new c() || new m.c() : c | c
 >new c() : c
 >c : typeof c
->new m.c() : m.c
->m.c : typeof m.c
+>new m.c() : c
+>m.c : typeof c
 >m : typeof m
->c : typeof m.c
+>c : typeof c
 
 var l = new c() || new m.c();
->l : c | m.c
->new c() || new m.c() : c | m.c
+>l : c | c
+>new c() || new m.c() : c | c
 >new c() : c
 >c : typeof c
->new m.c() : m.c
->m.c : typeof m.c
+>new m.c() : c
+>m.c : typeof c
 >m : typeof m
->c : typeof m.c
+>c : typeof c
 
 var x: g<string> | m.g<number> |  (() => c) = new g<string>() ||  new m.g<number>() || (() => new c());
->x : g<string> | m.g<number> | (() => c)
+>x : g<number> | g<string> | () => c
 >m : any
->new g<string>() ||  new m.g<number>() || (() => new c()) : g<string> | m.g<number> | (() => c)
->new g<string>() ||  new m.g<number>() : g<string> | m.g<number>
+>new g<string>() ||  new m.g<number>() || (() => new c()) : g<number> | g<string> | () => c
+>new g<string>() ||  new m.g<number>() : g<number> | g<string>
 >new g<string>() : g<string>
 >g : typeof g
->new m.g<number>() : m.g<number>
->m.g : typeof m.g
+>new m.g<number>() : g<number>
+>m.g : typeof g
 >m : typeof m
->g : typeof m.g
+>g : typeof g
 >(() => new c()) : () => c
 >() => new c() : () => c
 >new c() : c
 >c : typeof c
 
 var y = new g<string>() || new m.g<number>() || (() => new c());
->y : g<string> | m.g<number> | (() => c)
->new g<string>() || new m.g<number>() || (() => new c()) : g<string> | m.g<number> | (() => c)
->new g<string>() || new m.g<number>() : g<string> | m.g<number>
+>y : g<number> | g<string> | () => c
+>new g<string>() || new m.g<number>() || (() => new c()) : g<number> | g<string> | () => c
+>new g<string>() || new m.g<number>() : g<number> | g<string>
 >new g<string>() : g<string>
 >g : typeof g
->new m.g<number>() : m.g<number>
->m.g : typeof m.g
+>new m.g<number>() : g<number>
+>m.g : typeof g
 >m : typeof m
->g : typeof m.g
+>g : typeof g
 >(() => new c()) : () => c
 >() => new c() : () => c
 >new c() : c
