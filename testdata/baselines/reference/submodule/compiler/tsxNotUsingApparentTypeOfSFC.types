//// [tests/cases/compiler/tsxNotUsingApparentTypeOfSFC.tsx] ////

=== tsxNotUsingApparentTypeOfSFC.tsx ===
/// <reference path="react16.d.ts" />

import React from 'react';
>React : any

function test<P>(wrappedProps: P) {
>test : <P>(wrappedProps: P) => void
>wrappedProps : P

    let MySFC = function(props: P) {
>MySFC : (props: P) => any
>function(props: P) {        return <>hello</>;    } : (props: P) => any
>props : P

        return <>hello</>;
><>hello</> : any

    };
    class MyComponent extends React.Component<P> {
>MyComponent : MyComponent<P>
>React.Component : any
>React : any
>Component : any

        render() {
>render : () => any

            return <>hello</>;
><>hello</> : any
        }
    }
    let x = <MySFC />;  // should error
>x : any
><MySFC /> : any
>MySFC : (props: P) => any

    let y = <MyComponent />;  // should error
>y : any
><MyComponent /> : any
>MyComponent : typeof MyComponent

    let z = <MySFC {...wrappedProps} /> // should work
>z : any
><MySFC {...wrappedProps} /> : any
>MySFC : (props: P) => any
>wrappedProps : P

    let q = <MyComponent {...wrappedProps} /> // should work
>q : any
><MyComponent {...wrappedProps} /> : any
>MyComponent : typeof MyComponent
>wrappedProps : P
}
