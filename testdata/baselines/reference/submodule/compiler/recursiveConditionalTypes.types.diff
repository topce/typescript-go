--- old.recursiveConditionalTypes.types
+++ new.recursiveConditionalTypes.types
@@= skipped -0, +0 lines =@@
 //// [tests/cases/compiler/recursiveConditionalTypes.ts] ////
 
-=== Performance Stats ===
-Type Count: 500,000
-Instantiation count: 500,000
-Symbol count: 1,000,000
-
 === recursiveConditionalTypes.ts ===
 // Awaiting promises
 
@@= skipped -18, +13 lines =@@
 >MyPromise : MyPromise<T>
 
     then<U>(f: ((value: T) => U | PromiseLike<U>) | null | undefined): MyPromise<U>;
->then : <U>(f: ((value: T) => U | PromiseLike<U>) | null | undefined) => MyPromise<U>
->f : ((value: T) => U | PromiseLike<U>) | null | undefined
+>then : <U>(f: (value: T) => U | PromiseLike<U> | null | undefined) => MyPromise<U>
+>f : (value: T) => U | PromiseLike<U> | null | undefined
 >value : T
 }
 
@@= skipped -111, +111 lines =@@
 }
 
 declare function f23<T>(t: TupleOf<T, 3>): T;
->f23 : <T>(t: TupleOf<T, 3>) => T
+>f23 : <T>(t: [T, T, T]) => T
 >t : [T, T, T]
 
 f23(['a', 'b', 'c']);  // string
 >f23(['a', 'b', 'c']) : string
->f23 : <T>(t: TupleOf<T, 3>) => T
+>f23 : <T>(t: [T, T, T]) => T
 >['a', 'b', 'c'] : [string, string, string]
 >'a' : "a"
 >'b' : "b"
@@= skipped -54, +54 lines =@@
 >b3 : InfBox<string>
 
 declare let b4: { value: { value: { value: typeof b4 }}};
->b4 : { value: { value: { value: typeof b4; }; }; }
->value : { value: { value: typeof b4; }; }
->value : { value: typeof b4; }
->value : { value: { value: { value: typeof b4; }; }; }
->b4 : { value: { value: { value: typeof b4; }; }; }
+>b4 : { value: { value: { value: ???; }; }; }
+>value : { value: { value: { value: ???; }; }; }
+>value : { value: { value: { value: ???; }; }; }
+>value : { value: { value: { value: ???; }; }; }
+>b4 : { value: { value: { value: ???; }; }; }
 
 unbox(b1);  // string
 >unbox(b1) : string
@@= skipped -39, +39 lines =@@
 >5 : 5
 
 unbox(b4);  // { value: { value: typeof b4 }}
->unbox(b4) : { value: { value: typeof b4; }; }
+>unbox(b4) : { value: { value: { value: ???; }; }; }
 >unbox : <T>(box: RecBox<T>) => T
->b4 : { value: { value: { value: typeof b4; }; }; }
+>b4 : { value: { value: { value: ???; }; }; }
 
 unbox({ value: { value: { get value() { return this; } }}});  // { readonly value: ... }
->unbox({ value: { value: { get value() { return this; } }}}) : { readonly value: { readonly value: any; }; }
+>unbox({ value: { value: { get value() { return this; } }}}) : { readonly value: { readonly value: ???; }; }
 >unbox : <T>(box: RecBox<T>) => T
->{ value: { value: { get value() { return this; } }}} : { value: { value: { readonly value: { readonly value: any; }; }; }; }
->value : { value: { readonly value: { readonly value: any; }; }; }
->{ value: { get value() { return this; } }} : { value: { readonly value: { readonly value: any; }; }; }
->value : { readonly value: { readonly value: any; }; }
->{ get value() { return this; } } : { readonly value: { readonly value: any; }; }
->value : { readonly value: any; }
->this : { readonly value: any; } | RecBox<{ readonly value: { readonly value: any; }; }>
+>{ value: { value: { get value() { return this; } }}} : { value: { value: { readonly value: { readonly value: ???; }; }; }; }
+>value : { value: { readonly value: { readonly value: ???; }; }; }
+>{ value: { get value() { return this; } }} : { value: { readonly value: { readonly value: ???; }; }; }
+>value : { readonly value: { readonly value: ???; }; }
+>{ get value() { return this; } } : { readonly value: { readonly value: ???; }; }
+>value : { readonly value: ???; }
+>this : { readonly value: ???; } | RecBox<{ readonly value: { readonly value: ???; }; }>
 
 // Inference from nested instantiations of same generic types
 
