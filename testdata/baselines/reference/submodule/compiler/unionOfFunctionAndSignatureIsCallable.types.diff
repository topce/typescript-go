--- old.unionOfFunctionAndSignatureIsCallable.types
+++ new.unionOfFunctionAndSignatureIsCallable.types
@@= skipped -1, +1 lines =@@
 
 === unionOfFunctionAndSignatureIsCallable.ts ===
 function f1(c1: Function, c2: () => object,  callable: typeof c1 | typeof c2) {
->f1 : (c1: Function, c2: () => object, callable: typeof c1 | typeof c2) => void
+>f1 : (c1: Function, c2: () => object, callable: Function | (() => object)) => void
 >c1 : Function
 >c2 : () => object
 >callable : Function | (() => object)
@@= skipped -18, +18 lines =@@
 >c2 : () => object
 
     const c = callable();
->c : error
->callable() : error
+>c : any
+>callable() : any
 >callable : Function | (() => object)
 }
 
 function f2(fetcherParams: object | (() => object)) {
->f2 : (fetcherParams: object | (() => object)) => void
->fetcherParams : object | (() => object)
+>f2 : (fetcherParams: (() => object) | object) => void
+>fetcherParams : (() => object) | object
 
     const data = typeof fetcherParams === 'function'
->data : error
->typeof fetcherParams === 'function'        ? fetcherParams()        : fetcherParams : error
+>data : any
+>typeof fetcherParams === 'function'        ? fetcherParams()        : fetcherParams : any
 >typeof fetcherParams === 'function' : boolean
->typeof fetcherParams : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->fetcherParams : object | (() => object)
+>typeof fetcherParams : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
+>fetcherParams : (() => object) | object
 >'function' : "function"
 
         ? fetcherParams()
->fetcherParams() : error
+>fetcherParams() : any
 >fetcherParams : Function | (() => object)
 
         : fetcherParams
