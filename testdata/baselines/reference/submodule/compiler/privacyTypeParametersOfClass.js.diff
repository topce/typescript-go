--- old.privacyTypeParametersOfClass.js
+++ new.privacyTypeParametersOfClass.js
@@= skipped -48, +48 lines =@@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.publicClassWithPublicTypeParametersWithoutExtends = exports.publicClassWithPublicTypeParameters = exports.publicClassWithPrivateTypeParameters = exports.publicClass = void 0;
-var privateClass = /** @class */ (function () {
-    function privateClass() {
-    }
-    return privateClass;
-}());
-var publicClass = /** @class */ (function () {
-    function publicClass() {
-    }
-    return publicClass;
-}());
+class privateClass {
+}
+class publicClass {
+}
 exports.publicClass = publicClass;
 // TypeParameter_0_of_exported_class_1_has_or_is_using_private_type_2
-var publicClassWithPrivateTypeParameters = /** @class */ (function () {
-    function publicClassWithPrivateTypeParameters() {
-    }
-    publicClassWithPrivateTypeParameters.prototype.myMethod = function (val) {
+class publicClassWithPrivateTypeParameters {
+    myMethod(val) {
         return val;
-    };
-    return publicClassWithPrivateTypeParameters;
-}());
-exports.publicClassWithPrivateTypeParameters = publicClassWithPrivateTypeParameters;
-var publicClassWithPublicTypeParameters = /** @class */ (function () {
-    function publicClassWithPublicTypeParameters() {
     }
-    publicClassWithPublicTypeParameters.prototype.myMethod = function (val) {
+}
+exports.publicClassWithPrivateTypeParameters = publicClassWithPrivateTypeParameters;
+class publicClassWithPublicTypeParameters {
+    myMethod(val) {
         return val;
-    };
-    return publicClassWithPublicTypeParameters;
-}());
-exports.publicClassWithPublicTypeParameters = publicClassWithPublicTypeParameters;
-var privateClassWithPrivateTypeParameters = /** @class */ (function () {
-    function privateClassWithPrivateTypeParameters() {
     }
-    privateClassWithPrivateTypeParameters.prototype.myMethod = function (val) {
+}
+exports.publicClassWithPublicTypeParameters = publicClassWithPublicTypeParameters;
+class privateClassWithPrivateTypeParameters {
+    myMethod(val) {
         return val;
-    };
-    return privateClassWithPrivateTypeParameters;
-}());
-var privateClassWithPublicTypeParameters = /** @class */ (function () {
-    function privateClassWithPublicTypeParameters() {
     }
-    privateClassWithPublicTypeParameters.prototype.myMethod = function (val) {
+}
+class privateClassWithPublicTypeParameters {
+    myMethod(val) {
         return val;
-    };
-    return privateClassWithPublicTypeParameters;
-}());
-var publicClassWithPublicTypeParametersWithoutExtends = /** @class */ (function () {
-    function publicClassWithPublicTypeParametersWithoutExtends() {
     }
-    publicClassWithPublicTypeParametersWithoutExtends.prototype.myMethod = function (val) {
+}
+class publicClassWithPublicTypeParametersWithoutExtends {
+    myMethod(val) {
         return val;
-    };
-    return publicClassWithPublicTypeParametersWithoutExtends;
-}());
-exports.publicClassWithPublicTypeParametersWithoutExtends = publicClassWithPublicTypeParametersWithoutExtends;
-var privateClassWithPublicTypeParametersWithoutExtends = /** @class */ (function () {
-    function privateClassWithPublicTypeParametersWithoutExtends() {
     }
-    privateClassWithPublicTypeParametersWithoutExtends.prototype.myMethod = function (val) {
+}
+exports.publicClassWithPublicTypeParametersWithoutExtends = publicClassWithPublicTypeParametersWithoutExtends;
+class privateClassWithPublicTypeParametersWithoutExtends {
+    myMethod(val) {
         return val;
-    };
-    return privateClassWithPublicTypeParametersWithoutExtends;
-}());
+    }
+}
