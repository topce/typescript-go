--- old.declarationEmitInlinedDistributiveConditional.types
+++ new.declarationEmitInlinedDistributiveConditional.types
@@= skipped -1, +1 lines =@@
 
 === test.ts ===
 import {dropPrivateProps1, dropPrivateProps2} from './api';
->dropPrivateProps1 : <Obj>(obj: Obj) => { [K in import("internal").PublicKeys1<keyof Obj>]: Obj[K]; }
->dropPrivateProps2 : <Obj>(obj: Obj) => { [K in keyof Obj extends infer T ? T extends keyof Obj ? T extends `_${string}` ? never : T : never : never]: Obj[K]; }
+>dropPrivateProps1 : <Obj>(obj: Obj) => { [K in PublicKeys1<keyof Obj>]: Obj[K] }
+>dropPrivateProps2 : <Obj>(obj: Obj) => { [K in PublicKeys2<keyof Obj>]: Obj[K] }
 
 const a = dropPrivateProps1({foo: 42, _bar: 'secret'}); // type is {foo: number}
 >a : { foo: number; }
 >dropPrivateProps1({foo: 42, _bar: 'secret'}) : { foo: number; }
->dropPrivateProps1 : <Obj>(obj: Obj) => { [K in import("internal").PublicKeys1<keyof Obj>]: Obj[K]; }
+>dropPrivateProps1 : <Obj>(obj: Obj) => { [K in PublicKeys1<keyof Obj>]: Obj[K] }
 >{foo: 42, _bar: 'secret'} : { foo: number; _bar: string; }
 >foo : number
 >42 : 42
@@= skipped -17, +17 lines =@@
 const b = dropPrivateProps2({foo: 42, _bar: 'secret'}); // type is {foo: number, _bar: string}
 >b : { foo: number; }
 >dropPrivateProps2({foo: 42, _bar: 'secret'}) : { foo: number; }
->dropPrivateProps2 : <Obj>(obj: Obj) => { [K in keyof Obj extends infer T ? T extends keyof Obj ? T extends `_${string}` ? never : T : never : never]: Obj[K]; }
+>dropPrivateProps2 : <Obj>(obj: Obj) => { [K in PublicKeys2<keyof Obj>]: Obj[K] }
 >{foo: 42, _bar: 'secret'} : { foo: number; _bar: string; }
 >foo : number
 >42 : 42
@@= skipped -11, +11 lines =@@
 
 === api.ts ===
 import {excludePrivateKeys1, excludePrivateKeys2} from './internal';
->excludePrivateKeys1 : <Obj>(obj: Obj) => { [K in import("internal").PublicKeys1<keyof Obj>]: Obj[K]; }
->excludePrivateKeys2 : <Obj>(obj: Obj) => { [K in keyof Obj extends infer T ? T extends keyof Obj ? T extends `_${string}` ? never : T : never : never]: Obj[K]; }
+>excludePrivateKeys1 : <Obj>(obj: Obj) => { [K in PublicKeys1<keyof Obj>]: Obj[K] }
+>excludePrivateKeys2 : <Obj>(obj: Obj) => { [K in PublicKeys2<keyof Obj>]: Obj[K] }
 
 export const dropPrivateProps1 = <Obj>(obj: Obj) => excludePrivateKeys1(obj);
->dropPrivateProps1 : <Obj>(obj: Obj) => { [K in import("internal").PublicKeys1<keyof Obj>]: Obj[K]; }
-><Obj>(obj: Obj) => excludePrivateKeys1(obj) : <Obj>(obj: Obj) => { [K in import("internal").PublicKeys1<keyof Obj>]: Obj[K]; }
+>dropPrivateProps1 : <Obj>(obj: Obj) => { [K in PublicKeys1<keyof Obj>]: Obj[K] }
+><Obj>(obj: Obj) => excludePrivateKeys1(obj) : <Obj>(obj: Obj) => { [K in PublicKeys1<keyof Obj>]: Obj[K] }
 >obj : Obj
->excludePrivateKeys1(obj) : { [K in import("internal").PublicKeys1<keyof Obj>]: Obj[K]; }
->excludePrivateKeys1 : <Obj_1>(obj: Obj_1) => { [K in import("internal").PublicKeys1<keyof Obj_1>]: Obj_1[K]; }
+>excludePrivateKeys1(obj) : { [K in PublicKeys1<keyof Obj>]: Obj[K] }
+>excludePrivateKeys1 : <Obj>(obj: Obj) => { [K in PublicKeys1<keyof Obj>]: Obj[K] }
 >obj : Obj
 
 export const dropPrivateProps2 = <Obj>(obj: Obj) => excludePrivateKeys2(obj);
->dropPrivateProps2 : <Obj>(obj: Obj) => { [K in keyof Obj extends infer T ? T extends keyof Obj ? T extends `_${string}` ? never : T : never : never]: Obj[K]; }
-><Obj>(obj: Obj) => excludePrivateKeys2(obj) : <Obj>(obj: Obj) => { [K in keyof Obj extends infer T ? T extends keyof Obj ? T extends `_${string}` ? never : T : never : never]: Obj[K]; }
+>dropPrivateProps2 : <Obj>(obj: Obj) => { [K in PublicKeys2<keyof Obj>]: Obj[K] }
+><Obj>(obj: Obj) => excludePrivateKeys2(obj) : <Obj>(obj: Obj) => { [K in PublicKeys2<keyof Obj>]: Obj[K] }
 >obj : Obj
->excludePrivateKeys2(obj) : { [K in keyof Obj extends infer T ? T extends keyof Obj ? T extends `_${string}` ? never : T : never : never]: Obj[K]; }
->excludePrivateKeys2 : <Obj_1>(obj: Obj_1) => { [K in keyof Obj_1 extends infer T ? T extends keyof Obj_1 ? T extends `_${string}` ? never : T : never : never]: Obj_1[K]; }
+>excludePrivateKeys2(obj) : { [K in PublicKeys2<keyof Obj>]: Obj[K] }
+>excludePrivateKeys2 : <Obj>(obj: Obj) => { [K in PublicKeys2<keyof Obj>]: Obj[K] }
 >obj : Obj
 
 === internal.ts ===
 export declare function excludePrivateKeys1<Obj>(obj: Obj): {[K in PublicKeys1<keyof Obj>]: Obj[K]};
->excludePrivateKeys1 : <Obj>(obj: Obj) => { [K in PublicKeys1<keyof Obj>]: Obj[K]; }
+>excludePrivateKeys1 : <Obj>(obj: Obj) => { [K in PublicKeys1<keyof Obj>]: Obj[K] }
 >obj : Obj
 
 export declare function excludePrivateKeys2<Obj>(obj: Obj): {[K in PublicKeys2<keyof Obj>]: Obj[K]};
->excludePrivateKeys2 : <Obj>(obj: Obj) => { [K in PublicKeys2<keyof Obj>]: Obj[K]; }
+>excludePrivateKeys2 : <Obj>(obj: Obj) => { [K in PublicKeys2<keyof Obj>]: Obj[K] }
 >obj : Obj
 
 export type PublicKeys1<T> = T extends `_${string}` ? never : T;
