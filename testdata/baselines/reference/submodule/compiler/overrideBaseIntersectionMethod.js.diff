--- old.overrideBaseIntersectionMethod.js
+++ new.overrideBaseIntersectionMethod.js
@@= skipped -32, +32 lines =@@
 
 
 //// [overrideBaseIntersectionMethod.js]
-"use strict";
-// Repro from #14615
-var __extends = (this && this.__extends) || (function () {
-    var extendStatics = function (d, b) {
-        extendStatics = Object.setPrototypeOf ||
-            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
-            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
-        return extendStatics(d, b);
-    };
-    return function (d, b) {
-        if (typeof b !== "function" && b !== null)
-            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
-        extendStatics(d, b);
-        function __() { this.constructor = d; }
-        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-    };
-})();
-var WithLocation = function (Base) { return /** @class */ (function (_super) {
-    __extends(class_1, _super);
-    function class_1() {
-        return _super !== null && _super.apply(this, arguments) || this;
-    }
-    class_1.prototype.getLocation = function () {
-        var _a = _super.prototype.getLocation.call(this), x = _a[0], y = _a[1];
+const WithLocation = (Base) => class extends Base {
+    getLocation() {
+        const [x, y] = super.getLocation();
         return [this.x | x, this.y | y];
-    };
-    return class_1;
-}(Base)); };
-var Point = /** @class */ (function () {
-    function Point(x, y) {
+    }
+};
+class Point {
+    x;
+    y;
+    constructor(x, y) {
         this.x = x;
         this.y = y;
     }
-    Point.prototype.getLocation = function () {
+    getLocation() {
         return [0, 0];
-    };
-    return Point;
-}());
-var Foo = /** @class */ (function (_super) {
-    __extends(Foo, _super);
-    function Foo() {
-        return _super !== null && _super.apply(this, arguments) || this;
     }
-    Foo.prototype.calculate = function () {
+}
+class Foo extends WithLocation(Point) {
+    calculate() {
         return this.x + this.y;
-    };
-    Foo.prototype.getLocation = function () {
-        return _super.prototype.getLocation.call(this);
-    };
-    Foo.prototype.whereAmI = function () {
+    }
+    getLocation() {
+        return super.getLocation();
+    }
+    whereAmI() {
         return this.getLocation();
-    };
-    return Foo;
-}(WithLocation(Point)));
+    }
+}
