--- old.aliasUsageInOrExpression.types
+++ new.aliasUsageInOrExpression.types
@@= skipped -1, +1 lines =@@
 
 === aliasUsageInOrExpression_main.ts ===
 import Backbone = require("./aliasUsageInOrExpression_backbone");
->Backbone : typeof Backbone
+>Backbone : typeof import("aliasUsageInOrExpression_backbone")
 
 import moduleA = require("./aliasUsageInOrExpression_moduleA");
->moduleA : typeof moduleA
+>moduleA : typeof import("aliasUsageInOrExpression_moduleA")
 
 interface IHasVisualizationModel {
     VisualizationModel: typeof Backbone.Model;
->VisualizationModel : typeof Backbone.Model
->Backbone.Model : typeof Backbone.Model
->Backbone : typeof Backbone
->Model : typeof Backbone.Model
+>VisualizationModel : typeof Model
+>Backbone.Model : typeof Model
+>Backbone : typeof import("aliasUsageInOrExpression_backbone")
+>Model : typeof Model
 }
 var i: IHasVisualizationModel;
 >i : IHasVisualizationModel
@@= skipped -19, +19 lines =@@
 >d1 : IHasVisualizationModel
 >i || moduleA : IHasVisualizationModel
 >i : IHasVisualizationModel
->moduleA : typeof moduleA
+>moduleA : typeof import("aliasUsageInOrExpression_moduleA")
 
 var d2: IHasVisualizationModel = i || moduleA;
 >d2 : IHasVisualizationModel
 >i || moduleA : IHasVisualizationModel
 >i : IHasVisualizationModel
->moduleA : typeof moduleA
+>moduleA : typeof import("aliasUsageInOrExpression_moduleA")
 
 var d2: IHasVisualizationModel = moduleA || i;
 >d2 : IHasVisualizationModel
 >moduleA || i : IHasVisualizationModel
->moduleA : typeof moduleA
+>moduleA : typeof import("aliasUsageInOrExpression_moduleA")
 >i : IHasVisualizationModel
 
 var e: { x: IHasVisualizationModel } = <{ x: IHasVisualizationModel }>null || { x: moduleA };
@@= skipped -20, +20 lines =@@
 ><{ x: IHasVisualizationModel }>null || { x: moduleA } : { x: IHasVisualizationModel; }
 ><{ x: IHasVisualizationModel }>null : { x: IHasVisualizationModel; }
 >x : IHasVisualizationModel
->{ x: moduleA } : { x: typeof moduleA; }
->x : typeof moduleA
->moduleA : typeof moduleA
+>{ x: moduleA } : { x: typeof import("aliasUsageInOrExpression_moduleA"); }
+>x : typeof import("aliasUsageInOrExpression_moduleA")
+>moduleA : typeof import("aliasUsageInOrExpression_moduleA")
 
 var f: { x: IHasVisualizationModel } = <{ x: IHasVisualizationModel }>null ? { x: moduleA } : null;
 >f : { x: IHasVisualizationModel; }
 >x : IHasVisualizationModel
-><{ x: IHasVisualizationModel }>null ? { x: moduleA } : null : { x: typeof moduleA; }
+><{ x: IHasVisualizationModel }>null ? { x: moduleA } : null : { x: typeof import("aliasUsageInOrExpression_moduleA"); }
 ><{ x: IHasVisualizationModel }>null : { x: IHasVisualizationModel; }
 >x : IHasVisualizationModel
->{ x: moduleA } : { x: typeof moduleA; }
->x : typeof moduleA
->moduleA : typeof moduleA
+>{ x: moduleA } : { x: typeof import("aliasUsageInOrExpression_moduleA"); }
+>x : typeof import("aliasUsageInOrExpression_moduleA")
+>moduleA : typeof import("aliasUsageInOrExpression_moduleA")
 
 === aliasUsageInOrExpression_backbone.ts ===
 export class Model {
@@= skipped -24, +24 lines =@@
 
 === aliasUsageInOrExpression_moduleA.ts ===
 import Backbone = require("./aliasUsageInOrExpression_backbone");
->Backbone : typeof Backbone
+>Backbone : typeof import("aliasUsageInOrExpression_backbone")
 
 export class VisualizationModel extends Backbone.Model {
 >VisualizationModel : VisualizationModel
->Backbone.Model : Backbone.Model
->Backbone : typeof Backbone
->Model : typeof Backbone.Model
+>Backbone.Model : Model
+>Backbone : typeof import("aliasUsageInOrExpression_backbone")
+>Model : typeof Model
 
     // interesting stuff here
 }
