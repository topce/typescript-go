--- old.parseBigInt.types
+++ new.parseBigInt.types
@@= skipped -175, +175 lines =@@
 // Parsing errors
 // In separate blocks because they each declare an "n" variable
 { const legacyOct = 0123n; }
->legacyOct : 83
->0123 : 83
+>legacyOct : 123
+>0123 : 123
 >n : any
 
 { const scientific = 1e2n; }
@@= skipped -42, +42 lines =@@
 
 // Using literals as types
 const oneTwoOrThree = (x: 1n | 2n | 3n): bigint => x ** 2n;
->oneTwoOrThree : (x: 1n | 2n | 3n) => bigint
->(x: 1n | 2n | 3n): bigint => x ** 2n : (x: 1n | 2n | 3n) => bigint
+>oneTwoOrThree : (x: 1n | 3n | 2n) => bigint
+>(x: 1n | 2n | 3n): bigint => x ** 2n : (x: 1n | 3n | 2n) => bigint
 >x : 1n | 3n | 2n
 >x ** 2n : bigint
 >x : 1n | 3n | 2n
@@= skipped -9, +9 lines =@@
 
 oneTwoOrThree(0n); oneTwoOrThree(1n); oneTwoOrThree(2n); oneTwoOrThree(3n);
 >oneTwoOrThree(0n) : bigint
->oneTwoOrThree : (x: 1n | 2n | 3n) => bigint
+>oneTwoOrThree : (x: 1n | 3n | 2n) => bigint
 >0n : 0n
 >oneTwoOrThree(1n) : bigint
->oneTwoOrThree : (x: 1n | 2n | 3n) => bigint
+>oneTwoOrThree : (x: 1n | 3n | 2n) => bigint
 >1n : 1n
 >oneTwoOrThree(2n) : bigint
->oneTwoOrThree : (x: 1n | 2n | 3n) => bigint
+>oneTwoOrThree : (x: 1n | 3n | 2n) => bigint
 >2n : 2n
 >oneTwoOrThree(3n) : bigint
->oneTwoOrThree : (x: 1n | 2n | 3n) => bigint
+>oneTwoOrThree : (x: 1n | 3n | 2n) => bigint
 >3n : 3n
 
 oneTwoOrThree(0);  oneTwoOrThree(1);  oneTwoOrThree(2);  oneTwoOrThree(3);
 >oneTwoOrThree(0) : bigint
->oneTwoOrThree : (x: 1n | 2n | 3n) => bigint
+>oneTwoOrThree : (x: 1n | 3n | 2n) => bigint
 >0 : 0
 >oneTwoOrThree(1) : bigint
->oneTwoOrThree : (x: 1n | 2n | 3n) => bigint
+>oneTwoOrThree : (x: 1n | 3n | 2n) => bigint
 >1 : 1
 >oneTwoOrThree(2) : bigint
->oneTwoOrThree : (x: 1n | 2n | 3n) => bigint
+>oneTwoOrThree : (x: 1n | 3n | 2n) => bigint
 >2 : 2
 >oneTwoOrThree(3) : bigint
->oneTwoOrThree : (x: 1n | 2n | 3n) => bigint
+>oneTwoOrThree : (x: 1n | 3n | 2n) => bigint
 >3 : 3
 
