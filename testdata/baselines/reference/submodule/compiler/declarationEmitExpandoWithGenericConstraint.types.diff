--- old.declarationEmitExpandoWithGenericConstraint.types
+++ new.declarationEmitExpandoWithGenericConstraint.types
@@= skipped -17, +17 lines =@@
 }
 
 export const Point = (x: number, y: number): Point => ({ x, y });
->Point : { (x: number, y: number): Point; zero(): Point; }
->(x: number, y: number): Point => ({ x, y }) : { (x: number, y: number): Point; zero(): Point; }
+>Point : { (x: number, y: number): Point; zero: () => Point; }
+>(x: number, y: number): Point => ({ x, y }) : { (x: number, y: number): Point; zero: () => Point; }
 >x : number
 >y : number
 >({ x, y }) : { x: number; y: number; }
@@= skipped -22, +22 lines =@@
 Point.zero = (): Point => Point(0, 0);
 >Point.zero = (): Point => Point(0, 0) : () => Point
 >Point.zero : () => Point
->Point : { (x: number, y: number): Point; zero(): Point; }
+>Point : { (x: number, y: number): Point; zero: () => Point; }
 >zero : () => Point
 >(): Point => Point(0, 0) : () => Point
 >Point(0, 0) : Point
->Point : { (x: number, y: number): Point; zero(): Point; }
+>Point : { (x: number, y: number): Point; zero: () => Point; }
 >0 : 0
 >0 : 0
 
