--- old.genericTypeParameterEquivalence2.types
+++ new.genericTypeParameterEquivalence2.types
@@= skipped -67, +67 lines =@@
 
     forEach(ar, (el) => {
 >forEach(ar, (el) => {        if (f(el)) {            ret.push(el);        }    } ) : void
->forEach : <A_1>(list: A_1[], f: (a: A_1, n?: number) => void) => void
+>forEach : <A>(list: A[], f: (a: A, n?: number) => void) => void
 >ar : A[]
 >(el) => {        if (f(el)) {            ret.push(el);        }    } : (el: A) => void
 >el : A
@@= skipped -83, +83 lines =@@
 
     return compose(length2, cfilter(pred));
 >compose(length2, cfilter(pred)) : (a: A[]) => number
->compose : <A_1, B, C>(f: (b: B) => C, g: (a: A_1) => B) => (a: A_1) => C
->length2 : <A_1>(ar: A_1[]) => number
+>compose : <A, B, C>(f: (b: B) => C, g: (a: A) => B) => (a: A) => C
+>length2 : <A>(ar: A[]) => number
 >cfilter(pred) : (bx: A[]) => A[]
->cfilter : <A_1>(ax: (a: A_1) => boolean) => (bx: A_1[]) => A_1[]
+>cfilter : <A>(ax: (a: A) => boolean) => (bx: A[]) => A[]
 >pred : (a: A) => boolean
 }
 
@@= skipped -16, +16 lines =@@
     var where = cfilter(pred);
 >where : (bx: A[]) => A[]
 >cfilter(pred) : (bx: A[]) => A[]
->cfilter : <A_1>(ax: (a: A_1) => boolean) => (bx: A_1[]) => A_1[]
+>cfilter : <A>(ax: (a: A) => boolean) => (bx: A[]) => A[]
 >pred : (a: A) => boolean
 
     return compose(length2, where);
 >compose(length2, where) : (a: A[]) => number
->compose : <A_1, B, C>(f: (b: B) => C, g: (a: A_1) => B) => (a: A_1) => C
->length2 : <A_1>(ar: A_1[]) => number
+>compose : <A, B, C>(f: (b: B) => C, g: (a: A) => B) => (a: A) => C
+>length2 : <A>(ar: A[]) => number
 >where : (bx: A[]) => A[]
 }
