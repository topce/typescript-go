--- old.jsdocInTypeScript.js
+++ new.jsdocInTypeScript.js
@@= skipped -59, +59 lines =@@
 
 
 //// [jsdocInTypeScript.js]
-var T = /** @class */ (function () {
-    function T() {
-    }
-    return T;
-}());
+class T {
+    prop;
+}
 x.prop;
 // @param type has no effect.
 /**
@@= skipped -17, +15 lines =@@
 f(true).length;
 // @type has no effect either.
 /** @type {{ x?: number }} */
-var z = {};
+const z = {};
 z.x = 1; // Error
 /** @template T */
 function tem(t) { return {}; }
-var i; // Should succeed thanks to type parameter default
-/** @typedef {string} N.Str */
-var M = N; // Error: @typedef does not create namespaces in TypeScript code.
+let i; // Should succeed thanks to type parameter default
 // Not legal JSDoc, but that shouldn't matter in TypeScript.
 /**
  * @type {{foo: (function(string, string): string)}}
  */
-var obj = { foo: function (a, b) { return a + b; } };
+const obj = { foo: (a, b) => a + b };
 /** @enum {string} */
 var E = {};
 E[""];
 // make sure import types in JSDoc are not resolved
 /** @type {import("should-not-be-resolved").Type} */
-var v = Promise.resolve("".concat(String())).then(function (s) { return require(s); });
+var v = Promise.resolve(`${String()}`).then(s => require(s));
