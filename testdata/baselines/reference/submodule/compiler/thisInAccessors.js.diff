--- old.thisInAccessors.js
+++ new.thisInAccessors.js
@@= skipped -33, +33 lines =@@
 
 //// [thisInAccessors.js]
 // this capture only in getter
-var GetterOnly = /** @class */ (function () {
-    function GetterOnly() {
+class GetterOnly {
+    get Value() {
+        var fn = () => this;
+        return '';
     }
-    Object.defineProperty(GetterOnly.prototype, "Value", {
-        get: function () {
-            var _this = this;
-            var fn = function () { return _this; };
-            return '';
-        },
-        set: function (val) {
-        },
-        enumerable: false,
-        configurable: true
-    });
-    return GetterOnly;
-}());
+    set Value(val) {
+    }
+}
 // this capture only in setter
-var SetterOnly = /** @class */ (function () {
-    function SetterOnly() {
+class SetterOnly {
+    get Value() {
+        return '';
     }
-    Object.defineProperty(SetterOnly.prototype, "Value", {
-        get: function () {
-            return '';
-        },
-        set: function (val) {
-            var _this = this;
-            var fn = function () { return _this; };
-        },
-        enumerable: false,
-        configurable: true
-    });
-    return SetterOnly;
-}());
+    set Value(val) {
+        var fn = () => this;
+    }
+}
 // this capture only in both setter and getter
-var GetterAndSetter = /** @class */ (function () {
-    function GetterAndSetter() {
+class GetterAndSetter {
+    get Value() {
+        var fn = () => this;
+        return '';
     }
-    Object.defineProperty(GetterAndSetter.prototype, "Value", {
-        get: function () {
-            var _this = this;
-            var fn = function () { return _this; };
-            return '';
-        },
-        set: function (val) {
-            var _this = this;
-            var fn = function () { return _this; };
-        },
-        enumerable: false,
-        configurable: true
-    });
-    return GetterAndSetter;
-}());
+    set Value(val) {
+        var fn = () => this;
+    }
+}
