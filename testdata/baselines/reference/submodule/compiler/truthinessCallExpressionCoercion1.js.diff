--- old.truthinessCallExpressionCoercion1.js
+++ new.truthinessCallExpressionCoercion1.js
@@= skipped -90, +90 lines =@@
 
 //// [truthinessCallExpressionCoercion1.js]
 function onlyErrorsWhenTestingNonNullableFunctionType(required, optional) {
-    // error
     required ? console.log('required') : undefined;
-    // ok
     optional ? console.log('optional') : undefined;
-    // ok
     !!required ? console.log('not required') : undefined;
-    // ok
     required() ? console.log('required call') : undefined;
 }
 function onlyErrorsWhenUnusedInBody() {
     function test() { return Math.random() > 0.5; }
-    // error
     test ? console.log('test') : undefined;
-    // ok
     test ? console.log(test) : undefined;
-    // ok
     test ? test() : undefined;
-    // ok
     test
-        ? [function () { return null; }].forEach(function () { test(); })
+        ? [() => null].forEach(() => { test(); })
         : undefined;
-    // error
     test
-        ? [function () { return null; }].forEach(function (test) { test(); })
+        ? [() => null].forEach(test => { test(); })
         : undefined;
 }
 function checksPropertyAccess() {
-    var x = {
+    const x = {
         foo: {
-            bar: function () { return true; }
+            bar() { return true; }
         }
     };
-    // error
     x.foo.bar ? console.log('x.foo.bar') : undefined;
-    // ok
     x.foo.bar ? x.foo.bar : undefined;
     var chrome = {
         platformKeys: {
-            subtleCrypto: function () {
+            subtleCrypto() {
                 return {
-                    sign: function () { },
-                    exportKey: function () { return true; }
+                    sign() { },
+                    exportKey() { return true; }
                 };
             }
         }
     };
-    // ok
     if (chrome.platformKeys.subtleCrypto().exportKey) {
         chrome.platformKeys.subtleCrypto().exportKey;
     }
 }
-var Foo = /** @class */ (function () {
-    function Foo() {
-    }
-    Foo.prototype.isUser = function () {
+class Foo {
+    maybeIsUser;
+    isUser() {
         return true;
-    };
-    Foo.prototype.test = function () {
-        // error
+    }
+    test() {
         this.isUser ? console.log('this.isUser') : undefined;
-        // ok
         this.maybeIsUser ? console.log('this.maybeIsUser') : undefined;
-        // ok
         if (this.isUser) {
             this.isUser();
         }
-    };
-    return Foo;
-}());
+    }
+}
