--- old.truthinessCallExpressionCoercion1.js
+++ new.truthinessCallExpressionCoercion1.js
@@= skipped -109, +109 lines =@@
     test ? test() : undefined;
     // ok
     test
-        ? [function () { return null; }].forEach(function () { test(); })
+        ? [() => null].forEach(() => { test(); })
         : undefined;
     // error
     test
-        ? [function () { return null; }].forEach(function (test) { test(); })
+        ? [() => null].forEach(test => { test(); })
         : undefined;
 }
 function checksPropertyAccess() {
-    var x = {
+    const x = {
         foo: {
-            bar: function () { return true; }
+            bar() { return true; }
         }
     };
     // error
@@= skipped -19, +19 lines =@@
     x.foo.bar ? x.foo.bar : undefined;
     var chrome = {
         platformKeys: {
-            subtleCrypto: function () {
+            subtleCrypto() {
                 return {
-                    sign: function () { },
-                    exportKey: function () { return true; }
+                    sign() { },
+                    exportKey() { return true; }
                 };
             }
         }
@@= skipped -13, +13 lines =@@
         chrome.platformKeys.subtleCrypto().exportKey;
     }
 }
-var Foo = /** @class */ (function () {
-    function Foo() {
-    }
-    Foo.prototype.isUser = function () {
+class Foo {
+    maybeIsUser;
+    isUser() {
         return true;
-    };
-    Foo.prototype.test = function () {
+    }
+    test() {
         // error
         this.isUser ? console.log('this.isUser') : undefined;
         // ok
@@= skipped -15, +14 lines =@@
         if (this.isUser) {
             this.isUser();
         }
-    };
-    return Foo;
-}());
+    }
+}
