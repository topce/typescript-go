--- old.classReferencedInContextualParameterWithinItsOwnBaseExpression.types
+++ new.classReferencedInContextualParameterWithinItsOwnBaseExpression.types
@@= skipped -15, +15 lines =@@
 }
 
 declare const Class: <Self>(
->Class : <Self>(identifier: string) => <Fields>(fields: Fields, annotations?: Schema<Self>) => Class<OutputFrom<Fields>>
+>Class : <Self>(identifier: string) => <Fields>(fields: Fields, annotations?: Schema<Self> | undefined) => Class<OutputFrom<Fields>>
 
   identifier: string,
 >identifier : string
@@= skipped -37, +37 lines =@@
 >A : A
 >Class<A>("A")(  { a: string },  {    pretty: (a) => JSON.stringify(a),  },) : OutputFrom<{ a: () => Type<string>; }>
 >Class<A>("A") : <Fields>(fields: Fields, annotations?: Schema<A> | undefined) => Class<OutputFrom<Fields>>
->Class : <Self>(identifier: string) => <Fields>(fields: Fields, annotations?: Schema<Self>) => Class<OutputFrom<Fields>>
+>Class : <Self>(identifier: string) => <Fields>(fields: Fields, annotations?: Schema<Self> | undefined) => Class<OutputFrom<Fields>>
 >"A" : "A"
 
   { a: string },
@@= skipped -15, +15 lines =@@
 >(a) => JSON.stringify(a) : (a: A) => string
 >a : A
 >JSON.stringify(a) : string
->JSON.stringify : { (value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string; (value: any, replacer?: (number | string)[] | null, space?: string | number): string; }
+>JSON.stringify : { (value: any, replacer?: (key: string, value: any) => any | undefined, space?: string | number | undefined): string; (value: any, replacer?: (string | number)[] | null | undefined, space?: string | number | undefined): string; }
 >JSON : JSON
->stringify : { (value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string; (value: any, replacer?: (number | string)[] | null, space?: string | number): string; }
+>stringify : { (value: any, replacer?: (key: string, value: any) => any | undefined, space?: string | number | undefined): string; (value: any, replacer?: (string | number)[] | null | undefined, space?: string | number | undefined): string; }
 >a : A
 
   },
