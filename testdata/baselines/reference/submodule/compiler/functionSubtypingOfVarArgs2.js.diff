--- old.functionSubtypingOfVarArgs2.js
+++ new.functionSubtypingOfVarArgs2.js
@@= skipped -16, +16 lines =@@
 
 
 //// [functionSubtypingOfVarArgs2.js]
-var __extends = (this && this.__extends) || (function () {
-    var extendStatics = function (d, b) {
-        extendStatics = Object.setPrototypeOf ||
-            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
-            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
-        return extendStatics(d, b);
-    };
-    return function (d, b) {
-        if (typeof b !== "function" && b !== null)
-            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
-        extendStatics(d, b);
-        function __() { this.constructor = d; }
-        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-    };
-})();
-var EventBase = /** @class */ (function () {
-    function EventBase() {
-        this._listeners = [];
-    }
-    EventBase.prototype.add = function (listener) {
+class EventBase {
+    _listeners = [];
+    add(listener) {
         this._listeners.push(listener);
-    };
-    return EventBase;
-}());
-var StringEvent = /** @class */ (function (_super) {
-    __extends(StringEvent, _super);
-    function StringEvent() {
-        return _super !== null && _super.apply(this, arguments) || this;
     }
-    StringEvent.prototype.add = function (listener) {
-        _super.prototype.add.call(this, listener);
-    };
-    return StringEvent;
-}(EventBase));
+}
+class StringEvent extends EventBase {
+    add(listener) {
+        super.add(listener);
+    }
+}
