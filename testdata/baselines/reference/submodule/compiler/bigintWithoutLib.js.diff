--- old.bigintWithoutLib.js
+++ new.bigintWithoutLib.js
@@= skipped -59, +59 lines =@@
 
 
 //// [bigintWithoutLib.js]
-// Every line should error because these builtins are not declared
-// Test BigInt functions
-var bigintVal = BigInt(123);
+let bigintVal = BigInt(123);
 bigintVal = BigInt("456");
 new BigInt(123);
 bigintVal = BigInt.asIntN(8, 0xffffn);
 bigintVal = BigInt.asUintN(8, 0xffffn);
-bigintVal = bigintVal.valueOf(); // should error - bigintVal inferred as {}
-var stringVal = bigintVal.toString(); // should not error - bigintVal inferred as {}
-stringVal = bigintVal.toString(2); // should error - bigintVal inferred as {}
-stringVal = bigintVal.toLocaleString(); // should not error - bigintVal inferred as {}
-stringVal = bigintVal.toLocaleString('de-DE'); // should not error - bigintVal inferred as {}
-stringVal = bigintVal.toLocaleString('de-DE', { style: 'currency' }); // should not error - bigintVal inferred as {}
-stringVal = bigintVal.toLocaleString('de-DE', { style: 'currency', currency: 'EUR' }); // should not error - bigintVal inferred as {}
-// Test BigInt64Array
-var bigIntArray = new BigInt64Array();
+bigintVal = bigintVal.valueOf();
+let stringVal = bigintVal.toString();
+stringVal = bigintVal.toString(2);
+stringVal = bigintVal.toLocaleString();
+stringVal = bigintVal.toLocaleString('de-DE');
+stringVal = bigintVal.toLocaleString('de-DE', { style: 'currency' });
+stringVal = bigintVal.toLocaleString('de-DE', { style: 'currency', currency: 'EUR' });
+let bigIntArray = new BigInt64Array();
 bigIntArray = new BigInt64Array(10);
 bigIntArray = new BigInt64Array([1n, 2n, 3n]);
 bigIntArray = new BigInt64Array([1, 2, 3]);
 bigIntArray = new BigInt64Array(new ArrayBuffer(80));
 bigIntArray = new BigInt64Array(new ArrayBuffer(80), 8);
 bigIntArray = new BigInt64Array(new ArrayBuffer(80), 8, 3);
-var len = bigIntArray.length;
+let len = bigIntArray.length;
 bigIntArray.length = 10;
-var arrayBufferLike = bigIntArray;
-// Test BigUint64Array
-var bigUintArray = new BigUint64Array();
+let arrayBufferLike = bigIntArray;
+let bigUintArray = new BigUint64Array();
 bigUintArray = new BigUint64Array(10);
 bigUintArray = new BigUint64Array([1n, 2n, 3n]);
 bigUintArray = new BigUint64Array([1, 2, 3]);
@@= skipped -36, +32 lines =@@
 len = bigIntArray.length;
 bigIntArray.length = 10;
 arrayBufferLike = bigIntArray;
-// Test added DataView methods
-var dataView = new DataView(new ArrayBuffer(80));
+const dataView = new DataView(new ArrayBuffer(80));
 dataView.setBigInt64(1, -1n);
 dataView.setBigInt64(1, -1n, true);
 dataView.setBigInt64(1, -1);
@@= skipped -12, +11 lines =@@
 bigintVal = dataView.getBigInt64(1, true);
 bigintVal = dataView.getBigUint64(2);
 bigintVal = dataView.getBigUint64(2, true);
-// Test Intl methods with new parameter type
 new Intl.NumberFormat("fr").format(3000n);
 new Intl.NumberFormat("fr").format(bigintVal);
