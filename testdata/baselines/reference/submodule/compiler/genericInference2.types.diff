--- old.genericInference2.types
+++ new.genericInference2.types
@@= skipped -22, +22 lines =@@
 >value : T
     } 
     var o = { 
->o : { name: ko.Observable<string>; age: ko.Observable<number>; }
->{        name: ko.observable("Bob"),        age: ko.observable(37)     } : { name: ko.Observable<string>; age: ko.Observable<number>; }
+>o : { name: Observable<string>; age: Observable<number>; }
+>{        name: ko.observable("Bob"),        age: ko.observable(37)     } : { name: Observable<string>; age: Observable<number>; }
 
        name: ko.observable("Bob"), 
->name : ko.Observable<string>
->ko.observable("Bob") : ko.Observable<string>
->ko.observable : <T>(value: T) => ko.Observable<T>
+>name : Observable<string>
+>ko.observable("Bob") : Observable<string>
+>ko.observable : <T>(value: T) => Observable<T>
 >ko : typeof ko
->observable : <T>(value: T) => ko.Observable<T>
+>observable : <T>(value: T) => Observable<T>
 >"Bob" : "Bob"
 
        age: ko.observable(37) 
->age : ko.Observable<number>
->ko.observable(37) : ko.Observable<number>
->ko.observable : <T>(value: T) => ko.Observable<T>
+>age : Observable<number>
+>ko.observable(37) : Observable<number>
+>ko.observable : <T>(value: T) => Observable<T>
 >ko : typeof ko
->observable : <T>(value: T) => ko.Observable<T>
+>observable : <T>(value: T) => Observable<T>
 >37 : 37
 
     }; 
@@= skipped -24, +24 lines =@@
 >x_v : number
 >o.name().length : number
 >o.name() : string
->o.name : ko.Observable<string>
->o : { name: ko.Observable<string>; age: ko.Observable<number>; }
->name : ko.Observable<string>
+>o.name : Observable<string>
+>o : { name: Observable<string>; age: Observable<number>; }
+>name : Observable<string>
 >length : number
 
     var age_v = o.age();  // should be 'number'
 >age_v : number
 >o.age() : number
->o.age : ko.Observable<number>
->o : { name: ko.Observable<string>; age: ko.Observable<number>; }
->age : ko.Observable<number>
+>o.age : Observable<number>
+>o : { name: Observable<string>; age: Observable<number>; }
+>age : Observable<number>
 
     var name_v = o.name("Robert");  // should be 'any'
 >name_v : any
 >o.name("Robert") : any
->o.name : ko.Observable<string>
->o : { name: ko.Observable<string>; age: ko.Observable<number>; }
->name : ko.Observable<string>
+>o.name : Observable<string>
+>o : { name: Observable<string>; age: Observable<number>; }
+>name : Observable<string>
 >"Robert" : "Robert"
 
     var zz_v = o.name.N;  // should be 'number'
 >zz_v : number
 >o.name.N : number
->o.name : ko.Observable<string>
->o : { name: ko.Observable<string>; age: ko.Observable<number>; }
->name : ko.Observable<string>
+>o.name : Observable<string>
+>o : { name: Observable<string>; age: Observable<number>; }
+>name : Observable<string>
 >N : number
 
     var yy_v = o.name.g;  // should be 'boolean'
 >yy_v : boolean
 >o.name.g : boolean
->o.name : ko.Observable<string>
->o : { name: ko.Observable<string>; age: ko.Observable<number>; }
->name : ko.Observable<string>
+>o.name : Observable<string>
+>o : { name: Observable<string>; age: Observable<number>; }
+>name : Observable<string>
 >g : boolean
 
     var rr_v = o.name.r;  // should be 'string'
 >rr_v : string
 >o.name.r : string
->o.name : ko.Observable<string>
->o : { name: ko.Observable<string>; age: ko.Observable<number>; }
->name : ko.Observable<string>
+>o.name : Observable<string>
+>o : { name: Observable<string>; age: Observable<number>; }
+>name : Observable<string>
 >r : string
 
