--- old.instantiationExpressionErrorNoCrash.types
+++ new.instantiationExpressionErrorNoCrash.types
@@= skipped -1, +1 lines =@@
 
 === instantiationExpressionErrorNoCrash.ts ===
 const createCacheReducer = <N extends string, QR>(
->createCacheReducer : <N extends string, QR>(queries: Cache<N, QR>["queries"]) => (state?: { queries: QR; }) => { queries: QR; }
-><N extends string, QR>(    queries: Cache<N, QR>["queries"],) => {    const queriesMap = {} as QR;    const initialState = {        queries: queriesMap,    };    return (state = initialState) => state;} : <N extends string, QR>(queries: Cache<N, QR>["queries"]) => (state?: { queries: QR; }) => { queries: QR; }
+>createCacheReducer : <N extends string, QR>(queries: { [QK in keyof QR]: any }) => (state?: { queries: QR; }) => { queries: QR; }
+><N extends string, QR>(    queries: Cache<N, QR>["queries"],) => {    const queriesMap = {} as QR;    const initialState = {        queries: queriesMap,    };    return (state = initialState) => state;} : <N extends string, QR>(queries: { [QK in keyof QR]: any }) => (state?: { queries: QR; }) => { queries: QR; }
 
     queries: Cache<N, QR>["queries"],
->queries : { [QK in keyof QR]: any; }
+>queries : { [QK in keyof QR]: any }
 
 ) => {
     const queriesMap = {} as QR;
@@= skipped -34, +34 lines =@@
 >Cache : Cache<N, QR>
 
     queries: {
->queries : { [QK in keyof QR]: any; }
+>queries : { [QK in keyof QR]: any }
 
         [QK in keyof QR]: ReturnType<typeof createCacheReducer<QR>>;
->createCacheReducer : <N_1 extends string, QR_1>(queries: Cache<N_1, QR_1>["queries"]) => (state?: { queries: QR_1; }) => { queries: QR_1; }
+>createCacheReducer : <N extends string, QR>(queries: { [QK in keyof QR]: any }) => (state?: { queries: QR; }) => { queries: QR; }
 
     };
 };
