//// [tests/cases/compiler/recursiveFunctionTypes.ts] ////

=== recursiveFunctionTypes.ts ===
function fn(): typeof fn { return 1; }
>fn : () => ???
>fn : () => ???
>1 : 1

var x: number = fn; // error
>x : number
>fn : () => ???

var y: () => number = fn; // ok
>y : () => number
>fn : () => ???

var f: () => typeof g;
>f : () => () => ???
>g : () => () => ???

var g: () => typeof f;
>g : () => () => ???
>f : () => () => ???

function f1(d: typeof f1) { }
>f1 : (d: ???) => void
>d : (d: ???) => void
>f1 : (d: ???) => void

function f2(): typeof g2 { } 
>f2 : () => () => ???
>g2 : () => () => ???

function g2(): typeof f2 { } 
>g2 : () => () => ???
>f2 : () => () => ???

interface I<T> { }
function f3(): I<typeof f3> { return f3; }
>f3 : () => I<???>
>f3 : () => I<???>
>f3 : () => I<???>

var a: number = f3; // error
>a : number
>f3 : () => I<???>

class C {
>C : C

     static g(t: typeof C.g){ }
>g : (t: ???) => void
>t : (t: ???) => void
>C.g : (t: ???) => void
>C : typeof C
>g : (t: ???) => void
}
C.g(3); // error
>C.g(3) : void
>C.g : (t: ???) => void
>C : typeof C
>g : (t: ???) => void
>3 : 3

var f4: () => typeof f4;
>f4 : () => ???
>f4 : () => ???

f4 = 3; // error
>f4 = 3 : 3
>f4 : () => ???
>3 : 3

function f5() { return f5; }
>f5 : () => ???
>f5 : () => ???

function f6(): typeof f6;
>f6 : { (): ???; (a: ???): () => number; }
>f6 : { (): ???; (a: ???): () => number; }

function f6(a: typeof f6): () => number;
>f6 : { (): ???; (a: ???): () => number; }
>a : { (): ???; (a: ???): () => number; }
>f6 : { (): ???; (a: ???): () => number; }

function f6(a?: any) { return f6; }
>f6 : { (): ???; (a: ???): () => number; }
>a : any
>f6 : { (): ???; (a: ???): () => number; }

f6("", 3); // error (arity mismatch)
>f6("", 3) : { (): ???; (a: ???): () => number; } & () => number
>f6 : { (): ???; (a: ???): () => number; }
>"" : ""
>3 : 3

f6(""); // ok (function takes an any param)
>f6("") : { (): ???; (a: ???): () => number; } & () => number
>f6 : { (): ???; (a: ???): () => number; }
>"" : ""

f6(); // ok
>f6() : { (): ???; (a: ???): () => number; }
>f6 : { (): ???; (a: ???): () => number; }

declare function f7(): typeof f7;
>f7 : { (): ???; (a: ???): () => number; (a: number): number; (a?: ???): ???; }
>f7 : { (): ???; (a: ???): () => number; (a: number): number; (a?: ???): ???; }

declare function f7(a: typeof f7): () => number;
>f7 : { (): ???; (a: ???): () => number; (a: number): number; (a?: ???): ???; }
>a : { (): ???; (a: ???): () => number; (a: number): number; (a?: ???): ???; }
>f7 : { (): ???; (a: ???): () => number; (a: number): number; (a?: ???): ???; }

declare function f7(a: number): number;
>f7 : { (): ???; (a: ???): () => number; (a: number): number; (a?: ???): ???; }
>a : number

declare function f7(a?: typeof f7): typeof f7;
>f7 : { (): ???; (a: ???): () => number; (a: number): number; (a?: ???): ???; }
>a : { (): ???; (a: ???): () => number; (a: number): number; (a?: ???): ???; }
>f7 : { (): ???; (a: ???): () => number; (a: number): number; (a?: ???): ???; }
>f7 : { (): ???; (a: ???): () => number; (a: number): number; (a?: ???): ???; }

f7("", 3); // error (arity mismatch)
>f7("", 3) : { (): ???; (a: ???): () => number; (a: number): number; (a?: ???): ???; } & () => number & number
>f7 : { (): ???; (a: ???): () => number; (a: number): number; (a?: ???): ???; }
>"" : ""
>3 : 3

f7(""); // ok (function takes an any param)
>f7("") : { (): ???; (a: ???): () => number; (a: number): number; (a?: ???): ???; } & () => number & number
>f7 : { (): ???; (a: ???): () => number; (a: number): number; (a?: ???): ???; }
>"" : ""

f7(); // ok
>f7() : { (): ???; (a: ???): () => number; (a: number): number; (a?: ???): ???; }
>f7 : { (): ???; (a: ???): () => number; (a: number): number; (a?: ???): ???; }

