--- old.functionsMissingReturnStatementsAndExpressions.js
+++ new.functionsMissingReturnStatementsAndExpressions.js
@@= skipped -158, +158 lines =@@
 
 //// [functionsMissingReturnStatementsAndExpressions.js]
 function f1() {
-    // errors because there are no return statements
 }
 function f2() {
-    // Permissible; returns undefined.
     return;
 }
 function f3() {
     return "Okay, because this is a return expression.";
 }
 function f4() {
-    // Fine since we are typed void.
 }
 function f5() {
-    // Fine since we are typed void.
     return;
 }
 function f6() {
-    // Fine since we are typed void and return undefined
     return undefined;
 }
 function f7() {
-    // Fine since we are typed void and return null
     return null;
 }
 function f8() {
-    // Fine since are typed any.
     return;
 }
 function f9() {
-    // Fine since we are typed any and return undefined
     return undefined;
 }
 function f10() {
-    // Fine since we are typed any and return null
     return null;
 }
 function f11() {
-    // Fine since we consist of a single throw statement.
     throw undefined;
 }
 function f12() {
-    // Fine since we consist of a single throw statement.
     throw undefined;
 }
 function f13() {
-    // Fine since we consist of a single throw statement.
     throw undefined;
 }
 function f14() {
-    // Not fine, since we can *only* consist of a single throw statement
-    // if no return statements are present but we are annotated.
     throw undefined;
     throw null;
 }
 function f15() {
-    // Fine, since we have a return statement somewhere.
     throw undefined;
     throw null;
     return;
 }
 function f16() {
-    // Okay; not type annotated.
 }
 function f17() {
-    // Okay; not type annotated.
     return;
 }
 function f18() {
     return "Okay, not type annotated.";
 }
 function f19() {
-    // Okay; function return type is union containing void
 }
 function f20() {
-    // Okay; function return type is union containing any
 }
 function f21() {
-    // Not okay; union does not contain void or any
 }
 function f22() {
-    // Okay; return type allows implicit return of undefined
 }
 function f23() {
-    // Error; because `undefined | number` becomes `number` without strictNullChecks.
 }
-var f30 = function () {
-    // Ok, contextual type for implicit return is `undefined`
+const f30 = () => {
 };
-var f31 = function () {
-    // Ok, contextual type for expression-less return is `undefined`
+const f31 = () => {
     return;
 };
-var f32 = function () {
-    // Error, contextual type for implicit return isn't just `undefined`
+const f32 = () => {
 };
-var f33 = function () {
-    // Error, contextual type for expression-less return isn't just `undefined`
+const f33 = () => {
     return;
 };
-var C = /** @class */ (function () {
-    function C() {
+class C {
+    get m1() {
     }
-    Object.defineProperty(C.prototype, "m1", {
-        get: function () {
-            // Errors; get accessors must return a value.
-        },
-        enumerable: false,
-        configurable: true
-    });
-    Object.defineProperty(C.prototype, "m2", {
-        get: function () {
-            // Permissible; returns undefined.
-            return;
-        },
-        enumerable: false,
-        configurable: true
-    });
-    Object.defineProperty(C.prototype, "m3", {
-        get: function () {
-            return "Okay, because this is a return expression.";
-        },
-        enumerable: false,
-        configurable: true
-    });
-    Object.defineProperty(C.prototype, "m4", {
-        get: function () {
-            // Fine since this consists of a single throw statement.
-            throw null;
-        },
-        enumerable: false,
-        configurable: true
-    });
-    Object.defineProperty(C.prototype, "m5", {
-        get: function () {
-            // Not fine, since we can *only* consist of a single throw statement
-            // if no return statements are present but we are a get accessor.
-            throw null;
-            throw undefined.
-            ;
-        },
-        enumerable: false,
-        configurable: true
-    });
-    return C;
-}());
+    get m2() {
+        return;
+    }
+    get m3() {
+        return "Okay, because this is a return expression.";
+    }
+    get m4() {
+        throw null;
+    }
+    get m5() {
+        throw null;
+        throw undefined.
+        ;
+    }
+}
