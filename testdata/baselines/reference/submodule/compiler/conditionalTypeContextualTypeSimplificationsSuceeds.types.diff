--- old.conditionalTypeContextualTypeSimplificationsSuceeds.types
+++ new.conditionalTypeContextualTypeSimplificationsSuceeds.types
@@= skipped -8, +8 lines =@@
 }
 
 function bad<P extends Props>(
->bad : <P extends Props>(attrs: string extends keyof P ? { [K in keyof P]: P[K]; } : { [K in keyof P]: P[K]; }) => void
+>bad : <P extends Props>(attrs: string extends keyof P ? { [K in keyof P]: P[K] } : { [K in keyof P]: P[K] }) => void
 
     attrs: string extends keyof P ? { [K in keyof P]: P[K] } : { [K in keyof P]: P[K] }) { }
->attrs : string extends keyof P ? { [K in keyof P]: P[K]; } : { [K_1 in keyof P]: P[K_1]; }
+>attrs : string extends keyof P ? { [K in keyof P]: P[K] } : { [K in keyof P]: P[K] }
 
 function good1<P extends Props>(
->good1 : <P extends Props>(attrs: string extends keyof P ? P : { [K in keyof P]: P[K]; }) => void
+>good1 : <P extends Props>(attrs: string extends keyof P ? P : { [K in keyof P]: P[K] }) => void
 
     attrs: string extends keyof P ? P : { [K in keyof P]: P[K] }) { }
->attrs : string extends keyof P ? P : { [K in keyof P]: P[K]; }
+>attrs : string extends keyof P ? P : { [K in keyof P]: P[K] }
 
 function good2<P extends Props>(
->good2 : <P extends Props>(attrs: { [K in keyof P]: P[K]; }) => void
+>good2 : <P extends Props>(attrs: { [K in keyof P]: P[K] }) => void
 
     attrs: { [K in keyof P]: P[K] }) { }
->attrs : { [K in keyof P]: P[K]; }
+>attrs : { [K in keyof P]: P[K] }
 
 bad({ when: value => false });
 >bad({ when: value => false }) : void
->bad : <P extends Props>(attrs: string extends keyof P ? { [K in keyof P]: P[K]; } : { [K in keyof P]: P[K]; }) => void
+>bad : <P extends Props>(attrs: string extends keyof P ? { [K in keyof P]: P[K] } : { [K in keyof P]: P[K] }) => void
 >{ when: value => false } : { when: (value: string) => false; }
 >when : (value: string) => false
 >value => false : (value: string) => false
@@= skipped -28, +28 lines =@@
 
 good1({ when: value => false });
 >good1({ when: value => false }) : void
->good1 : <P extends Props>(attrs: string extends keyof P ? P : { [K in keyof P]: P[K]; }) => void
+>good1 : <P extends Props>(attrs: string extends keyof P ? P : { [K in keyof P]: P[K] }) => void
 >{ when: value => false } : { when: (value: string) => false; }
 >when : (value: string) => false
 >value => false : (value: string) => false
@@= skipped -9, +9 lines =@@
 
 good2({ when: value => false });
 >good2({ when: value => false }) : void
->good2 : <P extends Props>(attrs: { [K in keyof P]: P[K]; }) => void
+>good2 : <P extends Props>(attrs: { [K in keyof P]: P[K] }) => void
 >{ when: value => false } : { when: (value: string) => false; }
 >when : (value: string) => false
 >value => false : (value: string) => false
