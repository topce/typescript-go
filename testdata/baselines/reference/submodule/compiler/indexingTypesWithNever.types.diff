--- old.indexingTypesWithNever.types
+++ new.indexingTypesWithNever.types
@@= skipped -58, +58 lines =@@
 >"ftest" : "ftest"
 
 declare function genericFn3<
->genericFn3 : <T extends { [K in keyof T]: T[K]; }, U extends keyof T, V extends keyof T>(obj: T, u: U, v: V) => T[U & V]
+>genericFn3 : <T extends { [K in keyof T]: T[K] }, U extends keyof T, V extends keyof T>(obj: T, u: U, v: V) => T[U & V]
 
   T extends { [K in keyof T]: T[K] },
   U extends keyof T,
@@= skipped -14, +14 lines =@@
 const result5 = genericFn3({ g: "gtest", h: "htest" }, "g", "h"); // 'g' & 'h' will reduce to never
 >result5 : never
 >genericFn3({ g: "gtest", h: "htest" }, "g", "h") : never
->genericFn3 : <T extends { [K in keyof T]: T[K]; }, U extends keyof T, V extends keyof T>(obj: T, u: U, v: V) => T[U & V]
+>genericFn3 : <T extends { [K in keyof T]: T[K] }, U extends keyof T, V extends keyof T>(obj: T, u: U, v: V) => T[U & V]
 >{ g: "gtest", h: "htest" } : { g: string; h: string; }
 >g : string
 >"gtest" : "gtest"
