--- old.collisionThisExpressionAndParameter.js
+++ new.collisionThisExpressionAndParameter.js
@@= skipped -95, +95 lines =@@
 declare function f4(_this: string); // no code gen - no error
 
 //// [collisionThisExpressionAndParameter.js]
-var Foo = /** @class */ (function () {
-    function Foo() {
-    }
-    Foo.prototype.x = function () {
-        var _this = 10; // Local var. No this capture in x(), so no conflict.
+class Foo {
+    x() {
+        var _this = 10;
         function inner(_this) {
-            var _this_1 = this;
-            return function (x) { return _this_1; }; // New scope.  So should inject new _this capture into function inner
+            return x => this;
         }
-    };
-    Foo.prototype.y = function () {
-        var _this_1 = this;
-        var lamda = function (_this) {
-            return function (x) { return _this_1; }; // New scope.  So should inject new _this capture
+    }
+    y() {
+        var lamda = (_this) => {
+            return x => this;
         };
-    };
-    Foo.prototype.z = function (_this) {
-        var _this_1 = this;
-        var lambda = function () {
-            return function (x) { return _this_1; }; // New scope.  So should inject new _this capture
+    }
+    z(_this) {
+        var lambda = () => {
+            return x => this;
         };
-    };
-    Foo.prototype.x1 = function () {
-        var _this = 10; // Local var. No this capture in x(), so no conflict.
+    }
+    x1() {
+        var _this = 10;
         function inner(_this) {
         }
-    };
-    Foo.prototype.y1 = function () {
-        var lamda = function (_this) {
+    }
+    y1() {
+        var lamda = (_this) => {
         };
-    };
-    Foo.prototype.z1 = function (_this) {
-        var lambda = function () {
+    }
+    z1(_this) {
+        var lambda = () => {
         };
-    };
-    return Foo;
-}());
-var Foo1 = /** @class */ (function () {
-    function Foo1(_this) {
-        var _this_1 = this;
+    }
+}
+class Foo1 {
+    constructor(_this) {
         var x2 = {
-            doStuff: function (callback) { return function () {
-                return callback(_this_1);
-            }; }
+            doStuff: (callback) => () => {
+                return callback(this);
+            }
         };
     }
-    return Foo1;
-}());
+}
 function f1(_this) {
-    var _this_1 = this;
-    (function (x) { console.log(_this_1.x); });
+    x => { console.log(this.x); };
 }
-var Foo3 = /** @class */ (function () {
-    function Foo3(_this) {
-        var _this_1 = this;
+class Foo3 {
+    constructor(_this) {
         var x2 = {
-            doStuff: function (callback) { return function () {
-                return callback(_this_1);
-            }; }
+            doStuff: (callback) => () => {
+                return callback(this);
+            }
         };
     }
-    Foo3.prototype.z = function (_this) {
-        var _this_1 = this;
-        var lambda = function () {
-            return function (x) { return _this_1; }; // New scope.  So should inject new _this capture
+    z(_this) {
+        var lambda = () => {
+            return x => this;
         };
-    };
-    return Foo3;
-}());
+    }
+}
 function f3(_this) {
-    var _this_1 = this;
-    (function (x) { console.log(_this_1.x); });
+    x => { console.log(this.x); };
 }
