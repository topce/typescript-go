--- old.awaitedTypeStrictNull.types
+++ new.awaitedTypeStrictNull.types
@@= skipped -119, +119 lines =@@
     ] = await Promise.all([
 >await Promise.all([        MaybePromise(1),        MaybePromise('2'),        MaybePromise(true),    ]) : [number, string, boolean]
 >Promise.all([        MaybePromise(1),        MaybePromise('2'),        MaybePromise(true),    ]) : Promise<[number, string, boolean]>
->Promise.all : { <T>(values: Iterable<T | PromiseLike<T>>): Promise<Awaited<T>[]>; <T extends readonly unknown[] | []>(values: T): Promise<{ -readonly [P in keyof T]: Awaited<T[P]>; }>; }
+>Promise.all : { <T>(values: Iterable<T | PromiseLike<T>, any, any>): Promise<Awaited<T>[]>; <T extends readonly unknown[] | []>(values: T): Promise<{ -readonly [P in keyof T]: Awaited<T[P]> }>; }
 >Promise : PromiseConstructor
->all : { <T>(values: Iterable<T | PromiseLike<T>>): Promise<Awaited<T>[]>; <T extends readonly unknown[] | []>(values: T): Promise<{ -readonly [P in keyof T]: Awaited<T[P]>; }>; }
+>all : { <T>(values: Iterable<T | PromiseLike<T>, any, any>): Promise<Awaited<T>[]>; <T extends readonly unknown[] | []>(values: T): Promise<{ -readonly [P in keyof T]: Awaited<T[P]> }>; }
 >[        MaybePromise(1),        MaybePromise('2'),        MaybePromise(true),    ] : [number | Promise<1> | PromiseLike<1>, string | Promise<"2"> | PromiseLike<"2">, true | Promise<true> | PromiseLike<true>]
 
         MaybePromise(1),
@@= skipped -29, +29 lines =@@
 
 	// Should result in `Promise<T>` instead of `Promise<Awaited<T>>`.
 	async post<T = D>() { return this.request<T>(); }
->post : <T = D>() => Promise<T>
+>post : <T>() => Promise<T>
 >this.request<T>() : Promise<T>
->this.request : <D_1>() => Promise<D_1>
+>this.request : <D>() => Promise<D>
 >this : this
->request : <D_1>() => Promise<D_1>
+>request : <D>() => Promise<D>
 
 	async request<D>(): Promise<D> { throw new Error(); }
 >request : <D>() => Promise<D>
@@= skipped -19, +19 lines =@@
 >x : number
 
 async function fn<T>(): Promise<T extends object ? { [K in keyof T]: Obj } : Obj> {
->fn : <T>() => Promise<T extends object ? { [K in keyof T]: Obj; } : Obj>
+>fn : <T>() => Promise<T extends object ? { [K in keyof T]: Obj } : Obj>
 
 	// Per #45924, this was failing due to incorrect inference both above and here.
 	// Should not error.
 	return api.post();
->api.post() : Promise<T extends object ? { [K in keyof T]: Obj; } : Obj>
->api.post : <T_1 = {}>() => Promise<T_1>
+>api.post() : Promise<T extends object ? { [K in keyof T]: Obj } : Obj>
+>api.post : <T>() => Promise<T>
 >api : Api<{}>
->post : <T_1 = {}>() => Promise<T_1>
+>post : <T>() => Promise<T>
 }
 
 // helps with tests where '.types' just prints out the type alias name
