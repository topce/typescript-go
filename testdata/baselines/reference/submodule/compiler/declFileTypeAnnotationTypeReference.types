//// [tests/cases/compiler/declFileTypeAnnotationTypeReference.ts] ////

=== declFileTypeAnnotationTypeReference.ts ===
class c {
>c : c
}
module m {
>m : typeof m

    export class c {
>c : c
    }
    export class g<T> {
>g : g<T>
    }
}
class g<T> {
>g : g<T>
}

// Just the name
function foo(): c {
>foo : () => c

    return new c();
>new c() : c
>c : typeof c
}
function foo2() {
>foo2 : () => c

    return new c();
>new c() : c
>c : typeof c
}

// Qualified name
function foo3(): m.c {
>foo3 : () => c
>m : any

    return new m.c();
>new m.c() : c
>m.c : typeof c
>m : typeof m
>c : typeof c
}
function foo4() {
>foo4 : () => c

    return new m.c();
>new m.c() : c
>m.c : typeof c
>m : typeof m
>c : typeof c
}

// Just the name with type arguments
function foo5(): g<string> {
>foo5 : () => g<string>

    return new g<string>();
>new g<string>() : g<string>
>g : typeof g
}
function foo6() {
>foo6 : () => g<string>

    return new g<string>();
>new g<string>() : g<string>
>g : typeof g
}

// Qualified name with type arguments
function foo7(): m.g<number> {
>foo7 : () => g<number>
>m : any

    return new m.g<number>();
>new m.g<number>() : g<number>
>m.g : typeof g
>m : typeof m
>g : typeof g
}
function foo8() {
>foo8 : () => g<number>

    return new m.g<number>();
>new m.g<number>() : g<number>
>m.g : typeof g
>m : typeof m
>g : typeof g
}
