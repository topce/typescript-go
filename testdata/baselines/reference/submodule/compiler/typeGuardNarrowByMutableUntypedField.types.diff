--- old.typeGuardNarrowByMutableUntypedField.types
+++ new.typeGuardNarrowByMutableUntypedField.types
@@= skipped -1, +1 lines =@@
 
 === typeGuardNarrowByMutableUntypedField.ts ===
 declare function hasOwnProperty<P extends PropertyKey>(target: {}, property: P): target is { [K in P]: unknown };
->hasOwnProperty : <P extends PropertyKey>(target: {}, property: P) => target is { [K in P]: unknown; }
+>hasOwnProperty : <P extends PropertyKey>(target: {}, property: P) => target is { [K in P]: unknown }
 >target : {}
 >property : P
 
 declare const arrayLikeOrIterable: ArrayLike<any> | Iterable<any>;
->arrayLikeOrIterable : ArrayLike<any> | Iterable<any>
+>arrayLikeOrIterable : ArrayLike<any> | Iterable<any, any, any>
 
 if (hasOwnProperty(arrayLikeOrIterable, 'length')) {
 >hasOwnProperty(arrayLikeOrIterable, 'length') : boolean
->hasOwnProperty : <P extends PropertyKey>(target: {}, property: P) => target is { [K in P]: unknown; }
->arrayLikeOrIterable : ArrayLike<any> | Iterable<any>
+>hasOwnProperty : <P extends PropertyKey>(target: {}, property: P) => target is { [K in P]: unknown }
+>arrayLikeOrIterable : ArrayLike<any> | Iterable<any, any, any>
 >'length' : "length"
 
     let x: number = arrayLikeOrIterable.length;
