--- old.mappedTypeInferenceAliasSubstitution.types
+++ new.mappedTypeInferenceAliasSubstitution.types
@@= skipped -14, +14 lines =@@
 >Field : Field<A, R>
 
 const f = <A extends string, B extends string, R>(x: { [K in A]: Field<B, R> }): R => ({} as any);
->f : <A extends string, B extends string, R>(x: { [K in A]: Field<B, R>; }) => R
-><A extends string, B extends string, R>(x: { [K in A]: Field<B, R> }): R => ({} as any) : <A extends string, B extends string, R>(x: { [K in A]: Field<B, R>; }) => R
->x : { [K in A]: Field<B, R>; }
+>f : <A extends string, B extends string, R>(x: { [K in A]: Field<B, R> }) => R
+><A extends string, B extends string, R>(x: { [K in A]: Field<B, R> }): R => ({} as any) : <A extends string, B extends string, R>(x: { [K in A]: Field<B, R> }) => R
+>x : { [K in A]: Field<B, R> }
 >({} as any) : any
 >{} as any : any
 >{} : {}
@@= skipped -10, +10 lines =@@
 const r1 = f(v);
 >r1 : number
 >f(v) : number
->f : <A extends string, B extends string, R>(x: { [K in A]: Field<B, R>; }) => R
+>f : <A extends string, B extends string, R>(x: { [K in A]: Field<B, R> }) => R
 >v : { test: { smth: number; }; }
 
 const g = <A extends string, B extends string, R>(x: Field<A, Field<B, R>>): R => ({} as any);
