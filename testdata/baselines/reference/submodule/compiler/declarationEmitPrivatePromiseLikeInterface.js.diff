--- old.declarationEmitPrivatePromiseLikeInterface.js
+++ new.declarationEmitPrivatePromiseLikeInterface.js
@@= skipped -35, +35 lines =@@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.HttpClient = void 0;
-var HttpClient = /** @class */ (function () {
-    function HttpClient() {
-        this.request = function () {
-            return '';
-        };
-    }
-    return HttpClient;
-}());
+class HttpClient {
+    request = () => {
+        return '';
+    };
+}
 exports.HttpClient = HttpClient;
 //// [Api.js]
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.Api = void 0;
-var Api = /** @class */ (function () {
-    function Api(http) {
-        var _this = this;
+class Api {
+    http;
+    constructor(http) {
         this.http = http;
-        this.abc1 = function () { return _this.http.request(); };
-        this.abc2 = function () { return _this.http.request(); };
-        this.abc3 = function () { return _this.http.request(); };
     }
-    return Api;
-}());
-exports.Api = Api;
-
-
-//// [http-client.d.ts]
-type TPromise<ResolveType, RejectType = any> = Omit<Promise<ResolveType>, "then" | "catch"> & {
-    then<TResult1 = ResolveType, TResult2 = never>(onfulfilled?: ((value: ResolveType) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: RejectType) => TResult2 | PromiseLike<TResult2>) | undefined | null): TPromise<TResult1 | TResult2, RejectType>;
-    catch<TResult = never>(onrejected?: ((reason: RejectType) => TResult | PromiseLike<TResult>) | undefined | null): TPromise<ResolveType | TResult, RejectType>;
-};
-export interface HttpResponse<D extends unknown, E extends unknown = unknown> extends Response {
-    data: D;
-    error: E;
+    abc1 = () => this.http.request();
+    abc2 = () => this.http.request();
+    abc3 = () => this.http.request();
 }
-export declare class HttpClient<SecurityDataType = unknown> {
-    request: <T = any, E = any>() => TPromise<HttpResponse<T, E>>;
-}
-export {};
+exports.Api = Api;
