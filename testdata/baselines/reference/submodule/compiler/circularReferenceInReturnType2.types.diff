--- old.circularReferenceInReturnType2.types
+++ new.circularReferenceInReturnType2.types
@@= skipped -26, +26 lines =@@
 };
 
 declare const object: <Source>() => <
->object : <Source>() => <Fields extends { [Key in keyof Fields]: Field<Source, Key & string>; }>(config: { name: string; fields: Fields | (() => Fields); }) => ObjectType<Source>
+>object : <Source>() => <Fields extends { [Key in keyof Fields]: Field<Source, Key & string> }>(config: { name: string; fields: Fields | () => Fields; }) => ObjectType<Source>
 
   Fields extends {
     [Key in keyof Fields]: Field<Source, Key & string>;
   }
 >(config: {
->config : { name: string; fields: Fields | (() => Fields); }
+>config : { name: string; fields: Fields | () => Fields; }
 
   name: string;
 >name : string
 
   fields: Fields | (() => Fields);
->fields : Fields | (() => Fields)
+>fields : Fields | () => Fields
 
 }) => ObjectType<Source>;
 
@@= skipped -56, +56 lines =@@
 const A = object<Something>()({
 >A : any
 >object<Something>()({  name: "A",  fields: () => ({    a: field({      type: A,      resolve() {        return {          foo: 100,        };      },    }),  }),}) : ObjectType<Something>
->object<Something>() : <Fields extends { [Key in keyof Fields]: Field<Something, Key & string>; }>(config: { name: string; fields: Fields | (() => Fields); }) => ObjectType<Something>
->object : <Source>() => <Fields extends { [Key in keyof Fields]: Field<Source, Key & string>; }>(config: { name: string; fields: Fields | (() => Fields); }) => ObjectType<Source>
+>object<Something>() : <Fields extends { [Key in keyof Fields]: Field<Something, Key & string> }>(config: { name: string; fields: Fields | () => Fields; }) => ObjectType<Something>
+>object : <Source>() => <Fields extends { [Key in keyof Fields]: Field<Source, Key & string> }>(config: { name: string; fields: Fields | () => Fields; }) => ObjectType<Source>
 >{  name: "A",  fields: () => ({    a: field({      type: A,      resolve() {        return {          foo: 100,        };      },    }),  }),} : { name: string; fields: () => any; }
 
   name: "A",
@@= skipped -18, +18 lines =@@
 >a : Field<Something, "a">
 >field({      type: A,      resolve() {        return {          foo: 100,        };      },    }) : Field<Something, "a">
 >field : <Source, Type extends ObjectType<any>, Key extends string>(field: FieldFuncArgs<Source, Type>) => Field<Source, Key>
->{      type: A,      resolve() {        return {          foo: 100,        };      },    } : { type: any; resolve(): { foo: number; }; }
+>{      type: A,      resolve() {        return {          foo: 100,        };      },    } : { type: any; resolve: () => { foo: number; }; }
 
       type: A,
 >type : any
