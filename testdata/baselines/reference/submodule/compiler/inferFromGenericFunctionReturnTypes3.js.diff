--- old.inferFromGenericFunctionReturnTypes3.js
+++ new.inferFromGenericFunctionReturnTypes3.js
@@= skipped -234, +234 lines =@@
 let mappedArr = arr.map(([x, y]) => {
     return [x, y];
 });
+export { DiagnosticSeverity };
 // Repro from #13594
-export var DiagnosticSeverity;
+var DiagnosticSeverity;
 (function (DiagnosticSeverity) {
     DiagnosticSeverity.Error = 1;
     DiagnosticSeverity.Warning = 2;
@@= skipped -77, +78 lines =@@
 function fn(arg, f) { }
 fn(new ClassWithConvert(Enum.A), () => new ClassWithConvert(Enum.A));
 baz(makeFoo(Enum.A), makeFoo(Enum.A));
-
-
-//// [inferFromGenericFunctionReturnTypes3.d.ts]
-export declare namespace DiagnosticSeverity {
-    const Error = 1;
-    const Warning = 2;
-    const Information = 3;
-    const Hint = 4;
-}
-export type DiagnosticSeverity = 1 | 2 | 3 | 4;
-export interface Diagnostic {
-    severity?: DiagnosticSeverity;
-    code?: number | string;
-    source?: string;
-    message: string;
-}
-interface OK<T> {
-    kind: "OK";
-    value: T;
-}
-export declare function ok<T>(value: T): OK<T>;
-export {};
