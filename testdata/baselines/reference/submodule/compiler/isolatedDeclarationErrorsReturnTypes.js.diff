--- old.isolatedDeclarationErrorsReturnTypes.js
+++ new.isolatedDeclarationErrorsReturnTypes.js
@@= skipped -205, +205 lines =@@
 
 
 //// [isolatedDeclarationErrorsReturnTypes.js]
-// Function Variables
 export const fnExpressionConstVariable = function foo() { return 0; };
 export const fnArrowConstVariable = () => "S";
 export let fnExpressionLetVariable = function foo() { return 0; };
 export let fnArrowLetVariable = () => "S";
 export var fnExpressionVarVariable = function foo() { return 0; };
 export var fnArrowVarVariable = () => "S";
-// No Errors
 export const fnExpressionConstVariableOk = function foo() { return 0; };
 export const fnArrowConstVariableOk = (cb = function () { }) => "S";
 export let fnExpressionLetVariableOk = function foo() { return 0; };
 export let fnArrowLetVariableOk = (cb = function () { }) => "S";
 export var fnExpressionVarVariableOk = function foo() { return 0; };
 export var fnArrowVarVariableOk = (cb = function () { }) => "S";
-// Not exported
 const fnExpressionConstVariableInternal = function foo() { return 0; };
 const fnArrowConstVariableInternal = () => "S";
 let fnExpressionLetVariableInternal = function foo() { return 0; };
 let fnArrowLetVariableInternal = () => "S";
 var fnExpressionVarVariableInternal = function foo() { return 0; };
 var fnArrowVarVariableInternal = () => "S";
-// Function Fields
 export class ExportedClass {
-    // Should Error
     fnExpression = function foo() { return 0; };
     fnArrow = () => "S";
     fnExpressionProtected = function foo() { return 0; };
@@= skipped -32, +27 lines =@@
     static fnStaticArrow = () => "S";
     static fnStaticExpressionProtected = function foo() { return 0; };
     static fnStaticArrowProtected = () => "S";
-    // Have annotation, so ok 
     fnExpressionOk = function foo() { return 0; };
     fnArrowOK = () => "S";
     fnExpressionProtectedOk = function foo() { return 0; };
@@= skipped -9, +8 lines =@@
     static fnStaticArrowOk = () => "S";
     static fnStaticExpressionProtectedOk = function foo() { return 0; };
     static fnStaticArrowProtectedOk = () => "S";
-    // No Error not in declarations
     fnExpressionPrivate = function foo() { return 0; };
     fnArrowPrivate = () => "S";
     #fnArrow = () => "S";
@@= skipped -8, +7 lines =@@
     static fnStaticExpressionPrivate = function foo() { return 0; };
     static fnStaticArrowPrivate = () => "S";
 }
-// Should error
 class IndirectlyExportedClass {
     fnExpression = function foo() { return 0; };
     fnArrow = () => "S";
@@= skipped -16, +15 lines =@@
     static fnStaticArrowPrivate = () => "S";
 }
 export const instance = new IndirectlyExportedClass();
-// No Errors
 class InternalClass {
     fnExpression = function foo() { return 0; };
     fnArrow = () => "S";
@@= skipped -16, +15 lines =@@
     static fnStaticArrowPrivate = () => "S";
 }
 const internalInstance = new InternalClass();
-// Function parameters
-// In Function Variables - No annotations
 export const fnParamExpressionConstVariable = function foo(cb = function () { }) { return 0; };
 export const fnParamArrowConstVariable = (cb = () => 1) => "S";
 export let fnParamExpressionLetVariable = function foo(cb = function () { }) { return 0; };
 export let fnParamArrowLetVariable = (cb = () => 1) => "S";
 export var fnParamExpressionVarVariable = function foo(cb = function () { }) { return 0; };
 export var fnParamArrowVarVariable = (cb = () => 1) => "S";
-// In Function Variables - No annotations on parameter
 export const fnParamExpressionConstVariableOwnerHasReturnType = function foo(cb = function () { }) { return 0; };
 export const fnParamArrowConstVariableOwnerHasReturnType = (cb = function () { }) => "S";
 export let fnParamExpressionLetVariableOwnerHasReturnType = function foo(cb = function () { }) { return 0; };
 export let fnParamArrowLetVariableOwnerHasReturnType = (cb = function () { }) => "S";
 export var fnParamExpressionVarVariableOwnerHasReturnType = function foo(cb = function () { }) { return 0; };
 export var fnParamArrowVarVariableOwnerHasReturnType = (cb = function () { }) => "S";
-// No Errors
 export const fnParamExpressionConstVariableOk = function foo(cb = function () { }) { return 0; };
 export const fnParamArrowConstVariableOk = (cb = function () { }) => "S";
 export let fnParamExpressionLetVariableOk = function foo(cb = function () { }) { return 0; };
@@= skipped -28, +24 lines =@@
 export let fnParamArrowLetVariableInternal = (cb = () => 1) => "S";
 export var fnParamExpressionVarVariableInternal = function foo(cb = function () { }) { return 0; };
 export var fnParamArrowVarVariableInternal = (cb = () => 1) => "S";
-// In Function Fields
 export class FnParamsExportedClass {
-    // Should Error
     fnExpression = function foo(cb = function () { }) { return 0; };
     fnArrow = (cb = function () { }) => "S";
     fnExpressionProtected = function foo(cb = function () { }) { return 0; };
@@= skipped -11, +9 lines =@@
     static fnStaticArrow = (cb = function () { }) => "S";
     static fnStaticExpressionProtected = function foo(cb = function () { }) { return 0; };
     static fnStaticArrowProtected = (cb = function () { }) => "S";
-    // Have annotation on owner
     fnExpressionMethodHasReturn = function foo(cb = function () { }) { return 0; };
     fnArrowMethodHasReturn = (cb = function () { }) => "S";
     fnExpressionProtectedMethodHasReturn = function foo(cb = function () { }) { return 0; };
@@= skipped -9, +8 lines =@@
     static fnStaticArrowMethodHasReturn = (cb = function () { }) => "S";
     static fnStaticExpressionProtectedMethodHasReturn = function foo(cb = function () { }) { return 0; };
     static fnStaticArrowProtectedMethodHasReturn = (cb = function () { }) => "S";
-    // Have annotation only on parameter
     fnExpressionOnlyOnParam = function foo(cb = function () { }) { return 0; };
     fnArrowOnlyOnParam = (cb = function () { }) => "S";
     fnExpressionProtectedOnlyOnParam = function foo(cb = function () { }) { return 0; };
@@= skipped -9, +8 lines =@@
     static fnStaticArrowOnlyOnParam = (cb = function () { }) => "S";
     static fnStaticExpressionProtectedOnlyOnParam = function foo(cb = function () { }) { return 0; };
     static fnStaticArrowProtectedOnlyOnParam = (cb = function () { }) => "S";
-    // Have annotation, so ok 
     fnExpressionOk = function foo(cb = function () { }) { return 0; };
     fnArrowOK = (cb = function () { }) => "S";
     fnExpressionProtectedOk = function foo(cb = function () { }) { return 0; };
@@= skipped -9, +8 lines =@@
     static fnStaticArrowOk = (cb = function () { }) => "S";
     static fnStaticExpressionProtectedOk = function foo(cb = function () { }) { return 0; };
     static fnStaticArrowProtectedOk = (cb = function () { }) => "S";
-    // No Error, not in declarations
     fnExpressionPrivate = function foo(cb = function () { }) { return 0; };
     fnArrowPrivate = (cb = function () { }) => "S";
     #fnArrow = (cb = function () { }) => "S";
