--- old.signatureCombiningRestParameters1.types
+++ new.signatureCombiningRestParameters1.types
@@= skipped -17, +17 lines =@@
 };
 
 declare const map: {
->map : { A: () => unknown; B: () => unknown; C: (args_0: string) => unknown; D: (args_0: number) => unknown; }
+>map : { A: (...args: []) => unknown; B: (...args: []) => unknown; C: (...args: [string]) => unknown; D: (...args: [number]) => unknown; }
 
   [K in T1 | keyof T2]: (...args: K extends keyof T2 ? T2[K] : []) => unknown;
 >args : K extends keyof T2 ? T2[K] : []
@@= skipped -12, +12 lines =@@
 
 for (const [key, fn] of Object.entries(map)) {
 >key : string
->fn : (() => unknown) | (() => unknown) | ((args_0: string) => unknown) | ((args_0: number) => unknown)
->Object.entries(map) : [string, (() => unknown) | (() => unknown) | ((args_0: string) => unknown) | ((args_0: number) => unknown)][]
->Object.entries : { <T>(o: { [s: string]: T; } | ArrayLike<T>): [string, T][]; (o: {}): [string, any][]; }
+>fn : ((...args: []) => unknown) | ((...args: []) => unknown) | ((...args: [string]) => unknown) | ((...args: [number]) => unknown)
+>Object.entries(map) : [string, ((...args: []) => unknown) | ((...args: []) => unknown) | ((...args: [string]) => unknown) | ((...args: [number]) => unknown)][]
+>Object.entries : { <T>(o: ArrayLike<T> | { [s: string]: T; }): [string, T][]; (o: {}): [string, any][]; }
 >Object : ObjectConstructor
->entries : { <T>(o: { [s: string]: T; } | ArrayLike<T>): [string, T][]; (o: {}): [string, any][]; }
->map : { A: () => unknown; B: () => unknown; C: (args_0: string) => unknown; D: (args_0: number) => unknown; }
+>entries : { <T>(o: ArrayLike<T> | { [s: string]: T; }): [string, T][]; (o: {}): [string, any][]; }
+>map : { A: (...args: []) => unknown; B: (...args: []) => unknown; C: (...args: [string]) => unknown; D: (...args: [number]) => unknown; }
 
   fn(...args);
 >fn(...args) : unknown
->fn : (() => unknown) | (() => unknown) | ((args_0: string) => unknown) | ((args_0: number) => unknown)
+>fn : ((...args: []) => unknown) | ((...args: []) => unknown) | ((...args: [string]) => unknown) | ((...args: [number]) => unknown)
 >...args : any
 >args : any
 }
 
 const test2: ((a: number, ...args: []) => void) &
->test2 : ((a: number) => void) & ((b: string) => void) & ((c: boolean) => void)
+>test2 : ((a: number, ...args: []) => void) & ((b: string) => void) & ((c: boolean) => void)
 >a : number
 >args : []
 
