--- old.capturedParametersInInitializers1.js
+++ new.capturedParametersInInitializers1.js
@@= skipped -42, +42 lines =@@
 
 
 //// [capturedParametersInInitializers1.js]
-var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
-    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
-    return new (P || (P = Promise))(function (resolve, reject) {
-        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
-        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
-        step((generator = generator.apply(thisArg, _arguments || [])).next());
-    });
-};
 // ok - usage is deferred
 function foo1(y = class {
-    constructor() {
-        this.c = x;
-    }
+    c = x;
 }, x = 1) {
     new y().c;
 }
@@= skipped -37, +26 lines =@@
 function foo7(y = (function* () { yield z; })(), z = 1) {
 }
 // ok - used inside immediately invoked async function
-function foo8(y = (() => __awaiter(this, void 0, void 0, function* () { return z; }))(), z = 1) {
+function foo8(y = (async () => z)(), z = 1) {
 }
 // error - used as computed name of method
 function foo9(y = { [z]() { return z; } }, z = 1) {
