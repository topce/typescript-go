--- old.inferredReturnTypeIncorrectReuse1.types
+++ new.inferredReturnTypeIncorrectReuse1.types
@@= skipped -21, +21 lines =@@
 export const out = t.pipe(s => parseInt(s))
 >out : Type<(In: string) => number>
 >t.pipe(s => parseInt(s)) : Type<(In: string) => number>
->t.pipe : <fn_1 extends (In: string) => unknown>(fn: fn_1) => Type<inferPipe<string, fn_1>>
+>t.pipe : <fn extends (In: string) => unknown>(fn: fn) => Type<inferPipe<string, fn>>
 >t : Type<string>
->pipe : <fn_1 extends (In: string) => unknown>(fn: fn_1) => Type<inferPipe<string, fn_1>>
+>pipe : <fn extends (In: string) => unknown>(fn: fn) => Type<inferPipe<string, fn>>
 >s => parseInt(s) : (s: string) => number
 >s : string
 >parseInt(s) : number
->parseInt : (string: string, radix?: number) => number
+>parseInt : (string: string, radix?: number | undefined) => number
 >s : string
 
 export type inferPipe2<t, pipe> =
@@= skipped -37, +37 lines =@@
 export const out2 = t2.pipe(s => parseInt(s))
 >out2 : Type<(In: string) => number>
 >t2.pipe(s => parseInt(s)) : Type<(In: string) => number>
->t2.pipe : <fn_1 extends (In: string) => unknown>(fn: fn_1) => Type<inferPipe2<string, fn_1>>
+>t2.pipe : <fn extends (In: string) => unknown>(fn: fn) => Type<inferPipe2<string, fn>>
 >t2 : Type2<string>
->pipe : <fn_1 extends (In: string) => unknown>(fn: fn_1) => Type<inferPipe2<string, fn_1>>
+>pipe : <fn extends (In: string) => unknown>(fn: fn) => Type<inferPipe2<string, fn>>
 >s => parseInt(s) : (s: string) => number
 >s : string
 >parseInt(s) : number
->parseInt : (string: string, radix?: number) => number
+>parseInt : (string: string, radix?: number | undefined) => number
 >s : string
 
