--- old.genericFunctionInference2.types
+++ new.genericFunctionInference2.types
@@= skipped -7, +7 lines =@@
 >state : S
 
 declare function combineReducers<S>(reducers: { [K in keyof S]: Reducer<S[K]> }): Reducer<S>;
->combineReducers : <S>(reducers: { [K in keyof S]: Reducer<S[K]>; }) => Reducer<S>
->reducers : { [K in keyof S]: Reducer<S[K]>; }
+>combineReducers : <S>(reducers: { [K in keyof S]: Reducer<S[K]> }) => Reducer<S>
+>reducers : { [K in keyof S]: Reducer<S[K]> }
 
 type MyState = { combined: { foo: number } };
 >MyState : MyState
@@= skipped -14, +14 lines =@@
 const myReducer1: Reducer<MyState> = combineReducers({
 >myReducer1 : Reducer<MyState>
 >combineReducers({    combined: combineReducers({ foo }),}) : Reducer<{ combined: { foo: number; }; }>
->combineReducers : <S>(reducers: { [K in keyof S]: Reducer<S[K]>; }) => Reducer<S>
+>combineReducers : <S>(reducers: { [K in keyof S]: Reducer<S[K]> }) => Reducer<S>
 >{    combined: combineReducers({ foo }),} : { combined: Reducer<{ foo: number; }>; }
 
     combined: combineReducers({ foo }),
 >combined : Reducer<{ foo: number; }>
 >combineReducers({ foo }) : Reducer<{ foo: number; }>
->combineReducers : <S>(reducers: { [K in keyof S]: Reducer<S[K]>; }) => Reducer<S>
+>combineReducers : <S>(reducers: { [K in keyof S]: Reducer<S[K]> }) => Reducer<S>
 >{ foo } : { foo: Reducer<number>; }
 >foo : Reducer<number>
 
@@= skipped -15, +15 lines =@@
 const myReducer2 = combineReducers({
 >myReducer2 : Reducer<{ combined: { foo: number; }; }>
 >combineReducers({    combined: combineReducers({ foo }),}) : Reducer<{ combined: { foo: number; }; }>
->combineReducers : <S>(reducers: { [K in keyof S]: Reducer<S[K]>; }) => Reducer<S>
+>combineReducers : <S>(reducers: { [K in keyof S]: Reducer<S[K]> }) => Reducer<S>
 >{    combined: combineReducers({ foo }),} : { combined: Reducer<{ foo: number; }>; }
 
     combined: combineReducers({ foo }),
 >combined : Reducer<{ foo: number; }>
 >combineReducers({ foo }) : Reducer<{ foo: number; }>
->combineReducers : <S>(reducers: { [K in keyof S]: Reducer<S[K]>; }) => Reducer<S>
+>combineReducers : <S>(reducers: { [K in keyof S]: Reducer<S[K]> }) => Reducer<S>
 >{ foo } : { foo: Reducer<number>; }
 >foo : Reducer<number>
 
