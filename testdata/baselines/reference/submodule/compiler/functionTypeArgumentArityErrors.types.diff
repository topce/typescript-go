--- old.functionTypeArgumentArityErrors.types
+++ new.functionTypeArgumentArityErrors.types
@@= skipped -2, +2 lines =@@
 === functionTypeArgumentArityErrors.ts ===
 // Overloaded functions with default type arguments
 declare function f1<A = any>(): void;
->f1 : { <A = any>(): void; <A_1, B, C, D = any>(): void; }
+>f1 : { <A>(): void; <A, B, C, D>(): void; }
 
 declare function f1<A, B, C, D = any>(): void;
->f1 : { <A_1 = any>(): void; <A, B, C, D = any>(): void; }
+>f1 : { <A>(): void; <A, B, C, D>(): void; }
 
 f1<number, number>();
 >f1<number, number>() : void
->f1 : { <A = any>(): void; <A, B, C, D = any>(): void; }
+>f1 : { <A>(): void; <A, B, C, D>(): void; }
 
 f1<number, number, number, number, number>();
 >f1<number, number, number, number, number>() : void
->f1 : { <A = any>(): void; <A, B, C, D = any>(): void; }
+>f1 : { <A>(): void; <A, B, C, D>(): void; }
 
 // Overloaded functions with no default type arguments
 declare function f2<A>(): void;
->f2 : { <A>(): void; <A_1, B, C>(): void; }
+>f2 : { <A>(): void; <A, B, C>(): void; }
 
 declare function f2<A, B, C>(): void;
->f2 : { <A_1>(): void; <A, B, C>(): void; }
+>f2 : { <A>(): void; <A, B, C>(): void; }
 
 f2<number, number>();
 >f2<number, number>() : void
@@= skipped -42, +42 lines =@@
 
 // Generic function with default type parameters
 declare function f4<A, B, C = any>(): void;
->f4 : <A, B, C = any>() => void
+>f4 : <A, B, C>() => void
 
 f4<number>();
 >f4<number>() : void
->f4 : <A, B, C = any>() => void
+>f4 : <A, B, C>() => void
 
 f4<number, number, number, number>();
 >f4<number, number, number, number>() : void
->f4 : <A, B, C = any>() => void
+>f4 : <A, B, C>() => void
 
 // Generic function with no default type arguments
 declare function f5<A, B>(): void;
