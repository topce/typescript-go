--- old.declarationEmitGlobalThisPreserved.js
+++ new.declarationEmitGlobalThisPreserved.js
@@= skipped -107, +107 lines =@@
 
 
 
-
-
-//// [declarationEmitGlobalThisPreserved.d.ts]
-export declare const a1: (isNaN: typeof globalThis.isNaN) => typeof globalThis.isNaN;
-export declare const a2: (isNaN: typeof globalThis.isNaN, bar?: typeof globalThis.isNaN) => typeof globalThis.isNaN;
-export declare const a3: (isNaN: number, bar: typeof globalThis.isNaN) => typeof globalThis.isNaN;
-export declare const a4: (isNaN: number) => typeof globalThis.isNaN;
-export declare const aObj: {
-    a1: (isNaN: typeof globalThis.isNaN) => typeof globalThis.isNaN;
-    a2: (isNaN: typeof globalThis.isNaN, bar?: typeof globalThis.isNaN) => typeof globalThis.isNaN;
-    a3: (isNaN: number, bar: typeof globalThis.isNaN) => typeof globalThis.isNaN;
-    a4: (isNaN: number) => typeof globalThis.isNaN;
+//// [declarationEmitGlobalThisPreserved.js]
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.AsClassProperty = exports.explicitlyTypedVariable = exports.A = exports.cObj = exports.bObj = exports.b4 = exports.b3 = exports.b2 = exports.b1 = exports.aObj = exports.a4 = exports.a3 = exports.a2 = exports.a1 = void 0;
+exports.c1 = c1;
+exports.c2 = c2;
+exports.c3 = c3;
+exports.c4 = c4;
+exports.d1 = d1;
+exports.d2 = d2;
+exports.d3 = d3;
+exports.d4 = d4;
+exports.fromParameter = fromParameter;
+exports.explicitlyTypedFunction = explicitlyTypedFunction;
+// Adding this makes tooltips fail too.
+// declare global {
+//     namespace isNaN {
+//         const prop: number;
+//     }
+// }
+// Broken inference cases.
+const a1 = (isNaN) => isNaN;
+exports.a1 = a1;
+const a2 = (isNaN, bar) => bar ?? isNaN;
+exports.a2 = a2;
+const a3 = (isNaN, bar) => bar;
+exports.a3 = a3;
+const a4 = (isNaN) => globalThis.isNaN;
+exports.a4 = a4;
+exports.aObj = {
+    a1: (isNaN) => isNaN,
+    a2: (isNaN, bar) => bar ?? isNaN,
+    a3: (isNaN, bar) => bar,
+    a4: (isNaN) => globalThis.isNaN,
 };
-export type a4Return = ReturnType<ReturnType<typeof a4>>;
-export type a4oReturn = ReturnType<ReturnType<typeof aObj['a4']>>;
-export declare const b1: (isNaN: typeof globalThis.isNaN) => typeof globalThis.isNaN;
-export declare const b2: (isNaN: typeof globalThis.isNaN, bar?: typeof globalThis.isNaN) => typeof globalThis.isNaN;
-export declare const b3: (isNaN: number, bar: typeof globalThis.isNaN) => typeof globalThis.isNaN;
-export declare const b4: (isNaN: number) => typeof globalThis.isNaN;
-export declare const bObj: {
-    b1: (isNaN: typeof globalThis.isNaN) => typeof globalThis.isNaN;
-    b2: (isNaN: typeof globalThis.isNaN, bar?: typeof globalThis.isNaN) => typeof globalThis.isNaN;
-    b3: (isNaN: number, bar: typeof globalThis.isNaN) => typeof globalThis.isNaN;
-    b4: (isNaN: number) => typeof globalThis.isNaN;
+const b1 = (isNaN) => isNaN;
+exports.b1 = b1;
+const b2 = (isNaN, bar) => bar ?? isNaN;
+exports.b2 = b2;
+const b3 = (isNaN, bar) => bar;
+exports.b3 = b3;
+const b4 = (isNaN) => globalThis.isNaN;
+exports.b4 = b4;
+exports.bObj = {
+    b1: (isNaN) => isNaN,
+    b2: (isNaN, bar) => bar ?? isNaN,
+    b3: (isNaN, bar) => bar,
+    b4: (isNaN) => globalThis.isNaN,
 };
-export type b4Return = ReturnType<ReturnType<typeof b4>>;
-export type b4oReturn = ReturnType<ReturnType<typeof bObj['b4']>>;
-export declare function c1(isNaN: typeof globalThis.isNaN): typeof globalThis.isNaN;
-export declare function c2(isNaN: typeof globalThis.isNaN, bar?: typeof globalThis.isNaN): typeof globalThis.isNaN;
-export declare function c3(isNaN: number, bar: typeof globalThis.isNaN): typeof globalThis.isNaN;
-export declare function c4(isNaN: number): typeof globalThis.isNaN;
-export declare const cObj: {
-    c1(isNaN: typeof globalThis.isNaN): typeof globalThis.isNaN;
-    c2(isNaN: typeof globalThis.isNaN, bar?: typeof globalThis.isNaN): typeof globalThis.isNaN;
-    c3(isNaN: number, bar: typeof globalThis.isNaN): typeof globalThis.isNaN;
-    c4(isNaN: number): typeof globalThis.isNaN;
+function c1(isNaN) { return isNaN; }
+function c2(isNaN, bar) { return bar ?? isNaN; }
+function c3(isNaN, bar) { return bar; }
+function c4(isNaN) { return globalThis.isNaN; }
+exports.cObj = {
+    c1(isNaN) { return isNaN; },
+    c2(isNaN, bar) { return bar ?? isNaN; },
+    c3(isNaN, bar) { return bar; },
+    c4(isNaN) { return globalThis.isNaN; },
 };
-export type c4Return = ReturnType<ReturnType<typeof c4>>;
-export type c4oReturn = ReturnType<ReturnType<typeof cObj['c4']>>;
-export declare function d1(): () => (isNaN: typeof globalThis.isNaN) => typeof globalThis.isNaN;
-export declare function d2(): () => (isNaN: typeof globalThis.isNaN, bar?: typeof globalThis.isNaN) => typeof globalThis.isNaN;
-export declare function d3(): () => (isNaN: number, bar: typeof globalThis.isNaN) => typeof globalThis.isNaN;
-export declare function d4(): () => (isNaN: number) => typeof globalThis.isNaN;
-export type d4Return = ReturnType<ReturnType<ReturnType<ReturnType<typeof d4>>>>;
-export declare class A {
-    method1(isNaN: typeof globalThis.isNaN): typeof globalThis.isNaN;
-    method2(isNaN: typeof globalThis.isNaN, bar?: typeof globalThis.isNaN): typeof globalThis.isNaN;
-    method3(isNaN: number, bar: typeof globalThis.isNaN): typeof globalThis.isNaN;
-    method4(isNaN: number): typeof globalThis.isNaN;
+function d1() {
+    const fn = (isNaN) => isNaN;
+    return function () { return fn; };
 }
-export declare function fromParameter(isNaN: number, bar: typeof globalThis.isNaN): () => {
-    bar: typeof globalThis.isNaN;
-};
-export declare const explicitlyTypedVariable: (isNaN: typeof globalThis.isNaN) => typeof globalThis.isNaN;
-export declare function explicitlyTypedFunction(isNaN: typeof globalThis.isNaN): typeof globalThis.isNaN;
-export type AsObjectProperty = {
-    isNaN: typeof globalThis.isNaN;
-};
-export declare class AsClassProperty {
-    isNaN?: typeof globalThis.isNaN;
+function d2() {
+    const fn = (isNaN, bar) => bar ?? isNaN;
+    return function () { return fn; };
 }
-export type AsFunctionType = (isNaN: typeof globalThis.isNaN) => typeof globalThis.isNaN;
+function d3() {
+    const fn = (isNaN, bar) => bar;
+    return function () { return fn; };
+}
+function d4() {
+    const fn = (isNaN) => globalThis.isNaN;
+    return function () { return fn; };
+}
+class A {
+    method1(isNaN) { return isNaN; }
+    method2(isNaN, bar) { return bar ?? isNaN; }
+    method3(isNaN, bar) { return bar; }
+    method4(isNaN) { return globalThis.isNaN; }
+}
+exports.A = A;
+function fromParameter(isNaN, bar) {
+    return function () { return { bar }; };
+}
+// Non-inference cases.
+const explicitlyTypedVariable = (isNaN) => isNaN;
+exports.explicitlyTypedVariable = explicitlyTypedVariable;
+function explicitlyTypedFunction(isNaN) {
+    return isNaN;
+}
+;
+class AsClassProperty {
+    isNaN;
+}
+exports.AsClassProperty = AsClassProperty;
