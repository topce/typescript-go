--- old.declarationEmitBindingPatternsUnused.js
+++ new.declarationEmitBindingPatternsUnused.js
@@= skipped -123, +123 lines =@@
 }
 
 //// [declarationEmitBindingPatternsUnused.js]
-// Resons we can't remove aliases that are not used in the function signature: 
-// 1.Causes duplicate identifier if we remove alias
 function duplicateIndetifiers({ name: alias, name: alias2 }) { }
 function duplicateIndetifiers2(name, { name: alias }) { }
 function duplicateIndetifiers3({ name: alias }, { name: alias2 }) { }
 let value = "";
-// 2.Can change in meaning for typeof value if we remove alias
 function shadowedVariable({ value: alias }) { return value; }
 function notReferenced({ name: alias }) {
 }
@@= skipped -79, +76 lines =@@
 let notReferencedCtorType;
 let referencedInSignartureReturnTypeCtorType;
 let referencedInSignartureParamTypeCtorType;
-
-
-//// [declarationEmitBindingPatternsUnused.d.ts]
-type Named = {
-    name: string;
-};
-declare function duplicateIndetifiers({ name: alias, name: alias2 }: Named): void;
-declare function duplicateIndetifiers2(name: string, { name: alias }: Named): void;
-declare function duplicateIndetifiers3({ name: alias }: Named, { name: alias2 }: Named): void;
-declare let value: string;
-declare function shadowedVariable({ value: alias }: {
-    value: string;
-}): typeof value;
-declare function notReferenced({ name: alias }: Named): void;
-declare function notReferencedNestedAlias({ p: { name: alias } }: {
-    p: Named;
-}): void;
-declare function notReferencedArrayAlias([a, b, { name: alias }]: Named[]): void;
-declare function referencedInCode({ name: alias }: Named): string;
-declare function referencedInSignarture({ name: alias }: Named): typeof alias;
-declare function referencedInSignartureKeyword({ function: alias }: {
-    function: string;
-}): typeof alias;
-declare function referencedInInferredType({ name: alias }: Named): {
-    name: typeof alias;
-};
-declare function referencedInNestedFunction({ name: alias }: Named): (p: typeof alias) => void;
-declare function referencedNestedAlias({ p: { name: alias } }: {
-    p: Named;
-}): typeof alias;
-declare function referencedArrayAlias([a, b, { name: alias }]: Named[]): typeof alias;
-declare class NotReferencedClass {
-    constructor({ name: alias }: Named);
-    set x({ name: alias }: Named);
-    m({ name: alias }: Named): void;
-}
-declare class ReferencedInCodeClas {
-    constructor({ name: alias }: Named);
-    set x({ name: alias }: Named);
-    m({ name: alias }: Named): void;
-}
-declare class ReferencedInSignartureClass {
-    constructor({ name: alias }: Named, p: typeof alias);
-    set x({ name: alias }: Named & {
-        o: typeof alias;
-    });
-    mReturnType({ name: alias }: Named): typeof alias;
-    mRerturnTypeNested({ name: alias }: Named): NonNullable<typeof alias>;
-    mParameter({ name: alias }: Named, p: typeof alias): any;
-}
-declare let notReferencedFnType: ({ name: alias }: Named) => void;
-declare let referencedInSignartureReturnTypeFnType: ({ name: alias }: Named) => typeof alias;
-declare let referencedInSignartureParamTypeFnType: ({ name: alias }: Named, p: typeof alias) => void;
-declare let notReferencedCtorType: new ({ name: alias }: Named) => void;
-declare let referencedInSignartureReturnTypeCtorType: new ({ name: alias }: Named) => typeof alias;
-declare let referencedInSignartureParamTypeCtorType: new ({ name: alias }: Named, p: typeof alias) => void;
-interface NotReferencedInterface {
-    ({ name: alias }: Named): void;
-    new ({ name: alias }: Named): void;
-    set x({ name: alias }: Named);
-    m({ name: alias }: Named): any;
-}
-interface ReferencedInSignartureInterface {
-    ({ name: alias }: Named, p: typeof alias): void;
-    ({ name: alias }: Named): typeof alias;
-    new ({ name: alias }: Named, p: typeof alias): void;
-    new ({ name: alias }: Named): typeof alias;
-    set x({ name: alias }: Named & {
-        o: typeof alias;
-    });
-    mReturnType({ name: alias }: Named): typeof alias;
-    mRerturnTypeNested({ name: alias }: Named): NonNullable<typeof alias>;
-    mParameter({ name: alias }: Named, p: typeof alias): any;
-}
