--- old.typedArrays.types
+++ new.typedArrays.types
@@= skipped -274, +274 lines =@@
 >typedArrays : any[]
 >0 : 0
 >Int8Array.from(obj) : Int8Array<ArrayBuffer>
->Int8Array.from : { (arrayLike: ArrayLike<number>): Int8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; (arrayLike: Iterable<number>): Int8Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; }
+>Int8Array.from : { (arrayLike: ArrayLike<number>): Int8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Int8Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; }
 >Int8Array : Int8ArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Int8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; (arrayLike: Iterable<number>): Int8Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Int8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Int8Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; }
 >obj : number[]
 
     typedArrays[1] = Uint8Array.from(obj);
@@= skipped -11, +11 lines =@@
 >typedArrays : any[]
 >1 : 1
 >Uint8Array.from(obj) : Uint8Array<ArrayBuffer>
->Uint8Array.from : { (arrayLike: ArrayLike<number>): Uint8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; (arrayLike: Iterable<number>): Uint8Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; }
+>Uint8Array.from : { (arrayLike: ArrayLike<number>): Uint8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Uint8Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; }
 >Uint8Array : Uint8ArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Uint8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; (arrayLike: Iterable<number>): Uint8Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Uint8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Uint8Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; }
 >obj : number[]
 
     typedArrays[2] = Int16Array.from(obj);
@@= skipped -11, +11 lines =@@
 >typedArrays : any[]
 >2 : 2
 >Int16Array.from(obj) : Int16Array<ArrayBuffer>
->Int16Array.from : { (arrayLike: ArrayLike<number>): Int16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; (arrayLike: Iterable<number>): Int16Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; }
+>Int16Array.from : { (arrayLike: ArrayLike<number>): Int16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Int16Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; }
 >Int16Array : Int16ArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Int16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; (arrayLike: Iterable<number>): Int16Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Int16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Int16Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; }
 >obj : number[]
 
     typedArrays[3] = Uint16Array.from(obj);
@@= skipped -11, +11 lines =@@
 >typedArrays : any[]
 >3 : 3
 >Uint16Array.from(obj) : Uint16Array<ArrayBuffer>
->Uint16Array.from : { (arrayLike: ArrayLike<number>): Uint16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; (arrayLike: Iterable<number>): Uint16Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; }
+>Uint16Array.from : { (arrayLike: ArrayLike<number>): Uint16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Uint16Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; }
 >Uint16Array : Uint16ArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Uint16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; (arrayLike: Iterable<number>): Uint16Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Uint16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Uint16Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; }
 >obj : number[]
 
     typedArrays[4] = Int32Array.from(obj);
@@= skipped -11, +11 lines =@@
 >typedArrays : any[]
 >4 : 4
 >Int32Array.from(obj) : Int32Array<ArrayBuffer>
->Int32Array.from : { (arrayLike: ArrayLike<number>): Int32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; (arrayLike: Iterable<number>): Int32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; }
+>Int32Array.from : { (arrayLike: ArrayLike<number>): Int32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Int32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; }
 >Int32Array : Int32ArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Int32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; (arrayLike: Iterable<number>): Int32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Int32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Int32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; }
 >obj : number[]
 
     typedArrays[5] = Uint32Array.from(obj);
@@= skipped -11, +11 lines =@@
 >typedArrays : any[]
 >5 : 5
 >Uint32Array.from(obj) : Uint32Array<ArrayBuffer>
->Uint32Array.from : { (arrayLike: ArrayLike<number>): Uint32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; (arrayLike: Iterable<number>): Uint32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; }
+>Uint32Array.from : { (arrayLike: ArrayLike<number>): Uint32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Uint32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; }
 >Uint32Array : Uint32ArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Uint32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; (arrayLike: Iterable<number>): Uint32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Uint32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Uint32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; }
 >obj : number[]
 
     typedArrays[6] = Float32Array.from(obj);
@@= skipped -11, +11 lines =@@
 >typedArrays : any[]
 >6 : 6
 >Float32Array.from(obj) : Float32Array<ArrayBuffer>
->Float32Array.from : { (arrayLike: ArrayLike<number>): Float32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; (arrayLike: Iterable<number>): Float32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; }
+>Float32Array.from : { (arrayLike: ArrayLike<number>): Float32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Float32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; }
 >Float32Array : Float32ArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Float32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; (arrayLike: Iterable<number>): Float32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Float32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Float32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; }
 >obj : number[]
 
     typedArrays[7] = Float64Array.from(obj);
@@= skipped -11, +11 lines =@@
 >typedArrays : any[]
 >7 : 7
 >Float64Array.from(obj) : Float64Array<ArrayBuffer>
->Float64Array.from : { (arrayLike: ArrayLike<number>): Float64Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; (arrayLike: Iterable<number>): Float64Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; }
+>Float64Array.from : { (arrayLike: ArrayLike<number>): Float64Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Float64Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; }
 >Float64Array : Float64ArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Float64Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; (arrayLike: Iterable<number>): Float64Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Float64Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Float64Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; }
 >obj : number[]
 
     typedArrays[8] = Uint8ClampedArray.from(obj);
@@= skipped -11, +11 lines =@@
 >typedArrays : any[]
 >8 : 8
 >Uint8ClampedArray.from(obj) : Uint8ClampedArray<ArrayBuffer>
->Uint8ClampedArray.from : { (arrayLike: ArrayLike<number>): Uint8ClampedArray<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; (arrayLike: Iterable<number>): Uint8ClampedArray<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; }
+>Uint8ClampedArray.from : { (arrayLike: ArrayLike<number>): Uint8ClampedArray<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Uint8ClampedArray<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; }
 >Uint8ClampedArray : Uint8ClampedArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Uint8ClampedArray<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; (arrayLike: Iterable<number>): Uint8ClampedArray<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Uint8ClampedArray<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Uint8ClampedArray<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; }
 >obj : number[]
 
     return typedArrays;
@@= skipped -23, +23 lines =@@
 >typedArrays : any[]
 >0 : 0
 >Int8Array.from(obj) : Int8Array<ArrayBuffer>
->Int8Array.from : { (arrayLike: ArrayLike<number>): Int8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; (arrayLike: Iterable<number>): Int8Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; }
+>Int8Array.from : { (arrayLike: ArrayLike<number>): Int8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Int8Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; }
 >Int8Array : Int8ArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Int8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; (arrayLike: Iterable<number>): Int8Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Int8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Int8Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; }
 >obj : ArrayLike<number>
 
     typedArrays[1] = Uint8Array.from(obj);
@@= skipped -11, +11 lines =@@
 >typedArrays : any[]
 >1 : 1
 >Uint8Array.from(obj) : Uint8Array<ArrayBuffer>
->Uint8Array.from : { (arrayLike: ArrayLike<number>): Uint8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; (arrayLike: Iterable<number>): Uint8Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; }
+>Uint8Array.from : { (arrayLike: ArrayLike<number>): Uint8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Uint8Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; }
 >Uint8Array : Uint8ArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Uint8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; (arrayLike: Iterable<number>): Uint8Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Uint8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Uint8Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; }
 >obj : ArrayLike<number>
 
     typedArrays[2] = Int16Array.from(obj);
@@= skipped -11, +11 lines =@@
 >typedArrays : any[]
 >2 : 2
 >Int16Array.from(obj) : Int16Array<ArrayBuffer>
->Int16Array.from : { (arrayLike: ArrayLike<number>): Int16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; (arrayLike: Iterable<number>): Int16Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; }
+>Int16Array.from : { (arrayLike: ArrayLike<number>): Int16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Int16Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; }
 >Int16Array : Int16ArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Int16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; (arrayLike: Iterable<number>): Int16Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Int16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Int16Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; }
 >obj : ArrayLike<number>
 
     typedArrays[3] = Uint16Array.from(obj);
@@= skipped -11, +11 lines =@@
 >typedArrays : any[]
 >3 : 3
 >Uint16Array.from(obj) : Uint16Array<ArrayBuffer>
->Uint16Array.from : { (arrayLike: ArrayLike<number>): Uint16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; (arrayLike: Iterable<number>): Uint16Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; }
+>Uint16Array.from : { (arrayLike: ArrayLike<number>): Uint16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Uint16Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; }
 >Uint16Array : Uint16ArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Uint16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; (arrayLike: Iterable<number>): Uint16Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Uint16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Uint16Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; }
 >obj : ArrayLike<number>
 
     typedArrays[4] = Int32Array.from(obj);
@@= skipped -11, +11 lines =@@
 >typedArrays : any[]
 >4 : 4
 >Int32Array.from(obj) : Int32Array<ArrayBuffer>
->Int32Array.from : { (arrayLike: ArrayLike<number>): Int32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; (arrayLike: Iterable<number>): Int32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; }
+>Int32Array.from : { (arrayLike: ArrayLike<number>): Int32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Int32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; }
 >Int32Array : Int32ArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Int32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; (arrayLike: Iterable<number>): Int32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Int32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Int32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; }
 >obj : ArrayLike<number>
 
     typedArrays[5] = Uint32Array.from(obj);
@@= skipped -11, +11 lines =@@
 >typedArrays : any[]
 >5 : 5
 >Uint32Array.from(obj) : Uint32Array<ArrayBuffer>
->Uint32Array.from : { (arrayLike: ArrayLike<number>): Uint32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; (arrayLike: Iterable<number>): Uint32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; }
+>Uint32Array.from : { (arrayLike: ArrayLike<number>): Uint32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Uint32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; }
 >Uint32Array : Uint32ArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Uint32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; (arrayLike: Iterable<number>): Uint32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Uint32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Uint32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; }
 >obj : ArrayLike<number>
 
     typedArrays[6] = Float32Array.from(obj);
@@= skipped -11, +11 lines =@@
 >typedArrays : any[]
 >6 : 6
 >Float32Array.from(obj) : Float32Array<ArrayBuffer>
->Float32Array.from : { (arrayLike: ArrayLike<number>): Float32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; (arrayLike: Iterable<number>): Float32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; }
+>Float32Array.from : { (arrayLike: ArrayLike<number>): Float32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Float32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; }
 >Float32Array : Float32ArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Float32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; (arrayLike: Iterable<number>): Float32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Float32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Float32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; }
 >obj : ArrayLike<number>
 
     typedArrays[7] = Float64Array.from(obj);
@@= skipped -11, +11 lines =@@
 >typedArrays : any[]
 >7 : 7
 >Float64Array.from(obj) : Float64Array<ArrayBuffer>
->Float64Array.from : { (arrayLike: ArrayLike<number>): Float64Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; (arrayLike: Iterable<number>): Float64Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; }
+>Float64Array.from : { (arrayLike: ArrayLike<number>): Float64Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Float64Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; }
 >Float64Array : Float64ArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Float64Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; (arrayLike: Iterable<number>): Float64Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Float64Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Float64Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; }
 >obj : ArrayLike<number>
 
     typedArrays[8] = Uint8ClampedArray.from(obj);
@@= skipped -11, +11 lines =@@
 >typedArrays : any[]
 >8 : 8
 >Uint8ClampedArray.from(obj) : Uint8ClampedArray<ArrayBuffer>
->Uint8ClampedArray.from : { (arrayLike: ArrayLike<number>): Uint8ClampedArray<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; (arrayLike: Iterable<number>): Uint8ClampedArray<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; }
+>Uint8ClampedArray.from : { (arrayLike: ArrayLike<number>): Uint8ClampedArray<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Uint8ClampedArray<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; }
 >Uint8ClampedArray : Uint8ClampedArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Uint8ClampedArray<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; (arrayLike: Iterable<number>): Uint8ClampedArray<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Uint8ClampedArray<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Uint8ClampedArray<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; }
 >obj : ArrayLike<number>
 
     return typedArrays;
@@= skipped -283, +283 lines =@@
 >typedArrays : any[]
 >0 : 0
 >Int8Array.from(obj, mapFn) : Int8Array<ArrayBuffer>
->Int8Array.from : { (arrayLike: ArrayLike<number>): Int8Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; (arrayLike: Iterable<number>): Int8Array<ArrayBuffer>; <T_1>(arrayLike: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; }
+>Int8Array.from : { (arrayLike: ArrayLike<number>): Int8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Int8Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; }
 >Int8Array : Int8ArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Int8Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; (arrayLike: Iterable<number>): Int8Array<ArrayBuffer>; <T_1>(arrayLike: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Int8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Int8Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; }
 >obj : ArrayLike<T>
 >mapFn : (n: T, v: number) => number
 
@@= skipped -12, +12 lines =@@
 >typedArrays : any[]
 >1 : 1
 >Uint8Array.from(obj, mapFn) : Uint8Array<ArrayBuffer>
->Uint8Array.from : { (arrayLike: ArrayLike<number>): Uint8Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; (arrayLike: Iterable<number>): Uint8Array<ArrayBuffer>; <T_1>(arrayLike: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; }
+>Uint8Array.from : { (arrayLike: ArrayLike<number>): Uint8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Uint8Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; }
 >Uint8Array : Uint8ArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Uint8Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; (arrayLike: Iterable<number>): Uint8Array<ArrayBuffer>; <T_1>(arrayLike: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Uint8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Uint8Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; }
 >obj : ArrayLike<T>
 >mapFn : (n: T, v: number) => number
 
@@= skipped -12, +12 lines =@@
 >typedArrays : any[]
 >2 : 2
 >Int16Array.from(obj, mapFn) : Int16Array<ArrayBuffer>
->Int16Array.from : { (arrayLike: ArrayLike<number>): Int16Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; (arrayLike: Iterable<number>): Int16Array<ArrayBuffer>; <T_1>(arrayLike: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; }
+>Int16Array.from : { (arrayLike: ArrayLike<number>): Int16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Int16Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; }
 >Int16Array : Int16ArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Int16Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; (arrayLike: Iterable<number>): Int16Array<ArrayBuffer>; <T_1>(arrayLike: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Int16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Int16Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; }
 >obj : ArrayLike<T>
 >mapFn : (n: T, v: number) => number
 
@@= skipped -12, +12 lines =@@
 >typedArrays : any[]
 >3 : 3
 >Uint16Array.from(obj, mapFn) : Uint16Array<ArrayBuffer>
->Uint16Array.from : { (arrayLike: ArrayLike<number>): Uint16Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; (arrayLike: Iterable<number>): Uint16Array<ArrayBuffer>; <T_1>(arrayLike: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; }
+>Uint16Array.from : { (arrayLike: ArrayLike<number>): Uint16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Uint16Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; }
 >Uint16Array : Uint16ArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Uint16Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; (arrayLike: Iterable<number>): Uint16Array<ArrayBuffer>; <T_1>(arrayLike: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Uint16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Uint16Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; }
 >obj : ArrayLike<T>
 >mapFn : (n: T, v: number) => number
 
@@= skipped -12, +12 lines =@@
 >typedArrays : any[]
 >4 : 4
 >Int32Array.from(obj, mapFn) : Int32Array<ArrayBuffer>
->Int32Array.from : { (arrayLike: ArrayLike<number>): Int32Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; (arrayLike: Iterable<number>): Int32Array<ArrayBuffer>; <T_1>(arrayLike: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; }
+>Int32Array.from : { (arrayLike: ArrayLike<number>): Int32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Int32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; }
 >Int32Array : Int32ArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Int32Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; (arrayLike: Iterable<number>): Int32Array<ArrayBuffer>; <T_1>(arrayLike: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Int32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Int32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; }
 >obj : ArrayLike<T>
 >mapFn : (n: T, v: number) => number
 
@@= skipped -12, +12 lines =@@
 >typedArrays : any[]
 >5 : 5
 >Uint32Array.from(obj, mapFn) : Uint32Array<ArrayBuffer>
->Uint32Array.from : { (arrayLike: ArrayLike<number>): Uint32Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; (arrayLike: Iterable<number>): Uint32Array<ArrayBuffer>; <T_1>(arrayLike: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; }
+>Uint32Array.from : { (arrayLike: ArrayLike<number>): Uint32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Uint32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; }
 >Uint32Array : Uint32ArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Uint32Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; (arrayLike: Iterable<number>): Uint32Array<ArrayBuffer>; <T_1>(arrayLike: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Uint32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Uint32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; }
 >obj : ArrayLike<T>
 >mapFn : (n: T, v: number) => number
 
@@= skipped -12, +12 lines =@@
 >typedArrays : any[]
 >6 : 6
 >Float32Array.from(obj, mapFn) : Float32Array<ArrayBuffer>
->Float32Array.from : { (arrayLike: ArrayLike<number>): Float32Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; (arrayLike: Iterable<number>): Float32Array<ArrayBuffer>; <T_1>(arrayLike: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; }
+>Float32Array.from : { (arrayLike: ArrayLike<number>): Float32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Float32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; }
 >Float32Array : Float32ArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Float32Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; (arrayLike: Iterable<number>): Float32Array<ArrayBuffer>; <T_1>(arrayLike: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Float32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Float32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; }
 >obj : ArrayLike<T>
 >mapFn : (n: T, v: number) => number
 
@@= skipped -12, +12 lines =@@
 >typedArrays : any[]
 >7 : 7
 >Float64Array.from(obj, mapFn) : Float64Array<ArrayBuffer>
->Float64Array.from : { (arrayLike: ArrayLike<number>): Float64Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; (arrayLike: Iterable<number>): Float64Array<ArrayBuffer>; <T_1>(arrayLike: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; }
+>Float64Array.from : { (arrayLike: ArrayLike<number>): Float64Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Float64Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; }
 >Float64Array : Float64ArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Float64Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; (arrayLike: Iterable<number>): Float64Array<ArrayBuffer>; <T_1>(arrayLike: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Float64Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Float64Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; }
 >obj : ArrayLike<T>
 >mapFn : (n: T, v: number) => number
 
@@= skipped -12, +12 lines =@@
 >typedArrays : any[]
 >8 : 8
 >Uint8ClampedArray.from(obj, mapFn) : Uint8ClampedArray<ArrayBuffer>
->Uint8ClampedArray.from : { (arrayLike: ArrayLike<number>): Uint8ClampedArray<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; (arrayLike: Iterable<number>): Uint8ClampedArray<ArrayBuffer>; <T_1>(arrayLike: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; }
+>Uint8ClampedArray.from : { (arrayLike: ArrayLike<number>): Uint8ClampedArray<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Uint8ClampedArray<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; }
 >Uint8ClampedArray : Uint8ClampedArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Uint8ClampedArray<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; (arrayLike: Iterable<number>): Uint8ClampedArray<ArrayBuffer>; <T_1>(arrayLike: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Uint8ClampedArray<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Uint8ClampedArray<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; }
 >obj : ArrayLike<T>
 >mapFn : (n: T, v: number) => number
 
@@= skipped -27, +27 lines =@@
 >typedArrays : any[]
 >0 : 0
 >Int8Array.from(obj, mapFn) : Int8Array<ArrayBuffer>
->Int8Array.from : { (arrayLike: ArrayLike<number>): Int8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; (arrayLike: Iterable<number>): Int8Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; }
+>Int8Array.from : { (arrayLike: ArrayLike<number>): Int8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Int8Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; }
 >Int8Array : Int8ArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Int8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; (arrayLike: Iterable<number>): Int8Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Int8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Int8Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; }
 >obj : ArrayLike<number>
 >mapFn : (n: number, v: number) => number
 
@@= skipped -12, +12 lines =@@
 >typedArrays : any[]
 >1 : 1
 >Uint8Array.from(obj, mapFn) : Uint8Array<ArrayBuffer>
->Uint8Array.from : { (arrayLike: ArrayLike<number>): Uint8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; (arrayLike: Iterable<number>): Uint8Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; }
+>Uint8Array.from : { (arrayLike: ArrayLike<number>): Uint8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Uint8Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; }
 >Uint8Array : Uint8ArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Uint8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; (arrayLike: Iterable<number>): Uint8Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Uint8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Uint8Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; }
 >obj : ArrayLike<number>
 >mapFn : (n: number, v: number) => number
 
@@= skipped -12, +12 lines =@@
 >typedArrays : any[]
 >2 : 2
 >Int16Array.from(obj, mapFn) : Int16Array<ArrayBuffer>
->Int16Array.from : { (arrayLike: ArrayLike<number>): Int16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; (arrayLike: Iterable<number>): Int16Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; }
+>Int16Array.from : { (arrayLike: ArrayLike<number>): Int16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Int16Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; }
 >Int16Array : Int16ArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Int16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; (arrayLike: Iterable<number>): Int16Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Int16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Int16Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; }
 >obj : ArrayLike<number>
 >mapFn : (n: number, v: number) => number
 
@@= skipped -12, +12 lines =@@
 >typedArrays : any[]
 >3 : 3
 >Uint16Array.from(obj, mapFn) : Uint16Array<ArrayBuffer>
->Uint16Array.from : { (arrayLike: ArrayLike<number>): Uint16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; (arrayLike: Iterable<number>): Uint16Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; }
+>Uint16Array.from : { (arrayLike: ArrayLike<number>): Uint16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Uint16Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; }
 >Uint16Array : Uint16ArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Uint16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; (arrayLike: Iterable<number>): Uint16Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Uint16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Uint16Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; }
 >obj : ArrayLike<number>
 >mapFn : (n: number, v: number) => number
 
@@= skipped -12, +12 lines =@@
 >typedArrays : any[]
 >4 : 4
 >Int32Array.from(obj, mapFn) : Int32Array<ArrayBuffer>
->Int32Array.from : { (arrayLike: ArrayLike<number>): Int32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; (arrayLike: Iterable<number>): Int32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; }
+>Int32Array.from : { (arrayLike: ArrayLike<number>): Int32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Int32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; }
 >Int32Array : Int32ArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Int32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; (arrayLike: Iterable<number>): Int32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Int32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Int32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; }
 >obj : ArrayLike<number>
 >mapFn : (n: number, v: number) => number
 
@@= skipped -12, +12 lines =@@
 >typedArrays : any[]
 >5 : 5
 >Uint32Array.from(obj, mapFn) : Uint32Array<ArrayBuffer>
->Uint32Array.from : { (arrayLike: ArrayLike<number>): Uint32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; (arrayLike: Iterable<number>): Uint32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; }
+>Uint32Array.from : { (arrayLike: ArrayLike<number>): Uint32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Uint32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; }
 >Uint32Array : Uint32ArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Uint32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; (arrayLike: Iterable<number>): Uint32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Uint32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Uint32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; }
 >obj : ArrayLike<number>
 >mapFn : (n: number, v: number) => number
 
@@= skipped -12, +12 lines =@@
 >typedArrays : any[]
 >6 : 6
 >Float32Array.from(obj, mapFn) : Float32Array<ArrayBuffer>
->Float32Array.from : { (arrayLike: ArrayLike<number>): Float32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; (arrayLike: Iterable<number>): Float32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; }
+>Float32Array.from : { (arrayLike: ArrayLike<number>): Float32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Float32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; }
 >Float32Array : Float32ArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Float32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; (arrayLike: Iterable<number>): Float32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Float32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Float32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; }
 >obj : ArrayLike<number>
 >mapFn : (n: number, v: number) => number
 
@@= skipped -12, +12 lines =@@
 >typedArrays : any[]
 >7 : 7
 >Float64Array.from(obj, mapFn) : Float64Array<ArrayBuffer>
->Float64Array.from : { (arrayLike: ArrayLike<number>): Float64Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; (arrayLike: Iterable<number>): Float64Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; }
+>Float64Array.from : { (arrayLike: ArrayLike<number>): Float64Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Float64Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; }
 >Float64Array : Float64ArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Float64Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; (arrayLike: Iterable<number>): Float64Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Float64Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Float64Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; }
 >obj : ArrayLike<number>
 >mapFn : (n: number, v: number) => number
 
@@= skipped -12, +12 lines =@@
 >typedArrays : any[]
 >8 : 8
 >Uint8ClampedArray.from(obj, mapFn) : Uint8ClampedArray<ArrayBuffer>
->Uint8ClampedArray.from : { (arrayLike: ArrayLike<number>): Uint8ClampedArray<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; (arrayLike: Iterable<number>): Uint8ClampedArray<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; }
+>Uint8ClampedArray.from : { (arrayLike: ArrayLike<number>): Uint8ClampedArray<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Uint8ClampedArray<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; }
 >Uint8ClampedArray : Uint8ClampedArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Uint8ClampedArray<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; (arrayLike: Iterable<number>): Uint8ClampedArray<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Uint8ClampedArray<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Uint8ClampedArray<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; }
 >obj : ArrayLike<number>
 >mapFn : (n: number, v: number) => number
 
@@= skipped -28, +28 lines =@@
 >typedArrays : any[]
 >0 : 0
 >Int8Array.from(obj, mapFn, thisArg) : Int8Array<ArrayBuffer>
->Int8Array.from : { (arrayLike: ArrayLike<number>): Int8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; (arrayLike: Iterable<number>): Int8Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; }
+>Int8Array.from : { (arrayLike: ArrayLike<number>): Int8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Int8Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; }
 >Int8Array : Int8ArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Int8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; (arrayLike: Iterable<number>): Int8Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Int8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Int8Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; }
 >obj : ArrayLike<number>
 >mapFn : (n: number, v: number) => number
 >thisArg : {}
@@= skipped -13, +13 lines =@@
 >typedArrays : any[]
 >1 : 1
 >Uint8Array.from(obj, mapFn, thisArg) : Uint8Array<ArrayBuffer>
->Uint8Array.from : { (arrayLike: ArrayLike<number>): Uint8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; (arrayLike: Iterable<number>): Uint8Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; }
+>Uint8Array.from : { (arrayLike: ArrayLike<number>): Uint8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Uint8Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; }
 >Uint8Array : Uint8ArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Uint8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; (arrayLike: Iterable<number>): Uint8Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Uint8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Uint8Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; }
 >obj : ArrayLike<number>
 >mapFn : (n: number, v: number) => number
 >thisArg : {}
@@= skipped -13, +13 lines =@@
 >typedArrays : any[]
 >2 : 2
 >Int16Array.from(obj, mapFn, thisArg) : Int16Array<ArrayBuffer>
->Int16Array.from : { (arrayLike: ArrayLike<number>): Int16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; (arrayLike: Iterable<number>): Int16Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; }
+>Int16Array.from : { (arrayLike: ArrayLike<number>): Int16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Int16Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; }
 >Int16Array : Int16ArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Int16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; (arrayLike: Iterable<number>): Int16Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Int16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Int16Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; }
 >obj : ArrayLike<number>
 >mapFn : (n: number, v: number) => number
 >thisArg : {}
@@= skipped -13, +13 lines =@@
 >typedArrays : any[]
 >3 : 3
 >Uint16Array.from(obj, mapFn, thisArg) : Uint16Array<ArrayBuffer>
->Uint16Array.from : { (arrayLike: ArrayLike<number>): Uint16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; (arrayLike: Iterable<number>): Uint16Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; }
+>Uint16Array.from : { (arrayLike: ArrayLike<number>): Uint16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Uint16Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; }
 >Uint16Array : Uint16ArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Uint16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; (arrayLike: Iterable<number>): Uint16Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Uint16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Uint16Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; }
 >obj : ArrayLike<number>
 >mapFn : (n: number, v: number) => number
 >thisArg : {}
@@= skipped -13, +13 lines =@@
 >typedArrays : any[]
 >4 : 4
 >Int32Array.from(obj, mapFn, thisArg) : Int32Array<ArrayBuffer>
->Int32Array.from : { (arrayLike: ArrayLike<number>): Int32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; (arrayLike: Iterable<number>): Int32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; }
+>Int32Array.from : { (arrayLike: ArrayLike<number>): Int32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Int32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; }
 >Int32Array : Int32ArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Int32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; (arrayLike: Iterable<number>): Int32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Int32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Int32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; }
 >obj : ArrayLike<number>
 >mapFn : (n: number, v: number) => number
 >thisArg : {}
@@= skipped -13, +13 lines =@@
 >typedArrays : any[]
 >5 : 5
 >Uint32Array.from(obj, mapFn, thisArg) : Uint32Array<ArrayBuffer>
->Uint32Array.from : { (arrayLike: ArrayLike<number>): Uint32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; (arrayLike: Iterable<number>): Uint32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; }
+>Uint32Array.from : { (arrayLike: ArrayLike<number>): Uint32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Uint32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; }
 >Uint32Array : Uint32ArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Uint32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; (arrayLike: Iterable<number>): Uint32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Uint32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Uint32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; }
 >obj : ArrayLike<number>
 >mapFn : (n: number, v: number) => number
 >thisArg : {}
@@= skipped -13, +13 lines =@@
 >typedArrays : any[]
 >6 : 6
 >Float32Array.from(obj, mapFn, thisArg) : Float32Array<ArrayBuffer>
->Float32Array.from : { (arrayLike: ArrayLike<number>): Float32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; (arrayLike: Iterable<number>): Float32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; }
+>Float32Array.from : { (arrayLike: ArrayLike<number>): Float32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Float32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; }
 >Float32Array : Float32ArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Float32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; (arrayLike: Iterable<number>): Float32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Float32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Float32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; }
 >obj : ArrayLike<number>
 >mapFn : (n: number, v: number) => number
 >thisArg : {}
@@= skipped -13, +13 lines =@@
 >typedArrays : any[]
 >7 : 7
 >Float64Array.from(obj, mapFn, thisArg) : Float64Array<ArrayBuffer>
->Float64Array.from : { (arrayLike: ArrayLike<number>): Float64Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; (arrayLike: Iterable<number>): Float64Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; }
+>Float64Array.from : { (arrayLike: ArrayLike<number>): Float64Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Float64Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; }
 >Float64Array : Float64ArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Float64Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; (arrayLike: Iterable<number>): Float64Array<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Float64Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Float64Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; }
 >obj : ArrayLike<number>
 >mapFn : (n: number, v: number) => number
 >thisArg : {}
@@= skipped -13, +13 lines =@@
 >typedArrays : any[]
 >8 : 8
 >Uint8ClampedArray.from(obj, mapFn, thisArg) : Uint8ClampedArray<ArrayBuffer>
->Uint8ClampedArray.from : { (arrayLike: ArrayLike<number>): Uint8ClampedArray<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; (arrayLike: Iterable<number>): Uint8ClampedArray<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; }
+>Uint8ClampedArray.from : { (arrayLike: ArrayLike<number>): Uint8ClampedArray<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Uint8ClampedArray<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; }
 >Uint8ClampedArray : Uint8ClampedArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Uint8ClampedArray<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; (arrayLike: Iterable<number>): Uint8ClampedArray<ArrayBuffer>; <T>(arrayLike: Iterable<T>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Uint8ClampedArray<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Uint8ClampedArray<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; }
 >obj : ArrayLike<number>
 >mapFn : (n: number, v: number) => number
 >thisArg : {}
@@= skipped -29, +29 lines =@@
 >typedArrays : any[]
 >0 : 0
 >Int8Array.from(obj, mapFn, thisArg) : Int8Array<ArrayBuffer>
->Int8Array.from : { (arrayLike: ArrayLike<number>): Int8Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; (arrayLike: Iterable<number>): Int8Array<ArrayBuffer>; <T_1>(arrayLike: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; }
+>Int8Array.from : { (arrayLike: ArrayLike<number>): Int8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Int8Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; }
 >Int8Array : Int8ArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Int8Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; (arrayLike: Iterable<number>): Int8Array<ArrayBuffer>; <T_1>(arrayLike: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Int8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Int8Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int8Array<ArrayBuffer>; }
 >obj : ArrayLike<T>
 >mapFn : (n: T, v: number) => number
 >thisArg : {}
@@= skipped -13, +13 lines =@@
 >typedArrays : any[]
 >1 : 1
 >Uint8Array.from(obj, mapFn, thisArg) : Uint8Array<ArrayBuffer>
->Uint8Array.from : { (arrayLike: ArrayLike<number>): Uint8Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; (arrayLike: Iterable<number>): Uint8Array<ArrayBuffer>; <T_1>(arrayLike: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; }
+>Uint8Array.from : { (arrayLike: ArrayLike<number>): Uint8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Uint8Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; }
 >Uint8Array : Uint8ArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Uint8Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; (arrayLike: Iterable<number>): Uint8Array<ArrayBuffer>; <T_1>(arrayLike: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Uint8Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Uint8Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8Array<ArrayBuffer>; }
 >obj : ArrayLike<T>
 >mapFn : (n: T, v: number) => number
 >thisArg : {}
@@= skipped -13, +13 lines =@@
 >typedArrays : any[]
 >2 : 2
 >Int16Array.from(obj, mapFn, thisArg) : Int16Array<ArrayBuffer>
->Int16Array.from : { (arrayLike: ArrayLike<number>): Int16Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; (arrayLike: Iterable<number>): Int16Array<ArrayBuffer>; <T_1>(arrayLike: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; }
+>Int16Array.from : { (arrayLike: ArrayLike<number>): Int16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Int16Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; }
 >Int16Array : Int16ArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Int16Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; (arrayLike: Iterable<number>): Int16Array<ArrayBuffer>; <T_1>(arrayLike: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Int16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Int16Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int16Array<ArrayBuffer>; }
 >obj : ArrayLike<T>
 >mapFn : (n: T, v: number) => number
 >thisArg : {}
@@= skipped -13, +13 lines =@@
 >typedArrays : any[]
 >3 : 3
 >Uint16Array.from(obj, mapFn, thisArg) : Uint16Array<ArrayBuffer>
->Uint16Array.from : { (arrayLike: ArrayLike<number>): Uint16Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; (arrayLike: Iterable<number>): Uint16Array<ArrayBuffer>; <T_1>(arrayLike: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; }
+>Uint16Array.from : { (arrayLike: ArrayLike<number>): Uint16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Uint16Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; }
 >Uint16Array : Uint16ArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Uint16Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; (arrayLike: Iterable<number>): Uint16Array<ArrayBuffer>; <T_1>(arrayLike: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Uint16Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Uint16Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint16Array<ArrayBuffer>; }
 >obj : ArrayLike<T>
 >mapFn : (n: T, v: number) => number
 >thisArg : {}
@@= skipped -13, +13 lines =@@
 >typedArrays : any[]
 >4 : 4
 >Int32Array.from(obj, mapFn, thisArg) : Int32Array<ArrayBuffer>
->Int32Array.from : { (arrayLike: ArrayLike<number>): Int32Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; (arrayLike: Iterable<number>): Int32Array<ArrayBuffer>; <T_1>(arrayLike: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; }
+>Int32Array.from : { (arrayLike: ArrayLike<number>): Int32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Int32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; }
 >Int32Array : Int32ArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Int32Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; (arrayLike: Iterable<number>): Int32Array<ArrayBuffer>; <T_1>(arrayLike: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Int32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Int32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Int32Array<ArrayBuffer>; }
 >obj : ArrayLike<T>
 >mapFn : (n: T, v: number) => number
 >thisArg : {}
@@= skipped -13, +13 lines =@@
 >typedArrays : any[]
 >5 : 5
 >Uint32Array.from(obj, mapFn, thisArg) : Uint32Array<ArrayBuffer>
->Uint32Array.from : { (arrayLike: ArrayLike<number>): Uint32Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; (arrayLike: Iterable<number>): Uint32Array<ArrayBuffer>; <T_1>(arrayLike: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; }
+>Uint32Array.from : { (arrayLike: ArrayLike<number>): Uint32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Uint32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; }
 >Uint32Array : Uint32ArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Uint32Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; (arrayLike: Iterable<number>): Uint32Array<ArrayBuffer>; <T_1>(arrayLike: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Uint32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Uint32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint32Array<ArrayBuffer>; }
 >obj : ArrayLike<T>
 >mapFn : (n: T, v: number) => number
 >thisArg : {}
@@= skipped -13, +13 lines =@@
 >typedArrays : any[]
 >6 : 6
 >Float32Array.from(obj, mapFn, thisArg) : Float32Array<ArrayBuffer>
->Float32Array.from : { (arrayLike: ArrayLike<number>): Float32Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; (arrayLike: Iterable<number>): Float32Array<ArrayBuffer>; <T_1>(arrayLike: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; }
+>Float32Array.from : { (arrayLike: ArrayLike<number>): Float32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Float32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; }
 >Float32Array : Float32ArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Float32Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; (arrayLike: Iterable<number>): Float32Array<ArrayBuffer>; <T_1>(arrayLike: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Float32Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Float32Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float32Array<ArrayBuffer>; }
 >obj : ArrayLike<T>
 >mapFn : (n: T, v: number) => number
 >thisArg : {}
@@= skipped -13, +13 lines =@@
 >typedArrays : any[]
 >7 : 7
 >Float64Array.from(obj, mapFn, thisArg) : Float64Array<ArrayBuffer>
->Float64Array.from : { (arrayLike: ArrayLike<number>): Float64Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; (arrayLike: Iterable<number>): Float64Array<ArrayBuffer>; <T_1>(arrayLike: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; }
+>Float64Array.from : { (arrayLike: ArrayLike<number>): Float64Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Float64Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; }
 >Float64Array : Float64ArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Float64Array<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; (arrayLike: Iterable<number>): Float64Array<ArrayBuffer>; <T_1>(arrayLike: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Float64Array<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Float64Array<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Float64Array<ArrayBuffer>; }
 >obj : ArrayLike<T>
 >mapFn : (n: T, v: number) => number
 >thisArg : {}
@@= skipped -13, +13 lines =@@
 >typedArrays : any[]
 >8 : 8
 >Uint8ClampedArray.from(obj, mapFn, thisArg) : Uint8ClampedArray<ArrayBuffer>
->Uint8ClampedArray.from : { (arrayLike: ArrayLike<number>): Uint8ClampedArray<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; (arrayLike: Iterable<number>): Uint8ClampedArray<ArrayBuffer>; <T_1>(arrayLike: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; }
+>Uint8ClampedArray.from : { (arrayLike: ArrayLike<number>): Uint8ClampedArray<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Uint8ClampedArray<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; }
 >Uint8ClampedArray : Uint8ClampedArrayConstructor
->from : { (arrayLike: ArrayLike<number>): Uint8ClampedArray<ArrayBuffer>; <T_1>(arrayLike: ArrayLike<T_1>, mapfn: (v: T_1, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; (arrayLike: Iterable<number>): Uint8ClampedArray<ArrayBuffer>; <T_1>(arrayLike: Iterable<T_1>, mapfn?: (v: T_1, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; }
+>from : { (arrayLike: ArrayLike<number>): Uint8ClampedArray<ArrayBuffer>; <T>(arrayLike: ArrayLike<T>, mapfn: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; (arrayLike: Iterable<number, any, any>): Uint8ClampedArray<ArrayBuffer>; <T>(arrayLike: Iterable<T, any, any>, mapfn?: (v: T, k: number) => number, thisArg?: any): Uint8ClampedArray<ArrayBuffer>; }
 >obj : ArrayLike<T>
 >mapFn : (n: T, v: number) => number
 >thisArg : {}
