--- old.fallbackToBindingPatternForTypeInference.types
+++ new.fallbackToBindingPatternForTypeInference.types
@@= skipped -8, +8 lines =@@
 trans(({a}) => a);
 >trans(({a}) => a) : number
 >trans : <T>(f: (x: T) => string) => number
->({a}) => a : ({ a }: { a: any; }) => any
+>({a}) => a : (__0: { a: any; }) => any
 >a : any
 >a : any
 
 trans(([b,c]) => 'foo');
 >trans(([b,c]) => 'foo') : number
 >trans : <T>(f: (x: T) => string) => number
->([b,c]) => 'foo' : ([b, c]: [any, any]) => string
+>([b,c]) => 'foo' : (__0: [any, any]) => string
 >b : any
 >c : any
 >'foo' : "foo"
@@= skipped -15, +15 lines =@@
 trans(({d: [e,f]}) => 'foo');
 >trans(({d: [e,f]}) => 'foo') : number
 >trans : <T>(f: (x: T) => string) => number
->({d: [e,f]}) => 'foo' : ({ d: [e, f] }: { d: [any, any]; }) => string
+>({d: [e,f]}) => 'foo' : (__0: { d: [any, any]; }) => string
 >d : any
 >e : any
 >f : any
@@= skipped -9, +9 lines =@@
 trans(([{g},{h}]) => 'foo');
 >trans(([{g},{h}]) => 'foo') : number
 >trans : <T>(f: (x: T) => string) => number
->([{g},{h}]) => 'foo' : ([{ g }, { h }]: [{ g: any; }, { h: any; }]) => string
+>([{g},{h}]) => 'foo' : (__0: [{ g: any; }, { h: any; }]) => string
 >g : any
 >h : any
 >'foo' : "foo"
@@= skipped -8, +8 lines =@@
 trans(({a, b = 10}) => a);
 >trans(({a, b = 10}) => a) : number
 >trans : <T>(f: (x: T) => string) => number
->({a, b = 10}) => a : ({ a, b }: { a: any; b?: number; }) => any
+>({a, b = 10}) => a : (__0: { a: any; b?: number; }) => any
 >a : any
 >b : number
 >10 : 10
