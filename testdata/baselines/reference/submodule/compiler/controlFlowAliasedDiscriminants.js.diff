--- old.controlFlowAliasedDiscriminants.js
+++ new.controlFlowAliasedDiscriminants.js
@@= skipped -116, +116 lines =@@
 
 
 //// [controlFlowAliasedDiscriminants.js]
-"use strict";
 function useQuery() {
     return {
         isSuccess: false,
         data: undefined,
     };
 }
-var _a = useQuery(), data1 = _a.data, isSuccess1 = _a.isSuccess;
-var _b = useQuery(), data2 = _b.data, isSuccess2 = _b.isSuccess;
-var _c = useQuery(), data3 = _c.data, isSuccess3 = _c.isSuccess;
+const { data: data1, isSuccess: isSuccess1 } = useQuery();
+const { data: data2, isSuccess: isSuccess2 } = useQuery();
+const { data: data3, isSuccess: isSuccess3 } = useQuery();
 if (isSuccess1 && isSuccess2 && isSuccess3) {
-    data1.toExponential(); // should ok
-    data2.toExponential(); // should ok
-    data3.toExponential(); // should ok
+    data1.toExponential();
+    data2.toExponential();
+    data3.toExponential();
 }
-var areSuccess = isSuccess1 && isSuccess2 && isSuccess3;
+const areSuccess = isSuccess1 && isSuccess2 && isSuccess3;
 if (areSuccess) {
-    data1.toExponential(); // should ok
-    data2.toExponential(); // should ok
-    data3.toExponential(); // should ok
+    data1.toExponential();
+    data2.toExponential();
+    data3.toExponential();
 }
 {
-    var _d = useQuery(), data1_1 = _d.data, isSuccess1_1 = _d.isSuccess;
-    var _e = useQuery(), data2_1 = _e.data, isSuccess2_1 = _e.isSuccess;
-    var _f = useQuery(), data3_1 = _f.data, isSuccess3_1 = _f.isSuccess;
-    var areSuccess_1 = isSuccess1_1 && isSuccess2_1 && isSuccess3_1;
-    if (areSuccess_1) {
-        data1_1.toExponential(); // should error
-        data2_1.toExponential(); // should error
-        data3_1.toExponential(); // should ok
+    let { data: data1, isSuccess: isSuccess1 } = useQuery();
+    let { data: data2, isSuccess: isSuccess2 } = useQuery();
+    const { data: data3, isSuccess: isSuccess3 } = useQuery();
+    const areSuccess = isSuccess1 && isSuccess2 && isSuccess3;
+    if (areSuccess) {
+        data1.toExponential();
+        data2.toExponential();
+        data3.toExponential();
     }
 }
 {
-    var _g = getArrayResult(), foo1 = _g[0], bar1 = _g[1];
-    var _h = getArrayResult(), foo2 = _h[0], bar2 = _h[1];
-    var _j = getArrayResult(), foo3 = _j[0], bar3 = _j[1];
-    var arrayAllSuccess = foo1 && foo2 && foo3;
+    const [foo1, bar1] = getArrayResult();
+    const [foo2, bar2] = getArrayResult();
+    const [foo3, bar3] = getArrayResult();
+    const arrayAllSuccess = foo1 && foo2 && foo3;
     if (arrayAllSuccess) {
-        bar1.toExponential(); // should ok
-        bar2.toExponential(); // should ok
-        bar3.toExponential(); // should ok
+        bar1.toExponential();
+        bar2.toExponential();
+        bar3.toExponential();
     }
 }
 {
-    var _k = getArrayResult(), foo1 = _k[0], bar1 = _k[1];
-    var _l = getArrayResult(), foo2 = _l[0], bar2 = _l[1];
-    var _m = getArrayResult(), foo3 = _m[0], bar3 = _m[1];
-    var arrayAllSuccess = foo1 && foo2 && foo3;
+    const [foo1, bar1] = getArrayResult();
+    let [foo2, bar2] = getArrayResult();
+    let [foo3, bar3] = getArrayResult();
+    const arrayAllSuccess = foo1 && foo2 && foo3;
     if (arrayAllSuccess) {
-        bar1.toExponential(); // should ok
-        bar2.toExponential(); // should error
-        bar3.toExponential(); // should error
+        bar1.toExponential();
+        bar2.toExponential();
+        bar3.toExponential();
     }
 }
 {
-    var resp = void 0;
-    var data = resp.resp.data, type = resp.type;
+    let resp;
+    const { resp: { data }, type } = resp;
     if (type === 'string') {
         data;
     }
@@= skipped -65, +64 lines =@@
     }
 }
 {
-    var resp = void 0;
-    var dataAlias = resp.resp.data, type = resp.type;
+    let resp;
+    const { resp: { data: dataAlias }, type } = resp;
     if (type === 'string') {
         dataAlias;
     }
@@= skipped -9, +9 lines =@@
         resp.resp.data;
     }
 }
-function bindingPatternInParameter(_a) {
-    var data1 = _a.data, isSuccess1 = _a.isSuccess;
-    var _b = useQuery(), data2 = _b.data, isSuccess2 = _b.isSuccess;
-    var areSuccess = isSuccess1 && isSuccess2;
+function bindingPatternInParameter({ data: data1, isSuccess: isSuccess1 }) {
+    const { data: data2, isSuccess: isSuccess2 } = useQuery();
+    const areSuccess = isSuccess1 && isSuccess2;
     if (areSuccess) {
         data1.toExponential();
         data2.toExponential();
