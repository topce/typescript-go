--- old.privacyTypeParameterOfFunctionDeclFile.types
+++ new.privacyTypeParameterOfFunctionDeclFile.types
@@= skipped -185, +185 lines =@@
 >privateModule : any
 
     myMethod<T extends privateModule.publicClass>(): privateModule.publicClass;  // Error
->myMethod : <T extends privateModule.publicClass>() => privateModule.publicClass
+>myMethod : <T extends publicClass>() => publicClass
 >privateModule : any
 >privateModule : any
 }
@@= skipped -8, +8 lines =@@
 >publicClassWithWithPrivateModuleTypeParameters : publicClassWithWithPrivateModuleTypeParameters
 
     static myPublicStaticMethod<T extends privateModule.publicClass>() {  // Error
->myPublicStaticMethod : <T extends privateModule.publicClass>() => void
+>myPublicStaticMethod : <T extends publicClass>() => void
 >privateModule : any
     }
     myPublicMethod<T extends privateModule.publicClass>() {  // Error
->myPublicMethod : <T extends privateModule.publicClass>() => void
+>myPublicMethod : <T extends publicClass>() => void
 >privateModule : any
     }
 }
 export function publicFunctionWithPrivateMopduleTypeParameters<T extends privateModule.publicClass>() {  // Error
->publicFunctionWithPrivateMopduleTypeParameters : <T extends privateModule.publicClass>() => void
+>publicFunctionWithPrivateMopduleTypeParameters : <T extends publicClass>() => void
 >privateModule : any
 }
 
@@= skipped -24, +24 lines =@@
 >privateModule : any
 
     myMethod<T extends privateModule.publicClass>(): privateModule.publicClass;
->myMethod : <T extends privateModule.publicClass>() => privateModule.publicClass
+>myMethod : <T extends publicClass>() => publicClass
 >privateModule : any
 >privateModule : any
 }
@@= skipped -8, +8 lines =@@
 >privateClassWithWithPrivateModuleTypeParameters : privateClassWithWithPrivateModuleTypeParameters
 
     static myPublicStaticMethod<T extends privateModule.publicClass>() {
->myPublicStaticMethod : <T extends privateModule.publicClass>() => void
+>myPublicStaticMethod : <T extends publicClass>() => void
 >privateModule : any
     }
     myPublicMethod<T extends privateModule.publicClass>() {
->myPublicMethod : <T extends privateModule.publicClass>() => void
+>myPublicMethod : <T extends publicClass>() => void
 >privateModule : any
     }
 }
 function privateFunctionWithPrivateMopduleTypeParameters<T extends privateModule.publicClass>() {
->privateFunctionWithPrivateMopduleTypeParameters : <T extends privateModule.publicClass>() => void
+>privateFunctionWithPrivateMopduleTypeParameters : <T extends publicClass>() => void
 >privateModule : any
 }
 
@@= skipped -202, +202 lines =@@
 >privateModule : any
 
         myMethod<T extends privateModule.publicClass>(): privateModule.publicClass;  // Error
->myMethod : <T extends privateModule.publicClass>() => privateModule.publicClass
+>myMethod : <T extends publicClass>() => publicClass
 >privateModule : any
 >privateModule : any
     }
@@= skipped -8, +8 lines =@@
 >publicClassWithWithPrivateModuleTypeParameters : publicClassWithWithPrivateModuleTypeParameters
 
         static myPublicStaticMethod<T extends privateModule.publicClass>() {  // Error
->myPublicStaticMethod : <T extends privateModule.publicClass>() => void
+>myPublicStaticMethod : <T extends publicClass>() => void
 >privateModule : any
         }
         myPublicMethod<T extends privateModule.publicClass>() {  // Error
->myPublicMethod : <T extends privateModule.publicClass>() => void
+>myPublicMethod : <T extends publicClass>() => void
 >privateModule : any
         }
     }
     export function publicFunctionWithPrivateMopduleTypeParameters<T extends privateModule.publicClass>() {  // Error
->publicFunctionWithPrivateMopduleTypeParameters : <T extends privateModule.publicClass>() => void
+>publicFunctionWithPrivateMopduleTypeParameters : <T extends publicClass>() => void
 >privateModule : any
     }
 
@@= skipped -24, +24 lines =@@
 >privateModule : any
 
         myMethod<T extends privateModule.publicClass>(): privateModule.publicClass;  
->myMethod : <T extends privateModule.publicClass>() => privateModule.publicClass
+>myMethod : <T extends publicClass>() => publicClass
 >privateModule : any
 >privateModule : any
     }
@@= skipped -8, +8 lines =@@
 >privateClassWithWithPrivateModuleTypeParameters : privateClassWithWithPrivateModuleTypeParameters
 
         static myPublicStaticMethod<T extends privateModule.publicClass>() {  
->myPublicStaticMethod : <T extends privateModule.publicClass>() => void
+>myPublicStaticMethod : <T extends publicClass>() => void
 >privateModule : any
         }
         myPublicMethod<T extends privateModule.publicClass>() { 
->myPublicMethod : <T extends privateModule.publicClass>() => void
+>myPublicMethod : <T extends publicClass>() => void
 >privateModule : any
         }
     }
     function privateFunctionWithPrivateMopduleTypeParameters<T extends privateModule.publicClass>() { 
->privateFunctionWithPrivateMopduleTypeParameters : <T extends privateModule.publicClass>() => void
+>privateFunctionWithPrivateMopduleTypeParameters : <T extends publicClass>() => void
 >privateModule : any
     }
 
