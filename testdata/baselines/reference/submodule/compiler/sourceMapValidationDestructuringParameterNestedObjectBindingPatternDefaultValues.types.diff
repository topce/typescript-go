--- old.sourceMapValidationDestructuringParameterNestedObjectBindingPatternDefaultValues.types
+++ new.sourceMapValidationDestructuringParameterNestedObjectBindingPatternDefaultValues.types
@@= skipped -1, +1 lines =@@
 
 === sourceMapValidationDestructuringParameterNestedObjectBindingPatternDefaultValues.ts ===
 declare var console: {
->console : { log(msg: string): void; }
+>console : { log: (msg: string) => void; }
 
     log(msg: string): void;
 >log : (msg: string) => void
@@= skipped -34, +34 lines =@@
 >"none" : "none"
 
 function foo1(
->foo1 : ({ skills: { primary: primaryA, secondary: secondaryA } }?: Robot) => void
+>foo1 : (__0?: Robot) => void
     {
         skills: {
 >skills : any
@@= skipped -28, +28 lines =@@
     console.log(primaryA);
 >console.log(primaryA) : void
 >console.log : (msg: string) => void
->console : { log(msg: string): void; }
+>console : { log: (msg: string) => void; }
 >log : (msg: string) => void
 >primaryA : string
 }
 function foo2(
->foo2 : ({ name: nameC, skills: { primary: primaryB, secondary: secondaryB } }?: Robot) => void
+>foo2 : (__0?: Robot) => void
     {
         name: nameC = "name",
 >name : any
@@= skipped -38, +38 lines =@@
     console.log(secondaryB);
 >console.log(secondaryB) : void
 >console.log : (msg: string) => void
->console : { log(msg: string): void; }
+>console : { log: (msg: string) => void; }
 >log : (msg: string) => void
 >secondaryB : string
 }
 function foo3({ skills = { primary: "SomeSkill", secondary: "someSkill" }  }: Robot = robotA) {
->foo3 : ({ skills }?: Robot) => void
+>foo3 : (__0?: Robot) => void
 >skills : { primary?: string; secondary?: string; }
 >{ primary: "SomeSkill", secondary: "someSkill" } : { primary: string; secondary: string; }
 >primary : string
@@= skipped -17, +17 lines =@@
     console.log(skills.primary);
 >console.log(skills.primary) : void
 >console.log : (msg: string) => void
->console : { log(msg: string): void; }
+>console : { log: (msg: string) => void; }
 >log : (msg: string) => void
 >skills.primary : string
 >skills : { primary?: string; secondary?: string; }
@@= skipped -9, +9 lines =@@
 
 foo1(robotA);
 >foo1(robotA) : void
->foo1 : ({ skills: { primary: primaryA, secondary: secondaryA } }?: Robot) => void
+>foo1 : (__0?: Robot) => void
 >robotA : Robot
 
 foo1({ name: "Edger", skills: { primary: "edging", secondary: "branch trimming" } });
 >foo1({ name: "Edger", skills: { primary: "edging", secondary: "branch trimming" } }) : void
->foo1 : ({ skills: { primary: primaryA, secondary: secondaryA } }?: Robot) => void
+>foo1 : (__0?: Robot) => void
 >{ name: "Edger", skills: { primary: "edging", secondary: "branch trimming" } } : { name: string; skills: { primary: string; secondary: string; }; }
 >name : string
 >"Edger" : "Edger"
@@= skipped -18, +18 lines =@@
 
 foo2(robotA);
 >foo2(robotA) : void
->foo2 : ({ name: nameC, skills: { primary: primaryB, secondary: secondaryB } }?: Robot) => void
+>foo2 : (__0?: Robot) => void
 >robotA : Robot
 
 foo2({ name: "Edger", skills: { primary: "edging", secondary: "branch trimming" } });
 >foo2({ name: "Edger", skills: { primary: "edging", secondary: "branch trimming" } }) : void
->foo2 : ({ name: nameC, skills: { primary: primaryB, secondary: secondaryB } }?: Robot) => void
+>foo2 : (__0?: Robot) => void
 >{ name: "Edger", skills: { primary: "edging", secondary: "branch trimming" } } : { name: string; skills: { primary: string; secondary: string; }; }
 >name : string
 >"Edger" : "Edger"
@@= skipped -18, +18 lines =@@
 
 foo3(robotA);
 >foo3(robotA) : void
->foo3 : ({ skills }?: Robot) => void
+>foo3 : (__0?: Robot) => void
 >robotA : Robot
 
 foo3({ name: "Edger", skills: { primary: "edging", secondary: "branch trimming" } });
 >foo3({ name: "Edger", skills: { primary: "edging", secondary: "branch trimming" } }) : void
->foo3 : ({ skills }?: Robot) => void
+>foo3 : (__0?: Robot) => void
 >{ name: "Edger", skills: { primary: "edging", secondary: "branch trimming" } } : { name: string; skills: { primary: string; secondary: string; }; }
 >name : string
 >"Edger" : "Edger"
