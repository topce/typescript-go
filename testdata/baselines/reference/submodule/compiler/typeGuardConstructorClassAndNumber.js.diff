--- old.typeGuardConstructorClassAndNumber.js
+++ new.typeGuardConstructorClassAndNumber.js
@@= skipped -132, +132 lines =@@
 
 
 //// [typeGuardConstructorClassAndNumber.js]
-// Typical case
-var C1 = /** @class */ (function () {
-    function C1() {
-    }
-    return C1;
-}());
-var var1;
+class C1 {
+    property1;
+}
+let var1;
 if (var1.constructor == C1) {
-    var1; // C1
-    var1.property1; // string
+    var1;
+    var1.property1;
 }
 else {
-    var1; // number | C1
+    var1;
 }
 if (var1["constructor"] == C1) {
-    var1; // C1
-    var1.property1; // string
+    var1;
+    var1.property1;
 }
 else {
-    var1; // number | C1
+    var1;
 }
 if (var1.constructor === C1) {
-    var1; // C1
-    var1.property1; // string
+    var1;
+    var1.property1;
 }
 else {
-    var1; // number | C1
+    var1;
 }
 if (var1["constructor"] === C1) {
-    var1; // C1
-    var1.property1; // string
+    var1;
+    var1.property1;
 }
 else {
-    var1; // number | C1
+    var1;
 }
 if (C1 == var1.constructor) {
-    var1; // C1
-    var1.property1; // string
+    var1;
+    var1.property1;
 }
 else {
-    var1; // number | C1
+    var1;
 }
 if (C1 == var1["constructor"]) {
-    var1; // C1
-    var1.property1; // string
+    var1;
+    var1.property1;
 }
 else {
-    var1; // number | C1
+    var1;
 }
 if (C1 === var1.constructor) {
-    var1; // C1
-    var1.property1; // string
+    var1;
+    var1.property1;
 }
 else {
-    var1; // number | C1
+    var1;
 }
 if (C1 === var1["constructor"]) {
-    var1; // C1
-    var1.property1; // string
+    var1;
+    var1.property1;
 }
 else {
-    var1; // number | C1
+    var1;
 }
 if (var1.constructor != C1) {
-    var1; // C1 | number
-    var1.property1; // error
+    var1;
+    var1.property1;
 }
 else {
-    var1; // C1
+    var1;
 }
 if (var1["constructor"] != C1) {
-    var1; // C1 | number
-    var1.property1; // error
+    var1;
+    var1.property1;
 }
 else {
-    var1; // C1
+    var1;
 }
 if (var1.constructor !== C1) {
-    var1; // C1 | number
-    var1.property1; // error
+    var1;
+    var1.property1;
 }
 else {
-    var1; // C1
+    var1;
 }
 if (var1["constructor"] !== C1) {
-    var1; // C1 | number
-    var1.property1; // error
+    var1;
+    var1.property1;
 }
 else {
-    var1; // C1
+    var1;
 }
 if (C1 != var1.constructor) {
-    var1; // C1 | number
-    var1.property1; // error
+    var1;
+    var1.property1;
 }
 else {
-    var1; // C1
+    var1;
 }
 if (C1 != var1["constructor"]) {
-    var1; // C1 | number
-    var1.property1; // error
+    var1;
+    var1.property1;
 }
 else {
-    var1; // C1
+    var1;
 }
 if (C1 !== var1.constructor) {
-    var1; // C1 | number
-    var1.property1; // error
+    var1;
+    var1.property1;
 }
 else {
-    var1; // C1
+    var1;
 }
 if (C1 !== var1["constructor"]) {
-    var1; // C1 | number
-    var1.property1; // error
+    var1;
+    var1.property1;
 }
 else {
-    var1; // C1
+    var1;
 }
-// Repro from #37660
 function foo(instance) {
     if (typeof instance === 'function') {
         if (instance.prototype == null || instance.prototype.constructor == null) {
