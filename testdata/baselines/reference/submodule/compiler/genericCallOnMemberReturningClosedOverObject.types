//// [tests/cases/compiler/genericCallOnMemberReturningClosedOverObject.ts] ////

=== genericCallOnMemberReturningClosedOverObject.ts ===
// https://github.com/microsoft/TypeScript/issues/11584

function example<T1>() {
>example : <T1>() => { foo: <T2>(t2: T2) => ???; bar: (t1: T1) => ???; }

  let x = {
>x : { foo: <T2>(t2: T2) => ???; bar: (t1: T1) => ???; }
>{    foo: <T2>(t2: T2) => x,    bar: (t1: T1) => x,  } : { foo: <T2>(t2: T2) => { foo: ???; bar: (t1: T1) => ???; }; bar: (t1: T1) => { foo: <T2>(t2: T2) => ???; bar: ???; }; }

    foo: <T2>(t2: T2) => x,
>foo : <T2>(t2: T2) => { foo: ???; bar: (t1: T1) => ???; }
><T2>(t2: T2) => x : <T2>(t2: T2) => { foo: ???; bar: (t1: T1) => ???; }
>t2 : T2
>x : { foo: <T2>(t2: T2) => ???; bar: (t1: T1) => ???; }

    bar: (t1: T1) => x,
>bar : (t1: T1) => { foo: <T2>(t2: T2) => ???; bar: ???; }
>(t1: T1) => x : (t1: T1) => { foo: <T2>(t2: T2) => ???; bar: ???; }
>t1 : T1
>x : { foo: <T2>(t2: T2) => ???; bar: (t1: T1) => ???; }

  };
  return x;
>x : { foo: <T2>(t2: T2) => ???; bar: (t1: T1) => ???; }
}

example<number>().foo("hello").bar(1);
>example<number>().foo("hello").bar(1) : { foo: <T2>(t2: T2) => ???; bar: (t1: number) => ???; }
>example<number>().foo("hello").bar : (t1: number) => { foo: <T2>(t2: T2) => ???; bar: ???; }
>example<number>().foo("hello") : { foo: <T2>(t2: T2) => ???; bar: (t1: number) => ???; }
>example<number>().foo : <T2>(t2: T2) => { foo: ???; bar: (t1: number) => ???; }
>example<number>() : { foo: <T2>(t2: T2) => ???; bar: (t1: number) => ???; }
>example : <T1>() => { foo: <T2>(t2: T2) => ???; bar: (t1: T1) => ???; }
>foo : <T2>(t2: T2) => { foo: ???; bar: (t1: number) => ???; }
>"hello" : "hello"
>bar : (t1: number) => { foo: <T2>(t2: T2) => ???; bar: ???; }
>1 : 1

