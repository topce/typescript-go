--- old.genericClassesRedeclaration.types
+++ new.genericClassesRedeclaration.types
@@= skipped -8, +8 lines =@@
 >s : string
     }
     function createIntrinsicsObject<T>(): IIndexable<T>;
->createIntrinsicsObject : { <T>(): IIndexable<T>; <T_1>(): IIndexable<T_1>; }
+>createIntrinsicsObject : { <T>(): IIndexable<T>; <T>(): IIndexable<T>; }
 
     interface IHashTable<T> {
         getAllKeys(): string[];
@@= skipped -159, +159 lines =@@
 >s : string
     }
     function createIntrinsicsObject<T>(): IIndexable<T>;
->createIntrinsicsObject : { <T_1>(): IIndexable<T_1>; <T>(): IIndexable<T>; }
+>createIntrinsicsObject : { <T>(): IIndexable<T>; <T>(): IIndexable<T>; }
 
     interface IHashTable<T> {
         getAllKeys(): string[];
@@= skipped -48, +48 lines =@@
 >key : string
     }
     class StringHashTable<T> implements IHashTable<T> {
->StringHashTable : TypeScript.StringHashTable<T>
+>StringHashTable : StringHashTable<T>
 
         private itemCount;
 >itemCount : any
@@= skipped -57, +57 lines =@@
 >key : string
     }
     class IdentifierNameHashTable<T> extends StringHashTable<T> {
->IdentifierNameHashTable : TypeScript.IdentifierNameHashTable<T>
->StringHashTable : TypeScript.StringHashTable<T>
+>IdentifierNameHashTable : IdentifierNameHashTable<T>
+>StringHashTable : StringHashTable<T>
 
         public getAllKeys(): string[];
 >getAllKeys : () => string[]
