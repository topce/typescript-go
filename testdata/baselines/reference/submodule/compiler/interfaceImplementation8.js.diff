--- old.interfaceImplementation8.js
+++ new.interfaceImplementation8.js
@@= skipped -42, +42 lines =@@
 
 
 //// [interfaceImplementation8.js]
-var __extends = (this && this.__extends) || (function () {
-    var extendStatics = function (d, b) {
-        extendStatics = Object.setPrototypeOf ||
-            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
-            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
-        return extendStatics(d, b);
-    };
-    return function (d, b) {
-        if (typeof b !== "function" && b !== null)
-            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
-        extendStatics(d, b);
-        function __() { this.constructor = d; }
-        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-    };
-})();
-var C1 = /** @class */ (function () {
-    function C1() {
-    }
-    return C1;
-}());
-var C2 = /** @class */ (function () {
-    function C2() {
-    }
-    return C2;
-}());
-var C3 = /** @class */ (function () {
-    function C3() {
-    }
-    return C3;
-}());
-var C4 = /** @class */ (function (_super) {
-    __extends(C4, _super);
-    function C4() {
-        return _super !== null && _super.apply(this, arguments) || this;
-    }
-    return C4;
-}(C1));
-var C5 = /** @class */ (function (_super) {
-    __extends(C5, _super);
-    function C5() {
-        return _super !== null && _super.apply(this, arguments) || this;
-    }
-    return C5;
-}(C2));
-var C6 = /** @class */ (function (_super) {
-    __extends(C6, _super);
-    function C6() {
-        return _super !== null && _super.apply(this, arguments) || this;
-    }
-    return C6;
-}(C3));
-var C7 = /** @class */ (function () {
-    function C7() {
-    }
-    return C7;
-}());
-var C8 = /** @class */ (function (_super) {
-    __extends(C8, _super);
-    function C8() {
-        return _super !== null && _super.apply(this, arguments) || this;
-    }
-    return C8;
-}(C7));
+class C1 {
+    name;
+}
+class C2 {
+    name;
+}
+class C3 {
+    name;
+}
+class C4 extends C1 {
+}
+class C5 extends C2 {
+}
+class C6 extends C3 {
+}
+class C7 {
+    name;
+}
+class C8 extends C7 {
+    age;
+}
