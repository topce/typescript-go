--- old.recursiveClassReferenceTest.types
+++ new.recursiveClassReferenceTest.types
@@= skipped -15, +15 lines =@@
 >destroy : () => any
 
 		gar(runner:(widget:Sample.Thing.IWidget)=>any):any;
->gar : (runner: (widget: Sample.Thing.IWidget) => any) => any
->runner : (widget: Sample.Thing.IWidget) => any
+>gar : (runner: (widget: IWidget) => any) => any
+>runner : (widget: IWidget) => any
 >widget : IWidget
 >Sample : any
 >Thing : any
@@= skipped -42, +42 lines =@@
 
 	export class StartFindAction implements Sample.Thing.IAction {
 >StartFindAction : StartFindAction
->Sample.Thing : typeof Sample.Thing
+>Sample.Thing : typeof Thing
 >Sample : typeof Sample
->Thing : typeof Sample.Thing
+>Thing : typeof Thing
 		
 		public getId() { return "yo"; }
 >getId : () => string
 >"yo" : "yo"
 		
 		public run(Thing:Sample.Thing.ICodeThing):boolean {
->run : (Thing: Sample.Thing.ICodeThing) => boolean
->Thing : Sample.Thing.ICodeThing
+>run : (Thing: ICodeThing) => boolean
+>Thing : ICodeThing
 >Sample : any
 >Thing : any
 
@@= skipped -32, +32 lines =@@
 >Thing : typeof Thing
 
 		public gar(runner:(widget:Sample.Thing.IWidget)=>any) { if (true) {return runner(this);}}
->gar : (runner: (widget: Sample.Thing.IWidget) => any) => any
->runner : (widget: Sample.Thing.IWidget) => any
+>gar : (runner: (widget: IWidget) => any) => any
+>runner : (widget: IWidget) => any
 >widget : IWidget
 >Sample : any
 >Thing : any
 >true : true
 >runner(this) : any
->runner : (widget: Sample.Thing.IWidget) => any
+>runner : (widget: IWidget) => any
 >this : this
 			
 		private domNode:any = null;
