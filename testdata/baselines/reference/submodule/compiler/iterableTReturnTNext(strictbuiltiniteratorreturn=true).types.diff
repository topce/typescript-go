--- old.iterableTReturnTNext(strictbuiltiniteratorreturn=true).types
+++ new.iterableTReturnTNext(strictbuiltiniteratorreturn=true).types
@@= skipped -13, +13 lines =@@
 >r1 : number
 >map.values().next().value : number | undefined
 >map.values().next() : IteratorResult<number, undefined>
->map.values().next : (...[value]: [] | [unknown]) => IteratorResult<number, undefined>
+>map.values().next : (...__0: [] | [unknown]) => IteratorResult<number, undefined>
 >map.values() : MapIterator<number>
 >map.values : () => MapIterator<number>
 >map : Map<string, number>
 >values : () => MapIterator<number>
->next : (...[value]: [] | [unknown]) => IteratorResult<number, undefined>
+>next : (...__0: [] | [unknown]) => IteratorResult<number, undefined>
 >value : number | undefined
 
 // based on: https://github.com/gcanti/fp-ts/blob/89a772e95e414acee679f42f56527606f7b61f30/src/Map.ts#L246
@@= skipped -19, +19 lines =@@
 const r2: Next<number> = map.values().next(); // error when strictBuiltinIteratorReturn is true as result is potentially `{ done: true, value: undefined }`
 >r2 : Next<number>
 >map.values().next() : IteratorResult<number, undefined>
->map.values().next : (...[value]: [] | [unknown]) => IteratorResult<number, undefined>
+>map.values().next : (...__0: [] | [unknown]) => IteratorResult<number, undefined>
 >map.values() : MapIterator<number>
 >map.values : () => MapIterator<number>
 >map : Map<string, number>
 >values : () => MapIterator<number>
->next : (...[value]: [] | [unknown]) => IteratorResult<number, undefined>
+>next : (...__0: [] | [unknown]) => IteratorResult<number, undefined>
 
 // based on: https://github.com/graphql/graphql-js/blob/e15c3ec4dc21d9fd1df34fe9798cadf3bf02c6ea/src/execution/__tests__/mapAsyncIterable-test.ts#L175
 async function* source() { yield 1; yield 2; yield 3; }
@@= skipped -33, +33 lines =@@
 >r3 : number | undefined
 >set.values().next().value : number | undefined
 >set.values().next() : IteratorResult<number, undefined>
->set.values().next : (...[value]: [] | [unknown]) => IteratorResult<number, undefined>
+>set.values().next : (...__0: [] | [unknown]) => IteratorResult<number, undefined>
 >set.values() : SetIterator<number>
 >set.values : () => SetIterator<number>
 >set : Set<number>
 >values : () => SetIterator<number>
->next : (...[value]: [] | [unknown]) => IteratorResult<number, undefined>
+>next : (...__0: [] | [unknown]) => IteratorResult<number, undefined>
 >value : number | undefined
 
 // based on: https://github.com/microsoft/TypeScript/blob/15f67e0b482faf9f6a3ab9965f3c11196bf3e99b/src/harness/compilerImpl.ts#L77
