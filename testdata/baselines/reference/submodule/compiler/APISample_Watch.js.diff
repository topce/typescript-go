--- old.APISample_Watch.js
+++ new.APISample_Watch.js
@@= skipped -84, +84 lines =@@
 
 //// [APISample_Watch.js]
 "use strict";
-/*
- * Note: This test is a public API sample. The sample sources can be found
- *       at: https://github.com/Microsoft/TypeScript-wiki/blob/master/Using-the-Compiler-API.md#writing-an-incremental-program-watcher
- *       Please log a "breaking change" issue for any API breaking change affecting this issue
- */
 Object.defineProperty(exports, "__esModule", { value: true });
-var ts = require("typescript");
-var formatHost = {
-    getCanonicalFileName: function (path) { return path; },
+const ts = require("typescript");
+const formatHost = {
+    getCanonicalFileName: path => path,
     getCurrentDirectory: ts.sys.getCurrentDirectory,
-    getNewLine: function () { return ts.sys.newLine; },
+    getNewLine: () => ts.sys.newLine,
 };
 function watchMain() {
-    var configPath = ts.findConfigFile(/*searchPath*/ "./", ts.sys.fileExists, "tsconfig.json");
+    const configPath = ts.findConfigFile(/*searchPath*/ "./", ts.sys.fileExists, "tsconfig.json");
     if (!configPath) {
         throw new Error("Could not find a valid 'tsconfig.json'.");
     }
@@= skipped -27, +22 lines =@@
     // Between `createEmitAndSemanticDiagnosticsBuilderProgram` and `createSemanticDiagnosticsBuilderProgram`, the only difference is emit.
     // For pure type-checking scenarios, or when another tool/process handles emit, using `createSemanticDiagnosticsBuilderProgram` may be more desirable.
     // Note that there is another overload for `createWatchCompilerHost` that takes a set of root files.
-    var host = ts.createWatchCompilerHost(configPath, {}, ts.sys, ts.createSemanticDiagnosticsBuilderProgram, reportDiagnostic, reportWatchStatusChanged);
+    const host = ts.createWatchCompilerHost(configPath, {}, ts.sys, ts.createSemanticDiagnosticsBuilderProgram, reportDiagnostic, reportWatchStatusChanged);
     // You can technically override any given hook on the host, though you probably don't need to.
     // Note that we're assuming `origCreateProgram` and `origPostProgramCreate` doesn't use `this` at all.
-    var origCreateProgram = host.createProgram;
-    host.createProgram = function (rootNames, options, host, oldProgram) {
+    const origCreateProgram = host.createProgram;
+    host.createProgram = (rootNames, options, host, oldProgram) => {
         console.log("** We're about to create the program! **");
         return origCreateProgram(rootNames, options, host, oldProgram);
     };
-    var origPostProgramCreate = host.afterProgramCreate;
-    host.afterProgramCreate = function (program) {
+    const origPostProgramCreate = host.afterProgramCreate;
+    host.afterProgramCreate = program => {
         console.log("** We finished making the program! **");
         origPostProgramCreate(program);
     };
