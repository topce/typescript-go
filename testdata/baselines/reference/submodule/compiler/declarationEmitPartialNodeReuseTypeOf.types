//// [tests/cases/compiler/declarationEmitPartialNodeReuseTypeOf.ts] ////

=== a.ts ===
export const nImported = "nImported"
>nImported : "nImported"
>"nImported" : "nImported"

export const nNotImported = "nNotImported"
>nNotImported : "nNotImported"
>"nNotImported" : "nNotImported"

const nPrivate = "private"
>nPrivate : "private"
>"private" : "private"

export const o = (p1: typeof nImported, p2: typeof nNotImported, p3: typeof nPrivate) => null! as { foo: typeof nImported, bar: typeof nPrivate, baz: typeof nNotImported }
>o : (p1: "nImported", p2: "nNotImported", p3: "private") => { foo: "nImported"; bar: "private"; baz: "nNotImported"; }
>(p1: typeof nImported, p2: typeof nNotImported, p3: typeof nPrivate) => null! as { foo: typeof nImported, bar: typeof nPrivate, baz: typeof nNotImported } : (p1: "nImported", p2: "nNotImported", p3: "private") => { foo: "nImported"; bar: "private"; baz: "nNotImported"; }
>p1 : "nImported"
>nImported : "nImported"
>p2 : "nNotImported"
>nNotImported : "nNotImported"
>p3 : "private"
>nPrivate : "private"
>null! as { foo: typeof nImported, bar: typeof nPrivate, baz: typeof nNotImported } : { foo: "nImported"; bar: "private"; baz: "nNotImported"; }
>null! : never
>foo : "nImported"
>nImported : "nImported"
>bar : "private"
>nPrivate : "private"
>baz : "nNotImported"
>nNotImported : "nNotImported"

=== b.ts ===
import { o, nImported } from "./a";
>o : (p1: "nImported", p2: "nNotImported", p3: "private") => { foo: "nImported"; bar: "private"; baz: "nNotImported"; }
>nImported : "nImported"

export const g = o
>g : (p1: "nImported", p2: "nNotImported", p3: "private") => { foo: "nImported"; bar: "private"; baz: "nNotImported"; }
>o : (p1: "nImported", p2: "nNotImported", p3: "private") => { foo: "nImported"; bar: "private"; baz: "nNotImported"; }

console.log(nImported);
>console.log(nImported) : void
>console.log : (...data: any[]) => void
>console : Console
>log : (...data: any[]) => void
>nImported : "nImported"

=== c.ts ===
import * as a from "./a";
>a : typeof import("a")

export const g = a.o
>g : (p1: "nImported", p2: "nNotImported", p3: "private") => { foo: "nImported"; bar: "private"; baz: "nNotImported"; }
>a.o : (p1: "nImported", p2: "nNotImported", p3: "private") => { foo: "nImported"; bar: "private"; baz: "nNotImported"; }
>a : typeof import("a")
>o : (p1: "nImported", p2: "nNotImported", p3: "private") => { foo: "nImported"; bar: "private"; baz: "nNotImported"; }

