--- old.ramdaToolsNoInfinite.types
+++ new.ramdaToolsNoInfinite.types
@@= skipped -164, +164 lines =@@
 
     interface GapsOfWorker<T1 extends any[], T2 extends any[], TN extends any[] = [], I extends any[] = []> {
         0: GapsOf<T1, T2, GapOf<T1, T2, TN, I> extends infer G ? Tools.Cast<G, any[]> : never, Tools.Next<I>>;
->0 : GapsOf<T1, T2, GapOf<T1, T2, TN, I> extends infer G ? Tools.Cast<G, any[]> : never, [head: any, ...args: I]>
+>0 : GapsOf<T1, T2, GapOf<T1, T2, TN, I> extends infer G ? Cast<G, any[]> : never, [head: any, ...args: I]>
 >Tools : any
 >Tools : any
 
         1: Tools.Concat<TN, Tools.Drop<Tools.Pos<I>, T2> extends infer D ? Tools.Cast<D, any[]> : never>;
->1 : Tools.Concat<TN, Tools.Drop<Tools.Pos<I>, T2, []> extends infer D ? Tools.Cast<D, any[]> : never>
+>1 : Concat<TN, Drop<Pos<I>, T2, []> extends infer D ? Cast<D, any[]> : never>
 >Tools : any
 >Tools : any
 >Tools : any
@@= skipped -44, +44 lines =@@
 >args : any
 
         <T extends any[]>(...args: Tools.Cast<Tools.Cast<T, Gaps<Parameters<F>>>, any[]>) =>
->args : Tools.Cast<Tools.Cast<T, CleanedGaps<PartialGaps<Parameters<F>>>>, any[]>
+>args : Cast<Cast<T, CleanedGaps<PartialGaps<Parameters<F>>>>, any[]>
 >Tools : any
 >Tools : any
 
             GapsOf<T, Parameters<F>> extends [any, ...any[]]
             ? Curry<(...args: GapsOf<T, Parameters<F>> extends infer G ? Tools.Cast<G, any[]> : never) => ReturnType<F>>
->args : GapsOf<T, Parameters<F>, [], []> extends infer G ? Tools.Cast<G, any[]> : never
+>args : GapsOf<T, Parameters<F>, [], []> extends infer G ? Cast<G, any[]> : never
 >Tools : any
 
             : ReturnType<F>;
