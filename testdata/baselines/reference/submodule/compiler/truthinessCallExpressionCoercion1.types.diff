--- old.truthinessCallExpressionCoercion1.types
+++ new.truthinessCallExpressionCoercion1.types
@@= skipped -1, +1 lines =@@
 
 === truthinessCallExpressionCoercion1.ts ===
 function onlyErrorsWhenTestingNonNullableFunctionType(required: () => boolean, optional?: () => boolean) {
->onlyErrorsWhenTestingNonNullableFunctionType : (required: () => boolean, optional?: () => boolean) => void
+>onlyErrorsWhenTestingNonNullableFunctionType : (required: () => boolean, optional?: (() => boolean) | undefined) => void
 >required : () => boolean
 >optional : (() => boolean) | undefined
 
@@= skipped -136, +136 lines =@@
 >checksPropertyAccess : () => void
 
     const x = {
->x : { foo: { bar(): boolean; }; }
->{        foo: {            bar() { return true; }        }    } : { foo: { bar(): boolean; }; }
+>x : { foo: { bar: () => boolean; }; }
+>{        foo: {            bar() { return true; }        }    } : { foo: { bar: () => boolean; }; }
 
         foo: {
->foo : { bar(): boolean; }
->{            bar() { return true; }        } : { bar(): boolean; }
+>foo : { bar: () => boolean; }
+>{            bar() { return true; }        } : { bar: () => boolean; }
 
             bar() { return true; }
 >bar : () => boolean
@@= skipped -17, +17 lines =@@
     x.foo.bar ? console.log('x.foo.bar') : undefined;
 >x.foo.bar ? console.log('x.foo.bar') : undefined : void
 >x.foo.bar : () => boolean
->x.foo : { bar(): boolean; }
->x : { foo: { bar(): boolean; }; }
->foo : { bar(): boolean; }
+>x.foo : { bar: () => boolean; }
+>x : { foo: { bar: () => boolean; }; }
+>foo : { bar: () => boolean; }
 >bar : () => boolean
 >console.log('x.foo.bar') : void
 >console.log : (...data: any[]) => void
@@= skipped -15, +15 lines =@@
     x.foo.bar ? x.foo.bar : undefined;
 >x.foo.bar ? x.foo.bar : undefined : (() => boolean) | undefined
 >x.foo.bar : () => boolean
->x.foo : { bar(): boolean; }
->x : { foo: { bar(): boolean; }; }
->foo : { bar(): boolean; }
+>x.foo : { bar: () => boolean; }
+>x : { foo: { bar: () => boolean; }; }
+>foo : { bar: () => boolean; }
 >bar : () => boolean
 >x.foo.bar : () => boolean
->x.foo : { bar(): boolean; }
->x : { foo: { bar(): boolean; }; }
->foo : { bar(): boolean; }
+>x.foo : { bar: () => boolean; }
+>x : { foo: { bar: () => boolean; }; }
+>foo : { bar: () => boolean; }
 >bar : () => boolean
 >undefined : undefined
 
     var chrome = {
->chrome : { platformKeys: { subtleCrypto(): { sign(): void; exportKey(): boolean; }; }; }
->{        platformKeys: {            subtleCrypto() {                return {                    sign() {},                    exportKey() { return true }                }            }        }    } : { platformKeys: { subtleCrypto(): { sign(): void; exportKey(): boolean; }; }; }
+>chrome : { platformKeys: { subtleCrypto: () => { sign: () => void; exportKey: () => boolean; }; }; }
+>{        platformKeys: {            subtleCrypto() {                return {                    sign() {},                    exportKey() { return true }                }            }        }    } : { platformKeys: { subtleCrypto: () => { sign: () => void; exportKey: () => boolean; }; }; }
 
         platformKeys: {
->platformKeys : { subtleCrypto(): { sign(): void; exportKey(): boolean; }; }
->{            subtleCrypto() {                return {                    sign() {},                    exportKey() { return true }                }            }        } : { subtleCrypto(): { sign(): void; exportKey(): boolean; }; }
+>platformKeys : { subtleCrypto: () => { sign: () => void; exportKey: () => boolean; }; }
+>{            subtleCrypto() {                return {                    sign() {},                    exportKey() { return true }                }            }        } : { subtleCrypto: () => { sign: () => void; exportKey: () => boolean; }; }
 
             subtleCrypto() {
->subtleCrypto : () => { sign(): void; exportKey(): boolean; }
+>subtleCrypto : () => { sign: () => void; exportKey: () => boolean; }
 
                 return {
->{                    sign() {},                    exportKey() { return true }                } : { sign(): void; exportKey(): boolean; }
+>{                    sign() {},                    exportKey() { return true }                } : { sign: () => void; exportKey: () => boolean; }
 
                     sign() {},
 >sign : () => void
@@= skipped -38, +38 lines =@@
     // ok
     if (chrome.platformKeys.subtleCrypto().exportKey) {
 >chrome.platformKeys.subtleCrypto().exportKey : () => boolean
->chrome.platformKeys.subtleCrypto() : { sign(): void; exportKey(): boolean; }
->chrome.platformKeys.subtleCrypto : () => { sign(): void; exportKey(): boolean; }
->chrome.platformKeys : { subtleCrypto(): { sign(): void; exportKey(): boolean; }; }
->chrome : { platformKeys: { subtleCrypto(): { sign(): void; exportKey(): boolean; }; }; }
->platformKeys : { subtleCrypto(): { sign(): void; exportKey(): boolean; }; }
->subtleCrypto : () => { sign(): void; exportKey(): boolean; }
+>chrome.platformKeys.subtleCrypto() : { sign: () => void; exportKey: () => boolean; }
+>chrome.platformKeys.subtleCrypto : () => { sign: () => void; exportKey: () => boolean; }
+>chrome.platformKeys : { subtleCrypto: () => { sign: () => void; exportKey: () => boolean; }; }
+>chrome : { platformKeys: { subtleCrypto: () => { sign: () => void; exportKey: () => boolean; }; }; }
+>platformKeys : { subtleCrypto: () => { sign: () => void; exportKey: () => boolean; }; }
+>subtleCrypto : () => { sign: () => void; exportKey: () => boolean; }
 >exportKey : () => boolean
 
         chrome.platformKeys.subtleCrypto().exportKey
 >chrome.platformKeys.subtleCrypto().exportKey : () => boolean
->chrome.platformKeys.subtleCrypto() : { sign(): void; exportKey(): boolean; }
->chrome.platformKeys.subtleCrypto : () => { sign(): void; exportKey(): boolean; }
->chrome.platformKeys : { subtleCrypto(): { sign(): void; exportKey(): boolean; }; }
->chrome : { platformKeys: { subtleCrypto(): { sign(): void; exportKey(): boolean; }; }; }
->platformKeys : { subtleCrypto(): { sign(): void; exportKey(): boolean; }; }
->subtleCrypto : () => { sign(): void; exportKey(): boolean; }
+>chrome.platformKeys.subtleCrypto() : { sign: () => void; exportKey: () => boolean; }
+>chrome.platformKeys.subtleCrypto : () => { sign: () => void; exportKey: () => boolean; }
+>chrome.platformKeys : { subtleCrypto: () => { sign: () => void; exportKey: () => boolean; }; }
+>chrome : { platformKeys: { subtleCrypto: () => { sign: () => void; exportKey: () => boolean; }; }; }
+>platformKeys : { subtleCrypto: () => { sign: () => void; exportKey: () => boolean; }; }
+>subtleCrypto : () => { sign: () => void; exportKey: () => boolean; }
 >exportKey : () => boolean
     }
 }
