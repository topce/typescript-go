--- old.simplifyingConditionalWithInteriorConditionalIsRelated.types
+++ new.simplifyingConditionalWithInteriorConditionalIsRelated.types
@@= skipped -18, +18 lines =@@
     return ConditionalOrUndefined<T>()!; // shouldn't error
 >ConditionalOrUndefined<T>()! : ConditionalType<T>
 >ConditionalOrUndefined<T>() : ConditionalType<T> | undefined
->ConditionalOrUndefined : <T_1>() => ConditionalType<T_1> | undefined
+>ConditionalOrUndefined : <T>() => ConditionalType<T> | undefined
 }
 
 
@@= skipped -19, +19 lines =@@
     return genericOrUndefined<T>()!; // no error
 >genericOrUndefined<T>()! : NonNullable<T>
 >genericOrUndefined<T>() : T | undefined
->genericOrUndefined : <T_1>() => T_1 | undefined
+>genericOrUndefined : <T>() => T | undefined
 }
 
 // Simplified example:
@@= skipped -9, +9 lines =@@
 >f : <T>() => void
 
     type One = T extends string ? string : string;
->One : T extends string ? string : string
+>One : One
 
     type A = T extends number ? One : never;
->A : T extends number ? T extends string ? string : string : never
+>A : A
 
     const x: One = null as any as A;
->x : T extends string ? string : string
->null as any as A : T extends number ? T extends string ? string : string : never
+>x : One
+>null as any as A : A
 >null as any : any
 }
 
