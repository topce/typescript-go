--- old.homomorphicMappedTypeIntersectionAssignability.types
+++ new.homomorphicMappedTypeIntersectionAssignability.types
@@= skipped -1, +1 lines =@@
 
 === homomorphicMappedTypeIntersectionAssignability.ts ===
 function f<TType>(
->f : <TType>(a: { weak?: string; } & Readonly<TType> & { name: "ok"; }, b: Readonly<TType & { name: string; }>, c: Readonly<TType> & { name: string; }) => void
+>f : <TType>(a: { weak?: string | undefined; } & Readonly<TType> & { name: "ok"; }, b: Readonly<TType & { name: string; }>, c: Readonly<TType> & { name: string; }) => void
 
     a: { weak?: string } & Readonly<TType> & { name: "ok" },
->a : { weak?: string; } & Readonly<TType> & { name: "ok"; }
+>a : { weak?: string | undefined; } & Readonly<TType> & { name: "ok"; }
 >weak : string | undefined
 >name : "ok"
 
@@= skipped -16, +16 lines =@@
 >name : string
 
     c = a; // Works
->c = a : { weak?: string; } & Readonly<TType> & { name: "ok"; }
+>c = a : { weak?: string | undefined; } & Readonly<TType> & { name: "ok"; }
 >c : Readonly<TType> & { name: string; }
->a : { weak?: string; } & Readonly<TType> & { name: "ok"; }
+>a : { weak?: string | undefined; } & Readonly<TType> & { name: "ok"; }
 
     b = a; // Should also work
->b = a : { weak?: string; } & Readonly<TType> & { name: "ok"; }
+>b = a : { weak?: string | undefined; } & Readonly<TType> & { name: "ok"; }
 >b : Readonly<TType & { name: string; }>
->a : { weak?: string; } & Readonly<TType> & { name: "ok"; }
+>a : { weak?: string | undefined; } & Readonly<TType> & { name: "ok"; }
 }
 
