--- old.complexClassRelationships.js
+++ new.complexClassRelationships.js
@@= skipped -49, +49 lines =@@
 }
 
 //// [complexClassRelationships.js]
-var __extends = (this && this.__extends) || (function () {
-    var extendStatics = function (d, b) {
-        extendStatics = Object.setPrototypeOf ||
-            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
-            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
-        return extendStatics(d, b);
-    };
-    return function (d, b) {
-        if (typeof b !== "function" && b !== null)
-            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
-        extendStatics(d, b);
-        function __() { this.constructor = d; }
-        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-    };
-})();
 // There should be no errors in this file
-var Derived = /** @class */ (function (_super) {
-    __extends(Derived, _super);
-    function Derived() {
-        return _super !== null && _super.apply(this, arguments) || this;
-    }
-    Derived.createEmpty = function () {
+class Derived extends Base {
+    static createEmpty() {
         var item = new Derived();
         return item;
-    };
-    return Derived;
-}(Base));
-var BaseCollection = /** @class */ (function () {
-    function BaseCollection(f) {
-        (function (item) { return [item.Components]; });
     }
-    return BaseCollection;
-}());
-var Base = /** @class */ (function () {
-    function Base() {
+}
+class BaseCollection {
+    constructor(f) {
+        (item) => { return [item.Components]; };
     }
-    return Base;
-}());
-var Thing = /** @class */ (function () {
-    function Thing() {
-    }
-    Object.defineProperty(Thing.prototype, "Components", {
-        get: function () { return null; },
-        enumerable: false,
-        configurable: true
-    });
-    return Thing;
-}());
-var ComponentCollection = /** @class */ (function () {
-    function ComponentCollection() {
-    }
-    ComponentCollection.sortComponents = function (p) {
+}
+class Base {
+    ownerCollection;
+}
+class Thing {
+    get Components() { return null; }
+}
+class ComponentCollection {
+    static sortComponents(p) {
         return p.prop1;
-    };
-    return ComponentCollection;
-}());
-var Foo = /** @class */ (function () {
-    function Foo() {
     }
-    Object.defineProperty(Foo.prototype, "prop1", {
-        get: function () {
-            return new GenericType(this);
-        },
-        enumerable: false,
-        configurable: true
-    });
-    Foo.prototype.populate = function () {
+}
+class Foo {
+    get prop1() {
+        return new GenericType(this);
+    }
+    populate() {
         this.prop2;
-    };
-    Object.defineProperty(Foo.prototype, "prop2", {
-        get: function () {
-            return new BaseCollection(Derived.createEmpty);
-        },
-        enumerable: false,
-        configurable: true
-    });
-    return Foo;
-}());
-var GenericType = /** @class */ (function () {
-    function GenericType(parent) {
     }
-    return GenericType;
-}());
-var FooBase = /** @class */ (function () {
-    function FooBase() {
+    get prop2() {
+        return new BaseCollection(Derived.createEmpty);
     }
-    FooBase.prototype.populate = function () {
-    };
-    return FooBase;
-}());
+}
+class GenericType {
+    constructor(parent) { }
+}
+class FooBase {
+    populate() {
+    }
+}
