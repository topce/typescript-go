//// [tests/cases/compiler/moduleAugmentationsImports4.ts] ////

=== main.ts ===
/// <reference path="d.d.ts"/>
/// <reference path="e.d.ts"/>
import {A} from "./a";
>A : typeof A

import "D";
import "E";

let a: A;
>a : A

let b = a.getB().x.toFixed();
>b : any
>a.getB().x.toFixed() : any
>a.getB().x.toFixed : any
>a.getB().x : any
>a.getB() : any
>a.getB : any
>a : A
>getB : any
>x : any
>toFixed : any

let c = a.getCls().y.toLowerCase();
>c : any
>a.getCls().y.toLowerCase() : any
>a.getCls().y.toLowerCase : any
>a.getCls().y : any
>a.getCls() : any
>a.getCls : any
>a : A
>getCls : any
>y : any
>toLowerCase : any

=== a.ts ===
export class A {}
>A : A

=== c.d.ts ===
declare module "C" {
>"C" : typeof import("C")

    class Cls {y: string; }
>Cls : Cls
>y : string
}

=== d.d.ts ===
declare module "D" {
>"D" : typeof import("D")

    import {A} from "a";
>A : any

    import {B} from "b";
>B : any

    module "a" {
>"a" : any

        interface A {
            getB(): B;
>getB : () => B
        }
    }
}

=== e.d.ts ===
/// <reference path="c.d.ts"/>
declare module "E" {
>"E" : typeof import("E")

    import {A} from "a";
>A : any

    import {Cls} from "C";
>Cls : typeof Cls

    module "a" {
>"a" : any

        interface A {
            getCls(): Cls;
>getCls : () => Cls
        }
    }
}

