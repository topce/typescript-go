--- old.ipromise3.types
+++ new.ipromise3.types
@@= skipped -2, +2 lines =@@
 === ipromise3.ts ===
 interface IPromise3<T> {
     then<U>(success?: (value: T) => IPromise3<U>, error?: (error: any) => IPromise3<U>, progress?: (progress: any) => void ): IPromise3<U>;
->then : { <U>(success?: (value: T) => IPromise3<U>, error?: (error: any) => IPromise3<U>, progress?: (progress: any) => void): IPromise3<U>; <U_1>(success?: (value: T) => IPromise3<U_1>, error?: (error: any) => U_1, progress?: (progress: any) => void): IPromise3<U_1>; <U_1>(success?: (value: T) => U_1, error?: (error: any) => IPromise3<U_1>, progress?: (progress: any) => void): IPromise3<U_1>; <U_1>(success?: (value: T) => U_1, error?: (error: any) => U_1, progress?: (progress: any) => void): IPromise3<U_1>; }
+>then : { <U>(success?: (value: T) => IPromise3<U>, error?: (error: any) => IPromise3<U>, progress?: (progress: any) => void): IPromise3<U>; <U>(success?: (value: T) => IPromise3<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise3<U>; <U>(success?: (value: T) => U, error?: (error: any) => IPromise3<U>, progress?: (progress: any) => void): IPromise3<U>; <U>(success?: (value: T) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise3<U>; }
 >success : (value: T) => IPromise3<U>
 >value : T
 >error : (error: any) => IPromise3<U>
@@= skipped -9, +9 lines =@@
 >progress : any
 
     then<U>(success?: (value: T) => IPromise3<U>, error?: (error: any) => U, progress?: (progress: any) => void ): IPromise3<U>;
->then : { <U_1>(success?: (value: T) => IPromise3<U_1>, error?: (error: any) => IPromise3<U_1>, progress?: (progress: any) => void): IPromise3<U_1>; <U>(success?: (value: T) => IPromise3<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise3<U>; <U_1>(success?: (value: T) => U_1, error?: (error: any) => IPromise3<U_1>, progress?: (progress: any) => void): IPromise3<U_1>; <U_1>(success?: (value: T) => U_1, error?: (error: any) => U_1, progress?: (progress: any) => void): IPromise3<U_1>; }
+>then : { <U>(success?: (value: T) => IPromise3<U>, error?: (error: any) => IPromise3<U>, progress?: (progress: any) => void): IPromise3<U>; <U>(success?: (value: T) => IPromise3<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise3<U>; <U>(success?: (value: T) => U, error?: (error: any) => IPromise3<U>, progress?: (progress: any) => void): IPromise3<U>; <U>(success?: (value: T) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise3<U>; }
 >success : (value: T) => IPromise3<U>
 >value : T
 >error : (error: any) => U
@@= skipped -9, +9 lines =@@
 >progress : any
 
     then<U>(success?: (value: T) => U, error?: (error: any) => IPromise3<U>, progress?: (progress: any) => void ): IPromise3<U>;
->then : { <U_1>(success?: (value: T) => IPromise3<U_1>, error?: (error: any) => IPromise3<U_1>, progress?: (progress: any) => void): IPromise3<U_1>; <U_1>(success?: (value: T) => IPromise3<U_1>, error?: (error: any) => U_1, progress?: (progress: any) => void): IPromise3<U_1>; <U>(success?: (value: T) => U, error?: (error: any) => IPromise3<U>, progress?: (progress: any) => void): IPromise3<U>; <U_1>(success?: (value: T) => U_1, error?: (error: any) => U_1, progress?: (progress: any) => void): IPromise3<U_1>; }
+>then : { <U>(success?: (value: T) => IPromise3<U>, error?: (error: any) => IPromise3<U>, progress?: (progress: any) => void): IPromise3<U>; <U>(success?: (value: T) => IPromise3<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise3<U>; <U>(success?: (value: T) => U, error?: (error: any) => IPromise3<U>, progress?: (progress: any) => void): IPromise3<U>; <U>(success?: (value: T) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise3<U>; }
 >success : (value: T) => U
 >value : T
 >error : (error: any) => IPromise3<U>
@@= skipped -9, +9 lines =@@
 >progress : any
 
     then<U>(success?: (value: T) => U, error?: (error: any) => U, progress?: (progress: any) => void ): IPromise3<U>;
->then : { <U_1>(success?: (value: T) => IPromise3<U_1>, error?: (error: any) => IPromise3<U_1>, progress?: (progress: any) => void): IPromise3<U_1>; <U_1>(success?: (value: T) => IPromise3<U_1>, error?: (error: any) => U_1, progress?: (progress: any) => void): IPromise3<U_1>; <U_1>(success?: (value: T) => U_1, error?: (error: any) => IPromise3<U_1>, progress?: (progress: any) => void): IPromise3<U_1>; <U>(success?: (value: T) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise3<U>; }
+>then : { <U>(success?: (value: T) => IPromise3<U>, error?: (error: any) => IPromise3<U>, progress?: (progress: any) => void): IPromise3<U>; <U>(success?: (value: T) => IPromise3<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise3<U>; <U>(success?: (value: T) => U, error?: (error: any) => IPromise3<U>, progress?: (progress: any) => void): IPromise3<U>; <U>(success?: (value: T) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise3<U>; }
 >success : (value: T) => U
 >value : T
 >error : (error: any) => U
