--- old.emitClassExpressionInDeclarationFile2.js
+++ new.emitClassExpressionInDeclarationFile2.js
@@= skipped -32, +32 lines =@@
 
 //// [emitClassExpressionInDeclarationFile2.js]
 "use strict";
-var __extends = (this && this.__extends) || (function () {
-    var extendStatics = function (d, b) {
-        extendStatics = Object.setPrototypeOf ||
-            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
-            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
-        return extendStatics(d, b);
-    };
-    return function (d, b) {
-        if (typeof b !== "function" && b !== null)
-            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
-        extendStatics(d, b);
-        function __() { this.constructor = d; }
-        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-    };
-})();
-var __setFunctionName = (this && this.__setFunctionName) || function (f, name, prefix) {
-    if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
-    return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
-};
-var _a;
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.Test = exports.FooItem = exports.noPrivates = void 0;
 exports.WithTags = WithTags;
-exports.noPrivates = (_a = /** @class */ (function () {
-        function class_1() {
-            this.p = 12;
-        }
-        class_1.getTags = function () { };
-        class_1.prototype.tags = function () { };
-        return class_1;
-    }()),
-    __setFunctionName(_a, "noPrivates"),
-    _a.ps = -1,
-    _a);
+var noPrivates = class {
+    static getTags() { }
+    tags() { }
+    static ps = -1;
+    p = 12;
+}
 // altered repro from #15066 to add private property
-var FooItem = /** @class */ (function () {
-    function FooItem() {
-        this.property = "capitalism";
-    }
-    FooItem.prototype.foo = function () { };
-    return FooItem;
-}());
+;
+exports.noPrivates = noPrivates;
+// altered repro from #15066 to add private property
+class FooItem {
+    foo() { }
+    name;
+    property = "capitalism";
+}
 exports.FooItem = FooItem;
 function WithTags(Base) {
-    return /** @class */ (function (_super) {
-        __extends(class_2, _super);
-        function class_2() {
-            return _super !== null && _super.apply(this, arguments) || this;
-        }
-        class_2.getTags = function () { };
-        class_2.prototype.tags = function () { };
-        return class_2;
-    }(Base));
+    return class extends Base {
+        static getTags() { }
+        tags() { }
+    };
 }
-var Test = /** @class */ (function (_super) {
-    __extends(Test, _super);
-    function Test() {
-        return _super !== null && _super.apply(this, arguments) || this;
-    }
-    return Test;
-}(WithTags(FooItem)));
+class Test extends WithTags(FooItem) {
+}
 exports.Test = Test;
-var test = new Test();
+const test = new Test();
 Test.getTags();
 test.tags();
