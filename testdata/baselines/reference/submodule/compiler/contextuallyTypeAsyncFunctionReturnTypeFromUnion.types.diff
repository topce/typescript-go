--- old.contextuallyTypeAsyncFunctionReturnTypeFromUnion.types
+++ new.contextuallyTypeAsyncFunctionReturnTypeFromUnion.types
@@= skipped -23, +23 lines =@@
 >createMachine<{ count: number }>({  services: {    test: async () => Promise.reject("some err"),    async test2() {      return Promise.reject("some err");    },  },}) : void
 >createMachine : <T>(implementations: { services: Record<string, () => Promise<T> | StateMachine<T>>; }) => void
 >count : number
->{  services: {    test: async () => Promise.reject("some err"),    async test2() {      return Promise.reject("some err");    },  },} : { services: { test: () => Promise<{ count: number; }>; test2(): Promise<{ count: number; }>; }; }
+>{  services: {    test: async () => Promise.reject("some err"),    async test2() {      return Promise.reject("some err");    },  },} : { services: { test: () => Promise<{ count: number; }>; test2: () => Promise<{ count: number; }>; }; }
 
   services: {
->services : { test: () => Promise<{ count: number; }>; test2(): Promise<{ count: number; }>; }
->{    test: async () => Promise.reject("some err"),    async test2() {      return Promise.reject("some err");    },  } : { test: () => Promise<{ count: number; }>; test2(): Promise<{ count: number; }>; }
+>services : { test: () => Promise<{ count: number; }>; test2: () => Promise<{ count: number; }>; }
+>{    test: async () => Promise.reject("some err"),    async test2() {      return Promise.reject("some err");    },  } : { test: () => Promise<{ count: number; }>; test2: () => Promise<{ count: number; }>; }
 
     test: async () => Promise.reject("some err"),
 >test : () => Promise<{ count: number; }>
 >async () => Promise.reject("some err") : () => Promise<{ count: number; }>
 >Promise.reject("some err") : Promise<{ count: number; }>
->Promise.reject : <T = never>(reason?: any) => Promise<T>
+>Promise.reject : <T>(reason?: any) => Promise<T>
 >Promise : PromiseConstructor
->reject : <T = never>(reason?: any) => Promise<T>
+>reject : <T>(reason?: any) => Promise<T>
 >"some err" : "some err"
 
     async test2() {
@@= skipped -20, +20 lines =@@
 
       return Promise.reject("some err");
 >Promise.reject("some err") : Promise<{ count: number; }>
->Promise.reject : <T = never>(reason?: any) => Promise<T>
+>Promise.reject : <T>(reason?: any) => Promise<T>
 >Promise : PromiseConstructor
->reject : <T = never>(reason?: any) => Promise<T>
+>reject : <T>(reason?: any) => Promise<T>
 >"some err" : "some err"
 
     },
@@= skipped -17, +17 lines =@@
   return async () => Promise.reject('some err')
 >async () => Promise.reject('some err') : () => Promise<{ count: number; }>
 >Promise.reject('some err') : Promise<{ count: number; }>
->Promise.reject : <T = never>(reason?: any) => Promise<T>
+>Promise.reject : <T>(reason?: any) => Promise<T>
 >Promise : PromiseConstructor
->reject : <T = never>(reason?: any) => Promise<T>
+>reject : <T>(reason?: any) => Promise<T>
 >'some err' : "some err"
 }
 
@@= skipped -19, +19 lines =@@
 >cb1 : LoadCallback
 >async () => load().then(m => m) : () => Promise<boolean>
 >load().then(m => m) : Promise<boolean>
->load().then : <TResult1 = boolean, TResult2 = never>(onfulfilled?: ((value: boolean) => TResult1 | PromiseLike<TResult1>) | null | undefined, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null | undefined) => Promise<TResult1 | TResult2>
+>load().then : <TResult1, TResult2>(onfulfilled?: (value: boolean) => TResult1 | PromiseLike<TResult1> | null | undefined, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2> | null | undefined) => Promise<TResult1 | TResult2>
 >load() : Promise<boolean>
 >load : () => Promise<boolean>
->then : <TResult1 = boolean, TResult2 = never>(onfulfilled?: ((value: boolean) => TResult1 | PromiseLike<TResult1>) | null | undefined, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null | undefined) => Promise<TResult1 | TResult2>
+>then : <TResult1, TResult2>(onfulfilled?: (value: boolean) => TResult1 | PromiseLike<TResult1> | null | undefined, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2> | null | undefined) => Promise<TResult1 | TResult2>
 >m => m : (m: boolean) => boolean
 >m : boolean
 >m : boolean
@@= skipped -18, +18 lines =@@
 >cb3 : LoadCallback
 >() => load().then(m => m) : () => Promise<boolean>
 >load().then(m => m) : Promise<boolean>
->load().then : <TResult1 = boolean, TResult2 = never>(onfulfilled?: ((value: boolean) => TResult1 | PromiseLike<TResult1>) | null | undefined, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null | undefined) => Promise<TResult1 | TResult2>
+>load().then : <TResult1, TResult2>(onfulfilled?: (value: boolean) => TResult1 | PromiseLike<TResult1> | null | undefined, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2> | null | undefined) => Promise<TResult1 | TResult2>
 >load() : Promise<boolean>
 >load : () => Promise<boolean>
->then : <TResult1 = boolean, TResult2 = never>(onfulfilled?: ((value: boolean) => TResult1 | PromiseLike<TResult1>) | null | undefined, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null | undefined) => Promise<TResult1 | TResult2>
+>then : <TResult1, TResult2>(onfulfilled?: (value: boolean) => TResult1 | PromiseLike<TResult1> | null | undefined, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2> | null | undefined) => Promise<TResult1 | TResult2>
 >m => m : (m: boolean) => boolean
 >m : boolean
 >m : boolean
