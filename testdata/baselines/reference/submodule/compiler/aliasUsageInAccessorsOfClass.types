//// [tests/cases/compiler/aliasUsageInAccessorsOfClass.ts] ////

=== aliasUsage1_main.ts ===
import Backbone = require("./aliasUsage1_backbone");
>Backbone : typeof import("aliasUsage1_backbone")

import moduleA = require("./aliasUsage1_moduleA");
>moduleA : typeof import("aliasUsage1_moduleA")

interface IHasVisualizationModel {
    VisualizationModel: typeof Backbone.Model;
>VisualizationModel : typeof Model
>Backbone.Model : typeof Model
>Backbone : typeof import("aliasUsage1_backbone")
>Model : typeof Model
}
class C2 {
>C2 : C2

    x: IHasVisualizationModel;
>x : IHasVisualizationModel

    get A() {
>A : IHasVisualizationModel

        return this.x;
>this.x : IHasVisualizationModel
>this : this
>x : IHasVisualizationModel
    }
    set A(x) {
>A : IHasVisualizationModel
>x : IHasVisualizationModel

        x = moduleA;
>x = moduleA : typeof import("aliasUsage1_moduleA")
>x : IHasVisualizationModel
>moduleA : typeof import("aliasUsage1_moduleA")
    }
}
=== aliasUsage1_backbone.ts ===
export class Model {
>Model : Model

    public someData: string;
>someData : string
}

=== aliasUsage1_moduleA.ts ===
import Backbone = require("./aliasUsage1_backbone");
>Backbone : typeof import("aliasUsage1_backbone")

export class VisualizationModel extends Backbone.Model {
>VisualizationModel : VisualizationModel
>Backbone.Model : Model
>Backbone : typeof import("aliasUsage1_backbone")
>Model : typeof Model

    // interesting stuff here
}

