--- old.typeArgumentConstraintResolution1.types
+++ new.typeArgumentConstraintResolution1.types
@@= skipped -1, +1 lines =@@
 
 === typeArgumentConstraintResolution1.ts ===
 function foo1<T extends Date>(test: T);
->foo1 : { <T extends Date>(test: T): any; <T_1 extends Number>(test: string): any; }
+>foo1 : { <T extends Date>(test: T): any; <T extends Number>(test: string): any; }
 >test : T
 
 function foo1<T extends Number>(test: string);
->foo1 : { <T_1 extends Date>(test: T_1): any; <T extends Number>(test: string): any; }
+>foo1 : { <T extends Date>(test: T): any; <T extends Number>(test: string): any; }
 >test : string
 
 function foo1<T extends String>(test: any) { }
->foo1 : { <T_1 extends Date>(test: T_1): any; <T_1 extends Number>(test: string): any; }
+>foo1 : { <T extends Date>(test: T): any; <T extends Number>(test: string): any; }
 >test : any
 
 foo1<Date>(""); // should error
@@= skipped -19, +19 lines =@@
 
 
 function foo2<T extends Date>(test: T): T;
->foo2 : { <T extends Date>(test: T): T; <T_1 extends Number>(test: string): T_1; }
+>foo2 : { <T extends Date>(test: T): T; <T extends Number>(test: string): T; }
 >test : T
 
 function foo2<T extends Number>(test: string): T; 
->foo2 : { <T_1 extends Date>(test: T_1): T_1; <T extends Number>(test: string): T; }
+>foo2 : { <T extends Date>(test: T): T; <T extends Number>(test: string): T; }
 >test : string
 
 function foo2<T extends String>(test: any): any { return null; }
->foo2 : { <T_1 extends Date>(test: T_1): T_1; <T_1 extends Number>(test: string): T_1; }
+>foo2 : { <T extends Date>(test: T): T; <T extends Number>(test: string): T; }
 >test : any
 
 foo2<Date>(""); // Type Date does not satisfy the constraint 'Number' for type parameter 'T extends Number'
