//// [tests/cases/compiler/defaultDeclarationEmitShadowedNamedCorrectly.ts] ////

=== this.ts ===
import * as me from "./this";
>me : typeof import("this")

export interface Things<P, T> {
    p: P;
>p : P

    t: T;
>t : T
}
export function make<P, CTor>(x: { new (): CTor & {props: P} }): Things<P, CTor> {
>make : <P, CTor>(x: new () => CTor & { props: P; }) => Things<P, CTor>
>x : new () => CTor & { props: P; }
>props : P

    return null as any;
>null as any : any
}

export interface Props {
}

export default class MyComponent {
>MyComponent : default

    props: Props;
>props : Props
}
export namespace Something {
>Something : typeof Something

    let MyComponent = 2; // Shadow declaration, so symbol is only usable via the self-import
>MyComponent : number
>2 : 2

    export const create = make(me.default);
>create : Things<Props, default>
>make(me.default) : Things<Props, default>
>make : <P, CTor>(x: new () => CTor & { props: P; }) => Things<P, CTor>
>me.default : typeof default
>me : typeof import("this")
>default : typeof default
}
