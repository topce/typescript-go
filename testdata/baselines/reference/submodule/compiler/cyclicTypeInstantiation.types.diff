--- old.cyclicTypeInstantiation.types
+++ new.cyclicTypeInstantiation.types
@@= skipped -1, +1 lines =@@
 
 === cyclicTypeInstantiation.ts ===
 function foo<T>() {
->foo : <T>() => { a: T; b: any; }
+>foo : <T>() => { a: T; b: ???; }
 
     var x: {
->x : { a: T; b: any; }
+>x : { a: T; b: ???; }
 
         a: T;
 >a : T
 
         b: typeof x;
->b : { a: T; b: any; }
->x : { a: T; b: any; }
+>b : { a: T; b: ???; }
+>x : { a: T; b: ???; }
 
     };
     return x;
->x : { a: T; b: any; }
+>x : { a: T; b: ???; }
 }
 
 function bar<T>() {
->bar : <T>() => { a: T; b: any; }
+>bar : <T>() => { a: T; b: ???; }
 
     var x: {
->x : { a: T; b: any; }
+>x : { a: T; b: ???; }
 
         a: T;
 >a : T
 
         b: typeof x;
->b : { a: T; b: any; }
->x : { a: T; b: any; }
+>b : { a: T; b: ???; }
+>x : { a: T; b: ???; }
 
     };
     return x;
->x : { a: T; b: any; }
+>x : { a: T; b: ???; }
 }
 
 var a = foo<string>();
->a : { a: string; b: any; }
->foo<string>() : { a: string; b: any; }
->foo : <T>() => { a: T; b: any; }
+>a : { a: string; b: ???; }
+>foo<string>() : { a: string; b: ???; }
+>foo : <T>() => { a: T; b: ???; }
 
 var b = bar<string>();
->b : { a: string; b: any; }
->bar<string>() : { a: string; b: any; }
->bar : <T>() => { a: T; b: any; }
+>b : { a: string; b: ???; }
+>bar<string>() : { a: string; b: ???; }
+>bar : <T>() => { a: T; b: ???; }
 
 // Relating types of a and b produces instantiations of the cyclic anonymous types in foo and bar
 a = b;
->a = b : { a: string; b: any; }
->a : { a: string; b: any; }
->b : { a: string; b: any; }
+>a = b : { a: string; b: ???; }
+>a : { a: string; b: ???; }
+>b : { a: string; b: ???; }
 
