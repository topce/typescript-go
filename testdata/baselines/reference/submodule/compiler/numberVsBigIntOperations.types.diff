--- old.numberVsBigIntOperations.types
+++ new.numberVsBigIntOperations.types
@@= skipped -598, +598 lines =@@
 
 if (typeof bigIntOrNumber === "bigint") {
 >typeof bigIntOrNumber === "bigint" : boolean
->typeof bigIntOrNumber : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof bigIntOrNumber : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >bigIntOrNumber : number | bigint
 >"bigint" : "bigint"
 
@@= skipped -14, +14 lines =@@
 }
 if (typeof bigIntOrNumber === "number") {
 >typeof bigIntOrNumber === "number" : boolean
->typeof bigIntOrNumber : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof bigIntOrNumber : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >bigIntOrNumber : number | bigint
 >"number" : "number"
 
@@= skipped -82, +82 lines =@@
 
 if (typeof zeroOrBigOne === "bigint") isBigInt(zeroOrBigOne);
 >typeof zeroOrBigOne === "bigint" : boolean
->typeof zeroOrBigOne : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof zeroOrBigOne : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >zeroOrBigOne : 0 | 1n
 >"bigint" : "bigint"
 >isBigInt(zeroOrBigOne) : bigint
@@= skipped -14, +14 lines =@@
 
 // Distinguishing truthy from falsy
 const isOne = (x: 1 | 1n) => x;
->isOne : (x: 1 | 1n) => 1n | 1
->(x: 1 | 1n) => x : (x: 1 | 1n) => 1n | 1
->x : 1n | 1
->x : 1n | 1
+>isOne : (x: 1 | 1n) => 1 | 1n
+>(x: 1 | 1n) => x : (x: 1 | 1n) => 1 | 1n
+>x : 1 | 1n
+>x : 1 | 1n
 
 if (zeroOrBigOne) isOne(zeroOrBigOne);
 >zeroOrBigOne : 0 | 1n
->isOne(zeroOrBigOne) : 1n | 1
->isOne : (x: 1 | 1n) => 1n | 1
+>isOne(zeroOrBigOne) : 1 | 1n
+>isOne : (x: 1 | 1n) => 1 | 1n
 >zeroOrBigOne : 1n
 
 const bigZeroOrOne: 0n | 1;
->bigZeroOrOne : 0n | 1
+>bigZeroOrOne : 1 | 0n
 
 if (bigZeroOrOne) isOne(bigZeroOrOne);
->bigZeroOrOne : 0n | 1
->isOne(bigZeroOrOne) : 1n | 1
->isOne : (x: 1 | 1n) => 1n | 1
+>bigZeroOrOne : 1 | 0n
+>isOne(bigZeroOrOne) : 1 | 1n
+>isOne : (x: 1 | 1n) => 1 | 1n
 >bigZeroOrOne : 1
 
 type NumberOrBigint = number | bigint;
