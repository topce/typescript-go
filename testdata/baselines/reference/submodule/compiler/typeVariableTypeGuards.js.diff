--- old.typeVariableTypeGuards.js
+++ new.typeVariableTypeGuards.js
@@= skipped -92, +92 lines =@@
 
 
 //// [typeVariableTypeGuards.js]
-"use strict";
-// Repro from #14091
-var __extends = (this && this.__extends) || (function () {
-    var extendStatics = function (d, b) {
-        extendStatics = Object.setPrototypeOf ||
-            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
-            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
-        return extendStatics(d, b);
-    };
-    return function (d, b) {
-        if (typeof b !== "function" && b !== null)
-            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
-        extendStatics(d, b);
-        function __() { this.constructor = d; }
-        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-    };
-})();
-var A = /** @class */ (function () {
-    function A(props) {
+class A {
+    props;
+    constructor(props) {
         this.props = props;
     }
-    A.prototype.doSomething = function () {
+    doSomething() {
         this.props.foo && this.props.foo();
-    };
-    return A;
-}());
-var Monkey = /** @class */ (function () {
-    function Monkey(a) {
+    }
+}
+class Monkey {
+    a;
+    constructor(a) {
         this.a = a;
     }
-    Monkey.prototype.render = function () {
+    render() {
         if (this.a) {
             this.a.color;
         }
-    };
-    return Monkey;
-}());
-var BigMonkey = /** @class */ (function (_super) {
-    __extends(BigMonkey, _super);
-    function BigMonkey() {
-        return _super !== null && _super.apply(this, arguments) || this;
     }
-    BigMonkey.prototype.render = function () {
+}
+class BigMonkey extends Monkey {
+    render() {
         if (this.a) {
             this.a.color;
         }
-    };
-    return BigMonkey;
-}(Monkey));
+    }
+}
 function f1(obj) {
     if (obj) {
         obj.x;
