--- old.recursiveClassReferenceTest.js
+++ new.recursiveClassReferenceTest.js
@@= skipped -104, +104 lines =@@
 
 
 //// [recursiveClassReferenceTest.js]
-// Scenario 1: Test reqursive function call with "this" parameter
-// Scenario 2: Test recursive function call with cast and "this" parameter
-var __extends = (this && this.__extends) || (function () {
-    var extendStatics = function (d, b) {
-        extendStatics = Object.setPrototypeOf ||
-            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
-            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
-        return extendStatics(d, b);
-    };
-    return function (d, b) {
-        if (typeof b !== "function" && b !== null)
-            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
-        extendStatics(d, b);
-        function __() { this.constructor = d; }
-        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-    };
-})();
 var Sample;
 (function (Sample) {
-    var Actions;
+    let Actions;
     (function (Actions) {
-        var Thing;
+        let Thing;
         (function (Thing_1) {
-            var Find;
+            let Find;
             (function (Find) {
-                var StartFindAction = /** @class */ (function () {
-                    function StartFindAction() {
-                    }
-                    StartFindAction.prototype.getId = function () { return "yo"; };
-                    StartFindAction.prototype.run = function (Thing) {
+                class StartFindAction {
+                    getId() { return "yo"; }
+                    run(Thing) {
                         return true;
-                    };
-                    return StartFindAction;
-                }());
+                    }
+                }
                 Find.StartFindAction = StartFindAction;
             })(Find = Thing_1.Find || (Thing_1.Find = {}));
         })(Thing = Actions.Thing || (Actions.Thing = {}));
     })(Actions = Sample.Actions || (Sample.Actions = {}));
 })(Sample || (Sample = {}));
 (function (Sample) {
-    var Thing;
+    let Thing;
     (function (Thing) {
-        var Widgets;
+        let Widgets;
         (function (Widgets) {
-            var FindWidget = /** @class */ (function () {
-                function FindWidget(codeThing) {
+            class FindWidget {
+                codeThing;
+                gar(runner) { if (true) {
+                    return runner(this);
+                } }
+                domNode = null;
+                constructor(codeThing) {
                     this.codeThing = codeThing;
-                    this.domNode = null;
-                    // scenario 1
                     codeThing.addWidget("addWidget", this);
                 }
-                FindWidget.prototype.gar = function (runner) { if (true) {
-                    return runner(this);
-                } };
-                FindWidget.prototype.getDomNode = function () {
+                getDomNode() {
                     return domNode;
-                };
-                FindWidget.prototype.destroy = function () {
-                };
-                return FindWidget;
-            }());
+                }
+                destroy() {
+                }
+            }
             Widgets.FindWidget = FindWidget;
         })(Widgets = Thing.Widgets || (Thing.Widgets = {}));
     })(Thing = Sample.Thing || (Sample.Thing = {}));
 })(Sample || (Sample = {}));
-var AbstractMode = /** @class */ (function () {
-    function AbstractMode() {
-    }
-    AbstractMode.prototype.getInitialState = function () { return null; };
-    return AbstractMode;
-}());
+class AbstractMode {
+    getInitialState() { return null; }
+}
 (function (Sample) {
-    var Thing;
+    let Thing;
     (function (Thing) {
-        var Languages;
+        let Languages;
         (function (Languages) {
-            var PlainText;
+            let PlainText;
             (function (PlainText) {
-                var State = /** @class */ (function () {
-                    function State(mode) {
+                class State {
+                    mode;
+                    constructor(mode) {
                         this.mode = mode;
                     }
-                    State.prototype.clone = function () {
+                    clone() {
                         return this;
-                    };
-                    State.prototype.equals = function (other) {
+                    }
+                    equals(other) {
                         return this === other;
-                    };
-                    State.prototype.getMode = function () { return mode; };
-                    return State;
-                }());
-                PlainText.State = State;
-                var Mode = /** @class */ (function (_super) {
-                    __extends(Mode, _super);
-                    function Mode() {
-                        return _super !== null && _super.apply(this, arguments) || this;
                     }
-                    // scenario 2
-                    Mode.prototype.getInitialState = function () {
+                    getMode() { return mode; }
+                }
+                PlainText.State = State;
+                class Mode extends AbstractMode {
+                    getInitialState() {
                         return new State(self);
-                    };
-                    return Mode;
-                }(AbstractMode));
+                    }
+                }
                 PlainText.Mode = Mode;
             })(PlainText = Languages.PlainText || (Languages.PlainText = {}));
         })(Languages = Thing.Languages || (Thing.Languages = {}));
     })(Thing = Sample.Thing || (Sample.Thing = {}));
 })(Sample || (Sample = {}));
-//# sourceMappingURL=recursiveClassReferenceTest.js.map
