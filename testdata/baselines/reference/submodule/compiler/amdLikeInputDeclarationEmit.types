//// [tests/cases/compiler/amdLikeInputDeclarationEmit.ts] ////

=== typing.d.ts ===
declare function define<T=unknown>(name: string, modules: string[], ready: (...modules: unknown[]) => T);
>define : <T>(name: string, modules: string[], ready: (...modules: unknown[]) => T) => any
>name : string
>modules : string[]
>ready : (...modules: unknown[]) => T
>modules : unknown[]

=== deps/BaseClass.d.ts ===
declare module "deps/BaseClass" {
>"deps/BaseClass" : typeof import("deps/BaseClass")

    class BaseClass {
>BaseClass : BaseClass

        static extends<A>(a: A): new () => A & BaseClass;
>extends : <A>(a: A) => new () => A & BaseClass
>a : A
    }
    export = BaseClass;
>BaseClass : BaseClass
}
=== ExtendedClass.js ===
define("lib/ExtendedClass", ["deps/BaseClass"], 
>define("lib/ExtendedClass", ["deps/BaseClass"], /** * {typeof import("deps/BaseClass")} * @param  {typeof import("deps/BaseClass")} BaseClass  * @returns  */(BaseClass) => {            const ExtendedClass = BaseClass.extends({        f: function() {            return "something";        }    });    // Exports the module in a way tsc recognize class export     const module = {};    module.exports = ExtendedClass    return module.exports;}) : any
>define : <T>(name: string, modules: string[], ready: (...modules: unknown[]) => T) => any
>"lib/ExtendedClass" : "lib/ExtendedClass"
>["deps/BaseClass"] : string[]
>"deps/BaseClass" : "deps/BaseClass"

/**
 * {typeof import("deps/BaseClass")}
 * @param  {typeof import("deps/BaseClass")} BaseClass 
 * @returns 
 */
(BaseClass) => {    
>(BaseClass) => {            const ExtendedClass = BaseClass.extends({        f: function() {            return "something";        }    });    // Exports the module in a way tsc recognize class export     const module = {};    module.exports = ExtendedClass    return module.exports;} : (BaseClass: unknown) => any
>BaseClass : unknown
    
    const ExtendedClass = BaseClass.extends({
>ExtendedClass : any
>BaseClass.extends({        f: function() {            return "something";        }    }) : any
>BaseClass.extends : any
>BaseClass : unknown
>extends : any
>{        f: function() {            return "something";        }    } : { f: () => string; }

        f: function() {
>f : () => string
>function() {            return "something";        } : () => string

            return "something";
>"something" : "something"
        }
    });

    // Exports the module in a way tsc recognize class export 
    const module = {};
>module : {}
>{} : {}

    module.exports = ExtendedClass
>module.exports = ExtendedClass : any
>module.exports : any
>module : {}
>exports : any
>ExtendedClass : any

    return module.exports;
>module.exports : any
>module : {}
>exports : any

});
