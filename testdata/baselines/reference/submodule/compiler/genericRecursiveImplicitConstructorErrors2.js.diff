--- old.genericRecursiveImplicitConstructorErrors2.js
+++ new.genericRecursiveImplicitConstructorErrors2.js
@@= skipped -28, +28 lines =@@
 
 
 //// [genericRecursiveImplicitConstructorErrors2.js]
-var __extends = (this && this.__extends) || (function () {
-    var extendStatics = function (d, b) {
-        extendStatics = Object.setPrototypeOf ||
-            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
-            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
-        return extendStatics(d, b);
-    };
-    return function (d, b) {
-        if (typeof b !== "function" && b !== null)
-            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
-        extendStatics(d, b);
-        function __() { this.constructor = d; }
-        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-    };
-})();
 var TypeScript2;
 (function (TypeScript2) {
     ;
     ;
     ;
-    var PullSymbolVisibility;
+    let PullSymbolVisibility;
     (function (PullSymbolVisibility) {
         PullSymbolVisibility[PullSymbolVisibility["Private"] = 0] = "Private";
         PullSymbolVisibility[PullSymbolVisibility["Public"] = 1] = "Public";
     })(PullSymbolVisibility = TypeScript2.PullSymbolVisibility || (TypeScript2.PullSymbolVisibility = {}));
-    var PullSymbol = /** @class */ (function () {
-        function PullSymbol(name, declKind) {
+    class PullSymbol {
+        constructor(name, declKind) {
         }
         // link methods
-        PullSymbol.prototype.addOutgoingLink = function (linkTo, kind) {
-        };
-        PullSymbol.prototype.getType = function () {
+        addOutgoingLink(linkTo, kind) {
+        }
+        getType() {
             return undefined;
-        };
-        return PullSymbol;
-    }());
-    TypeScript2.PullSymbol = PullSymbol;
-    var PullTypeSymbol = /** @class */ (function (_super) {
-        __extends(PullTypeSymbol, _super);
-        function PullTypeSymbol() {
-            return _super !== null && _super.apply(this, arguments) || this;
         }
-        return PullTypeSymbol;
-    }(PullSymbol));
+    }
+    TypeScript2.PullSymbol = PullSymbol;
+    class PullTypeSymbol extends PullSymbol {
+    }
     TypeScript2.PullTypeSymbol = PullTypeSymbol;
 })(TypeScript2 || (TypeScript2 = {}));
