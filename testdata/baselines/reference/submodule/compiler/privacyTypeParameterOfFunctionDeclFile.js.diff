--- old.privacyTypeParameterOfFunctionDeclFile.js
+++ new.privacyTypeParameterOfFunctionDeclFile.js
@@= skipped -447, +447 lines =@@
 exports.publicFunctionWithPublicTypeParameters = publicFunctionWithPublicTypeParameters;
 exports.publicFunctionWithPublicTypeParametersWithoutExtends = publicFunctionWithPublicTypeParametersWithoutExtends;
 exports.publicFunctionWithPrivateMopduleTypeParameters = publicFunctionWithPrivateMopduleTypeParameters;
-var privateClass = /** @class */ (function () {
-    function privateClass() {
+class privateClass {
+}
+class publicClass {
+}
+exports.publicClass = publicClass;
+class publicClassWithWithPrivateTypeParameters {
+    static myPublicStaticMethod() {
     }
-    return privateClass;
-}());
-var publicClass = /** @class */ (function () {
-    function publicClass() {
+    static myPrivateStaticMethod() {
     }
-    return publicClass;
-}());
-exports.publicClass = publicClass;
-var publicClassWithWithPrivateTypeParameters = /** @class */ (function () {
-    function publicClassWithWithPrivateTypeParameters() {
+    myPublicMethod() {
     }
-    publicClassWithWithPrivateTypeParameters.myPublicStaticMethod = function () {
-    };
-    publicClassWithWithPrivateTypeParameters.myPrivateStaticMethod = function () {
-    };
-    publicClassWithWithPrivateTypeParameters.prototype.myPublicMethod = function () {
-    };
-    publicClassWithWithPrivateTypeParameters.prototype.myPrivateMethod = function () {
-    };
-    return publicClassWithWithPrivateTypeParameters;
-}());
+    myPrivateMethod() {
+    }
+}
 exports.publicClassWithWithPrivateTypeParameters = publicClassWithWithPrivateTypeParameters;
-var publicClassWithWithPublicTypeParameters = /** @class */ (function () {
-    function publicClassWithWithPublicTypeParameters() {
+class publicClassWithWithPublicTypeParameters {
+    static myPublicStaticMethod() {
     }
-    publicClassWithWithPublicTypeParameters.myPublicStaticMethod = function () {
-    };
-    publicClassWithWithPublicTypeParameters.myPrivateStaticMethod = function () {
-    };
-    publicClassWithWithPublicTypeParameters.prototype.myPublicMethod = function () {
-    };
-    publicClassWithWithPublicTypeParameters.prototype.myPrivateMethod = function () {
-    };
-    return publicClassWithWithPublicTypeParameters;
-}());
+    static myPrivateStaticMethod() {
+    }
+    myPublicMethod() {
+    }
+    myPrivateMethod() {
+    }
+}
 exports.publicClassWithWithPublicTypeParameters = publicClassWithWithPublicTypeParameters;
-var privateClassWithWithPrivateTypeParameters = /** @class */ (function () {
-    function privateClassWithWithPrivateTypeParameters() {
+class privateClassWithWithPrivateTypeParameters {
+    static myPublicStaticMethod() {
     }
-    privateClassWithWithPrivateTypeParameters.myPublicStaticMethod = function () {
-    };
-    privateClassWithWithPrivateTypeParameters.myPrivateStaticMethod = function () {
-    };
-    privateClassWithWithPrivateTypeParameters.prototype.myPublicMethod = function () {
-    };
-    privateClassWithWithPrivateTypeParameters.prototype.myPrivateMethod = function () {
-    };
-    return privateClassWithWithPrivateTypeParameters;
-}());
-var privateClassWithWithPublicTypeParameters = /** @class */ (function () {
-    function privateClassWithWithPublicTypeParameters() {
+    static myPrivateStaticMethod() {
     }
-    privateClassWithWithPublicTypeParameters.myPublicStaticMethod = function () {
-    };
-    privateClassWithWithPublicTypeParameters.myPrivateStaticMethod = function () {
-    };
-    privateClassWithWithPublicTypeParameters.prototype.myPublicMethod = function () {
-    };
-    privateClassWithWithPublicTypeParameters.prototype.myPrivateMethod = function () {
-    };
-    return privateClassWithWithPublicTypeParameters;
-}());
+    myPublicMethod() {
+    }
+    myPrivateMethod() {
+    }
+}
+class privateClassWithWithPublicTypeParameters {
+    static myPublicStaticMethod() {
+    }
+    static myPrivateStaticMethod() {
+    }
+    myPublicMethod() {
+    }
+    myPrivateMethod() {
+    }
+}
 function publicFunctionWithPrivateTypeParameters() {
 }
 function publicFunctionWithPublicTypeParameters() {
@@= skipped -73, +55 lines =@@
 }
 function privateFunctionWithPublicTypeParameters() {
 }
-var publicClassWithWithPublicTypeParametersWithoutExtends = /** @class */ (function () {
-    function publicClassWithWithPublicTypeParametersWithoutExtends() {
+class publicClassWithWithPublicTypeParametersWithoutExtends {
+    static myPublicStaticMethod() {
     }
-    publicClassWithWithPublicTypeParametersWithoutExtends.myPublicStaticMethod = function () {
-    };
-    publicClassWithWithPublicTypeParametersWithoutExtends.myPrivateStaticMethod = function () {
-    };
-    publicClassWithWithPublicTypeParametersWithoutExtends.prototype.myPublicMethod = function () {
-    };
-    publicClassWithWithPublicTypeParametersWithoutExtends.prototype.myPrivateMethod = function () {
-    };
-    return publicClassWithWithPublicTypeParametersWithoutExtends;
-}());
+    static myPrivateStaticMethod() {
+    }
+    myPublicMethod() {
+    }
+    myPrivateMethod() {
+    }
+}
 exports.publicClassWithWithPublicTypeParametersWithoutExtends = publicClassWithWithPublicTypeParametersWithoutExtends;
-var privateClassWithWithPublicTypeParametersWithoutExtends = /** @class */ (function () {
-    function privateClassWithWithPublicTypeParametersWithoutExtends() {
+class privateClassWithWithPublicTypeParametersWithoutExtends {
+    static myPublicStaticMethod() {
     }
-    privateClassWithWithPublicTypeParametersWithoutExtends.myPublicStaticMethod = function () {
-    };
-    privateClassWithWithPublicTypeParametersWithoutExtends.myPrivateStaticMethod = function () {
-    };
-    privateClassWithWithPublicTypeParametersWithoutExtends.prototype.myPublicMethod = function () {
-    };
-    privateClassWithWithPublicTypeParametersWithoutExtends.prototype.myPrivateMethod = function () {
-    };
-    return privateClassWithWithPublicTypeParametersWithoutExtends;
-}());
+    static myPrivateStaticMethod() {
+    }
+    myPublicMethod() {
+    }
+    myPrivateMethod() {
+    }
+}
 function publicFunctionWithPublicTypeParametersWithoutExtends() {
 }
 function privateFunctionWithPublicTypeParametersWithoutExtends() {
 }
-var publicClassWithWithPrivateModuleTypeParameters = /** @class */ (function () {
-    function publicClassWithWithPrivateModuleTypeParameters() {
+class publicClassWithWithPrivateModuleTypeParameters {
+    static myPublicStaticMethod() {
     }
-    publicClassWithWithPrivateModuleTypeParameters.myPublicStaticMethod = function () {
-    };
-    publicClassWithWithPrivateModuleTypeParameters.prototype.myPublicMethod = function () {
-    };
-    return publicClassWithWithPrivateModuleTypeParameters;
-}());
+    myPublicMethod() {
+    }
+}
 exports.publicClassWithWithPrivateModuleTypeParameters = publicClassWithWithPrivateModuleTypeParameters;
 function publicFunctionWithPrivateMopduleTypeParameters() {
 }
-var privateClassWithWithPrivateModuleTypeParameters = /** @class */ (function () {
-    function privateClassWithWithPrivateModuleTypeParameters() {
+class privateClassWithWithPrivateModuleTypeParameters {
+    static myPublicStaticMethod() {
     }
-    privateClassWithWithPrivateModuleTypeParameters.myPublicStaticMethod = function () {
-    };
-    privateClassWithWithPrivateModuleTypeParameters.prototype.myPublicMethod = function () {
-    };
-    return privateClassWithWithPrivateModuleTypeParameters;
-}());
+    myPublicMethod() {
+    }
+}
 function privateFunctionWithPrivateMopduleTypeParameters() {
 }
 var publicModule;
 (function (publicModule) {
-    var privateClass = /** @class */ (function () {
-        function privateClass() {
+    class privateClass {
+    }
+    class publicClass {
+    }
+    publicModule.publicClass = publicClass;
+    class publicClassWithWithPrivateTypeParameters {
+        static myPublicStaticMethod() {
         }
-        return privateClass;
-    }());
-    var publicClass = /** @class */ (function () {
-        function publicClass() {
+        static myPrivateStaticMethod() {
         }
-        return publicClass;
-    }());
-    publicModule.publicClass = publicClass;
-    var publicClassWithWithPrivateTypeParameters = /** @class */ (function () {
-        function publicClassWithWithPrivateTypeParameters() {
+        myPublicMethod() {
         }
-        publicClassWithWithPrivateTypeParameters.myPublicStaticMethod = function () {
-        };
-        publicClassWithWithPrivateTypeParameters.myPrivateStaticMethod = function () {
-        };
-        publicClassWithWithPrivateTypeParameters.prototype.myPublicMethod = function () {
-        };
-        publicClassWithWithPrivateTypeParameters.prototype.myPrivateMethod = function () {
-        };
-        return publicClassWithWithPrivateTypeParameters;
-    }());
+        myPrivateMethod() {
+        }
+    }
     publicModule.publicClassWithWithPrivateTypeParameters = publicClassWithWithPrivateTypeParameters;
-    var publicClassWithWithPublicTypeParameters = /** @class */ (function () {
-        function publicClassWithWithPublicTypeParameters() {
+    class publicClassWithWithPublicTypeParameters {
+        static myPublicStaticMethod() {
         }
-        publicClassWithWithPublicTypeParameters.myPublicStaticMethod = function () {
-        };
-        publicClassWithWithPublicTypeParameters.myPrivateStaticMethod = function () {
-        };
-        publicClassWithWithPublicTypeParameters.prototype.myPublicMethod = function () {
-        };
-        publicClassWithWithPublicTypeParameters.prototype.myPrivateMethod = function () {
-        };
-        return publicClassWithWithPublicTypeParameters;
-    }());
+        static myPrivateStaticMethod() {
+        }
+        myPublicMethod() {
+        }
+        myPrivateMethod() {
+        }
+    }
     publicModule.publicClassWithWithPublicTypeParameters = publicClassWithWithPublicTypeParameters;
-    var privateClassWithWithPrivateTypeParameters = /** @class */ (function () {
-        function privateClassWithWithPrivateTypeParameters() {
+    class privateClassWithWithPrivateTypeParameters {
+        static myPublicStaticMethod() {
         }
-        privateClassWithWithPrivateTypeParameters.myPublicStaticMethod = function () {
-        };
-        privateClassWithWithPrivateTypeParameters.myPrivateStaticMethod = function () {
-        };
-        privateClassWithWithPrivateTypeParameters.prototype.myPublicMethod = function () {
-        };
-        privateClassWithWithPrivateTypeParameters.prototype.myPrivateMethod = function () {
-        };
-        return privateClassWithWithPrivateTypeParameters;
-    }());
-    var privateClassWithWithPublicTypeParameters = /** @class */ (function () {
-        function privateClassWithWithPublicTypeParameters() {
+        static myPrivateStaticMethod() {
         }
-        privateClassWithWithPublicTypeParameters.myPublicStaticMethod = function () {
-        };
-        privateClassWithWithPublicTypeParameters.myPrivateStaticMethod = function () {
-        };
-        privateClassWithWithPublicTypeParameters.prototype.myPublicMethod = function () {
-        };
-        privateClassWithWithPublicTypeParameters.prototype.myPrivateMethod = function () {
-        };
-        return privateClassWithWithPublicTypeParameters;
-    }());
+        myPublicMethod() {
+        }
+        myPrivateMethod() {
+        }
+    }
+    class privateClassWithWithPublicTypeParameters {
+        static myPublicStaticMethod() {
+        }
+        static myPrivateStaticMethod() {
+        }
+        myPublicMethod() {
+        }
+        myPrivateMethod() {
+        }
+    }
     function publicFunctionWithPrivateTypeParameters() {
     }
     publicModule.publicFunctionWithPrivateTypeParameters = publicFunctionWithPrivateTypeParameters;
@@= skipped -131, +101 lines =@@
     }
     function privateFunctionWithPublicTypeParameters() {
     }
-    var publicClassWithWithPublicTypeParametersWithoutExtends = /** @class */ (function () {
-        function publicClassWithWithPublicTypeParametersWithoutExtends() {
+    class publicClassWithWithPublicTypeParametersWithoutExtends {
+        static myPublicStaticMethod() {
         }
-        publicClassWithWithPublicTypeParametersWithoutExtends.myPublicStaticMethod = function () {
-        };
-        publicClassWithWithPublicTypeParametersWithoutExtends.myPrivateStaticMethod = function () {
-        };
-        publicClassWithWithPublicTypeParametersWithoutExtends.prototype.myPublicMethod = function () {
-        };
-        publicClassWithWithPublicTypeParametersWithoutExtends.prototype.myPrivateMethod = function () {
-        };
-        return publicClassWithWithPublicTypeParametersWithoutExtends;
-    }());
+        static myPrivateStaticMethod() {
+        }
+        myPublicMethod() {
+        }
+        myPrivateMethod() {
+        }
+    }
     publicModule.publicClassWithWithPublicTypeParametersWithoutExtends = publicClassWithWithPublicTypeParametersWithoutExtends;
-    var privateClassWithWithPublicTypeParametersWithoutExtends = /** @class */ (function () {
-        function privateClassWithWithPublicTypeParametersWithoutExtends() {
+    class privateClassWithWithPublicTypeParametersWithoutExtends {
+        static myPublicStaticMethod() {
         }
-        privateClassWithWithPublicTypeParametersWithoutExtends.myPublicStaticMethod = function () {
-        };
-        privateClassWithWithPublicTypeParametersWithoutExtends.myPrivateStaticMethod = function () {
-        };
-        privateClassWithWithPublicTypeParametersWithoutExtends.prototype.myPublicMethod = function () {
-        };
-        privateClassWithWithPublicTypeParametersWithoutExtends.prototype.myPrivateMethod = function () {
-        };
-        return privateClassWithWithPublicTypeParametersWithoutExtends;
-    }());
+        static myPrivateStaticMethod() {
+        }
+        myPublicMethod() {
+        }
+        myPrivateMethod() {
+        }
+    }
     function publicFunctionWithPublicTypeParametersWithoutExtends() {
     }
     publicModule.publicFunctionWithPublicTypeParametersWithoutExtends = publicFunctionWithPublicTypeParametersWithoutExtends;
     function privateFunctionWithPublicTypeParametersWithoutExtends() {
     }
-    var publicClassWithWithPrivateModuleTypeParameters = /** @class */ (function () {
-        function publicClassWithWithPrivateModuleTypeParameters() {
+    class publicClassWithWithPrivateModuleTypeParameters {
+        static myPublicStaticMethod() {
         }
-        publicClassWithWithPrivateModuleTypeParameters.myPublicStaticMethod = function () {
-        };
-        publicClassWithWithPrivateModuleTypeParameters.prototype.myPublicMethod = function () {
-        };
-        return publicClassWithWithPrivateModuleTypeParameters;
-    }());
+        myPublicMethod() {
+        }
+    }
     publicModule.publicClassWithWithPrivateModuleTypeParameters = publicClassWithWithPrivateModuleTypeParameters;
     function publicFunctionWithPrivateMopduleTypeParameters() {
     }
     publicModule.publicFunctionWithPrivateMopduleTypeParameters = publicFunctionWithPrivateMopduleTypeParameters;
-    var privateClassWithWithPrivateModuleTypeParameters = /** @class */ (function () {
-        function privateClassWithWithPrivateModuleTypeParameters() {
+    class privateClassWithWithPrivateModuleTypeParameters {
+        static myPublicStaticMethod() {
         }
-        privateClassWithWithPrivateModuleTypeParameters.myPublicStaticMethod = function () {
-        };
-        privateClassWithWithPrivateModuleTypeParameters.prototype.myPublicMethod = function () {
-        };
-        return privateClassWithWithPrivateModuleTypeParameters;
-    }());
+        myPublicMethod() {
+        }
+    }
     function privateFunctionWithPrivateMopduleTypeParameters() {
     }
 })(publicModule || (exports.publicModule = publicModule = {}));
 var privateModule;
 (function (privateModule) {
-    var privateClass = /** @class */ (function () {
-        function privateClass() {
+    class privateClass {
+    }
+    class publicClass {
+    }
+    privateModule.publicClass = publicClass;
+    class publicClassWithWithPrivateTypeParameters {
+        static myPublicStaticMethod() {
         }
-        return privateClass;
-    }());
-    var publicClass = /** @class */ (function () {
-        function publicClass() {
+        static myPrivateStaticMethod() {
         }
-        return publicClass;
-    }());
-    privateModule.publicClass = publicClass;
-    var publicClassWithWithPrivateTypeParameters = /** @class */ (function () {
-        function publicClassWithWithPrivateTypeParameters() {
+        myPublicMethod() {
         }
-        publicClassWithWithPrivateTypeParameters.myPublicStaticMethod = function () {
-        };
-        publicClassWithWithPrivateTypeParameters.myPrivateStaticMethod = function () {
-        };
-        publicClassWithWithPrivateTypeParameters.prototype.myPublicMethod = function () {
-        };
-        publicClassWithWithPrivateTypeParameters.prototype.myPrivateMethod = function () {
-        };
-        return publicClassWithWithPrivateTypeParameters;
-    }());
+        myPrivateMethod() {
+        }
+    }
     privateModule.publicClassWithWithPrivateTypeParameters = publicClassWithWithPrivateTypeParameters;
-    var publicClassWithWithPublicTypeParameters = /** @class */ (function () {
-        function publicClassWithWithPublicTypeParameters() {
+    class publicClassWithWithPublicTypeParameters {
+        static myPublicStaticMethod() {
         }
-        publicClassWithWithPublicTypeParameters.myPublicStaticMethod = function () {
-        };
-        publicClassWithWithPublicTypeParameters.myPrivateStaticMethod = function () {
-        };
-        publicClassWithWithPublicTypeParameters.prototype.myPublicMethod = function () {
-        };
-        publicClassWithWithPublicTypeParameters.prototype.myPrivateMethod = function () {
-        };
-        return publicClassWithWithPublicTypeParameters;
-    }());
+        static myPrivateStaticMethod() {
+        }
+        myPublicMethod() {
+        }
+        myPrivateMethod() {
+        }
+    }
     privateModule.publicClassWithWithPublicTypeParameters = publicClassWithWithPublicTypeParameters;
-    var privateClassWithWithPrivateTypeParameters = /** @class */ (function () {
-        function privateClassWithWithPrivateTypeParameters() {
+    class privateClassWithWithPrivateTypeParameters {
+        static myPublicStaticMethod() {
         }
-        privateClassWithWithPrivateTypeParameters.myPublicStaticMethod = function () {
-        };
-        privateClassWithWithPrivateTypeParameters.myPrivateStaticMethod = function () {
-        };
-        privateClassWithWithPrivateTypeParameters.prototype.myPublicMethod = function () {
-        };
-        privateClassWithWithPrivateTypeParameters.prototype.myPrivateMethod = function () {
-        };
-        return privateClassWithWithPrivateTypeParameters;
-    }());
-    var privateClassWithWithPublicTypeParameters = /** @class */ (function () {
-        function privateClassWithWithPublicTypeParameters() {
+        static myPrivateStaticMethod() {
         }
-        privateClassWithWithPublicTypeParameters.myPublicStaticMethod = function () {
-        };
-        privateClassWithWithPublicTypeParameters.myPrivateStaticMethod = function () {
-        };
-        privateClassWithWithPublicTypeParameters.prototype.myPublicMethod = function () {
-        };
-        privateClassWithWithPublicTypeParameters.prototype.myPrivateMethod = function () {
-        };
-        return privateClassWithWithPublicTypeParameters;
-    }());
+        myPublicMethod() {
+        }
+        myPrivateMethod() {
+        }
+    }
+    class privateClassWithWithPublicTypeParameters {
+        static myPublicStaticMethod() {
+        }
+        static myPrivateStaticMethod() {
+        }
+        myPublicMethod() {
+        }
+        myPrivateMethod() {
+        }
+    }
     function publicFunctionWithPrivateTypeParameters() {
     }
     privateModule.publicFunctionWithPrivateTypeParameters = publicFunctionWithPrivateTypeParameters;
@@= skipped -134, +104 lines =@@
     }
     function privateFunctionWithPublicTypeParameters() {
     }
-    var publicClassWithWithPublicTypeParametersWithoutExtends = /** @class */ (function () {
-        function publicClassWithWithPublicTypeParametersWithoutExtends() {
+    class publicClassWithWithPublicTypeParametersWithoutExtends {
+        static myPublicStaticMethod() {
         }
-        publicClassWithWithPublicTypeParametersWithoutExtends.myPublicStaticMethod = function () {
-        };
-        publicClassWithWithPublicTypeParametersWithoutExtends.myPrivateStaticMethod = function () {
-        };
-        publicClassWithWithPublicTypeParametersWithoutExtends.prototype.myPublicMethod = function () {
-        };
-        publicClassWithWithPublicTypeParametersWithoutExtends.prototype.myPrivateMethod = function () {
-        };
-        return publicClassWithWithPublicTypeParametersWithoutExtends;
-    }());
+        static myPrivateStaticMethod() {
+        }
+        myPublicMethod() {
+        }
+        myPrivateMethod() {
+        }
+    }
     privateModule.publicClassWithWithPublicTypeParametersWithoutExtends = publicClassWithWithPublicTypeParametersWithoutExtends;
-    var privateClassWithWithPublicTypeParametersWithoutExtends = /** @class */ (function () {
-        function privateClassWithWithPublicTypeParametersWithoutExtends() {
+    class privateClassWithWithPublicTypeParametersWithoutExtends {
+        static myPublicStaticMethod() {
         }
-        privateClassWithWithPublicTypeParametersWithoutExtends.myPublicStaticMethod = function () {
-        };
-        privateClassWithWithPublicTypeParametersWithoutExtends.myPrivateStaticMethod = function () {
-        };
-        privateClassWithWithPublicTypeParametersWithoutExtends.prototype.myPublicMethod = function () {
-        };
-        privateClassWithWithPublicTypeParametersWithoutExtends.prototype.myPrivateMethod = function () {
-        };
-        return privateClassWithWithPublicTypeParametersWithoutExtends;
-    }());
+        static myPrivateStaticMethod() {
+        }
+        myPublicMethod() {
+        }
+        myPrivateMethod() {
+        }
+    }
     function publicFunctionWithPublicTypeParametersWithoutExtends() {
     }
     privateModule.publicFunctionWithPublicTypeParametersWithoutExtends = publicFunctionWithPublicTypeParametersWithoutExtends;
     function privateFunctionWithPublicTypeParametersWithoutExtends() {
     }
 })(privateModule || (privateModule = {}));
-
-
-//// [privacyTypeParameterOfFunctionDeclFile.d.ts]
-declare class privateClass {
-}
-export declare class publicClass {
-}
-export interface publicInterfaceWithPrivateTypeParameters {
-    new <T extends privateClass>(): privateClass;
-    <T extends privateClass>(): privateClass;
-    myMethod<T extends privateClass>(): privateClass;
-}
-export interface publicInterfaceWithPublicTypeParameters {
-    new <T extends publicClass>(): publicClass;
-    <T extends publicClass>(): publicClass;
-    myMethod<T extends publicClass>(): publicClass;
-}
-export declare class publicClassWithWithPrivateTypeParameters {
-    static myPublicStaticMethod<T extends privateClass>(): void;
-    private static myPrivateStaticMethod;
-    myPublicMethod<T extends privateClass>(): void;
-    private myPrivateMethod;
-}
-export declare class publicClassWithWithPublicTypeParameters {
-    static myPublicStaticMethod<T extends publicClass>(): void;
-    private static myPrivateStaticMethod;
-    myPublicMethod<T extends publicClass>(): void;
-    private myPrivateMethod;
-}
-export declare function publicFunctionWithPrivateTypeParameters<T extends privateClass>(): void;
-export declare function publicFunctionWithPublicTypeParameters<T extends publicClass>(): void;
-export interface publicInterfaceWithPublicTypeParametersWithoutExtends {
-    new <T>(): publicClass;
-    <T>(): publicClass;
-    myMethod<T>(): publicClass;
-}
-export declare class publicClassWithWithPublicTypeParametersWithoutExtends {
-    static myPublicStaticMethod<T>(): void;
-    private static myPrivateStaticMethod;
-    myPublicMethod<T>(): void;
-    private myPrivateMethod;
-}
-export declare function publicFunctionWithPublicTypeParametersWithoutExtends<T>(): void;
-export interface publicInterfaceWithPrivatModuleTypeParameters {
-    new <T extends privateModule.publicClass>(): privateModule.publicClass;
-    <T extends privateModule.publicClass>(): privateModule.publicClass;
-    myMethod<T extends privateModule.publicClass>(): privateModule.publicClass;
-}
-export declare class publicClassWithWithPrivateModuleTypeParameters {
-    static myPublicStaticMethod<T extends privateModule.publicClass>(): void;
-    myPublicMethod<T extends privateModule.publicClass>(): void;
-}
-export declare function publicFunctionWithPrivateMopduleTypeParameters<T extends privateModule.publicClass>(): void;
-export declare namespace publicModule {
-    class privateClass {
-    }
-    export class publicClass {
-    }
-    export interface publicInterfaceWithPrivateTypeParameters {
-        new <T extends privateClass>(): privateClass;
-        <T extends privateClass>(): privateClass;
-        myMethod<T extends privateClass>(): privateClass;
-    }
-    export interface publicInterfaceWithPublicTypeParameters {
-        new <T extends publicClass>(): publicClass;
-        <T extends publicClass>(): publicClass;
-        myMethod<T extends publicClass>(): publicClass;
-    }
-    export class publicClassWithWithPrivateTypeParameters {
-        static myPublicStaticMethod<T extends privateClass>(): void;
-        private static myPrivateStaticMethod;
-        myPublicMethod<T extends privateClass>(): void;
-        private myPrivateMethod;
-    }
-    export class publicClassWithWithPublicTypeParameters {
-        static myPublicStaticMethod<T extends publicClass>(): void;
-        private static myPrivateStaticMethod;
-        myPublicMethod<T extends publicClass>(): void;
-        private myPrivateMethod;
-    }
-    export function publicFunctionWithPrivateTypeParameters<T extends privateClass>(): void;
-    export function publicFunctionWithPublicTypeParameters<T extends publicClass>(): void;
-    export interface publicInterfaceWithPublicTypeParametersWithoutExtends {
-        new <T>(): publicClass;
-        <T>(): publicClass;
-        myMethod<T>(): publicClass;
-    }
-    export class publicClassWithWithPublicTypeParametersWithoutExtends {
-        static myPublicStaticMethod<T>(): void;
-        private static myPrivateStaticMethod;
-        myPublicMethod<T>(): void;
-        private myPrivateMethod;
-    }
-    export function publicFunctionWithPublicTypeParametersWithoutExtends<T>(): void;
-    export interface publicInterfaceWithPrivatModuleTypeParameters {
-        new <T extends privateModule.publicClass>(): privateModule.publicClass;
-        <T extends privateModule.publicClass>(): privateModule.publicClass;
-        myMethod<T extends privateModule.publicClass>(): privateModule.publicClass;
-    }
-    export class publicClassWithWithPrivateModuleTypeParameters {
-        static myPublicStaticMethod<T extends privateModule.publicClass>(): void;
-        myPublicMethod<T extends privateModule.publicClass>(): void;
-    }
-    export function publicFunctionWithPrivateMopduleTypeParameters<T extends privateModule.publicClass>(): void;
-    export {};
-}
-declare namespace privateModule {
-    class privateClass {
-    }
-    export class publicClass {
-    }
-    export interface publicInterfaceWithPrivateTypeParameters {
-        new <T extends privateClass>(): privateClass;
-        <T extends privateClass>(): privateClass;
-        myMethod<T extends privateClass>(): privateClass;
-    }
-    export interface publicInterfaceWithPublicTypeParameters {
-        new <T extends publicClass>(): publicClass;
-        <T extends publicClass>(): publicClass;
-        myMethod<T extends publicClass>(): publicClass;
-    }
-    export class publicClassWithWithPrivateTypeParameters {
-        static myPublicStaticMethod<T extends privateClass>(): void;
-        private static myPrivateStaticMethod;
-        myPublicMethod<T extends privateClass>(): void;
-        private myPrivateMethod;
-    }
-    export class publicClassWithWithPublicTypeParameters {
-        static myPublicStaticMethod<T extends publicClass>(): void;
-        private static myPrivateStaticMethod;
-        myPublicMethod<T extends publicClass>(): void;
-        private myPrivateMethod;
-    }
-    export function publicFunctionWithPrivateTypeParameters<T extends privateClass>(): void;
-    export function publicFunctionWithPublicTypeParameters<T extends publicClass>(): void;
-    export interface publicInterfaceWithPublicTypeParametersWithoutExtends {
-        new <T>(): publicClass;
-        <T>(): publicClass;
-        myMethod<T>(): publicClass;
-    }
-    export class publicClassWithWithPublicTypeParametersWithoutExtends {
-        static myPublicStaticMethod<T>(): void;
-        private static myPrivateStaticMethod;
-        myPublicMethod<T>(): void;
-        private myPrivateMethod;
-    }
-    export function publicFunctionWithPublicTypeParametersWithoutExtends<T>(): void;
-    export {};
-}
-export {};
