--- old.contextualTupleTypeParameterReadonly.types
+++ new.contextualTupleTypeParameterReadonly.types
@@= skipped -1, +1 lines =@@
 
 === contextualTupleTypeParameterReadonly.ts ===
 declare function each<T extends ReadonlyArray<any>>(cases: ReadonlyArray<T>): (fn: (...args: T) => any) => void;
->each : <T extends ReadonlyArray<any>>(cases: ReadonlyArray<T>) => (fn: (...args: T) => any) => void
+>each : <T extends readonly any[]>(cases: readonly T[]) => (fn: (...args: T) => any) => void
 >cases : readonly T[]
 >fn : (...args: T) => any
 >args : T
@@= skipped -25, +25 lines =@@
 const eacher = each(cases);
 >eacher : (fn: (...args: readonly [1, "1"] | readonly [2, "2"]) => any) => void
 >each(cases) : (fn: (...args: readonly [1, "1"] | readonly [2, "2"]) => any) => void
->each : <T extends ReadonlyArray<any>>(cases: ReadonlyArray<T>) => (fn: (...args: T) => any) => void
+>each : <T extends readonly any[]>(cases: readonly T[]) => (fn: (...args: T) => any) => void
 >cases : readonly [readonly [1, "1"], readonly [2, "2"]]
 
 eacher((a, b) => {
