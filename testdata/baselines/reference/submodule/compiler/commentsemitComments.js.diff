--- old.commentsemitComments.js
+++ new.commentsemitComments.js
@@= skipped -89, +89 lines =@@
 
 
 //// [commentsemitComments.js]
-/** Variable comments*/
 var myVariable = 10;
-/** function comments*/
-function foo(/** parameter comment*/ p) {
+function foo(p) {
 }
-/** variable with function type comment*/
 var fooVar;
 foo(50);
 fooVar();
-/**class comment*/
-var c = /** @class */ (function () {
-    /** constructor comment*/
-    function c() {
-        /** property comment */
-        this.b = 10;
+class c {
+    constructor() {
     }
-    /** function comment */
-    c.prototype.myFoo = function () {
+    b = 10;
+    myFoo() {
         return this.b;
-    };
-    Object.defineProperty(c.prototype, "prop1", {
-        /** getter comment*/
-        get: function () {
-            return this.b;
-        },
-        /** setter comment*/
-        set: function (val) {
-            this.b = val;
-        },
-        enumerable: false,
-        configurable: true
-    });
-    /** overload implementation signature*/
-    c.prototype.foo1 = function (aOrb) {
+    }
+    get prop1() {
+        return this.b;
+    }
+    set prop1(val) {
+        this.b = val;
+    }
+    foo1(aOrb) {
         return aOrb.toString();
-    };
-    return c;
-}());
-/**instance comment*/
+    }
+}
 var i = new c();
-/**interface instance comments*/
 var i1_i;
-/** this is module comment*/
 var m1;
 (function (m1) {
-    /** class b */
-    var b = /** @class */ (function () {
-        function b(x) {
+    class b {
+        x;
+        constructor(x) {
             this.x = x;
         }
-        return b;
-    }());
+    }
     m1.b = b;
 })(m1 || (m1 = {}));
-
-
-//// [commentsemitComments.d.ts]
-/** Variable comments*/
-declare var myVariable: number;
-/** function comments*/
-declare function foo(/** parameter comment*/ p: number): void;
-/** variable with function type comment*/
-declare var fooVar: () => void;
-/**class comment*/
-declare class c {
-    /** constructor comment*/
-    constructor();
-    /** property comment */
-    b: number;
-    /** function comment */
-    myFoo(): number;
-    /** getter comment*/
-    get prop1(): number;
-    /** setter comment*/
-    set prop1(val: number);
-    /** overload signature1*/
-    foo1(a: number): string;
-    /** Overload signature 2*/
-    foo1(b: string): string;
-}
-/**instance comment*/
-declare var i: c;
-/** interface comments*/
-interface i1 {
-    /** caller comments*/
-    (a: number): number;
-    /** new comments*/
-    new (b: string): any;
-    /**indexer property*/
-    [a: number]: string;
-    /** function property;*/
-    myFoo(/*param prop*/ a: number): string;
-    /** prop*/
-    prop: string;
-}
-/**interface instance comments*/
-declare var i1_i: i1;
-/** this is module comment*/
-declare namespace m1 {
-    /** class b */
-    class b {
-        x: number;
-        constructor(x: number);
-    }
-    namespace m2 {
-    }
-}
-declare var x: any;
