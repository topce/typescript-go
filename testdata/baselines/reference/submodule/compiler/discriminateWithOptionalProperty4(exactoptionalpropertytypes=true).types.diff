--- old.discriminateWithOptionalProperty4(exactoptionalpropertytypes=true).types
+++ new.discriminateWithOptionalProperty4(exactoptionalpropertytypes=true).types
@@= skipped -7, +7 lines =@@
 >a : string[] | undefined
 
   const z = a ? { a } : { b: ["there"] };
->z : { a: string[]; b?: never; } | { b: string[]; a?: never; }
+>z : { a: string[]; b?: never; } | { a?: never; b: string[]; }
 >a ? { a } : { b: ["there"] } : { a: string[]; } | { b: string[]; }
 >a : string[] | undefined
 >{ a } : { a: string[]; }
@@= skipped -13, +13 lines =@@
   z.a //
 >z.a //    ? z.a.toString()    : z.b.toString() : string
 >z.a : string[] | undefined
->z : { a: string[]; b?: never; } | { b: string[]; a?: never; }
+>z : { a: string[]; b?: never; } | { a?: never; b: string[]; }
 >a : string[] | undefined
 
     ? z.a.toString()
@@= skipped -15, +15 lines =@@
 >z.b.toString() : string
 >z.b.toString : () => string
 >z.b : string[]
->z : { b: string[]; a?: never; }
+>z : { a?: never; b: string[]; }
 >b : string[]
 >toString : () => string
 
@@= skipped -14, +14 lines =@@
     | { b: string[]; a?: undefined } = z;
 >b : string[]
 >a : undefined
->z : { a: string[]; b?: never; } | { b: string[]; a?: never; }
+>z : { a: string[]; b?: never; } | { a?: never; b: string[]; }
 
   zWorkAround.a ? zWorkAround.a.toString() : zWorkAround.b.toString();
 >zWorkAround.a ? zWorkAround.a.toString() : zWorkAround.b.toString() : string
@@= skipped -24, +24 lines =@@
 >"a" in z ? z.a.toString() : z.b.toString() : string
 >"a" in z : boolean
 >"a" : "a"
->z : { a: string[]; b?: never; } | { b: string[]; a?: never; }
+>z : { a: string[]; b?: never; } | { a?: never; b: string[]; }
 >z.a.toString() : string
 >z.a.toString : () => string
 >z.a : string[]
->z : { a: string[]; b?: never; } | { b: string[]; a?: never; }
+>z : { a: string[]; b?: never; } | { a?: never; b: string[]; }
 >a : string[]
 >toString : () => string
 >z.b.toString() : string
 >z.b.toString : () => string
 >z.b : string[]
->z : { b: string[]; a?: never; }
+>z : { a?: never; b: string[]; }
 >b : string[]
 >toString : () => string
 }
