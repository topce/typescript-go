--- old.contextualComputedNonBindablePropertyType.types
+++ new.contextualComputedNonBindablePropertyType.types
@@= skipped -6, +6 lines =@@
 >testD : () => "d"
 
 declare function forceMatch<T>(matched: {
->forceMatch : <T>(matched: { [key in keyof T]: key; }) => void
->matched : { [key in keyof T]: key; }
+>forceMatch : <T>(matched: { [key in keyof T]: key }) => void
+>matched : { [key in keyof T]: key }
 
   [key in keyof T]: key;
 }): void;
 
 forceMatch({
 >forceMatch({  [testD()]: "d",}) : void
->forceMatch : <T>(matched: { [key in keyof T]: key; }) => void
+>forceMatch : <T>(matched: { [key in keyof T]: key }) => void
 >{  [testD()]: "d",} : { d: "d"; }
 
   [testD()]: "d",
@@= skipped -20, +20 lines =@@
 });
 
 declare function forceMatch2<T>(matched: {
->forceMatch2 : <T>(matched: { [key in keyof T]: ({ key }: { key: key; }) => void; }) => void
->matched : { [key in keyof T]: ({ key }: { key: key; }) => void; }
+>forceMatch2 : <T>(matched: { [key in keyof T]: (__0: { key: key; }) => void }) => void
+>matched : { [key in keyof T]: (__0: { key: key; }) => void }
 
   [key in keyof T]: ({ key }: { key: key }) => void;
 >key : key
@@= skipped -11, +11 lines =@@
 
 forceMatch2({
 >forceMatch2({  [testD()]: ({ key }) => {},}) : void
->forceMatch2 : <T>(matched: { [key in keyof T]: ({ key }: { key: key; }) => void; }) => void
->{  [testD()]: ({ key }) => {},} : { d: ({ key }: { key: "d"; }) => void; }
+>forceMatch2 : <T>(matched: { [key in keyof T]: (__0: { key: key; }) => void }) => void
+>{  [testD()]: ({ key }) => {},} : { d: (__0: { key: "d"; }) => void; }
 
   [testD()]: ({ key }) => {},
->[testD()] : ({ key }: { key: "d"; }) => void
+>[testD()] : (__0: { key: "d"; }) => void
 >testD() : "d"
 >testD : () => "d"
->({ key }) => {} : ({ key }: { key: "d"; }) => void
+>({ key }) => {} : (__0: { key: "d"; }) => void
 >key : "d"
 
 });
