--- old.declarationEmitResolveTypesIfNotReusable.types
+++ new.declarationEmitResolveTypesIfNotReusable.types
@@= skipped -6, +6 lines =@@
 
 type A = { a: { b : "value of b", notNecessary: typeof u }}
 >A : A
->a : { b: "value of b"; notNecessary: typeof u; }
+>a : { b: "value of b"; notNecessary: "X"; }
 >b : "value of b"
 >notNecessary : "X"
 >u : "X"
@@= skipped -16, +16 lines =@@
 
 
 export const o1 = (o: A['a']['b']) => {}
->o1 : (o: A["a"]["b"]) => void
->(o: A['a']['b']) => {} : (o: A["a"]["b"]) => void
+>o1 : (o: "value of b") => void
+>(o: A['a']['b']) => {} : (o: "value of b") => void
 >o : "value of b"
 
 export const o2 = (o: (typeof a)['a']) => {}
->o2 : (o: (typeof a)["a"]) => void
->(o: (typeof a)['a']) => {} : (o: (typeof a)["a"]) => void
+>o2 : (o: "value of a") => void
+>(o: (typeof a)['a']) => {} : (o: "value of a") => void
 >o : "value of a"
 >a : { readonly a: "value of a"; readonly notNecessary: "X"; }
 
 export const o3 = (o:  typeof a['a']) => {}
->o3 : (o: (typeof a)["a"]) => void
->(o:  typeof a['a']) => {} : (o: (typeof a)["a"]) => void
+>o3 : (o: "value of a") => void
+>(o:  typeof a['a']) => {} : (o: "value of a") => void
 >o : "value of a"
 >a : { readonly a: "value of a"; readonly notNecessary: "X"; }
 
 export const o4 = (o: keyof (A['a'])) => {}
->o4 : (o: keyof A["a"]) => void
->(o: keyof (A['a'])) => {} : (o: keyof A["a"]) => void
+>o4 : (o: "b" | "notNecessary") => void
+>(o: keyof (A['a'])) => {} : (o: "b" | "notNecessary") => void
 >o : "b" | "notNecessary"
 
 === main.ts ===
 import * as d  from './decl'
->d : typeof d
+>d : typeof import("decl")
 
 export const f = {...d}
 >f : { o1: (o: "value of b") => void; o2: (o: "value of a") => void; o3: (o: "value of a") => void; o4: (o: "b" | "notNecessary") => void; }
 >{...d} : { o1: (o: "value of b") => void; o2: (o: "value of a") => void; o3: (o: "value of a") => void; o4: (o: "b" | "notNecessary") => void; }
->d : typeof d
+>d : typeof import("decl")
 
