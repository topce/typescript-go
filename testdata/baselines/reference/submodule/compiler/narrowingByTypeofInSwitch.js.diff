--- old.narrowingByTypeofInSwitch.js
+++ new.narrowingByTypeofInSwitch.js
@@= skipped -317, +317 lines =@@
 
 
 //// [narrowingByTypeofInSwitch.js]
-"use strict";
 function assertNever(x) {
     return x;
 }
@@= skipped -318, +317 lines =@@
             assertSymbol(x);
             return;
         case 'object':
-            var _ = x;
+            const _ = x;
             return;
         case 'string':
             assertString(x);
@@= skipped -12, +12 lines =@@
             assertNever(x);
             return;
         default:
-            var _y = x;
+            const _y = x;
             return;
     }
 }
@@= skipped -19, +19 lines =@@
             assertNever(x);
             return;
         case 'object':
-            var _ = assertNever(x);
+            const _ = assertNever(x);
             return;
         case 'string':
             assertString(x);
@@= skipped -12, +12 lines =@@
             assertNever(x);
             return;
         default:
-            var _y = assertNever(x);
+            const _y = assertNever(x);
             return;
     }
 }
 /* Template literals */
 function testUnionWithTempalte(x) {
     switch (typeof x) {
-        case "number":
+        case `number`:
             assertNumber(x);
             return;
-        case "boolean":
+        case `boolean`:
             assertBoolean(x);
             return;
-        case "function":
+        case `function`:
             assertFunction(x);
             return;
-        case "symbol":
+        case `symbol`:
             assertSymbol(x);
             return;
-        case "object":
+        case `object`:
             assertObject(x);
             return;
-        case "string":
+        case `string`:
             assertString(x);
             return;
-        case "undefined":
+        case `undefined`:
             assertUndefined(x);
             return;
     }
@@= skipped -33, +33 lines =@@
 }
 function fallThroughTestWithTempalte(x) {
     switch (typeof x) {
-        case "number":
+        case `number`:
             assertNumber(x);
-        case "string":
+        case `string`:
             assertStringOrNumber(x);
             break;
         default:
             assertObject(x);
-        case "number":
-        case "boolean":
+        case `number`:
+        case `boolean`:
             assertBooleanOrObject(x);
             break;
     }
@@= skipped -16, +16 lines =@@
 function keyofNarrowingWithTemplate(k) {
     function assertKeyofS(k1) { }
     switch (typeof k) {
-        case "number":
+        case `number`:
             assertNumber(k);
             assertKeyofS(k);
             return;
-        case "symbol":
+        case `symbol`:
             assertSymbol(k);
             assertKeyofS(k);
             return;
-        case "string":
+        case `string`:
             assertString(k);
             assertKeyofS(k);
             return;
@@= skipped -17, +17 lines =@@
 /* Both string literals and template literals */
 function multipleGenericFuseWithBoth(xy) {
     switch (typeof xy) {
-        case "function": return [xy, 1];
+        case `function`: return [xy, 1];
         case 'object': return [xy, 'two'];
-        case "number": return [xy];
+        case `number`: return [xy];
     }
 }
