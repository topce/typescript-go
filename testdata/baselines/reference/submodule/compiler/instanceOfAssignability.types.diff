--- old.instanceOfAssignability.types
+++ new.instanceOfAssignability.types
@@= skipped -43, +43 lines =@@
 >neck : any
 
 function fn1(x: Array<number>|Array<string>|boolean) {
->fn1 : (x: Array<number> | Array<string> | boolean) => void
->x : boolean | number[] | string[]
+>fn1 : (x: boolean | string[] | number[]) => void
+>x : boolean | string[] | number[]
 
 	if(x instanceof Array) {
 >x instanceof Array : boolean
->x : boolean | number[] | string[]
+>x : boolean | string[] | number[]
 >Array : ArrayConstructor
 
 		// 1.5: y: Array<number>|Array<string>
 		// Want: y: Array<number>|Array<string>
 		let y = x;
->y : number[] | string[]
->x : number[] | string[]
+>y : string[] | number[]
+>x : string[] | number[]
 	}
 }
 
@@= skipped -102, +102 lines =@@
 }
 
 function fn7(x: Array<number>|Array<string>) {
->fn7 : (x: Array<number> | Array<string>) => void
->x : number[] | string[]
+>fn7 : (x: string[] | number[]) => void
+>x : string[] | number[]
 
 	if(x instanceof Array) {
 >x instanceof Array : boolean
->x : number[] | string[]
+>x : string[] | number[]
 >Array : ArrayConstructor
 
 		// 1.5: y: Array<number>|Array<string>
 		// Want: y: Array<number>|Array<string>
 		let y = x;
->y : number[] | string[]
->x : number[] | string[]
+>y : string[] | number[]
+>x : string[] | number[]
 	}
 }
 
