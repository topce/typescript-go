--- old.chainedCallsWithTypeParameterConstrainedToOtherTypeParameter2.types
+++ new.chainedCallsWithTypeParameterConstrainedToOtherTypeParameter2.types
@@= skipped -20, +20 lines =@@
         // Ok to go down the chain, but error to climb up the chain
         (new Chain(t)).then(tt => s).then(ss => t);
 >(new Chain(t)).then(tt => s).then(ss => t) : Chain<S>
->(new Chain(t)).then(tt => s).then : <S extends S_1>(cb: (x: S_1) => S) => Chain<S>
+>(new Chain(t)).then(tt => s).then : <S extends S>(cb: (x: S) => S) => Chain<S>
 >(new Chain(t)).then(tt => s) : Chain<S>
 >(new Chain(t)).then : <S extends T>(cb: (x: T) => S) => Chain<S>
 >(new Chain(t)) : Chain<T>
@@= skipped -11, +11 lines =@@
 >tt => s : (tt: T) => S
 >tt : T
 >s : S
->then : <S extends S_1>(cb: (x: S_1) => S) => Chain<S>
+>then : <S extends S>(cb: (x: S) => S) => Chain<S>
 >ss => t : (ss: S) => T
 >ss : S
 >t : T
@@= skipped -8, +8 lines =@@
         // But error to try to climb up the chain
         (new Chain(s)).then(ss => t);
 >(new Chain(s)).then(ss => t) : Chain<S>
->(new Chain(s)).then : <S extends S_1>(cb: (x: S_1) => S) => Chain<S>
+>(new Chain(s)).then : <S extends S>(cb: (x: S) => S) => Chain<S>
 >(new Chain(s)) : Chain<S>
 >new Chain(s) : Chain<S>
 >Chain : typeof Chain
 >s : S
->then : <S extends S_1>(cb: (x: S_1) => S) => Chain<S>
+>then : <S extends S>(cb: (x: S) => S) => Chain<S>
 >ss => t : (ss: S) => T
 >ss : S
 >t : T
@@= skipped -37, +37 lines =@@
 
         (new Chain(s)).then(ss => s).then(ss => s).then(ss => s);
 >(new Chain(s)).then(ss => s).then(ss => s).then(ss => s) : Chain<S>
->(new Chain(s)).then(ss => s).then(ss => s).then : <S extends S_1>(cb: (x: S_1) => S) => Chain<S>
+>(new Chain(s)).then(ss => s).then(ss => s).then : <S extends S>(cb: (x: S) => S) => Chain<S>
 >(new Chain(s)).then(ss => s).then(ss => s) : Chain<S>
->(new Chain(s)).then(ss => s).then : <S extends S_1>(cb: (x: S_1) => S) => Chain<S>
+>(new Chain(s)).then(ss => s).then : <S extends S>(cb: (x: S) => S) => Chain<S>
 >(new Chain(s)).then(ss => s) : Chain<S>
->(new Chain(s)).then : <S extends S_1>(cb: (x: S_1) => S) => Chain<S>
+>(new Chain(s)).then : <S extends S>(cb: (x: S) => S) => Chain<S>
 >(new Chain(s)) : Chain<S>
 >new Chain(s) : Chain<S>
 >Chain : typeof Chain
 >s : S
->then : <S extends S_1>(cb: (x: S_1) => S) => Chain<S>
+>then : <S extends S>(cb: (x: S) => S) => Chain<S>
 >ss => s : (ss: S) => S
 >ss : S
 >s : S
->then : <S extends S_1>(cb: (x: S_1) => S) => Chain<S>
+>then : <S extends S>(cb: (x: S) => S) => Chain<S>
 >ss => s : (ss: S) => S
 >ss : S
 >s : S
->then : <S extends S_1>(cb: (x: S_1) => S) => Chain<S>
+>then : <S extends S>(cb: (x: S) => S) => Chain<S>
 >ss => s : (ss: S) => S
 >ss : S
 >s : S
@@= skipped -120, +120 lines =@@
 >(new Chain2(i)).then(ii => s).then(ss => s).then(ss => s).then(ss => s).value.x : number
 >(new Chain2(i)).then(ii => s).then(ss => s).then(ss => s).then(ss => s).value : S
 >(new Chain2(i)).then(ii => s).then(ss => s).then(ss => s).then(ss => s) : Chain2<S>
->(new Chain2(i)).then(ii => s).then(ss => s).then(ss => s).then : <S extends S_1>(cb: (x: S_1) => S) => Chain2<S>
+>(new Chain2(i)).then(ii => s).then(ss => s).then(ss => s).then : <S extends S>(cb: (x: S) => S) => Chain2<S>
 >(new Chain2(i)).then(ii => s).then(ss => s).then(ss => s) : Chain2<S>
->(new Chain2(i)).then(ii => s).then(ss => s).then : <S extends S_1>(cb: (x: S_1) => S) => Chain2<S>
+>(new Chain2(i)).then(ii => s).then(ss => s).then : <S extends S>(cb: (x: S) => S) => Chain2<S>
 >(new Chain2(i)).then(ii => s).then(ss => s) : Chain2<S>
->(new Chain2(i)).then(ii => s).then : <S extends S_1>(cb: (x: S_1) => S) => Chain2<S>
+>(new Chain2(i)).then(ii => s).then : <S extends S>(cb: (x: S) => S) => Chain2<S>
 >(new Chain2(i)).then(ii => s) : Chain2<S>
 >(new Chain2(i)).then : <S extends I>(cb: (x: I) => S) => Chain2<S>
 >(new Chain2(i)) : Chain2<I>
@@= skipped -15, +15 lines =@@
 >ii => s : (ii: I) => S
 >ii : I
 >s : S
->then : <S extends S_1>(cb: (x: S_1) => S) => Chain2<S>
+>then : <S extends S>(cb: (x: S) => S) => Chain2<S>
 >ss => s : (ss: S) => S
 >ss : S
 >s : S
->then : <S extends S_1>(cb: (x: S_1) => S) => Chain2<S>
+>then : <S extends S>(cb: (x: S) => S) => Chain2<S>
 >ss => s : (ss: S) => S
 >ss : S
 >s : S
->then : <S extends S_1>(cb: (x: S_1) => S) => Chain2<S>
+>then : <S extends S>(cb: (x: S) => S) => Chain2<S>
 >ss => s : (ss: S) => S
 >ss : S
 >s : S
