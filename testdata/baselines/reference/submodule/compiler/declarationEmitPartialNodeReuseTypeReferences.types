//// [tests/cases/compiler/declarationEmitPartialNodeReuseTypeReferences.ts] ////

=== a.ts ===
export type SpecialString = string;
>SpecialString : string

type PrivateSpecialString = string;
>PrivateSpecialString : string

export namespace N {
    export type SpecialString = string;
>SpecialString : string
}
export const o = (p1: SpecialString, p2: PrivateSpecialString, p3: N.SpecialString) => null! as { foo: SpecialString, bar: PrivateSpecialString, baz: N.SpecialString };
>o : (p1: string, p2: string, p3: string) => { foo: string; bar: string; baz: string; }
>(p1: SpecialString, p2: PrivateSpecialString, p3: N.SpecialString) => null! as { foo: SpecialString, bar: PrivateSpecialString, baz: N.SpecialString } : (p1: string, p2: string, p3: string) => { foo: string; bar: string; baz: string; }
>p1 : string
>p2 : string
>p3 : string
>N : any
>null! as { foo: SpecialString, bar: PrivateSpecialString, baz: N.SpecialString } : { foo: string; bar: string; baz: string; }
>null! : never
>foo : string
>bar : string
>baz : string
>N : any

=== b.ts ===
import * as a from "./a";
>a : typeof import("a")

export const g = a.o
>g : (p1: string, p2: string, p3: string) => { foo: string; bar: string; baz: string; }
>a.o : (p1: string, p2: string, p3: string) => { foo: string; bar: string; baz: string; }
>a : typeof import("a")
>o : (p1: string, p2: string, p3: string) => { foo: string; bar: string; baz: string; }

=== c.ts ===
import { o, SpecialString } from "./a";
>o : (p1: string, p2: string, p3: string) => { foo: string; bar: string; baz: string; }
>SpecialString : any

export const g = o
>g : (p1: string, p2: string, p3: string) => { foo: string; bar: string; baz: string; }
>o : (p1: string, p2: string, p3: string) => { foo: string; bar: string; baz: string; }

