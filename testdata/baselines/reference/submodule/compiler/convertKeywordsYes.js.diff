--- old.convertKeywordsYes.js
+++ new.convertKeywordsYes.js
@@= skipped -383, +383 lines =@@
     while: 0,
     with: 0,
 };
-var bigClass = /** @class */ (function () {
-    function bigClass() {
-        this["constructor"] = 0;
-        this.any = 0;
-        this.boolean = 0;
-        this.implements = 0;
-        this.interface = 0;
-        this.let = 0;
-        this.module = 0;
-        this.number = 0;
-        this.package = 0;
-        this.private = 0;
-        this.protected = 0;
-        this.public = 0;
-        this.set = 0;
-        this.static = 0;
-        this.string = 0;
-        this.get = 0;
-        this.yield = 0;
-        this.break = 0;
-        this.case = 0;
-        this.catch = 0;
-        this.class = 0;
-        this.continue = 0;
-        this.const = 0;
-        this.debugger = 0;
-        this.declare = 0;
-        this.default = 0;
-        this.delete = 0;
-        this.do = 0;
-        this.else = 0;
-        this.enum = 0;
-        this.export = 0;
-        this.extends = 0;
-        this.false = 0;
-        this.finally = 0;
-        this.for = 0;
-        this.function = 0;
-        this.if = 0;
-        this.import = 0;
-        this.in = 0;
-        this.instanceof = 0;
-        this.new = 0;
-        this.null = 0;
-        this.return = 0;
-        this.super = 0;
-        this.switch = 0;
-        this.this = 0;
-        this.throw = 0;
-        this.true = 0;
-        this.try = 0;
-        this.typeof = 0;
-        this.var = 0;
-        this.void = 0;
-        this.while = 0;
-        this.with = 0;
-    }
-    return bigClass;
-}());
+class bigClass {
+    "constructor" = 0;
+    any = 0;
+    boolean = 0;
+    implements = 0;
+    interface = 0;
+    let = 0;
+    module = 0;
+    number = 0;
+    package = 0;
+    private = 0;
+    protected = 0;
+    public = 0;
+    set = 0;
+    static = 0;
+    string = 0;
+    get = 0;
+    yield = 0;
+    break = 0;
+    case = 0;
+    catch = 0;
+    class = 0;
+    continue = 0;
+    const = 0;
+    debugger = 0;
+    declare = 0;
+    default = 0;
+    delete = 0;
+    do = 0;
+    else = 0;
+    enum = 0;
+    export = 0;
+    extends = 0;
+    false = 0;
+    finally = 0;
+    for = 0;
+    function = 0;
+    if = 0;
+    import = 0;
+    in = 0;
+    instanceof = 0;
+    new = 0;
+    null = 0;
+    return = 0;
+    super = 0;
+    switch = 0;
+    this = 0;
+    throw = 0;
+    true = 0;
+    try = 0;
+    typeof = 0;
+    var = 0;
+    void = 0;
+    while = 0;
+    with = 0;
+}
 var bigEnum;
 (function (bigEnum) {
     bigEnum[bigEnum["constructor"] = 0] = "constructor";
@@= skipped -118, +115 lines =@@
 })(bigEnum || (bigEnum = {}));
 var bigModule;
 (function (bigModule) {
-    var constructor = /** @class */ (function () {
-        function constructor() {
-        }
-        return constructor;
-    }());
-    var implements = /** @class */ (function () {
-        function implements_1() {
-        }
-        return implements_1;
-    }());
-    var interface = /** @class */ (function () {
-        function interface_1() {
-        }
-        return interface_1;
-    }());
-    var let = /** @class */ (function () {
-        function let_1() {
-        }
-        return let_1;
-    }());
-    var module = /** @class */ (function () {
-        function module() {
-        }
-        return module;
-    }());
-    var package = /** @class */ (function () {
-        function package_1() {
-        }
-        return package_1;
-    }());
-    var private = /** @class */ (function () {
-        function private_1() {
-        }
-        return private_1;
-    }());
-    var protected = /** @class */ (function () {
-        function protected_1() {
-        }
-        return protected_1;
-    }());
-    var public = /** @class */ (function () {
-        function public_1() {
-        }
-        return public_1;
-    }());
-    var set = /** @class */ (function () {
-        function set() {
-        }
-        return set;
-    }());
-    var static = /** @class */ (function () {
-        function static_1() {
-        }
-        return static_1;
-    }());
-    var get = /** @class */ (function () {
-        function get() {
-        }
-        return get;
-    }());
-    var yield = /** @class */ (function () {
-        function yield_1() {
-        }
-        return yield_1;
-    }());
-    var declare = /** @class */ (function () {
-        function declare() {
-        }
-        return declare;
-    }());
+    class constructor {
+    }
+    class implements {
+    }
+    class interface {
+    }
+    class let {
+    }
+    class module {
+    }
+    class package {
+    }
+    class private {
+    }
+    class protected {
+    }
+    class public {
+    }
+    class set {
+    }
+    class static {
+    }
+    class get {
+    }
+    class yield {
+    }
+    class declare {
+    }
 })(bigModule || (bigModule = {}));
