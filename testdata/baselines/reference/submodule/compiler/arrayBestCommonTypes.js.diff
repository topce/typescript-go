--- old.arrayBestCommonTypes.js
+++ new.arrayBestCommonTypes.js
@@= skipped -109, +109 lines =@@
 
 
 //// [arrayBestCommonTypes.js]
-var __extends = (this && this.__extends) || (function () {
-    var extendStatics = function (d, b) {
-        extendStatics = Object.setPrototypeOf ||
-            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
-            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
-        return extendStatics(d, b);
-    };
-    return function (d, b) {
-        if (typeof b !== "function" && b !== null)
-            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
-        extendStatics(d, b);
-        function __() { this.constructor = d; }
-        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-    };
-})();
 var EmptyTypes;
 (function (EmptyTypes) {
-    var base = /** @class */ (function () {
-        function base() {
-        }
-        return base;
-    }());
-    var base2 = /** @class */ (function () {
-        function base2() {
-        }
-        return base2;
-    }());
-    var derived = /** @class */ (function (_super) {
-        __extends(derived, _super);
-        function derived() {
-            return _super !== null && _super.apply(this, arguments) || this;
-        }
-        return derived;
-    }(base));
-    var f = /** @class */ (function () {
-        function f() {
-        }
-        f.prototype.voidIfAny = function (x, y) {
-            if (y === void 0) { y = false; }
-            return null;
-        };
-        f.prototype.x = function () {
+    class base {
+    }
+    class base2 {
+    }
+    class derived extends base {
+    }
+    class f {
+        voidIfAny(x, y = false) { return null; }
+        x() {
             (this.voidIfAny([4, 2][0]));
             (this.voidIfAny([4, 2, undefined][0]));
             (this.voidIfAny([undefined, 2, 4][0]));
@@= skipped -59, +28 lines =@@
             var t2 = [{ x: true, y: new derived() }, { x: false, y: new base() }];
             var t3 = [{ x: undefined, y: new base() }, { x: '', y: new derived() }];
             var anyObj = null;
-            // Order matters here so test all the variants
             var a1 = [{ x: 0, y: 'a' }, { x: 'a', y: 'a' }, { x: anyObj, y: 'a' }];
             var a2 = [{ x: anyObj, y: 'a' }, { x: 0, y: 'a' }, { x: 'a', y: 'a' }];
             var a3 = [{ x: 0, y: 'a' }, { x: anyObj, y: 'a' }, { x: 'a', y: 'a' }];
@@= skipped -11, +10 lines =@@
             var b2 = [base2Obj, baseObj, ifaceObj];
             var b3 = [baseObj, ifaceObj, base2Obj];
             var b4 = [ifaceObj, baseObj, base2Obj];
-        };
-        return f;
-    }());
+        }
+    }
 })(EmptyTypes || (EmptyTypes = {}));
 var NonEmptyTypes;
 (function (NonEmptyTypes) {
-    var base = /** @class */ (function () {
-        function base() {
-        }
-        return base;
-    }());
-    var base2 = /** @class */ (function () {
-        function base2() {
-        }
-        return base2;
-    }());
-    var derived = /** @class */ (function (_super) {
-        __extends(derived, _super);
-        function derived() {
-            return _super !== null && _super.apply(this, arguments) || this;
-        }
-        return derived;
-    }(base));
-    var f = /** @class */ (function () {
-        function f() {
-        }
-        f.prototype.voidIfAny = function (x, y) {
-            if (y === void 0) { y = false; }
-            return null;
-        };
-        f.prototype.x = function () {
+    class base {
+        x;
+        y;
+    }
+    class base2 {
+        x;
+        z;
+    }
+    class derived extends base {
+        a;
+    }
+    class f {
+        voidIfAny(x, y = false) { return null; }
+        x() {
             (this.voidIfAny([4, 2][0]));
             (this.voidIfAny([4, 2, undefined][0]));
             (this.voidIfAny([undefined, 2, 4][0]));
@@= skipped -48, +36 lines =@@
             var t2 = [{ x: true, y: new derived() }, { x: false, y: new base() }];
             var t3 = [{ x: undefined, y: new base() }, { x: '', y: new derived() }];
             var anyObj = null;
-            // Order matters here so test all the variants
             var a1 = [{ x: 0, y: 'a' }, { x: 'a', y: 'a' }, { x: anyObj, y: 'a' }];
             var a2 = [{ x: anyObj, y: 'a' }, { x: 0, y: 'a' }, { x: 'a', y: 'a' }];
             var a3 = [{ x: 0, y: 'a' }, { x: anyObj, y: 'a' }, { x: 'a', y: 'a' }];
@@= skipped -11, +10 lines =@@
             var b2 = [base2Obj, baseObj, ifaceObj];
             var b3 = [baseObj, ifaceObj, base2Obj];
             var b4 = [ifaceObj, baseObj, base2Obj];
-        };
-        return f;
-    }());
+        }
+    }
 })(NonEmptyTypes || (NonEmptyTypes = {}));
