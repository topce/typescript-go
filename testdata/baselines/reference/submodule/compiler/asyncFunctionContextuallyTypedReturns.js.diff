--- old.asyncFunctionContextuallyTypedReturns.js
+++ new.asyncFunctionContextuallyTypedReturns.js
@@= skipped -34, +34 lines =@@
 
 
 //// [asyncFunctionContextuallyTypedReturns.js]
-"use strict";
-var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
-    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
-    return new (P || (P = Promise))(function (resolve, reject) {
-        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
-        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
-        step((generator = generator.apply(thisArg, _arguments || [])).next());
-    });
-};
 f(v => v ? [0] : Promise.reject());
-f((v) => __awaiter(void 0, void 0, void 0, function* () { return v ? [0] : Promise.reject(); }));
+f(async v => v ? [0] : Promise.reject());
 g(v => v ? "contextuallyTypable" : Promise.reject());
-g((v) => __awaiter(void 0, void 0, void 0, function* () { return v ? "contextuallyTypable" : Promise.reject(); }));
+g(async v => v ? "contextuallyTypable" : Promise.reject());
 h(v => v ? (abc) => { } : Promise.reject());
-h((v) => __awaiter(void 0, void 0, void 0, function* () { return v ? (def) => { } : Promise.reject(); }));
+h(async v => v ? (def) => { } : Promise.reject());
 // repro from #29196
-const increment = (num, str) => __awaiter(void 0, void 0, void 0, function* () {
+const increment = async (num, str) => {
     return a => {
         return a.length;
     };
-});
-const increment2 = (num, str) => __awaiter(void 0, void 0, void 0, function* () {
+};
+const increment2 = async (num, str) => {
     return a => {
         return a.length;
     };
-});
+};
