--- old.conditionalTypeAssignabilityWhenDeferred.js
+++ new.conditionalTypeAssignabilityWhenDeferred.js
@@= skipped -127, +127 lines =@@
 function func(x, tipos) {
     select(x, tipos, "value");
 }
-onlyNullablePlease(z); // works as expected
-onlyNullablePlease2(z); // works as expected
-onlyNullablePlease(y); // error as expected
-onlyNullablePlease2(y); // error as expected
+onlyNullablePlease(z);
+onlyNullablePlease2(z);
+onlyNullablePlease(y);
+onlyNullablePlease2(y);
 function f(t) {
     var x = Math.random() > 0.5 ? null : t;
-    onlyNullablePlease(x); // should work
-    onlyNullablePlease2(x); // should work
+    onlyNullablePlease(x);
+    onlyNullablePlease2(x);
 }
 function f2(t1, t2) {
-    t1 = t2; // OK
-    t2 = t1; // should fail
+    t1 = t2;
+    t2 = t1;
 }
 function test(x, s) {
-    x = "a"; // Currently an error, should be ok
-    x = s; // Error
+    x = "a";
+    x = s;
 }
 function testAssignabilityToConditionalType() {
-    var o = { a: 1, b: 2 };
-    var x = undefined;
-    // Simple case: OK
-    var o1 = o;
-    // Simple case where source happens to be a conditional type: also OK
-    var x1 = x;
-    // Infer type parameters: no good
-    var o2 = o;
-    // The next 4 are arguable - if you choose to ignore the `never` distribution case,
-    // then they're all good. The `never` case _is_ a bit of an outlier - we say distributive types
-    // look approximately like the sum of their branches, but the `never` case bucks that.
-    // There's an argument for the result of dumping `never` into a distributive conditional
-    // being not `never`, but instead the intersection of the branches - a much more precise bound
-    // on that "impossible" input.
-    // Distributive where T might instantiate to never: no good
-    var o3 = o;
-    // Distributive where T & string might instantiate to never: also no good
-    var o4 = o;
-    // Distributive where {a: T} cannot instantiate to never: OK
-    var o5 = o;
-    // Distributive where check type is a conditional which returns a non-never type upon instantiation with `never` but can still return never otherwise: no good
-    var o6 = o;
+    const o = { a: 1, b: 2 };
+    const x = undefined;
+    const o1 = o;
+    const x1 = x;
+    const o2 = o;
+    const o3 = o;
+    const o4 = o;
+    const o5 = o;
+    const o6 = o;
 }
-var Foo2 = /** @class */ (function () {
-    function Foo2() {
+class Foo2 {
+    prop;
+    method() {
+        set(this, "prop", "hi");
     }
-    Foo2.prototype.method = function () {
-        set(this, "prop", "hi"); // <-- type error
-    };
-    return Foo2;
-}());
-set(new Foo2(), "prop", "hi"); // <-- typechecks
+}
+set(new Foo2(), "prop", "hi");
 function f3(x) {
     return x;
 }
 function f4(x) {
-    return x; // should fail
+    return x;
 }
