--- old.higherOrderMappedIndexLookupInference.types
+++ new.higherOrderMappedIndexLookupInference.types
@@= skipped -35, +35 lines =@@
 }
 
 function f3(a: <T>() => { [K in keyof T]: T[K] }, b: <U>() => { [K in keyof U]: U[K] }) {
->f3 : (a: <T>() => { [K in keyof T]: T[K]; }, b: <U>() => { [K in keyof U]: U[K]; }) => void
->a : <T>() => { [K in keyof T]: T[K]; }
->b : <U>() => { [K in keyof U]: U[K]; }
+>f3 : (a: <T>() => { [K in keyof T]: T[K] }, b: <U>() => { [K in keyof U]: U[K] }) => void
+>a : <T>() => { [K in keyof T]: T[K] }
+>b : <U>() => { [K in keyof U]: U[K] }
 
     a = b;
->a = b : <U>() => { [K in keyof U]: U[K]; }
->a : <T>() => { [K in keyof T]: T[K]; }
->b : <U>() => { [K in keyof U]: U[K]; }
+>a = b : <U>() => { [K in keyof U]: U[K] }
+>a : <T>() => { [K in keyof T]: T[K] }
+>b : <U>() => { [K in keyof U]: U[K] }
 
     b = a;
->b = a : <T>() => { [K in keyof T]: T[K]; }
->b : <U>() => { [K in keyof U]: U[K]; }
->a : <T>() => { [K in keyof T]: T[K]; }
+>b = a : <T>() => { [K in keyof T]: T[K] }
+>b : <U>() => { [K in keyof U]: U[K] }
+>a : <T>() => { [K in keyof T]: T[K] }
 }
 
 // Repro from #18338
@@= skipped -24, +24 lines =@@
 >f : <T>() => IdMapped<T>
 
 declare const g: <U>() => { [K in keyof U]: U[K] };
->g : <U>() => { [K in keyof U]: U[K]; }
+>g : <U>() => { [K in keyof U]: U[K] }
 
 const h: typeof g = f;
->h : <U>() => { [K in keyof U]: U[K]; }
->g : <U>() => { [K in keyof U]: U[K]; }
+>h : <U>() => { [K in keyof U]: U[K] }
+>g : <U>() => { [K in keyof U]: U[K] }
 >f : <T>() => IdMapped<T>
 
