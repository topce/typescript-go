--- old.declarationEmitBindingPatternsFunctionExpr.types
+++ new.declarationEmitBindingPatternsFunctionExpr.types
@@= skipped -6, +6 lines =@@
 
 // Tempting to remove alias if unused 
 let notReferenced = ({ name: alias }: Named) => { }
->notReferenced : ({ name: alias }: Named) => void
->({ name: alias }: Named) => { } : ({ name: alias }: Named) => void
+>notReferenced : (__0: Named) => void
+>({ name: alias }: Named) => { } : (__0: Named) => void
 >name : any
 >alias : string
 
@@= skipped -9, +9 lines =@@
 
 // 1.Causes duplicate identifier if we remove alias
 const duplicateIndetifiers = ({ name: alias, name: alias2 }: Named) => { }
->duplicateIndetifiers : ({ name: alias, name: alias2 }: Named) => void
->({ name: alias, name: alias2 }: Named) => { } : ({ name: alias, name: alias2 }: Named) => void
+>duplicateIndetifiers : (__0: Named) => void
+>({ name: alias, name: alias2 }: Named) => { } : (__0: Named) => void
 >name : any
 >alias : string
 >name : any
 >alias2 : string
 
 const duplicateIndetifiers2 = (name: string, { name: alias }: Named) => { }
->duplicateIndetifiers2 : (name: string, { name: alias }: Named) => void
->(name: string, { name: alias }: Named) => { } : (name: string, { name: alias }: Named) => void
+>duplicateIndetifiers2 : (name: string, __1: Named) => void
+>(name: string, { name: alias }: Named) => { } : (name: string, __1: Named) => void
 >name : string
 >name : any
 >alias : string
 
 const duplicateIndetifiers3 = ({ name: alias }: Named, { name: alias2 }: Named) => { }
->duplicateIndetifiers3 : ({ name: alias }: Named, { name: alias2 }: Named) => void
->({ name: alias }: Named, { name: alias2 }: Named) => { } : ({ name: alias }: Named, { name: alias2 }: Named) => void
+>duplicateIndetifiers3 : (__0: Named, __1: Named) => void
+>({ name: alias }: Named, { name: alias2 }: Named) => { } : (__0: Named, __1: Named) => void
 >name : any
 >alias : string
 >name : any
@@= skipped -28, +28 lines =@@
 
 // 2.Can change in meaning for typeof value if we remove alias
 const shadowedVariable = ({ value: alias }: { value: string }): typeof value => value;
->shadowedVariable : ({ value: alias }: { value: string; }) => typeof value
->({ value: alias }: { value: string }): typeof value => value : ({ value: alias }: { value: string; }) => typeof value
+>shadowedVariable : (__0: { value: string; }) => string
+>({ value: alias }: { value: string }): typeof value => value : (__0: { value: string; }) => string
 >value : any
 >alias : string
 >value : string
