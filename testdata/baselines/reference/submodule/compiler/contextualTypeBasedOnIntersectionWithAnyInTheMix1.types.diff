--- old.contextualTypeBasedOnIntersectionWithAnyInTheMix1.types
+++ new.contextualTypeBasedOnIntersectionWithAnyInTheMix1.types
@@= skipped -16, +16 lines =@@
   A extends keyof any = never,
 > {
   attrs<
->attrs : <U, NewA extends Partial<ComponentProps<C> & U> & { [others: string]: any; } = {}>(attrs: Attrs<ComponentProps<C> & U, NewA>) => StyledFunction<C, O & NewA, A | keyof NewA>
+>attrs : <U, NewA extends Partial<ComponentProps<C> & U> & { [others: string]: any; }>(attrs: NewA) => StyledFunction<C, O & NewA, A | keyof NewA>
 
     U,
     NewA extends Partial<ComponentProps<C> & U> & {
@@= skipped -25, +25 lines =@@
 
 interface BaseProps {
   as?: "select" | "input";
->as : "select" | "input" | undefined
+>as : "input" | "select" | undefined
 }
 
 declare const Flex: (props: BaseProps) => null;
@@= skipped -10, +10 lines =@@
 export const StyledSelect = styled(Flex).attrs({
 >StyledSelect : StyledFunction<(props: BaseProps) => null, { as: "select"; }, "as">
 >styled(Flex).attrs({  as: "select",}) : StyledFunction<(props: BaseProps) => null, { as: "select"; }, "as">
->styled(Flex).attrs : <U, NewA extends Partial<BaseProps & U> & { [others: string]: any; } = {}>(attrs: NewA) => StyledFunction<(props: BaseProps) => null, {} & NewA, keyof NewA>
+>styled(Flex).attrs : <U, NewA extends Partial<BaseProps & U> & { [others: string]: any; }>(attrs: NewA) => StyledFunction<(props: BaseProps) => null, {} & NewA, keyof NewA>
 >styled(Flex) : StyledFunction<(props: BaseProps) => null, {}, never>
 >styled : StyledInterface
 >Flex : (props: BaseProps) => null
->attrs : <U, NewA extends Partial<BaseProps & U> & { [others: string]: any; } = {}>(attrs: NewA) => StyledFunction<(props: BaseProps) => null, {} & NewA, keyof NewA>
+>attrs : <U, NewA extends Partial<BaseProps & U> & { [others: string]: any; }>(attrs: NewA) => StyledFunction<(props: BaseProps) => null, {} & NewA, keyof NewA>
 >{  as: "select",} : { as: "select"; }
 
   as: "select",
