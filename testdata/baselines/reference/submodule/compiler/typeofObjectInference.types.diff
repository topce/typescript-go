--- old.typeofObjectInference.types
+++ new.typeofObjectInference.types
@@= skipped -5, +5 lines =@@
 >1 : 1
 
 function decorateA<O extends any>(fn: (first: {value: typeof val}) => O) {
->decorateA : <O extends unknown>(fn: (first: { value: typeof val; }) => O) => () => O
->fn : (first: { value: typeof val; }) => O
->first : { value: typeof val; }
+>decorateA : <O extends unknown>(fn: (first: { value: number; }) => O) => () => O
+>fn : (first: { value: number; }) => O
+>first : { value: number; }
 >value : number
 >val : number
 
     return (): O => fn({value: val})
 >(): O => fn({value: val}) : () => O
 >fn({value: val}) : O
->fn : (first: { value: typeof val; }) => O
+>fn : (first: { value: number; }) => O
 >{value: val} : { value: number; }
 >value : number
 >val : number
@@= skipped -17, +17 lines =@@
 let a = decorateA(({value}) => 5)
 >a : () => number
 >decorateA(({value}) => 5) : () => number
->decorateA : <O extends unknown>(fn: (first: { value: typeof val; }) => O) => () => O
->({value}) => 5 : ({ value }: { value: typeof val; }) => number
+>decorateA : <O extends unknown>(fn: (first: { value: number; }) => O) => () => O
+>({value}) => 5 : (__0: { value: number; }) => number
 >value : number
 >5 : 5
 
 function decorateB<O extends any>(fn: (first: typeof val) => O) {
->decorateB : <O extends unknown>(fn: (first: typeof val) => O) => () => O
->fn : (first: typeof val) => O
+>decorateB : <O extends unknown>(fn: (first: number) => O) => () => O
+>fn : (first: number) => O
 >first : number
 >val : number
 
     return (): O => fn(val)
 >(): O => fn(val) : () => O
 >fn(val) : O
->fn : (first: typeof val) => O
+>fn : (first: number) => O
 >val : number
 }
 let b = decorateB((value) => 5)
 >b : () => number
 >decorateB((value) => 5) : () => number
->decorateB : <O extends unknown>(fn: (first: typeof val) => O) => () => O
+>decorateB : <O extends unknown>(fn: (first: number) => O) => () => O
 >(value) => 5 : (value: number) => number
 >value : number
 >5 : 5
@@= skipped -43, +43 lines =@@
 >c : () => number
 >decorateC(({value}) => 5) : () => number
 >decorateC : <O extends unknown>(fn: (first: { value: number; }) => O) => () => O
->({value}) => 5 : ({ value }: { value: number; }) => number
+>({value}) => 5 : (__0: { value: number; }) => number
 >value : number
 >5 : 5
 
@@= skipped -26, +26 lines =@@
 >d : () => number
 >decorateD(({value}) => 5) : () => number
 >decorateD : <O extends unknown>(fn: (first: First) => O) => () => O
->({value}) => 5 : ({ value }: First) => number
+>({value}) => 5 : (__0: First) => number
 >value : number
 >5 : 5
 
