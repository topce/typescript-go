//// [tests/cases/compiler/jsxChildrenIndividualErrorElaborations.tsx] ////

=== index.tsx ===
/// <reference path="react16.d.ts" />
import * as React from "react";
>React : any

interface Props {
  children: (x: number) => string;
>children : (x: number) => string
>x : number
}

export function Blah(props: Props) {
>Blah : (props: Props) => any
>props : Props

  return <></>;
><></> : any
}

// Incompatible child.
var a = <Blah>
>a : any
><Blah>  {x => x}</Blah> : any
>Blah : (props: Props) => any

  {x => x}
>x => x : (x: any) => any
>x : any
>x : any

</Blah>
>Blah : (props: Props) => any

// Blah components don't accept text as child elements
var a = <Blah>
>a : any
><Blah>  Hello unexpected text!</Blah> : any
>Blah : (props: Props) => any

  Hello unexpected text!
</Blah>
>Blah : (props: Props) => any

// Blah components don't accept multiple children.
var a = <Blah>
>a : any
><Blah>  {x => "" + x}  {x => "" + x}</Blah> : any
>Blah : (props: Props) => any

  {x => "" + x}
>x => "" + x : (x: any) => string
>x : any
>"" + x : string
>"" : ""
>x : any

  {x => "" + x}
>x => "" + x : (x: any) => string
>x : any
>"" + x : string
>"" : ""
>x : any

</Blah>
>Blah : (props: Props) => any

interface PropsArr {
  children: ((x: number) => string)[];
>children : (x: number) => string[]
>x : number
}

export function Blah2(props: PropsArr) {
>Blah2 : (props: PropsArr) => any
>props : PropsArr

  return <></>;
><></> : any
}

// Incompatible child.
var a = <Blah2>
>a : any
><Blah2>  {x => x}</Blah2> : any
>Blah2 : (props: PropsArr) => any

  {x => x}
>x => x : (x: any) => any
>x : any
>x : any

</Blah2>
>Blah2 : (props: PropsArr) => any

// Blah2 components don't accept text as child elements
var a = <Blah2>
>a : any
><Blah2>  Hello unexpected text!</Blah2> : any
>Blah2 : (props: PropsArr) => any

  Hello unexpected text!
</Blah2>
>Blah2 : (props: PropsArr) => any

// Blah2 components don't accept multiple children of the wrong type.
var a = <Blah2>
>a : any
><Blah2>  {x => x}  {x => x}</Blah2> : any
>Blah2 : (props: PropsArr) => any

  {x => x}
>x => x : (x: any) => any
>x : any
>x : any

  {x => x}
>x => x : (x: any) => any
>x : any
>x : any

</Blah2>
>Blah2 : (props: PropsArr) => any

type Cb = (x: number) => string;
>Cb : Cb
>x : number

interface PropsMixed {
  children: Cb | Cb[];
>children : Cb[] | Cb
}

export function Blah3(props: PropsMixed) {
>Blah3 : (props: PropsMixed) => any
>props : PropsMixed

  return <></>;
><></> : any
}

// Incompatible child.
var a = <Blah3>
>a : any
><Blah3>  {x => x}</Blah3> : any
>Blah3 : (props: PropsMixed) => any

  {x => x}
>x => x : (x: any) => any
>x : any
>x : any

</Blah3>
>Blah3 : (props: PropsMixed) => any

// Blah3 components don't accept text as child elements
var a = <Blah3>
>a : any
><Blah3>  Hello unexpected text!</Blah3> : any
>Blah3 : (props: PropsMixed) => any

  Hello unexpected text!
</Blah3>
>Blah3 : (props: PropsMixed) => any

// Blah3 components don't accept multiple children of the wrong type.
var a = <Blah3>
>a : any
><Blah3>  {x => x}  {x => x}</Blah3> : any
>Blah3 : (props: PropsMixed) => any

  {x => x}
>x => x : (x: any) => any
>x : any
>x : any

  {x => x}
>x => x : (x: any) => any
>x : any
>x : any

</Blah3>
>Blah3 : (props: PropsMixed) => any

