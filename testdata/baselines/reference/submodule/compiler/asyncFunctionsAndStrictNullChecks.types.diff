--- old.asyncFunctionsAndStrictNullChecks.types
+++ new.asyncFunctionsAndStrictNullChecks.types
@@= skipped -3, +3 lines =@@
 declare namespace Windows.Foundation {
     interface IPromise<TResult> {
         then<U>(success?: (value: TResult) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>;
->then : { <U>(success?: (value: TResult) => IPromise<U>, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U_1>(success?: (value: TResult) => IPromise<U_1>, error?: (error: any) => U_1, progress?: (progress: any) => void): IPromise<U_1>; <U_1>(success?: (value: TResult) => U_1, error?: (error: any) => IPromise<U_1>, progress?: (progress: any) => void): IPromise<U_1>; <U_1>(success?: (value: TResult) => U_1, error?: (error: any) => U_1, progress?: (progress: any) => void): IPromise<U_1>; }
->success : ((value: TResult) => IPromise<U>) | undefined
+>then : { <U>(success?: (value: TResult) => IPromise<U> | undefined, error?: (error: any) => IPromise<U> | undefined, progress?: (progress: any) => void | undefined): IPromise<U>; <U>(success?: (value: TResult) => IPromise<U> | undefined, error?: (error: any) => U | undefined, progress?: (progress: any) => void | undefined): IPromise<U>; <U>(success?: (value: TResult) => U | undefined, error?: (error: any) => IPromise<U> | undefined, progress?: (progress: any) => void | undefined): IPromise<U>; <U>(success?: (value: TResult) => U | undefined, error?: (error: any) => U | undefined, progress?: (progress: any) => void | undefined): IPromise<U>; }
+>success : (value: TResult) => IPromise<U> | undefined
 >value : TResult
->error : ((error: any) => IPromise<U>) | undefined
+>error : (error: any) => IPromise<U> | undefined
 >error : any
->progress : ((progress: any) => void) | undefined
+>progress : (progress: any) => void | undefined
 >progress : any
 
         then<U>(success?: (value: TResult) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>;
->then : { <U_1>(success?: (value: TResult) => IPromise<U_1>, error?: (error: any) => IPromise<U_1>, progress?: (progress: any) => void): IPromise<U_1>; <U>(success?: (value: TResult) => IPromise<U>, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; <U_1>(success?: (value: TResult) => U_1, error?: (error: any) => IPromise<U_1>, progress?: (progress: any) => void): IPromise<U_1>; <U_1>(success?: (value: TResult) => U_1, error?: (error: any) => U_1, progress?: (progress: any) => void): IPromise<U_1>; }
->success : ((value: TResult) => IPromise<U>) | undefined
+>then : { <U>(success?: (value: TResult) => IPromise<U> | undefined, error?: (error: any) => IPromise<U> | undefined, progress?: (progress: any) => void | undefined): IPromise<U>; <U>(success?: (value: TResult) => IPromise<U> | undefined, error?: (error: any) => U | undefined, progress?: (progress: any) => void | undefined): IPromise<U>; <U>(success?: (value: TResult) => U | undefined, error?: (error: any) => IPromise<U> | undefined, progress?: (progress: any) => void | undefined): IPromise<U>; <U>(success?: (value: TResult) => U | undefined, error?: (error: any) => U | undefined, progress?: (progress: any) => void | undefined): IPromise<U>; }
+>success : (value: TResult) => IPromise<U> | undefined
 >value : TResult
->error : ((error: any) => U) | undefined
+>error : (error: any) => U | undefined
 >error : any
->progress : ((progress: any) => void) | undefined
+>progress : (progress: any) => void | undefined
 >progress : any
 
         then<U>(success?: (value: TResult) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>;
->then : { <U_1>(success?: (value: TResult) => IPromise<U_1>, error?: (error: any) => IPromise<U_1>, progress?: (progress: any) => void): IPromise<U_1>; <U_1>(success?: (value: TResult) => IPromise<U_1>, error?: (error: any) => U_1, progress?: (progress: any) => void): IPromise<U_1>; <U>(success?: (value: TResult) => U, error?: (error: any) => IPromise<U>, progress?: (progress: any) => void): IPromise<U>; <U_1>(success?: (value: TResult) => U_1, error?: (error: any) => U_1, progress?: (progress: any) => void): IPromise<U_1>; }
->success : ((value: TResult) => U) | undefined
+>then : { <U>(success?: (value: TResult) => IPromise<U> | undefined, error?: (error: any) => IPromise<U> | undefined, progress?: (progress: any) => void | undefined): IPromise<U>; <U>(success?: (value: TResult) => IPromise<U> | undefined, error?: (error: any) => U | undefined, progress?: (progress: any) => void | undefined): IPromise<U>; <U>(success?: (value: TResult) => U | undefined, error?: (error: any) => IPromise<U> | undefined, progress?: (progress: any) => void | undefined): IPromise<U>; <U>(success?: (value: TResult) => U | undefined, error?: (error: any) => U | undefined, progress?: (progress: any) => void | undefined): IPromise<U>; }
+>success : (value: TResult) => U | undefined
 >value : TResult
->error : ((error: any) => IPromise<U>) | undefined
+>error : (error: any) => IPromise<U> | undefined
 >error : any
->progress : ((progress: any) => void) | undefined
+>progress : (progress: any) => void | undefined
 >progress : any
 
         then<U>(success?: (value: TResult) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>;
->then : { <U_1>(success?: (value: TResult) => IPromise<U_1>, error?: (error: any) => IPromise<U_1>, progress?: (progress: any) => void): IPromise<U_1>; <U_1>(success?: (value: TResult) => IPromise<U_1>, error?: (error: any) => U_1, progress?: (progress: any) => void): IPromise<U_1>; <U_1>(success?: (value: TResult) => U_1, error?: (error: any) => IPromise<U_1>, progress?: (progress: any) => void): IPromise<U_1>; <U>(success?: (value: TResult) => U, error?: (error: any) => U, progress?: (progress: any) => void): IPromise<U>; }
->success : ((value: TResult) => U) | undefined
+>then : { <U>(success?: (value: TResult) => IPromise<U> | undefined, error?: (error: any) => IPromise<U> | undefined, progress?: (progress: any) => void | undefined): IPromise<U>; <U>(success?: (value: TResult) => IPromise<U> | undefined, error?: (error: any) => U | undefined, progress?: (progress: any) => void | undefined): IPromise<U>; <U>(success?: (value: TResult) => U | undefined, error?: (error: any) => IPromise<U> | undefined, progress?: (progress: any) => void | undefined): IPromise<U>; <U>(success?: (value: TResult) => U | undefined, error?: (error: any) => U | undefined, progress?: (progress: any) => void | undefined): IPromise<U>; }
+>success : (value: TResult) => U | undefined
 >value : TResult
->error : ((error: any) => U) | undefined
+>error : (error: any) => U | undefined
 >error : any
->progress : ((progress: any) => void) | undefined
+>progress : (progress: any) => void | undefined
 >progress : any
 
         done<U>(success?: (value: TResult) => any, error?: (error: any) => any, progress?: (progress: any) => void): void;
->done : <U>(success?: (value: TResult) => any, error?: (error: any) => any, progress?: (progress: any) => void) => void
->success : ((value: TResult) => any) | undefined
+>done : <U>(success?: (value: TResult) => any | undefined, error?: (error: any) => any | undefined, progress?: (progress: any) => void | undefined) => void
+>success : (value: TResult) => any | undefined
 >value : TResult
->error : ((error: any) => any) | undefined
+>error : (error: any) => any | undefined
 >error : any
->progress : ((progress: any) => void) | undefined
+>progress : (progress: any) => void | undefined
 >progress : any
 
         cancel(): void;
@@= skipped -50, +50 lines =@@
 }
 
 async function sample(promise: Windows.Foundation.IPromise<number>) {
->sample : (promise: Windows.Foundation.IPromise<number>) => Promise<void>
->promise : Windows.Foundation.IPromise<number>
+>sample : (promise: IPromise<number>) => Promise<void>
+>promise : IPromise<number>
 >Windows : any
 >Foundation : any
 
     var number = await promise;
 >number : number
 >await promise : number
->promise : Windows.Foundation.IPromise<number>
+>promise : IPromise<number>
 }
 
 
@@= skipped -17, +17 lines =@@
 >value : T
 
 declare function resolve2<T>(value: T): Windows.Foundation.IPromise<T>;
->resolve2 : <T>(value: T) => Windows.Foundation.IPromise<T>
+>resolve2 : <T>(value: T) => IPromise<T>
 >value : T
 >Windows : any
 >Foundation : any
 
 async function sample2(x?: number) {
->sample2 : (x?: number) => Promise<void>
+>sample2 : (x?: number | undefined) => Promise<void>
 >x : number | undefined
 
     let x1 = await resolve1(x);
@@= skipped -19, +19 lines =@@
     let x2 = await resolve2(x);
 >x2 : number | undefined
 >await resolve2(x) : number | undefined
->resolve2(x) : Windows.Foundation.IPromise<number | undefined>
->resolve2 : <T>(value: T) => Windows.Foundation.IPromise<T>
+>resolve2(x) : IPromise<number | undefined>
+>resolve2 : <T>(value: T) => IPromise<T>
 >x : number | undefined
 }
 
