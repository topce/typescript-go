--- old.inferFromGenericFunctionReturnTypes3.types
+++ new.inferFromGenericFunctionReturnTypes3.types
@@= skipped -0, +0 lines =@@
 //// [tests/cases/compiler/inferFromGenericFunctionReturnTypes3.ts] ////
 
-=== Performance Stats ===
-Type Count: 1,000
-
 === inferFromGenericFunctionReturnTypes3.ts ===
 // Repros from #5487
 
@@= skipped -101, +98 lines =@@
 
 interface FolderContentItem {
     type: 'folder' | 'file';
->type : "folder" | "file"
+>type : "file" | "folder"
 }
 
 let a: FolderContentItem[] = [];
@@= skipped -41, +41 lines =@@
 >arr.map : <U>(callbackfn: (value: [number, number], index: number, array: [number, number][]) => U, thisArg?: any) => U[]
 >arr : [number, number][]
 >map : <U>(callbackfn: (value: [number, number], index: number, array: [number, number][]) => U, thisArg?: any) => U[]
->([x, y]) => {    return [x, y];} : ([x, y]: [number, number]) => [number, number]
+>([x, y]) => {    return [x, y];} : (__0: [number, number]) => [number, number]
 >x : number
 >y : number
 
@@= skipped -262, +262 lines =@@
 >age : number
 
     position: "STRIKER" | "GOALKEEPER",
->position : "STRIKER" | "GOALKEEPER"
+>position : "GOALKEEPER" | "STRIKER"
 
 };
  
@@= skipped -13, +13 lines =@@
 
     return Promise.all([
 >Promise.all([        {            name: "David Gomes",            age: 23,            position: "GOALKEEPER",        }, {            name: "Cristiano Ronaldo",            age: 33,            position: "STRIKER",        }    ]) : Promise<({ name: string; age: number; position: "GOALKEEPER"; } | { name: string; age: number; position: "STRIKER"; })[]>
->Promise.all : { <T>(values: Iterable<T | PromiseLike<T>>): Promise<Awaited<T>[]>; <T extends readonly unknown[] | []>(values: T): Promise<{ -readonly [P in keyof T]: Awaited<T[P]>; }>; }
+>Promise.all : { <T>(values: Iterable<T | PromiseLike<T>, any, any>): Promise<Awaited<T>[]>; <T extends readonly unknown[] | []>(values: T): Promise<{ -readonly [P in keyof T]: Awaited<T[P]> }>; }
 >Promise : PromiseConstructor
->all : { <T>(values: Iterable<T | PromiseLike<T>>): Promise<Awaited<T>[]>; <T extends readonly unknown[] | []>(values: T): Promise<{ -readonly [P in keyof T]: Awaited<T[P]>; }>; }
+>all : { <T>(values: Iterable<T | PromiseLike<T>, any, any>): Promise<Awaited<T>[]>; <T extends readonly unknown[] | []>(values: T): Promise<{ -readonly [P in keyof T]: Awaited<T[P]> }>; }
 >[        {            name: "David Gomes",            age: 23,            position: "GOALKEEPER",        }, {            name: "Cristiano Ronaldo",            age: 33,            position: "STRIKER",        }    ] : ({ name: string; age: number; position: "GOALKEEPER"; } | { name: string; age: number; position: "STRIKER"; })[]
         {
 >{            name: "David Gomes",            age: 23,            position: "GOALKEEPER",        } : { name: string; age: number; position: "GOALKEEPER"; }
