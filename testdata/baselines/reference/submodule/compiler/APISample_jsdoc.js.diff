--- old.APISample_jsdoc.js
+++ new.APISample_jsdoc.js
@@= skipped -122, +122 lines =@@
 
 //// [APISample_jsdoc.js]
 "use strict";
-/*
- * Note: This test is a public API sample. The original sources can be found
- *       at: https://github.com/YousefED/typescript-json-schema
- *           https://github.com/vega/ts-json-schema-generator
- *       Please log a "breaking change" issue for any API breaking change affecting this issue
- */
 Object.defineProperty(exports, "__esModule", { value: true });
-var ts = require("typescript");
+const ts = require("typescript");
 // excerpted from https://github.com/YousefED/typescript-json-schema
 // (converted from a method and modified; for example, `this: any` to compensate, among other changes)
 function parseCommentsIntoDefinition(symbol, definition, otherAnnotations) {
-    var _this = this;
     if (!symbol) {
         return;
     }
     // the comments for a symbol
-    var comments = symbol.getDocumentationComment(undefined);
+    let comments = symbol.getDocumentationComment(undefined);
     if (comments.length) {
-        definition.description = comments.map(function (comment) { return comment.kind === "lineBreak" ? comment.text : comment.text.trim().replace(/\r\n/g, "\n"); }).join("");
+        definition.description = comments.map(comment => comment.kind === "lineBreak" ? comment.text : comment.text.trim().replace(/\r\n/g, "\n")).join("");
     }
     // jsdocs are separate from comments
-    var jsdocs = symbol.getJsDocTags(this.checker);
-    jsdocs.forEach(function (doc) {
+    const jsdocs = symbol.getJsDocTags(this.checker);
+    jsdocs.forEach(doc => {
         // if we have @TJS-... annotations, we have to parse them
-        var name = doc.name, text = doc.text;
-        if (_this.userValidationKeywords[name]) {
-            definition[name] = _this.parseValue(text);
+        const { name, text } = doc;
+        if (this.userValidationKeywords[name]) {
+            definition[name] = this.parseValue(text);
         }
         else {
             // special annotations
@@= skipped -35, +28 lines =@@
     });
 }
 function getAnnotations(node) {
-    var _this = this;
-    var symbol = node.symbol;
+    const symbol = node.symbol;
     if (!symbol) {
         return undefined;
     }
-    var jsDocTags = symbol.getJsDocTags(this.checker);
+    const jsDocTags = symbol.getJsDocTags(this.checker);
     if (!jsDocTags || !jsDocTags.length) {
         return undefined;
     }
-    var annotations = jsDocTags.reduce(function (result, jsDocTag) {
-        var value = _this.parseJsDocTag(jsDocTag);
+    const annotations = jsDocTags.reduce((result, jsDocTag) => {
+        const value = this.parseJsDocTag(jsDocTag);
         if (value !== undefined) {
             result[jsDocTag.name] = value;
         }
@@= skipped -24, +23 lines =@@
         return ts.getJSDocParameterTags(node);
     }
     if (node.kind === ts.SyntaxKind.FunctionDeclaration) {
-        var func = node;
+        const func = node;
         if (ts.hasJSDocParameterTags(func)) {
-            var flat = [];
-            for (var _i = 0, _a = func.parameters.map(ts.getJSDocParameterTags); _i < _a.length; _i++) {
-                var tags = _a[_i];
+            const flat = [];
+            for (const tags of func.parameters.map(ts.getJSDocParameterTags)) {
                 if (tags)
-                    flat.push.apply(flat, tags);
+                    flat.push(...tags);
             }
             return flat;
         }
@@= skipped -16, +15 lines =@@
     if (node.kind === ts.SyntaxKind.FunctionDeclaration) {
         return ts.getJSDocReturnType(node);
     }
-    var type = ts.getJSDocType(node);
+    let type = ts.getJSDocType(node);
     if (type && type.kind === ts.SyntaxKind.FunctionType) {
         return type.type;
     }
@@= skipped -9, +9 lines =@@
     ts.getJSDocTags(node);
 }
 function getSomeOtherTags(node) {
-    var tags = [];
+    const tags = [];
     tags.push(ts.getJSDocAugmentsTag(node));
     tags.push(ts.getJSDocClassTag(node));
     tags.push(ts.getJSDocReturnTag(node));
-    var type = ts.getJSDocTypeTag(node);
+    const type = ts.getJSDocTypeTag(node);
     if (type) {
         tags.push(type);
     }
