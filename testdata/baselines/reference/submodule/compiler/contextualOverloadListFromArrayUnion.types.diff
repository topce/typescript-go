--- old.contextualOverloadListFromArrayUnion.types
+++ new.contextualOverloadListFromArrayUnion.types
@@= skipped -1, +1 lines =@@
 
 === one.ts ===
 declare const y: never[] | string[];
->y : never[] | string[]
+>y : string[] | never[]
 
 export const yThen = y.map(item => item.length);
 >yThen : number[]
 >y.map(item => item.length) : number[]
->y.map : (<U>(callbackfn: (value: never, index: number, array: never[]) => U, thisArg?: any) => U[]) | (<U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[])
->y : never[] | string[]
->map : (<U>(callbackfn: (value: never, index: number, array: never[]) => U, thisArg?: any) => U[]) | (<U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[])
+>y.map : <U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[] | <U>(callbackfn: (value: never, index: number, array: never[]) => U, thisArg?: any) => U[]
+>y : string[] | never[]
+>map : <U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[] | <U>(callbackfn: (value: never, index: number, array: never[]) => U, thisArg?: any) => U[]
 >item => item.length : (item: string) => number
 >item : string
 >item.length : number
@@= skipped -21, +21 lines =@@
 export const yThen = y.map(item => item.length);
 >yThen : number[]
 >y.map(item => item.length) : number[]
->y.map : (<U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[]) | (<U>(callbackfn: (value: number[], index: number, array: number[][]) => U, thisArg?: any) => U[])
+>y.map : <U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[] | <U>(callbackfn: (value: number[], index: number, array: number[][]) => U, thisArg?: any) => U[]
 >y : string[] | number[][]
->map : (<U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[]) | (<U>(callbackfn: (value: number[], index: number, array: number[][]) => U, thisArg?: any) => U[])
+>map : <U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[] | <U>(callbackfn: (value: number[], index: number, array: number[][]) => U, thisArg?: any) => U[]
 >item => item.length : (item: string | number[]) => number
 >item : string | number[]
 >item.length : number
@@= skipped -25, +25 lines =@@
 const resizeObserver = new ResizeObserver(([entry]) => {
 >resizeObserver : ResizeObserver
 >new ResizeObserver(([entry]) => {    entry}) : ResizeObserver
->ResizeObserver : { new (callback: globalThis.ResizeObserverCallback): ResizeObserver; prototype: ResizeObserver; }
->([entry]) => {    entry} : ([entry]: ResizeObserverEntry[]) => void
+>ResizeObserver : { new (callback: ResizeObserverCallback): ResizeObserver; prototype: ResizeObserver; }
+>([entry]) => {    entry} : (__0: ResizeObserverEntry[]) => void
 >entry : ResizeObserverEntry
 
     entry
@@= skipped -97, +97 lines =@@
 series([
 >series([    cb => setTimeout(() => cb(null, 1), 300),    cb => setTimeout(() => cb(null, 2), 200),    cb => setTimeout(() => cb(null, 3), 100),], (error, results) => {    if (error) {        console.error(error)    } else {        console.log(results)    }}) : void
 >series : <T>(tasks: Task<T>[], callback: Callback<T[]>) => void
->[    cb => setTimeout(() => cb(null, 1), 300),    cb => setTimeout(() => cb(null, 2), 200),    cb => setTimeout(() => cb(null, 3), 100),] : ((cb: Callback<unknown>) => number)[]
+>[    cb => setTimeout(() => cb(null, 1), 300),    cb => setTimeout(() => cb(null, 2), 200),    cb => setTimeout(() => cb(null, 3), 100),] : (cb: Callback<unknown>) => number[]
 
     cb => setTimeout(() => cb(null, 1), 300),
 >cb => setTimeout(() => cb(null, 1), 300) : (cb: Callback<unknown>) => number
 >cb : Callback<unknown>
 >setTimeout(() => cb(null, 1), 300) : number
->setTimeout : (handler: TimerHandler, timeout?: number, ...arguments: any[]) => number
+>setTimeout : (handler: TimerHandler, timeout?: number | undefined, ...arguments: any[]) => number
 >() => cb(null, 1) : () => unknown
 >cb(null, 1) : unknown
 >cb : Callback<unknown>
@@= skipped -17, +17 lines =@@
 >cb => setTimeout(() => cb(null, 2), 200) : (cb: Callback<unknown>) => number
 >cb : Callback<unknown>
 >setTimeout(() => cb(null, 2), 200) : number
->setTimeout : (handler: TimerHandler, timeout?: number, ...arguments: any[]) => number
+>setTimeout : (handler: TimerHandler, timeout?: number | undefined, ...arguments: any[]) => number
 >() => cb(null, 2) : () => unknown
 >cb(null, 2) : unknown
 >cb : Callback<unknown>
@@= skipped -11, +11 lines =@@
 >cb => setTimeout(() => cb(null, 3), 100) : (cb: Callback<unknown>) => number
 >cb : Callback<unknown>
 >setTimeout(() => cb(null, 3), 100) : number
->setTimeout : (handler: TimerHandler, timeout?: number, ...arguments: any[]) => number
+>setTimeout : (handler: TimerHandler, timeout?: number | undefined, ...arguments: any[]) => number
 >() => cb(null, 3) : () => unknown
 >cb(null, 3) : unknown
 >cb : Callback<unknown>
