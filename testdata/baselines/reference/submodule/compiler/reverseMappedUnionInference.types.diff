--- old.reverseMappedUnionInference.types
+++ new.reverseMappedUnionInference.types
@@= skipped -131, +131 lines =@@
 });
 
 declare function unionType<Result extends readonly unknown[]>(parsers: {
->unionType : <Result extends readonly unknown[]>(parsers: { [K in keyof Result]: AnyExtractor<Result[K]>; }) => AnyExtractor<Result[number]>
->parsers : { [K in keyof Result]: AnyExtractor<Result[K]>; }
+>unionType : <Result extends readonly unknown[]>(parsers: { [K in keyof Result]: AnyExtractor<Result[K]> }) => AnyExtractor<Result[number]>
+>parsers : { [K in keyof Result]: AnyExtractor<Result[K]> }
 
   [K in keyof Result]: AnyExtractor<Result[K]>;
 }): AnyExtractor<Result[number]>;
@@= skipped -9, +9 lines =@@
 const myUnion = unionType([identifierExtractor, stringExtractor]);
 >myUnion : AnyExtractor<{ node: Identifier; kind: "identifier"; value: string; } | { node: StringLiteral; kind: "string"; value: string; }>
 >unionType([identifierExtractor, stringExtractor]) : AnyExtractor<{ node: Identifier; kind: "identifier"; value: string; } | { node: StringLiteral; kind: "string"; value: string; }>
->unionType : <Result extends readonly unknown[]>(parsers: { [K in keyof Result]: AnyExtractor<Result[K]>; }) => AnyExtractor<Result[number]>
+>unionType : <Result extends readonly unknown[]>(parsers: { [K in keyof Result]: AnyExtractor<Result[K]> }) => AnyExtractor<Result[number]>
 >[identifierExtractor, stringExtractor] : [Extractor<Identifier, { node: Identifier; kind: "identifier"; value: string; }>, Extractor<StringLiteral, { node: StringLiteral; kind: "string"; value: string; }>]
 >identifierExtractor : Extractor<Identifier, { node: Identifier; kind: "identifier"; value: string; }>
 >stringExtractor : Extractor<StringLiteral, { node: StringLiteral; kind: "string"; value: string; }>
