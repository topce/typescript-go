//// [tests/cases/compiler/tsxDiscriminantPropertyInference.tsx] ////

=== tsxDiscriminantPropertyInference.tsx ===
// Repro from #41759
namespace JSX {
    export interface Element {}
}

type DiscriminatorTrue = {
>DiscriminatorTrue : DiscriminatorTrue

    disc: true;
>disc : true
>true : true

    cb: (x: string) => void;
>cb : (x: string) => void
>x : string
}

type DiscriminatorFalse = {
>DiscriminatorFalse : DiscriminatorFalse

    disc?: false;
>disc : false | undefined
>false : false

    cb: (x: number) => void;
>cb : (x: number) => void
>x : number
}

type Props = DiscriminatorTrue | DiscriminatorFalse;
>Props : Props

declare function Comp(props: DiscriminatorTrue | DiscriminatorFalse): JSX.Element;
>Comp : (props: DiscriminatorFalse | DiscriminatorTrue) => Element
>props : DiscriminatorFalse | DiscriminatorTrue
>JSX : any

// simple inference
void (<Comp disc cb={s => parseInt(s)} />);
>void (<Comp disc cb={s => parseInt(s)} />) : undefined
>(<Comp disc cb={s => parseInt(s)} />) : any
><Comp disc cb={s => parseInt(s)} /> : any
>Comp : (props: DiscriminatorFalse | DiscriminatorTrue) => Element
>disc : any
>cb : any
>s => parseInt(s) : (s: any) => number
>s : any
>parseInt(s) : number
>parseInt : (string: string, radix?: number | undefined) => number
>s : any

// simple inference
void (<Comp disc={false} cb={n => n.toFixed()} />);
>void (<Comp disc={false} cb={n => n.toFixed()} />) : undefined
>(<Comp disc={false} cb={n => n.toFixed()} />) : any
><Comp disc={false} cb={n => n.toFixed()} /> : any
>Comp : (props: DiscriminatorFalse | DiscriminatorTrue) => Element
>disc : any
>false : false
>cb : any
>n => n.toFixed() : (n: any) => any
>n : any
>n.toFixed() : any
>n.toFixed : any
>n : any
>toFixed : any

// simple inference when strict-null-checks are enabled
void (<Comp disc={undefined} cb={n => n.toFixed()} />);
>void (<Comp disc={undefined} cb={n => n.toFixed()} />) : undefined
>(<Comp disc={undefined} cb={n => n.toFixed()} />) : any
><Comp disc={undefined} cb={n => n.toFixed()} /> : any
>Comp : (props: DiscriminatorFalse | DiscriminatorTrue) => Element
>disc : any
>undefined : undefined
>cb : any
>n => n.toFixed() : (n: any) => any
>n : any
>n.toFixed() : any
>n.toFixed : any
>n : any
>toFixed : any

// requires checking type information since discriminator is missing from object
void (<Comp cb={n => n.toFixed()} />);
>void (<Comp cb={n => n.toFixed()} />) : undefined
>(<Comp cb={n => n.toFixed()} />) : any
><Comp cb={n => n.toFixed()} /> : any
>Comp : (props: DiscriminatorFalse | DiscriminatorTrue) => Element
>cb : any
>n => n.toFixed() : (n: any) => any
>n : any
>n.toFixed() : any
>n.toFixed : any
>n : any
>toFixed : any

