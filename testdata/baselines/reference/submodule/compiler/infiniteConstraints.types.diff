--- old.infiniteConstraints.types
+++ new.infiniteConstraints.types
@@= skipped -16, +16 lines =@@
 >a : string
 
 declare function myBug<
->myBug : <T extends { [K in keyof T]: T[K] extends AProp<infer U> ? U : never; }>(arg: T) => T
+>myBug : <T extends { [K in keyof T]: T[K] extends infer U extends { a: string; } ? U : never }>(arg: T) => T
 
   T extends { [K in keyof T]: T[K] extends AProp<infer U> ? U : never }
 >(arg: T): T
@@= skipped -9, +9 lines =@@
 const out = myBug({obj1: {a: "test"}})
 >out : { obj1: { a: string; }; }
 >myBug({obj1: {a: "test"}}) : { obj1: { a: string; }; }
->myBug : <T extends { [K in keyof T]: T[K] extends AProp<infer U> ? U : never; }>(arg: T) => T
+>myBug : <T extends { [K in keyof T]: T[K] extends infer U extends { a: string; } ? U : never }>(arg: T) => T
 >{obj1: {a: "test"}} : { obj1: { a: string; }; }
 >obj1 : { a: string; }
 >{a: "test"} : { a: string; }
@@= skipped -15, +15 lines =@@
 >val : V
 
 declare function ensureNoDuplicates<
->ensureNoDuplicates : <T extends { [K in keyof T]: Extract<T[K], Value>["val"] extends Extract<T[Exclude<keyof T, K>], Value>["val"] ? never : any; }>(vals: T) => void
+>ensureNoDuplicates : <T extends { [K in keyof T]: Extract<T[K], Value<string>>["val"] extends Extract<T[Exclude<keyof T, K>], Value<string>>["val"] ? never : any }>(vals: T) => void
 
   T extends {
     [K in keyof T]: Extract<T[K], Value>["val"] extends Extract<T[Exclude<keyof T, K>], Value>["val"]
@@= skipped -13, +13 lines =@@
 const noError = ensureNoDuplicates({main: value("test"), alternate: value("test2")});
 >noError : void
 >ensureNoDuplicates({main: value("test"), alternate: value("test2")}) : void
->ensureNoDuplicates : <T extends { [K in keyof T]: Extract<T[K], Value>["val"] extends Extract<T[Exclude<keyof T, K>], Value>["val"] ? never : any; }>(vals: T) => void
+>ensureNoDuplicates : <T extends { [K in keyof T]: Extract<T[K], Value<string>>["val"] extends Extract<T[Exclude<keyof T, K>], Value<string>>["val"] ? never : any }>(vals: T) => void
 >{main: value("test"), alternate: value("test2")} : { main: Value<"test">; alternate: Value<"test2">; }
 >main : Value<"test">
 >value("test") : Value<"test">
@@= skipped -14, +14 lines =@@
 const shouldBeNoError = ensureNoDuplicates({main: value("test")});
 >shouldBeNoError : void
 >ensureNoDuplicates({main: value("test")}) : void
->ensureNoDuplicates : <T extends { [K in keyof T]: Extract<T[K], Value>["val"] extends Extract<T[Exclude<keyof T, K>], Value>["val"] ? never : any; }>(vals: T) => void
+>ensureNoDuplicates : <T extends { [K in keyof T]: Extract<T[K], Value<string>>["val"] extends Extract<T[Exclude<keyof T, K>], Value<string>>["val"] ? never : any }>(vals: T) => void
 >{main: value("test")} : { main: Value<"test">; }
 >main : Value<"test">
 >value("test") : Value<"test">
@@= skipped -10, +10 lines =@@
 const shouldBeError = ensureNoDuplicates({main: value("dup"), alternate: value("dup")});
 >shouldBeError : void
 >ensureNoDuplicates({main: value("dup"), alternate: value("dup")}) : void
->ensureNoDuplicates : <T extends { [K in keyof T]: Extract<T[K], Value>["val"] extends Extract<T[Exclude<keyof T, K>], Value>["val"] ? never : any; }>(vals: T) => void
+>ensureNoDuplicates : <T extends { [K in keyof T]: Extract<T[K], Value<string>>["val"] extends Extract<T[Exclude<keyof T, K>], Value<string>>["val"] ? never : any }>(vals: T) => void
 >{main: value("dup"), alternate: value("dup")} : { main: Value<"dup">; alternate: Value<"dup">; }
 >main : Value<"dup">
 >value("dup") : Value<"dup">
@@= skipped -17, +17 lines =@@
 >Cond : Cond<T>
 
 declare function function1<T extends {[K in keyof T]: Cond<T[K]>}>(): T[keyof T]["foo"];
->function1 : <T extends { [K in keyof T]: Cond<T[K]>; }>() => T[keyof T]["foo"]
+>function1 : <T extends { [K in keyof T]: Cond<T[K]> }>() => T[keyof T]["foo"]
 
 // Repro from #31823
 
