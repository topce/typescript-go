--- old.numberVsBigIntOperations.js
+++ new.numberVsBigIntOperations.js
@@= skipped -103, +103 lines =@@
 
 
 //// [numberVsBigIntOperations.js]
-// Cannot mix bigints and numbers
 let bigInt = 1n, num = 2;
 bigInt = 1n;
 bigInt = 2;
@@= skipped -94, +93 lines =@@
 num = 1 >> 2;
 1 >> 2n;
 1n >> 2;
-// Plus should still coerce to strings
 let str;
 str = "abc" + 123;
 str = "abc" + 123n;
 str = 123 + "abc";
 str = 123n + "abc";
-// Unary operations allowed on bigints and numbers
 bigInt = bigInt++;
 bigInt = ++bigInt;
 num = num++;
@@= skipped -19, +17 lines =@@
 num = -num;
 bigInt = ~bigInt;
 num = ~num;
-// Number-only operations
 bigInt >>>= 1n;
 num >>>= 2;
 bigInt = bigInt >>> 1n;
@@= skipped -8, +7 lines =@@
 num = +bigInt;
 num = +num;
 num = +"3";
-// Comparisons can be mixed
 let result;
 result = bigInt > num;
 result = bigInt >= num;
 result = bigInt < num;
 result = bigInt <= num;
-// Trying to compare for equality is likely an error (since 1 == "1" is disallowed)
 result = bigInt == num;
 result = bigInt != num;
 result = bigInt === num;
 result = bigInt !== num;
-// Types of arithmetic operations on other types
 num = "3" & 5;
-num = 2 ** false; // should error, but infer number
+num = 2 ** false;
 "3" & 5n;
-2n ** false; // should error, result in any
+2n ** false;
 num = ~"3";
-num = -false; // should infer number
+num = -false;
 let bigIntOrNumber;
-bigIntOrNumber + bigIntOrNumber; // should error, result in any
-bigIntOrNumber << bigIntOrNumber; // should error, result in any
+bigIntOrNumber + bigIntOrNumber;
+bigIntOrNumber << bigIntOrNumber;
 if (typeof bigIntOrNumber === "bigint") {
-    // Allowed, as type is narrowed to bigint
     bigIntOrNumber = bigIntOrNumber << bigIntOrNumber;
 }
 if (typeof bigIntOrNumber === "number") {
-    // Allowed, as type is narrowed to number
     bigIntOrNumber = bigIntOrNumber << bigIntOrNumber;
 }
-+bigIntOrNumber; // should error, result in number
-~bigIntOrNumber; // should infer number | bigint
-bigIntOrNumber++; // should infer number | bigint
-++bigIntOrNumber; // should infer number | bigint
++bigIntOrNumber;
+~bigIntOrNumber;
+bigIntOrNumber++;
+++bigIntOrNumber;
 let anyValue;
-anyValue + anyValue; // should infer any
-anyValue >>> anyValue; // should infer number
-anyValue ^ anyValue; // should infer number
-+anyValue; // should infer number
--anyValue; // should infer number
-anyValue--; // should infer number
---anyValue; // should infer number
-// Distinguishing numbers from bigints with typeof
+anyValue + anyValue;
+anyValue >>> anyValue;
+anyValue ^ anyValue;
++anyValue;
+-anyValue;
+anyValue--;
+--anyValue;
 const isBigInt = (x) => x;
 const isNumber = (x) => x;
 const zeroOrBigOne;
@@= skipped -49, +43 lines =@@
     isBigInt(zeroOrBigOne);
 else
     isNumber(zeroOrBigOne);
-// Distinguishing truthy from falsy
 const isOne = (x) => x;
 if (zeroOrBigOne)
     isOne(zeroOrBigOne);
@@= skipped -8, +7 lines =@@
 if (bigZeroOrOne)
     isOne(bigZeroOrOne);
 function getKey(key) {
-    +key; // should error
-    0 + key; // should error
+    +key;
+    0 + key;
 }
