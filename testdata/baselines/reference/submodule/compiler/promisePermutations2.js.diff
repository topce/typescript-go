--- old.promisePermutations2.js
+++ new.promisePermutations2.js
@@= skipped -168, +168 lines =@@
 var s12c = s12.then(testFunction12P, testFunction12, testFunction12); // ok
 
 //// [promisePermutations2.js]
-// same as promisePermutations but without the same overloads in Promise<T>
 var r1;
 var r1a = r1.then(testFunction, testFunction, testFunction);
 var r1b = r1.then(testFunction, testFunction, testFunction).then(testFunction, testFunction, testFunction);
@@= skipped -84, +83 lines =@@
 var s9e = s9.then(nPromise, nPromise, nPromise); // ok
 var s9f = s9.then(testFunction, sIPromise, nIPromise); // error
 var s9g = s9.then(testFunction, nIPromise, sIPromise).then(sIPromise, sIPromise, sIPromise); // ok
-var r10 = testFunction10(function (x) { return x; });
+var r10 = testFunction10(x => x);
 var r10a = r10.then(testFunction10, testFunction10, testFunction10); // ok
 var r10b = r10.then(sIPromise, sIPromise, sIPromise); // ok
 var r10c = r10.then(nIPromise, nIPromise, nIPromise); // ok
 var r10d = r10.then(testFunction, sIPromise, nIPromise); // error
 var r10e = r10.then(testFunction, nIPromise, sIPromise).then(sIPromise, sIPromise, sIPromise); // ok
-var s10 = testFunction10P(function (x) { return x; });
+var s10 = testFunction10P(x => x);
 var s10a = s10.then(testFunction10, testFunction10, testFunction10); // ok
 var s10b = s10.then(testFunction10P, testFunction10P, testFunction10P); // ok
 var s10c = s10.then(testFunction10P, testFunction10, testFunction10); // ok
@@= skipped -20, +20 lines =@@
 var s11a = s11.then(testFunction11, testFunction11, testFunction11); // ok
 var s11b = s11.then(testFunction11P, testFunction11P, testFunction11P); // ok
 var s11c = s11.then(testFunction11P, testFunction11, testFunction11); // ok
-var r12 = testFunction12(function (x) { return x; });
+var r12 = testFunction12(x => x);
 var r12a = r12.then(testFunction12, testFunction12, testFunction12); // ok
-var s12 = testFunction12(function (x) { return x; });
+var s12 = testFunction12(x => x);
 var s12a = s12.then(testFunction12, testFunction12, testFunction12); // ok
 var s12b = s12.then(testFunction12P, testFunction12P, testFunction12P); // ok
 var s12c = s12.then(testFunction12P, testFunction12, testFunction12); // ok
