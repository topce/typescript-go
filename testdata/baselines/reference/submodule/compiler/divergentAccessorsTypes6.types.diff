--- old.divergentAccessorsTypes6.types
+++ new.divergentAccessorsTypes6.types
@@= skipped -52, +52 lines =@@
 >value : string
 }
 const o1 = {
->o1 : { get x(): number; set x(value: Fail<string>); }
->{    get x(): number { return 0; },    set x(value: Fail<string>) {}} : { get x(): number; set x(value: Fail<string>); }
+>o1 : { x: number; }
+>{    get x(): number { return 0; },    set x(value: Fail<string>) {}} : { x: number; }
 
     get x(): number { return 0; },
 >x : number
@@= skipped -15, +15 lines =@@
 // A setter annotation still implies the getter return type.
 
 const o2 = {
->o2 : { p1: string; get p2(): number; set p2(value: string); }
->{    get p1() { return 0; }, // error - no annotation means type is implied from the setter annotation    set p1(value: string) {},    get p2(): number { return 0; }, // ok - explicit annotation    set p2(value: string) {},} : { p1: string; get p2(): number; set p2(value: string); }
+>o2 : { p1: string; p2: number; }
+>{    get p1() { return 0; }, // error - no annotation means type is implied from the setter annotation    set p1(value: string) {},    get p2(): number { return 0; }, // ok - explicit annotation    set p2(value: string) {},} : { p1: string; p2: number; }
 
     get p1() { return 0; }, // error - no annotation means type is implied from the setter annotation
 >p1 : string
