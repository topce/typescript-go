--- old.distributiveConditionalTypeConstraints.types
+++ new.distributiveConditionalTypeConstraints.types
@@= skipped -82, +82 lines =@@
 >x : ZeroOf<T>
 
     let t: "" | 0 | false = x;
->t : false | "" | 0
+>t : "" | 0 | false
 >false : false
->x : false | "" | 0
+>x : "" | 0 | false
 }
 
 type Foo<T> = T extends "abc" | 42 ? true : false;
@@= skipped -38, +38 lines =@@
 
     if (typeof y == 'string') {
 >typeof y == 'string' : boolean
->typeof y : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof y : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >y : T extends B ? number : string
 >'string' : "string"
 
@@= skipped -25, +25 lines =@@
 
     if (typeof y == 'string') {
 >typeof y == 'string' : boolean
->typeof y : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof y : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >y : T extends B ? string : number
 >'string' : "string"
 
@@= skipped -25, +25 lines =@@
 
     if (typeof y == 'string') {
 >typeof y == 'string' : boolean
->typeof y : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof y : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >y : T extends C ? number : string
 >'string' : "string"
 
@@= skipped -25, +25 lines =@@
 
     if (typeof y == 'string') {
 >typeof y == 'string' : boolean
->typeof y : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof y : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >y : T extends C ? string : number
 >'string' : "string"
 
