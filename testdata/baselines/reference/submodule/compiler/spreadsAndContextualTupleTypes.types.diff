--- old.spreadsAndContextualTupleTypes.types
+++ new.spreadsAndContextualTupleTypes.types
@@= skipped -97, +97 lines =@@
 >'id' : "id"
 
 declare function foo<const T>(path: T): T;
->foo : <const T>(path: T) => T
+>foo : <T>(path: T) => T
 >path : T
 
 const a1 = foo([...staticPath1Level, randomID, 'doc.pdf']);
 >a1 : readonly ["home", string, "doc.pdf"]
 >foo([...staticPath1Level, randomID, 'doc.pdf']) : readonly ["home", string, "doc.pdf"]
->foo : <const T>(path: T) => T
+>foo : <T>(path: T) => T
 >[...staticPath1Level, randomID, 'doc.pdf'] : ["home", string, "doc.pdf"]
 >...staticPath1Level : "home"
 >staticPath1Level : readonly ["home"]
@@= skipped -16, +16 lines =@@
 const a2 = foo([...staticPath2Level, randomID, 'doc.pdf']);
 >a2 : readonly ["home", "user", string, "doc.pdf"]
 >foo([...staticPath2Level, randomID, 'doc.pdf']) : readonly ["home", "user", string, "doc.pdf"]
->foo : <const T>(path: T) => T
+>foo : <T>(path: T) => T
 >[...staticPath2Level, randomID, 'doc.pdf'] : ["home", "user", string, "doc.pdf"]
 >...staticPath2Level : "home" | "user"
 >staticPath2Level : readonly ["home", "user"]
@@= skipped -10, +10 lines =@@
 const a3 = foo([...staticPath3Level, randomID, 'doc.pdf']);
 >a3 : readonly ["home", "user", "downloads", string, "doc.pdf"]
 >foo([...staticPath3Level, randomID, 'doc.pdf']) : readonly ["home", "user", "downloads", string, "doc.pdf"]
->foo : <const T>(path: T) => T
+>foo : <T>(path: T) => T
 >[...staticPath3Level, randomID, 'doc.pdf'] : ["home", "user", "downloads", string, "doc.pdf"]
->...staticPath3Level : "home" | "user" | "downloads"
+>...staticPath3Level : "downloads" | "home" | "user"
 >staticPath3Level : readonly ["home", "user", "downloads"]
 >randomID : string
 >'doc.pdf' : "doc.pdf"
@@= skipped -10, +10 lines =@@
 const b1 = foo([...staticPath1Level, randomID, 'folder', 'doc.pdf']);
 >b1 : readonly ["home", string, "folder", "doc.pdf"]
 >foo([...staticPath1Level, randomID, 'folder', 'doc.pdf']) : readonly ["home", string, "folder", "doc.pdf"]
->foo : <const T>(path: T) => T
+>foo : <T>(path: T) => T
 >[...staticPath1Level, randomID, 'folder', 'doc.pdf'] : ["home", string, "folder", "doc.pdf"]
 >...staticPath1Level : "home"
 >staticPath1Level : readonly ["home"]
@@= skipped -11, +11 lines =@@
 const b2 = foo([...staticPath2Level, randomID, 'folder', 'doc.pdf']);
 >b2 : readonly ["home", "user", string, "folder", "doc.pdf"]
 >foo([...staticPath2Level, randomID, 'folder', 'doc.pdf']) : readonly ["home", "user", string, "folder", "doc.pdf"]
->foo : <const T>(path: T) => T
+>foo : <T>(path: T) => T
 >[...staticPath2Level, randomID, 'folder', 'doc.pdf'] : ["home", "user", string, "folder", "doc.pdf"]
 >...staticPath2Level : "home" | "user"
 >staticPath2Level : readonly ["home", "user"]
@@= skipped -11, +11 lines =@@
 const b3 = foo([...staticPath3Level, randomID, 'folder', 'doc.pdf']);
 >b3 : readonly ["home", "user", "downloads", string, "folder", "doc.pdf"]
 >foo([...staticPath3Level, randomID, 'folder', 'doc.pdf']) : readonly ["home", "user", "downloads", string, "folder", "doc.pdf"]
->foo : <const T>(path: T) => T
+>foo : <T>(path: T) => T
 >[...staticPath3Level, randomID, 'folder', 'doc.pdf'] : ["home", "user", "downloads", string, "folder", "doc.pdf"]
->...staticPath3Level : "home" | "user" | "downloads"
+>...staticPath3Level : "downloads" | "home" | "user"
 >staticPath3Level : readonly ["home", "user", "downloads"]
 >randomID : string
 >'folder' : "folder"
@@= skipped -11, +11 lines =@@
 const c1 = foo([...staticPath1Level, randomID, 'folder', 'subfolder', 'doc.pdf']);
 >c1 : readonly ["home", string, "folder", "subfolder", "doc.pdf"]
 >foo([...staticPath1Level, randomID, 'folder', 'subfolder', 'doc.pdf']) : readonly ["home", string, "folder", "subfolder", "doc.pdf"]
->foo : <const T>(path: T) => T
+>foo : <T>(path: T) => T
 >[...staticPath1Level, randomID, 'folder', 'subfolder', 'doc.pdf'] : ["home", string, "folder", "subfolder", "doc.pdf"]
 >...staticPath1Level : "home"
 >staticPath1Level : readonly ["home"]
@@= skipped -12, +12 lines =@@
 const c2 = foo([...staticPath2Level, randomID, 'folder', 'subfolder', 'doc.pdf']);
 >c2 : readonly ["home", "user", string, "folder", "subfolder", "doc.pdf"]
 >foo([...staticPath2Level, randomID, 'folder', 'subfolder', 'doc.pdf']) : readonly ["home", "user", string, "folder", "subfolder", "doc.pdf"]
->foo : <const T>(path: T) => T
+>foo : <T>(path: T) => T
 >[...staticPath2Level, randomID, 'folder', 'subfolder', 'doc.pdf'] : ["home", "user", string, "folder", "subfolder", "doc.pdf"]
 >...staticPath2Level : "home" | "user"
 >staticPath2Level : readonly ["home", "user"]
@@= skipped -12, +12 lines =@@
 const c3 = foo([...staticPath3Level, randomID, 'folder', 'subfolder', 'doc.pdf']);
 >c3 : readonly ["home", "user", "downloads", string, "folder", "subfolder", "doc.pdf"]
 >foo([...staticPath3Level, randomID, 'folder', 'subfolder', 'doc.pdf']) : readonly ["home", "user", "downloads", string, "folder", "subfolder", "doc.pdf"]
->foo : <const T>(path: T) => T
+>foo : <T>(path: T) => T
 >[...staticPath3Level, randomID, 'folder', 'subfolder', 'doc.pdf'] : ["home", "user", "downloads", string, "folder", "subfolder", "doc.pdf"]
->...staticPath3Level : "home" | "user" | "downloads"
+>...staticPath3Level : "downloads" | "home" | "user"
 >staticPath3Level : readonly ["home", "user", "downloads"]
 >randomID : string
 >'folder' : "folder"
@@= skipped -12, +12 lines =@@
 const d1 = foo([...staticPath1Level, randomID, 'folder', 'subfolder', 'another-subfolder', 'doc.pdf']);
 >d1 : readonly ["home", string, "folder", "subfolder", "another-subfolder", "doc.pdf"]
 >foo([...staticPath1Level, randomID, 'folder', 'subfolder', 'another-subfolder', 'doc.pdf']) : readonly ["home", string, "folder", "subfolder", "another-subfolder", "doc.pdf"]
->foo : <const T>(path: T) => T
+>foo : <T>(path: T) => T
 >[...staticPath1Level, randomID, 'folder', 'subfolder', 'another-subfolder', 'doc.pdf'] : ["home", string, "folder", "subfolder", "another-subfolder", "doc.pdf"]
 >...staticPath1Level : "home"
 >staticPath1Level : readonly ["home"]
@@= skipped -13, +13 lines =@@
 const d2 = foo([...staticPath2Level, randomID, 'folder', 'subfolder', 'another-subfolder', 'doc.pdf']);
 >d2 : readonly ["home", "user", string, "folder", "subfolder", "another-subfolder", "doc.pdf"]
 >foo([...staticPath2Level, randomID, 'folder', 'subfolder', 'another-subfolder', 'doc.pdf']) : readonly ["home", "user", string, "folder", "subfolder", "another-subfolder", "doc.pdf"]
->foo : <const T>(path: T) => T
+>foo : <T>(path: T) => T
 >[...staticPath2Level, randomID, 'folder', 'subfolder', 'another-subfolder', 'doc.pdf'] : ["home", "user", string, "folder", "subfolder", "another-subfolder", "doc.pdf"]
 >...staticPath2Level : "home" | "user"
 >staticPath2Level : readonly ["home", "user"]
@@= skipped -13, +13 lines =@@
 const d3 = foo([...staticPath3Level, randomID, 'folder', 'subfolder', 'another-subfolder', 'doc.pdf']);
 >d3 : readonly ["home", "user", "downloads", string, "folder", "subfolder", "another-subfolder", "doc.pdf"]
 >foo([...staticPath3Level, randomID, 'folder', 'subfolder', 'another-subfolder', 'doc.pdf']) : readonly ["home", "user", "downloads", string, "folder", "subfolder", "another-subfolder", "doc.pdf"]
->foo : <const T>(path: T) => T
+>foo : <T>(path: T) => T
 >[...staticPath3Level, randomID, 'folder', 'subfolder', 'another-subfolder', 'doc.pdf'] : ["home", "user", "downloads", string, "folder", "subfolder", "another-subfolder", "doc.pdf"]
->...staticPath3Level : "home" | "user" | "downloads"
+>...staticPath3Level : "downloads" | "home" | "user"
 >staticPath3Level : readonly ["home", "user", "downloads"]
 >randomID : string
 >'folder' : "folder"
