--- old.privacyTypeParametersOfInterfaceDeclFile.js
+++ new.privacyTypeParametersOfInterfaceDeclFile.js
@@= skipped -195, +195 lines =@@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.publicModule = exports.publicClassT = exports.publicClass = void 0;
-var privateClass = /** @class */ (function () {
-    function privateClass() {
-    }
-    return privateClass;
-}());
-var publicClass = /** @class */ (function () {
-    function publicClass() {
-    }
-    return publicClass;
-}());
-exports.publicClass = publicClass;
-var privateClassT = /** @class */ (function () {
-    function privateClassT() {
-    }
-    return privateClassT;
-}());
-var publicClassT = /** @class */ (function () {
-    function publicClassT() {
-    }
-    return publicClassT;
-}());
-exports.publicClassT = publicClassT;
-var publicModule;
-(function (publicModule) {
-    var privateClassInPublicModule = /** @class */ (function () {
-        function privateClassInPublicModule() {
-        }
-        return privateClassInPublicModule;
-    }());
-    var publicClassInPublicModule = /** @class */ (function () {
-        function publicClassInPublicModule() {
-        }
-        return publicClassInPublicModule;
-    }());
-    publicModule.publicClassInPublicModule = publicClassInPublicModule;
-    var privateClassInPublicModuleT = /** @class */ (function () {
-        function privateClassInPublicModuleT() {
-        }
-        return privateClassInPublicModuleT;
-    }());
-    var publicClassInPublicModuleT = /** @class */ (function () {
-        function publicClassInPublicModuleT() {
-        }
-        return publicClassInPublicModuleT;
-    }());
-    publicModule.publicClassInPublicModuleT = publicClassInPublicModuleT;
-})(publicModule || (exports.publicModule = publicModule = {}));
-var privateModule;
-(function (privateModule) {
-    var privateClassInPrivateModule = /** @class */ (function () {
-        function privateClassInPrivateModule() {
-        }
-        return privateClassInPrivateModule;
-    }());
-    var publicClassInPrivateModule = /** @class */ (function () {
-        function publicClassInPrivateModule() {
-        }
-        return publicClassInPrivateModule;
-    }());
-    privateModule.publicClassInPrivateModule = publicClassInPrivateModule;
-    var privateClassInPrivateModuleT = /** @class */ (function () {
-        function privateClassInPrivateModuleT() {
-        }
-        return privateClassInPrivateModuleT;
-    }());
-    var publicClassInPrivateModuleT = /** @class */ (function () {
-        function publicClassInPrivateModuleT() {
-        }
-        return publicClassInPrivateModuleT;
-    }());
-    privateModule.publicClassInPrivateModuleT = publicClassInPrivateModuleT;
-})(privateModule || (privateModule = {}));
-
-
-//// [privacyTypeParametersOfInterfaceDeclFile.d.ts]
-declare class privateClass {
+class privateClass {
 }
-export declare class publicClass {
+class publicClass {
 }
-declare class privateClassT<T> {
+exports.publicClass = publicClass;
+class privateClassT {
 }
-export declare class publicClassT<T> {
+class publicClassT {
 }
-export interface publicInterfaceWithPrivateTypeParameters<T extends privateClass> {
-    myMethod(val: T): T;
-    myMethod0(): publicClassT<T>;
-    myMethod1(): privateClassT<privateClass>;
-    myMethod2(): privateClassT<publicClass>;
-    myMethod3(): publicClassT<privateClass>;
-    myMethod4(): publicClassT<publicClass>;
-}
-export interface publicInterfaceWithPublicTypeParameters<T extends publicClass> {
-    myMethod(val: T): T;
-    myMethod0(): publicClassT<T>;
-    myMethod1(): privateClassT<privateClass>;
-    myMethod2(): privateClassT<publicClass>;
-    myMethod3(): publicClassT<privateClass>;
-    myMethod4(): publicClassT<publicClass>;
-}
-export interface publicInterfaceWithPublicTypeParametersWithoutExtends<T> {
-    myMethod(val: T): T;
-    myMethod0(): publicClassT<T>;
-}
-export interface publicInterfaceWithPrivateModuleTypeParameterConstraints<T extends privateModule.publicClassInPrivateModule> {
-}
-export declare namespace publicModule {
+exports.publicClassT = publicClassT;
+var publicModule;
+(function (publicModule) {
     class privateClassInPublicModule {
     }
-    export class publicClassInPublicModule {
+    class publicClassInPublicModule {
     }
-    class privateClassInPublicModuleT<T> {
+    publicModule.publicClassInPublicModule = publicClassInPublicModule;
+    class privateClassInPublicModuleT {
     }
-    export class publicClassInPublicModuleT<T> {
+    class publicClassInPublicModuleT {
     }
-    export interface publicInterfaceWithPrivateTypeParameters<T extends privateClassInPublicModule> {
-        myMethod(val: T): T;
-        myMethod0(): publicClassInPublicModuleT<T>;
-        myMethod1(): privateClassInPublicModuleT<privateClassInPublicModule>;
-        myMethod2(): privateClassInPublicModuleT<publicClassInPublicModule>;
-        myMethod3(): publicClassInPublicModuleT<privateClassInPublicModule>;
-        myMethod4(): publicClassInPublicModuleT<publicClassInPublicModule>;
-    }
-    export interface publicInterfaceWithPublicTypeParameters<T extends publicClassInPublicModule> {
-        myMethod(val: T): T;
-        myMethod0(): publicClassInPublicModuleT<T>;
-        myMethod1(): privateClassInPublicModuleT<privateClassInPublicModule>;
-        myMethod2(): privateClassInPublicModuleT<publicClassInPublicModule>;
-        myMethod3(): publicClassInPublicModuleT<privateClassInPublicModule>;
-        myMethod4(): publicClassInPublicModuleT<publicClassInPublicModule>;
-    }
-    export interface publicInterfaceWithPublicTypeParametersWithoutExtends<T> {
-        myMethod(val: T): T;
-        myMethod0(): publicClassInPublicModuleT<T>;
-    }
-    export interface publicInterfaceWithPrivateModuleTypeParameterConstraints<T extends privateModule.publicClassInPrivateModule> {
-    }
-    export {};
-}
-declare namespace privateModule {
+    publicModule.publicClassInPublicModuleT = publicClassInPublicModuleT;
+})(publicModule || (exports.publicModule = publicModule = {}));
+var privateModule;
+(function (privateModule) {
     class privateClassInPrivateModule {
     }
-    export class publicClassInPrivateModule {
+    class publicClassInPrivateModule {
     }
-    class privateClassInPrivateModuleT<T> {
+    privateModule.publicClassInPrivateModule = publicClassInPrivateModule;
+    class privateClassInPrivateModuleT {
     }
-    export class publicClassInPrivateModuleT<T> {
+    class publicClassInPrivateModuleT {
     }
-    export interface publicInterfaceWithPrivateTypeParameters<T extends privateClassInPrivateModule> {
-        myMethod(val: T): T;
-        myMethod0(): publicClassInPrivateModuleT<T>;
-        myMethod1(): privateClassInPrivateModuleT<privateClassInPrivateModule>;
-        myMethod2(): privateClassInPrivateModuleT<publicClassInPrivateModule>;
-        myMethod3(): publicClassInPrivateModuleT<privateClassInPrivateModule>;
-        myMethod4(): publicClassInPrivateModuleT<publicClassInPrivateModule>;
-    }
-    export interface publicInterfaceWithPublicTypeParameters<T extends publicClassInPrivateModule> {
-        myMethod(val: T): T;
-        myMethod0(): publicClassInPrivateModuleT<T>;
-        myMethod1(): privateClassInPrivateModuleT<privateClassInPrivateModule>;
-        myMethod2(): privateClassInPrivateModuleT<publicClassInPrivateModule>;
-        myMethod3(): publicClassInPrivateModuleT<privateClassInPrivateModule>;
-        myMethod4(): publicClassInPrivateModuleT<publicClassInPrivateModule>;
-    }
-    export interface publicInterfaceWithPublicTypeParametersWithoutExtends<T> {
-        myMethod(val: T): T;
-        myMethod0(): publicClassInPrivateModuleT<T>;
-    }
-    export {};
-}
-export {};
+    privateModule.publicClassInPrivateModuleT = publicClassInPrivateModuleT;
+})(privateModule || (privateModule = {}));
