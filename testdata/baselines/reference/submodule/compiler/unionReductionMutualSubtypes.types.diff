--- old.unionReductionMutualSubtypes.types
+++ new.unionReductionMutualSubtypes.types
@@= skipped -9, +9 lines =@@
 
 const k: ReturnVal = { something() { } }
 >k : ReturnVal
->{ something() { } } : { something(): void; }
+>{ something() { } } : { something: () => void; }
 >something : () => void
 
 declare const val: ReturnVal;
 >val : ReturnVal
 
 function run(options: { something?(b?: string): void }) {
->run : (options: { something?(b?: string): void; }) => void
->options : { something?(b?: string): void; }
->something : ((b?: string) => void) | undefined
+>run : (options: { something?: ((b?: string | undefined) => void) | undefined; }) => void
+>options : { something?: ((b?: string | undefined) => void) | undefined; }
+>something : ((b?: string | undefined) => void) | undefined
 >b : string | undefined
 
     const something = options.something ?? val.something;
->something : (b?: string) => void
->options.something ?? val.something : (b?: string) => void
->options.something : ((b?: string) => void) | undefined
->options : { something?(b?: string): void; }
->something : ((b?: string) => void) | undefined
+>something : (b?: string | undefined) => void
+>options.something ?? val.something : (b?: string | undefined) => void
+>options.something : ((b?: string | undefined) => void) | undefined
+>options : { something?: ((b?: string | undefined) => void) | undefined; }
+>something : ((b?: string | undefined) => void) | undefined
 >val.something : () => void
 >val : ReturnVal
 >something : () => void
 
     something('');
 >something('') : void
->something : (b?: string) => void
+>something : (b?: string | undefined) => void
 >'' : ""
 }
 
