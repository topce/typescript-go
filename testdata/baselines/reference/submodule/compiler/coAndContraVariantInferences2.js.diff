--- old.coAndContraVariantInferences2.js
+++ new.coAndContraVariantInferences2.js
@@= skipped -121, +121 lines =@@
 
 
 //// [coAndContraVariantInferences2.js]
-"use strict";
 function f1(a, b) {
-    var x1 = cast(a, isC); // cast<A, C>
-    var x2 = cast(b, isC); // cast<A, C>
+    const x1 = cast(a, isC);
+    const x2 = cast(b, isC);
 }
 function f2(b, c) {
-    consume(b, c, useA); // consume<A, C>
-    consume(c, b, useA); // consume<A, B>
-    consume(b, b, useA); // consume<B, B>
-    consume(c, c, useA); // consume<C, C>
+    consume(b, c, useA);
+    consume(c, b, useA);
+    consume(b, b, useA);
+    consume(c, c, useA);
 }
 function f3(arr) {
     if (every(arr, isC)) {
-        arr; // readonly C[]
+        arr;
     }
     else {
-        arr; // readonly B[]
+        arr;
     }
 }
-// Repro from #52111
 var SyntaxKind;
 (function (SyntaxKind) {
     SyntaxKind[SyntaxKind["Block"] = 0] = "Block";
@@= skipped -29, +27 lines =@@
     SyntaxKind[SyntaxKind["FunctionDeclaration"] = 4] = "FunctionDeclaration";
 })(SyntaxKind || (SyntaxKind = {}));
 function foo(node) {
-    assertNode(node, canHaveLocals); // assertNode<Node, HasLocals>
-    node; // FunctionDeclaration
+    assertNode(node, canHaveLocals);
+    node;
 }
 function bar(node) {
-    var a = tryCast(node, isExpression); // tryCast<Expression, Node>
+    const a = tryCast(node, isExpression);
 }
-var maybeClassStatement = tryCast(statement, isClassLike); // ClassLike1
-var x = tryCast(types, isNodeArray); // NodeAray<TypeNode>
+var SyntaxKind1;
+(function (SyntaxKind1) {
+    SyntaxKind1[SyntaxKind1["ClassExpression"] = 0] = "ClassExpression";
+    SyntaxKind1[SyntaxKind1["ClassStatement"] = 1] = "ClassStatement";
+})(SyntaxKind1 || (SyntaxKind1 = {}));
+const maybeClassStatement = tryCast(statement, isClassLike);
+const x = tryCast(types, isNodeArray);
