--- old.moduledecl.symbols
+++ new.moduledecl.symbols
@@= skipped -12, +12 lines =@@
 module c.a.b {
 >c : Symbol(c, Decl(moduledecl.ts, 4, 1))
 >a : Symbol(a, Decl(moduledecl.ts, 6, 9))
->b : Symbol(ma.b, Decl(moduledecl.ts, 6, 11))
+>b : Symbol(b, Decl(moduledecl.ts, 6, 11))
 
     import ma = a;
 >ma : Symbol(ma, Decl(moduledecl.ts, 6, 14))
->a : Symbol(ma, Decl(moduledecl.ts, 6, 9))
+>a : Symbol(a, Decl(moduledecl.ts, 6, 9))
 }
 
 module mImport {
@@= skipped -12, +12 lines =@@
 
     import d = a;
 >d : Symbol(d, Decl(moduledecl.ts, 10, 16))
->a : Symbol(d, Decl(moduledecl.ts, 0, 0))
+>a : Symbol(a, Decl(moduledecl.ts, 0, 0))
 
     import e = b.a;
 >e : Symbol(e, Decl(moduledecl.ts, 11, 17))
 >b : Symbol(b, Decl(moduledecl.ts, 1, 1))
->a : Symbol(e, Decl(moduledecl.ts, 3, 9))
+>a : Symbol(a, Decl(moduledecl.ts, 3, 9))
 
     import d1 = a;
 >d1 : Symbol(d1, Decl(moduledecl.ts, 12, 19))
->a : Symbol(d, Decl(moduledecl.ts, 0, 0))
+>a : Symbol(a, Decl(moduledecl.ts, 0, 0))
 
     import e1 = b.a;
 >e1 : Symbol(e1, Decl(moduledecl.ts, 13, 18))
 >b : Symbol(b, Decl(moduledecl.ts, 1, 1))
->a : Symbol(e, Decl(moduledecl.ts, 3, 9))
+>a : Symbol(a, Decl(moduledecl.ts, 3, 9))
 }
 
 module m0 {
@@= skipped -41, +41 lines =@@
 >c1 : Symbol(c1, Decl(moduledecl.ts, 24, 5))
 
         public a : ()=>string;
->a : Symbol(c1.a, Decl(moduledecl.ts, 26, 14))
+>a : Symbol(a, Decl(moduledecl.ts, 26, 14))
 
         private b: ()=>number;
->b : Symbol(c1.b, Decl(moduledecl.ts, 27, 30))
+>b : Symbol(b, Decl(moduledecl.ts, 27, 30))
 
         private static s1;
->s1 : Symbol(c1.s1, Decl(moduledecl.ts, 28, 30))
+>s1 : Symbol(s1, Decl(moduledecl.ts, 28, 30))
 
         public static s2;
->s2 : Symbol(c1.s2, Decl(moduledecl.ts, 29, 26))
+>s2 : Symbol(s2, Decl(moduledecl.ts, 29, 26))
     }
 
     interface i1 {
@@= skipped -25, +25 lines =@@
 
     import m2 = a;
 >m2 : Symbol(m2, Decl(moduledecl.ts, 36, 5))
->a : Symbol(m2, Decl(moduledecl.ts, 0, 0))
+>a : Symbol(a, Decl(moduledecl.ts, 0, 0))
 
     import m3 = b;
 >m3 : Symbol(m3, Decl(moduledecl.ts, 38, 18))
->b : Symbol(m3, Decl(moduledecl.ts, 1, 1))
+>b : Symbol(b, Decl(moduledecl.ts, 1, 1))
 
     import m4 = b.a;
 >m4 : Symbol(m4, Decl(moduledecl.ts, 39, 18))
->b : Symbol(m3, Decl(moduledecl.ts, 1, 1))
->a : Symbol(m3.a, Decl(moduledecl.ts, 3, 9))
+>b : Symbol(b, Decl(moduledecl.ts, 1, 1))
+>a : Symbol(a, Decl(moduledecl.ts, 3, 9))
 
     import m5 = c;
 >m5 : Symbol(m5, Decl(moduledecl.ts, 40, 20))
->c : Symbol(m5, Decl(moduledecl.ts, 4, 1))
+>c : Symbol(c, Decl(moduledecl.ts, 4, 1))
 
     import m6 = c.a;
 >m6 : Symbol(m6, Decl(moduledecl.ts, 41, 18))
->c : Symbol(m5, Decl(moduledecl.ts, 4, 1))
->a : Symbol(m5.a, Decl(moduledecl.ts, 6, 9))
+>c : Symbol(c, Decl(moduledecl.ts, 4, 1))
+>a : Symbol(a, Decl(moduledecl.ts, 6, 9))
 
     import m7 = c.a.b;
 >m7 : Symbol(m7, Decl(moduledecl.ts, 42, 20))
->c : Symbol(m5, Decl(moduledecl.ts, 4, 1))
->a : Symbol(m5.a, Decl(moduledecl.ts, 6, 9))
->b : Symbol(m6.b, Decl(moduledecl.ts, 6, 11))
+>c : Symbol(c, Decl(moduledecl.ts, 4, 1))
+>a : Symbol(a, Decl(moduledecl.ts, 6, 9))
+>b : Symbol(b, Decl(moduledecl.ts, 6, 11))
 }
 
 module m1 {
@@= skipped -51, +51 lines =@@
 >c1 : Symbol(c1, Decl(moduledecl.ts, 53, 5))
 
         public a: () =>string;
->a : Symbol(c1.a, Decl(moduledecl.ts, 55, 21))
+>a : Symbol(a, Decl(moduledecl.ts, 55, 21))
 
         private b: () =>number;
->b : Symbol(c1.b, Decl(moduledecl.ts, 56, 30))
+>b : Symbol(b, Decl(moduledecl.ts, 56, 30))
 
         private static s1;
->s1 : Symbol(c1.s1, Decl(moduledecl.ts, 57, 31))
+>s1 : Symbol(s1, Decl(moduledecl.ts, 57, 31))
 
         public static s2;
->s2 : Symbol(c1.s2, Decl(moduledecl.ts, 58, 26))
+>s2 : Symbol(s2, Decl(moduledecl.ts, 58, 26))
 
         public d() {
->d : Symbol(c1.d, Decl(moduledecl.ts, 59, 25))
+>d : Symbol(d, Decl(moduledecl.ts, 59, 25))
 
             return "Hello";
         }
 
         public e: { x: number; y: string; };
->e : Symbol(c1.e, Decl(moduledecl.ts, 63, 9))
+>e : Symbol(e, Decl(moduledecl.ts, 63, 9))
 >x : Symbol(x, Decl(moduledecl.ts, 65, 19))
 >y : Symbol(y, Decl(moduledecl.ts, 65, 30))
 
         constructor (public n, public n2: number, private n3, private n4: string) {
->n : Symbol(c1.n, Decl(moduledecl.ts, 66, 21))
->n2 : Symbol(c1.n2, Decl(moduledecl.ts, 66, 30))
->n3 : Symbol(c1.n3, Decl(moduledecl.ts, 66, 49))
->n4 : Symbol(c1.n4, Decl(moduledecl.ts, 66, 61))
+>n : Symbol(n, Decl(moduledecl.ts, 66, 21))
+>n2 : Symbol(n2, Decl(moduledecl.ts, 66, 30))
+>n3 : Symbol(n3, Decl(moduledecl.ts, 66, 49))
+>n4 : Symbol(n4, Decl(moduledecl.ts, 66, 61))
         }
     }
 
@@= skipped -43, +43 lines =@@
 
     import m2 = a;
 >m2 : Symbol(m2, Decl(moduledecl.ts, 73, 5))
->a : Symbol(m2, Decl(moduledecl.ts, 0, 0))
+>a : Symbol(a, Decl(moduledecl.ts, 0, 0))
 
     import m3 = b;
 >m3 : Symbol(m3, Decl(moduledecl.ts, 75, 18))
->b : Symbol(m3, Decl(moduledecl.ts, 1, 1))
+>b : Symbol(b, Decl(moduledecl.ts, 1, 1))
 
     import m4 = b.a;
 >m4 : Symbol(m4, Decl(moduledecl.ts, 76, 18))
->b : Symbol(m3, Decl(moduledecl.ts, 1, 1))
->a : Symbol(m3.a, Decl(moduledecl.ts, 3, 9))
+>b : Symbol(b, Decl(moduledecl.ts, 1, 1))
+>a : Symbol(a, Decl(moduledecl.ts, 3, 9))
 
     import m5 = c;
 >m5 : Symbol(m5, Decl(moduledecl.ts, 77, 20))
->c : Symbol(m5, Decl(moduledecl.ts, 4, 1))
+>c : Symbol(c, Decl(moduledecl.ts, 4, 1))
 
     import m6 = c.a;
 >m6 : Symbol(m6, Decl(moduledecl.ts, 78, 18))
->c : Symbol(m5, Decl(moduledecl.ts, 4, 1))
->a : Symbol(m5.a, Decl(moduledecl.ts, 6, 9))
+>c : Symbol(c, Decl(moduledecl.ts, 4, 1))
+>a : Symbol(a, Decl(moduledecl.ts, 6, 9))
 
     import m7 = c.a.b;
 >m7 : Symbol(m7, Decl(moduledecl.ts, 79, 20))
->c : Symbol(m5, Decl(moduledecl.ts, 4, 1))
->a : Symbol(m5.a, Decl(moduledecl.ts, 6, 9))
->b : Symbol(m6.b, Decl(moduledecl.ts, 6, 11))
+>c : Symbol(c, Decl(moduledecl.ts, 4, 1))
+>a : Symbol(a, Decl(moduledecl.ts, 6, 9))
+>b : Symbol(b, Decl(moduledecl.ts, 6, 11))
 }
 
 module m {
@@= skipped -130, +130 lines =@@
 >C1_public : Symbol(C1_public, Decl(moduledecl.ts, 137, 20))
 
         private f2() {
->f2 : Symbol(C1_public.f2, Decl(moduledecl.ts, 138, 28))
+>f2 : Symbol(f2, Decl(moduledecl.ts, 138, 28))
 
             return 30;
         }
 
         public f3() {
->f3 : Symbol(C1_public.f3, Decl(moduledecl.ts, 141, 9))
+>f3 : Symbol(f3, Decl(moduledecl.ts, 141, 9))
 
             return "string";
         }
@@= skipped -15, +15 lines =@@
 >C2_private : Symbol(C2_private, Decl(moduledecl.ts, 146, 5))
 
         private f2() {
->f2 : Symbol(C2_private.f2, Decl(moduledecl.ts, 147, 22))
+>f2 : Symbol(f2, Decl(moduledecl.ts, 147, 22))
 
             return 30;
         }
 
         public f3() {
->f3 : Symbol(C2_private.f3, Decl(moduledecl.ts, 150, 9))
+>f3 : Symbol(f3, Decl(moduledecl.ts, 150, 9))
 
             return "string";
         }
@@= skipped -16, +16 lines =@@
 >C3_public : Symbol(C3_public, Decl(moduledecl.ts, 155, 5))
 
         private getC2_private() {
->getC2_private : Symbol(C3_public.getC2_private, Decl(moduledecl.ts, 157, 28))
+>getC2_private : Symbol(getC2_private, Decl(moduledecl.ts, 157, 28))
 
             return new C2_private();
 >C2_private : Symbol(C2_private, Decl(moduledecl.ts, 146, 5))
         }
         private setC2_private(arg: C2_private) {
->setC2_private : Symbol(C3_public.setC2_private, Decl(moduledecl.ts, 160, 9))
+>setC2_private : Symbol(setC2_private, Decl(moduledecl.ts, 160, 9))
 >arg : Symbol(arg, Decl(moduledecl.ts, 161, 30))
 >C2_private : Symbol(C2_private, Decl(moduledecl.ts, 146, 5))
         }
         private get c2() {
->c2 : Symbol(C3_public.c2, Decl(moduledecl.ts, 162, 9))
+>c2 : Symbol(c2, Decl(moduledecl.ts, 162, 9))
 
             return new C2_private();
 >C2_private : Symbol(C2_private, Decl(moduledecl.ts, 146, 5))
         }
         public getC1_public() {
->getC1_public : Symbol(C3_public.getC1_public, Decl(moduledecl.ts, 165, 9))
+>getC1_public : Symbol(getC1_public, Decl(moduledecl.ts, 165, 9))
 
             return new C1_public();
 >C1_public : Symbol(C1_public, Decl(moduledecl.ts, 137, 20))
         }
         public setC1_public(arg: C1_public) {
->setC1_public : Symbol(C3_public.setC1_public, Decl(moduledecl.ts, 168, 9))
+>setC1_public : Symbol(setC1_public, Decl(moduledecl.ts, 168, 9))
 >arg : Symbol(arg, Decl(moduledecl.ts, 169, 28))
 >C1_public : Symbol(C1_public, Decl(moduledecl.ts, 137, 20))
         }
         public get c1() {
->c1 : Symbol(C3_public.c1, Decl(moduledecl.ts, 170, 9))
+>c1 : Symbol(c1, Decl(moduledecl.ts, 170, 9))
 
             return new C1_public();
 >C1_public : Symbol(C1_public, Decl(moduledecl.ts, 137, 20))
@@= skipped -43, +43 lines =@@
 >C : Symbol(C, Decl(moduledecl.ts, 177, 25))
 
         public myProp: number;
->myProp : Symbol(C.myProp, Decl(moduledecl.ts, 178, 13))
+>myProp : Symbol(myProp, Decl(moduledecl.ts, 178, 13))
     }
 
     function foo() : C;
@@= skipped -15, +15 lines =@@
 >B : Symbol(B, Decl(moduledecl.ts, 183, 16))
 
         x: number;
->x : Symbol(B.x, Decl(moduledecl.ts, 184, 17))
+>x : Symbol(x, Decl(moduledecl.ts, 184, 17))
 
         y: C;
->y : Symbol(B.y, Decl(moduledecl.ts, 185, 18))
+>y : Symbol(y, Decl(moduledecl.ts, 185, 18))
 >C : Symbol(C, Decl(moduledecl.ts, 177, 25))
     }
     enum e {
 >e : Symbol(e, Decl(moduledecl.ts, 187, 5))
 
         x,
->x : Symbol(e.x, Decl(moduledecl.ts, 188, 12))
+>x : Symbol(x, Decl(moduledecl.ts, 188, 12))
 
         y,
->y : Symbol(e.y, Decl(moduledecl.ts, 189, 10))
+>y : Symbol(y, Decl(moduledecl.ts, 189, 10))
 
         z
->z : Symbol(e.z, Decl(moduledecl.ts, 190, 10))
+>z : Symbol(z, Decl(moduledecl.ts, 190, 10))
     }
 
     module m3 {
@@= skipped -26, +26 lines =@@
 >C : Symbol(C, Decl(moduledecl.ts, 194, 15))
 
             public myProp: number;
->myProp : Symbol(C.myProp, Decl(moduledecl.ts, 195, 17))
+>myProp : Symbol(myProp, Decl(moduledecl.ts, 195, 17))
         }
 
         function foo(): C;
@@= skipped -15, +15 lines =@@
 >B : Symbol(B, Decl(moduledecl.ts, 200, 20))
 
             x: number;
->x : Symbol(B.x, Decl(moduledecl.ts, 201, 21))
+>x : Symbol(x, Decl(moduledecl.ts, 201, 21))
 
             y: C;
->y : Symbol(B.y, Decl(moduledecl.ts, 202, 22))
+>y : Symbol(y, Decl(moduledecl.ts, 202, 22))
 >C : Symbol(C, Decl(moduledecl.ts, 194, 15))
         }
         enum e {
 >e : Symbol(e, Decl(moduledecl.ts, 204, 9))
 
             x,
->x : Symbol(e.x, Decl(moduledecl.ts, 205, 16))
+>x : Symbol(x, Decl(moduledecl.ts, 205, 16))
 
             y,
->y : Symbol(e.y, Decl(moduledecl.ts, 206, 14))
+>y : Symbol(y, Decl(moduledecl.ts, 206, 14))
 
             z
->z : Symbol(e.z, Decl(moduledecl.ts, 207, 14))
+>z : Symbol(z, Decl(moduledecl.ts, 207, 14))
         }
     }
 }
@@= skipped -25, +25 lines =@@
 >foo : Symbol(foo, Decl(moduledecl.ts, 211, 1))
 
     return mAmbient.foo();
->mAmbient.foo : Symbol(mAmbient.foo, Decl(moduledecl.ts, 180, 5))
+>mAmbient.foo : Symbol(foo, Decl(moduledecl.ts, 180, 5))
 >mAmbient : Symbol(mAmbient, Decl(moduledecl.ts, 175, 1))
->foo : Symbol(mAmbient.foo, Decl(moduledecl.ts, 180, 5))
+>foo : Symbol(foo, Decl(moduledecl.ts, 180, 5))
 }
 
 var cVar = new mAmbient.C();
 >cVar : Symbol(cVar, Decl(moduledecl.ts, 217, 3))
->mAmbient.C : Symbol(mAmbient.C, Decl(moduledecl.ts, 177, 25))
+>mAmbient.C : Symbol(C, Decl(moduledecl.ts, 177, 25))
 >mAmbient : Symbol(mAmbient, Decl(moduledecl.ts, 175, 1))
->C : Symbol(mAmbient.C, Decl(moduledecl.ts, 177, 25))
+>C : Symbol(C, Decl(moduledecl.ts, 177, 25))
 
 var aVar = mAmbient.aVar;
 >aVar : Symbol(aVar, Decl(moduledecl.ts, 218, 3))
->mAmbient.aVar : Symbol(mAmbient.aVar, Decl(moduledecl.ts, 183, 7))
+>mAmbient.aVar : Symbol(aVar, Decl(moduledecl.ts, 183, 7))
 >mAmbient : Symbol(mAmbient, Decl(moduledecl.ts, 175, 1))
->aVar : Symbol(mAmbient.aVar, Decl(moduledecl.ts, 183, 7))
+>aVar : Symbol(aVar, Decl(moduledecl.ts, 183, 7))
 
 var bB: mAmbient.B;
 >bB : Symbol(bB, Decl(moduledecl.ts, 219, 3))
 >mAmbient : Symbol(mAmbient, Decl(moduledecl.ts, 175, 1))
->B : Symbol(mAmbient.B, Decl(moduledecl.ts, 183, 16))
+>B : Symbol(B, Decl(moduledecl.ts, 183, 16))
 
 var eVar: mAmbient.e;
 >eVar : Symbol(eVar, Decl(moduledecl.ts, 220, 3))
 >mAmbient : Symbol(mAmbient, Decl(moduledecl.ts, 175, 1))
->e : Symbol(mAmbient.e, Decl(moduledecl.ts, 187, 5))
+>e : Symbol(e, Decl(moduledecl.ts, 187, 5))
 
 function m3foo() {
 >m3foo : Symbol(m3foo, Decl(moduledecl.ts, 220, 21))
 
     return mAmbient.m3.foo();
->mAmbient.m3.foo : Symbol(mAmbient.m3.foo, Decl(moduledecl.ts, 197, 9))
->mAmbient.m3 : Symbol(mAmbient.m3, Decl(moduledecl.ts, 192, 5))
+>mAmbient.m3.foo : Symbol(foo, Decl(moduledecl.ts, 197, 9))
+>mAmbient.m3 : Symbol(m3, Decl(moduledecl.ts, 192, 5))
 >mAmbient : Symbol(mAmbient, Decl(moduledecl.ts, 175, 1))
->m3 : Symbol(mAmbient.m3, Decl(moduledecl.ts, 192, 5))
->foo : Symbol(mAmbient.m3.foo, Decl(moduledecl.ts, 197, 9))
+>m3 : Symbol(m3, Decl(moduledecl.ts, 192, 5))
+>foo : Symbol(foo, Decl(moduledecl.ts, 197, 9))
 }
 
 var m3cVar = new mAmbient.m3.C();
 >m3cVar : Symbol(m3cVar, Decl(moduledecl.ts, 226, 3))
->mAmbient.m3.C : Symbol(mAmbient.m3.C, Decl(moduledecl.ts, 194, 15))
->mAmbient.m3 : Symbol(mAmbient.m3, Decl(moduledecl.ts, 192, 5))
+>mAmbient.m3.C : Symbol(C, Decl(moduledecl.ts, 194, 15))
+>mAmbient.m3 : Symbol(m3, Decl(moduledecl.ts, 192, 5))
 >mAmbient : Symbol(mAmbient, Decl(moduledecl.ts, 175, 1))
->m3 : Symbol(mAmbient.m3, Decl(moduledecl.ts, 192, 5))
->C : Symbol(mAmbient.m3.C, Decl(moduledecl.ts, 194, 15))
+>m3 : Symbol(m3, Decl(moduledecl.ts, 192, 5))
+>C : Symbol(C, Decl(moduledecl.ts, 194, 15))
 
 var m3aVar = mAmbient.m3.aVar;
 >m3aVar : Symbol(m3aVar, Decl(moduledecl.ts, 227, 3))
->mAmbient.m3.aVar : Symbol(mAmbient.m3.aVar, Decl(moduledecl.ts, 200, 11))
->mAmbient.m3 : Symbol(mAmbient.m3, Decl(moduledecl.ts, 192, 5))
+>mAmbient.m3.aVar : Symbol(aVar, Decl(moduledecl.ts, 200, 11))
+>mAmbient.m3 : Symbol(m3, Decl(moduledecl.ts, 192, 5))
 >mAmbient : Symbol(mAmbient, Decl(moduledecl.ts, 175, 1))
->m3 : Symbol(mAmbient.m3, Decl(moduledecl.ts, 192, 5))
->aVar : Symbol(mAmbient.m3.aVar, Decl(moduledecl.ts, 200, 11))
+>m3 : Symbol(m3, Decl(moduledecl.ts, 192, 5))
+>aVar : Symbol(aVar, Decl(moduledecl.ts, 200, 11))
 
 var m3bB: mAmbient.m3.B;
 >m3bB : Symbol(m3bB, Decl(moduledecl.ts, 228, 3))
 >mAmbient : Symbol(mAmbient, Decl(moduledecl.ts, 175, 1))
->m3 : Symbol(mAmbient.m3, Decl(moduledecl.ts, 192, 5))
->B : Symbol(mAmbient.m3.B, Decl(moduledecl.ts, 200, 20))
+>m3 : Symbol(m3, Decl(moduledecl.ts, 192, 5))
+>B : Symbol(B, Decl(moduledecl.ts, 200, 20))
 
 var m3eVar: mAmbient.m3.e;
 >m3eVar : Symbol(m3eVar, Decl(moduledecl.ts, 229, 3))
 >mAmbient : Symbol(mAmbient, Decl(moduledecl.ts, 175, 1))
->m3 : Symbol(mAmbient.m3, Decl(moduledecl.ts, 192, 5))
->e : Symbol(mAmbient.m3.e, Decl(moduledecl.ts, 204, 9))
+>m3 : Symbol(m3, Decl(moduledecl.ts, 192, 5))
+>e : Symbol(e, Decl(moduledecl.ts, 204, 9))
 
 
