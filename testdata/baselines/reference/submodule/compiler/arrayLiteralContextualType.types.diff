--- old.arrayLiteralContextualType.types
+++ new.arrayLiteralContextualType.types
@@= skipped -41, +41 lines =@@
 foo([
 >foo([    new Giraffe(),    new Elephant()]) : void
 >foo : (animals: IAnimal[]) => void
->[    new Giraffe(),    new Elephant()] : (Giraffe | Elephant)[]
+>[    new Giraffe(),    new Elephant()] : (Elephant | Giraffe)[]
 
     new Giraffe(),
 >new Giraffe() : Giraffe
@@= skipped -14, +14 lines =@@
 bar([
 >bar([    new Giraffe(),    new Elephant()]) : void
 >bar : (animals: { [n: number]: IAnimal; }) => void
->[    new Giraffe(),    new Elephant()] : (Giraffe | Elephant)[]
+>[    new Giraffe(),    new Elephant()] : (Elephant | Giraffe)[]
 
     new Giraffe(),
 >new Giraffe() : Giraffe
@@= skipped -13, +13 lines =@@
 ]); // Legal because of the contextual type IAnimal provided by the parameter
 
 var arr = [new Giraffe(), new Elephant()];
->arr : (Giraffe | Elephant)[]
->[new Giraffe(), new Elephant()] : (Giraffe | Elephant)[]
+>arr : (Elephant | Giraffe)[]
+>[new Giraffe(), new Elephant()] : (Elephant | Giraffe)[]
 >new Giraffe() : Giraffe
 >Giraffe : typeof Giraffe
 >new Elephant() : Elephant
@@= skipped -10, +10 lines =@@
 foo(arr); // ok because arr is Array<Giraffe|Elephant> not {}[]
 >foo(arr) : void
 >foo : (animals: IAnimal[]) => void
->arr : (Giraffe | Elephant)[]
+>arr : (Elephant | Giraffe)[]
 
 bar(arr); // ok because arr is Array<Giraffe|Elephant> not {}[]
 >bar(arr) : void
 >bar : (animals: { [n: number]: IAnimal; }) => void
->arr : (Giraffe | Elephant)[]
+>arr : (Elephant | Giraffe)[]
 
