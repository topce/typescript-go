--- old.funcdecl.js
+++ new.funcdecl.js
@@= skipped -95, +95 lines =@@
 function withOptionalParams(a) {
 }
 var withOptionalParamsVar = withOptionalParams;
-function withInitializedParams(a, b0, b, c) {
-    if (b === void 0) { b = 30; }
-    if (c === void 0) { c = "string value"; }
+function withInitializedParams(a, b0, b = 30, c = "string value") {
 }
 var withInitializedParamsVar = withInitializedParams;
-function withOptionalInitializedParams(a, c) {
-    if (c === void 0) { c = "hello string"; }
+function withOptionalInitializedParams(a, c = "hello string") {
 }
 var withOptionalInitializedParamsVar = withOptionalInitializedParams;
-function withRestParams(a) {
-    var myRestParameter = [];
-    for (var _i = 1; _i < arguments.length; _i++) {
-        myRestParameter[_i - 1] = arguments[_i];
-    }
+function withRestParams(a, ...myRestParameter) {
     return myRestParameter;
 }
 var withRestParamsVar = withRestParams;
@@= skipped -28, +21 lines =@@
     }
     m2.foo = foo;
 })(m2 || (m2 = {}));
-m2.foo(function () {
+m2.foo(() => {
     var b = 30;
     return b;
 });
-var f2 = function () {
+var f2 = () => {
     return "string";
 };
-
-
-//// [funcdecl.d.ts]
-declare function simpleFunc(): string;
-declare var simpleFuncVar: typeof simpleFunc;
-declare function anotherFuncNoReturn(): void;
-declare var anotherFuncNoReturnVar: typeof anotherFuncNoReturn;
-declare function withReturn(): string;
-declare var withReturnVar: typeof withReturn;
-declare function withParams(a: string): string;
-declare var withparamsVar: typeof withParams;
-declare function withMultiParams(a: number, b: any, c: Object): number;
-declare var withMultiParamsVar: typeof withMultiParams;
-declare function withOptionalParams(a?: string): void;
-declare var withOptionalParamsVar: typeof withOptionalParams;
-declare function withInitializedParams(a: string, b0: any, b?: number, c?: string): void;
-declare var withInitializedParamsVar: typeof withInitializedParams;
-declare function withOptionalInitializedParams(a: string, c?: string): void;
-declare var withOptionalInitializedParamsVar: typeof withOptionalInitializedParams;
-declare function withRestParams(a: string, ...myRestParameter: number[]): number[];
-declare var withRestParamsVar: typeof withRestParams;
-declare function overload1(n: number): string;
-declare function overload1(s: string): string;
-declare var withOverloadSignature: typeof overload1;
-declare function f(n: () => void): void;
-declare namespace m2 {
-    function foo(n: () => void): void;
-}
-declare function fooAmbient(n: number): string;
-declare function overloadAmbient(n: number): string;
-declare function overloadAmbient(s: string): string;
-declare var f2: () => string;
