--- old.iterableTReturnTNext(strictbuiltiniteratorreturn=false).types
+++ new.iterableTReturnTNext(strictbuiltiniteratorreturn=false).types
@@= skipped -11, +11 lines =@@
 // - https://github.com/continuedev/continue/blob/046bca088a833f8b3620412ff64e4b6f41fbb959/extensions/vscode/src/autocomplete/lsp.ts#L60
 const r1: number = map.values().next().value; // error when strictBuiltinIteratorReturn is true as result is potentially `{ done: true, value: undefined }`
 >r1 : number
->map.values().next().value : any
->map.values().next() : IteratorResult<number, any>
->map.values().next : (...[value]: [] | [unknown]) => IteratorResult<number, any>
+>map.values().next().value : number | undefined
+>map.values().next() : IteratorResult<number, undefined>
+>map.values().next : (...__0: [] | [unknown]) => IteratorResult<number, undefined>
 >map.values() : MapIterator<number>
 >map.values : () => MapIterator<number>
 >map : Map<string, number>
 >values : () => MapIterator<number>
->next : (...[value]: [] | [unknown]) => IteratorResult<number, any>
->value : any
+>next : (...__0: [] | [unknown]) => IteratorResult<number, undefined>
+>value : number | undefined
 
 // based on: https://github.com/gcanti/fp-ts/blob/89a772e95e414acee679f42f56527606f7b61f30/src/Map.ts#L246
 interface Next<A> {
@@= skipped -20, +20 lines =@@
 }
 const r2: Next<number> = map.values().next(); // error when strictBuiltinIteratorReturn is true as result is potentially `{ done: true, value: undefined }`
 >r2 : Next<number>
->map.values().next() : IteratorResult<number, any>
->map.values().next : (...[value]: [] | [unknown]) => IteratorResult<number, any>
+>map.values().next() : IteratorResult<number, undefined>
+>map.values().next : (...__0: [] | [unknown]) => IteratorResult<number, undefined>
 >map.values() : MapIterator<number>
 >map.values : () => MapIterator<number>
 >map : Map<string, number>
 >values : () => MapIterator<number>
->next : (...[value]: [] | [unknown]) => IteratorResult<number, any>
+>next : (...__0: [] | [unknown]) => IteratorResult<number, undefined>
 
 // based on: https://github.com/graphql/graphql-js/blob/e15c3ec4dc21d9fd1df34fe9798cadf3bf02c6ea/src/execution/__tests__/mapAsyncIterable-test.ts#L175
 async function* source() { yield 1; yield 2; yield 3; }
@@= skipped -32, +32 lines =@@
 // based on: https://github.com/backstage/backstage/blob/85d9346ef11c1c20e4405102b4f5d93afb1292c1/packages/core-app-api/src/routing/RouteTracker.tsx#L62
 const r3: number | undefined = set.values().next().value;
 >r3 : number | undefined
->set.values().next().value : any
->set.values().next() : IteratorResult<number, any>
->set.values().next : (...[value]: [] | [unknown]) => IteratorResult<number, any>
+>set.values().next().value : number | undefined
+>set.values().next() : IteratorResult<number, undefined>
+>set.values().next : (...__0: [] | [unknown]) => IteratorResult<number, undefined>
 >set.values() : SetIterator<number>
 >set.values : () => SetIterator<number>
 >set : Set<number>
 >values : () => SetIterator<number>
->next : (...[value]: [] | [unknown]) => IteratorResult<number, any>
->value : any
+>next : (...__0: [] | [unknown]) => IteratorResult<number, undefined>
+>value : number | undefined
 
 // based on: https://github.com/microsoft/TypeScript/blob/15f67e0b482faf9f6a3ab9965f3c11196bf3e99b/src/harness/compilerImpl.ts#L77
 class MyMap implements Map<string, number> {
@@= skipped -87, +87 lines =@@
 >values : () => Generator<number, void, unknown>
 
         yield* this._values;
->yield* this._values : any
+>yield* this._values : undefined
 >this._values : number[]
 >this : this
 >_values : number[]
