--- old.bestChoiceType.types
+++ new.bestChoiceType.types
@@= skipped -66, +66 lines =@@
 >/ / : RegExp
 
     let y = x ? x : [];
->y : RegExpMatchArray | never[]
->x ? x : [] : RegExpMatchArray | never[]
+>y : never[] | RegExpMatchArray
+>x ? x : [] : never[] | RegExpMatchArray
 >x : RegExpMatchArray | null
 >x : RegExpMatchArray
 >[] : never[]
@@= skipped -10, +10 lines =@@
 >z : any[]
 >y.map(s => s.toLowerCase()) : any[]
 >y.map : (<U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[]) | (<U>(callbackfn: (value: never, index: number, array: never[]) => U, thisArg?: any) => U[])
->y : RegExpMatchArray | never[]
+>y : never[] | RegExpMatchArray
 >map : (<U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => U[]) | (<U>(callbackfn: (value: never, index: number, array: never[]) => U, thisArg?: any) => U[])
 >s => s.toLowerCase() : (s: any) => any
 >s : any
