--- old.genericDefaultsErrors.types
+++ new.genericDefaultsErrors.types
@@= skipped -4, +4 lines =@@
 >x : any
 
 declare function f03<T extends string = number>(): void; // error
->f03 : <T extends string = number>() => void
+>f03 : <T extends string>() => void
 
 declare function f04<T extends string, U extends number = T>(): void; // error
->f04 : <T extends string, U extends number = T>() => void
+>f04 : <T extends string, U extends number>() => void
 
 declare function f05<T, U extends number = T>(): void; // error
->f05 : <T, U extends number = T>() => void
+>f05 : <T, U extends number>() => void
 
 declare function f06<T, U extends T = number>(): void; // error
->f06 : <T, U extends T = number>() => void
+>f06 : <T, U extends T>() => void
 
 declare function f11<T, U, V = number>(): void;
->f11 : <T, U, V = number>() => void
+>f11 : <T, U, V>() => void
 
 f11(); // ok
 >f11() : void
->f11 : <T, U, V = number>() => void
+>f11 : <T, U, V>() => void
 
 f11<1>(); // error
 >f11<1>() : void
->f11 : <T, U, V = number>() => void
+>f11 : <T, U, V>() => void
 
 f11<1, 2>(); // ok
 >f11<1, 2>() : void
->f11 : <T, U, V = number>() => void
+>f11 : <T, U, V>() => void
 
 f11<1, 2, 3>(); // ok
 >f11<1, 2, 3>() : void
->f11 : <T, U, V = number>() => void
+>f11 : <T, U, V>() => void
 
 f11<1, 2, 3, 4>(); // error
 >f11<1, 2, 3, 4>() : void
->f11 : <T, U, V = number>() => void
+>f11 : <T, U, V>() => void
 
 declare function f12<T, U = T>(a?: U): void;
->f12 : <T, U = T>(a?: U) => void
+>f12 : <T, U>(a?: U) => void
 >a : U
 
 f12<number>(); // ok
 >f12<number>() : void
->f12 : <T, U = T>(a?: U) => void
+>f12 : <T, U>(a?: U) => void
 
 f12<number>("a"); // error
 >f12<number>("a") : void
->f12 : <T, U = T>(a?: U) => void
+>f12 : <T, U>(a?: U) => void
 >"a" : "a"
 
 interface i00<T> { } // ok
