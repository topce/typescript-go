--- old.uncalledFunctionChecksInConditional2.types
+++ new.uncalledFunctionChecksInConditional2.types
@@= skipped -10, +10 lines =@@
   // Simplified
   if (
     perf &&
->perf &&    perf.measure &&    perf.clearMarks &&    perf.clearMeasures : (measureName?: string) => void
->perf &&    perf.measure &&    perf.clearMarks : (markName?: string) => void
->perf &&    perf.measure : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions, endMark?: string) => PerformanceMeasure
+>perf &&    perf.measure &&    perf.clearMarks &&    perf.clearMeasures : (measureName?: string | undefined) => void
+>perf &&    perf.measure &&    perf.clearMarks : (markName?: string | undefined) => void
+>perf &&    perf.measure : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions | undefined, endMark?: string | undefined) => PerformanceMeasure
 >perf : Performance
 
     perf.measure &&
->perf.measure : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions, endMark?: string) => PerformanceMeasure
+>perf.measure : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions | undefined, endMark?: string | undefined) => PerformanceMeasure
 >perf : Performance
->measure : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions, endMark?: string) => PerformanceMeasure
+>measure : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions | undefined, endMark?: string | undefined) => PerformanceMeasure
 
     perf.clearMarks &&
->perf.clearMarks : (markName?: string) => void
+>perf.clearMarks : (markName?: string | undefined) => void
 >perf : Performance
->clearMarks : (markName?: string) => void
+>clearMarks : (markName?: string | undefined) => void
 
     perf.clearMeasures
->perf.clearMeasures : (measureName?: string) => void
+>perf.clearMeasures : (measureName?: string | undefined) => void
 >perf : Performance
->clearMeasures : (measureName?: string) => void
+>clearMeasures : (measureName?: string | undefined) => void
 
   ) {
     perf.measure("");
 >perf.measure("") : PerformanceMeasure
->perf.measure : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions, endMark?: string) => PerformanceMeasure
+>perf.measure : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions | undefined, endMark?: string | undefined) => PerformanceMeasure
 >perf : Performance
->measure : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions, endMark?: string) => PerformanceMeasure
+>measure : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions | undefined, endMark?: string | undefined) => PerformanceMeasure
 >"" : ""
 
     perf.clearMarks("")
 >perf.clearMarks("") : void
->perf.clearMarks : (markName?: string) => void
+>perf.clearMarks : (markName?: string | undefined) => void
 >perf : Performance
->clearMarks : (markName?: string) => void
+>clearMarks : (markName?: string | undefined) => void
 >"" : ""
 
     perf.clearMeasures("")
 >perf.clearMeasures("") : void
->perf.clearMeasures : (measureName?: string) => void
+>perf.clearMeasures : (measureName?: string | undefined) => void
 >perf : Performance
->clearMeasures : (measureName?: string) => void
+>clearMeasures : (measureName?: string | undefined) => void
 >"" : ""
   }
 
   // With ||
   if (
     perf &&
->perf &&    perf.mark &&    perf.measure || !!true : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions, endMark?: string) => PerformanceMeasure
->perf &&    perf.mark &&    perf.measure : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions, endMark?: string) => PerformanceMeasure
->perf &&    perf.mark : (markName: string, markOptions?: PerformanceMarkOptions) => PerformanceMark
+>perf &&    perf.mark &&    perf.measure || !!true : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions | undefined, endMark?: string | undefined) => PerformanceMeasure
+>perf &&    perf.mark &&    perf.measure : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions | undefined, endMark?: string | undefined) => PerformanceMeasure
+>perf &&    perf.mark : (markName: string, markOptions?: PerformanceMarkOptions | undefined) => PerformanceMark
 >perf : Performance
 
     perf.mark &&
->perf.mark : (markName: string, markOptions?: PerformanceMarkOptions) => PerformanceMark
+>perf.mark : (markName: string, markOptions?: PerformanceMarkOptions | undefined) => PerformanceMark
 >perf : Performance
->mark : (markName: string, markOptions?: PerformanceMarkOptions) => PerformanceMark
+>mark : (markName: string, markOptions?: PerformanceMarkOptions | undefined) => PerformanceMark
 
     perf.measure || !!true
->perf.measure : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions, endMark?: string) => PerformanceMeasure
+>perf.measure : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions | undefined, endMark?: string | undefined) => PerformanceMeasure
 >perf : Performance
->measure : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions, endMark?: string) => PerformanceMeasure
+>measure : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions | undefined, endMark?: string | undefined) => PerformanceMeasure
 >!!true : true
 >!true : false
 >true : true
@@= skipped -67, +67 lines =@@
   ) {
     perf.mark("");
 >perf.mark("") : PerformanceMark
->perf.mark : (markName: string, markOptions?: PerformanceMarkOptions) => PerformanceMark
+>perf.mark : (markName: string, markOptions?: PerformanceMarkOptions | undefined) => PerformanceMark
 >perf : Performance
->mark : (markName: string, markOptions?: PerformanceMarkOptions) => PerformanceMark
+>mark : (markName: string, markOptions?: PerformanceMarkOptions | undefined) => PerformanceMark
 >"" : ""
   }
 
   // With ??
   if (
     (
->(      perf &&      perf.mark &&      perf.measure    ) ?? !!true : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions, endMark?: string) => PerformanceMeasure
->(      perf &&      perf.mark &&      perf.measure    ) : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions, endMark?: string) => PerformanceMeasure
+>(      perf &&      perf.mark &&      perf.measure    ) ?? !!true : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions | undefined, endMark?: string | undefined) => PerformanceMeasure
+>(      perf &&      perf.mark &&      perf.measure    ) : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions | undefined, endMark?: string | undefined) => PerformanceMeasure
 
       perf &&
->perf &&      perf.mark &&      perf.measure : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions, endMark?: string) => PerformanceMeasure
->perf &&      perf.mark : (markName: string, markOptions?: PerformanceMarkOptions) => PerformanceMark
+>perf &&      perf.mark &&      perf.measure : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions | undefined, endMark?: string | undefined) => PerformanceMeasure
+>perf &&      perf.mark : (markName: string, markOptions?: PerformanceMarkOptions | undefined) => PerformanceMark
 >perf : Performance
 
       perf.mark &&
->perf.mark : (markName: string, markOptions?: PerformanceMarkOptions) => PerformanceMark
+>perf.mark : (markName: string, markOptions?: PerformanceMarkOptions | undefined) => PerformanceMark
 >perf : Performance
->mark : (markName: string, markOptions?: PerformanceMarkOptions) => PerformanceMark
+>mark : (markName: string, markOptions?: PerformanceMarkOptions | undefined) => PerformanceMark
 
       perf.measure
->perf.measure : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions, endMark?: string) => PerformanceMeasure
+>perf.measure : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions | undefined, endMark?: string | undefined) => PerformanceMeasure
 >perf : Performance
->measure : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions, endMark?: string) => PerformanceMeasure
+>measure : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions | undefined, endMark?: string | undefined) => PerformanceMeasure
 
     ) ?? !!true
 >!!true : true
@@= skipped -35, +35 lines =@@
   ) {
     perf.mark("");
 >perf.mark("") : PerformanceMark
->perf.mark : (markName: string, markOptions?: PerformanceMarkOptions) => PerformanceMark
+>perf.mark : (markName: string, markOptions?: PerformanceMarkOptions | undefined) => PerformanceMark
 >perf : Performance
->mark : (markName: string, markOptions?: PerformanceMarkOptions) => PerformanceMark
+>mark : (markName: string, markOptions?: PerformanceMarkOptions | undefined) => PerformanceMark
 >"" : ""
   }
 };
@@= skipped -28, +28 lines =@@
   /* istanbul ignore if */
   if (
     perf &&
->perf &&    perf.mark &&    perf.measure &&    perf.clearMarks &&    perf.clearMeasures : false | ((measureName?: string) => void)
->perf &&    perf.mark &&    perf.measure &&    perf.clearMarks : false | ((markName?: string) => void)
->perf &&    perf.mark &&    perf.measure : false | ((measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions, endMark?: string) => PerformanceMeasure)
->perf &&    perf.mark : false | ((markName: string, markOptions?: PerformanceMarkOptions) => PerformanceMark)
+>perf &&    perf.mark &&    perf.measure &&    perf.clearMarks &&    perf.clearMeasures : false | (measureName?: string | undefined) => void
+>perf &&    perf.mark &&    perf.measure &&    perf.clearMarks : false | (markName?: string | undefined) => void
+>perf &&    perf.mark &&    perf.measure : false | (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions | undefined, endMark?: string | undefined) => PerformanceMeasure
+>perf &&    perf.mark : false | (markName: string, markOptions?: PerformanceMarkOptions | undefined) => PerformanceMark
 >perf : false | Performance
 
     perf.mark &&
->perf.mark : (markName: string, markOptions?: PerformanceMarkOptions) => PerformanceMark
+>perf.mark : (markName: string, markOptions?: PerformanceMarkOptions | undefined) => PerformanceMark
 >perf : Performance
->mark : (markName: string, markOptions?: PerformanceMarkOptions) => PerformanceMark
+>mark : (markName: string, markOptions?: PerformanceMarkOptions | undefined) => PerformanceMark
 
     perf.measure &&
->perf.measure : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions, endMark?: string) => PerformanceMeasure
+>perf.measure : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions | undefined, endMark?: string | undefined) => PerformanceMeasure
 >perf : Performance
->measure : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions, endMark?: string) => PerformanceMeasure
+>measure : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions | undefined, endMark?: string | undefined) => PerformanceMeasure
 
     perf.clearMarks &&
->perf.clearMarks : (markName?: string) => void
+>perf.clearMarks : (markName?: string | undefined) => void
 >perf : Performance
->clearMarks : (markName?: string) => void
+>clearMarks : (markName?: string | undefined) => void
 
     perf.clearMeasures
->perf.clearMeasures : (measureName?: string) => void
+>perf.clearMeasures : (measureName?: string | undefined) => void
 >perf : Performance
->clearMeasures : (measureName?: string) => void
+>clearMeasures : (measureName?: string | undefined) => void
 
   ) {
     mark = (tag) => perf.mark(tag)
@@= skipped -33, +33 lines =@@
 >(tag) => perf.mark(tag) : (tag: any) => PerformanceMark
 >tag : any
 >perf.mark(tag) : PerformanceMark
->perf.mark : (markName: string, markOptions?: PerformanceMarkOptions) => PerformanceMark
+>perf.mark : (markName: string, markOptions?: PerformanceMarkOptions | undefined) => PerformanceMark
 >perf : Performance
->mark : (markName: string, markOptions?: PerformanceMarkOptions) => PerformanceMark
+>mark : (markName: string, markOptions?: PerformanceMarkOptions | undefined) => PerformanceMark
 >tag : any
 
     measure = (name, startTag, endTag) => {
@@= skipped -15, +15 lines =@@
 
       perf.measure(name, startTag, endTag)
 >perf.measure(name, startTag, endTag) : PerformanceMeasure
->perf.measure : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions, endMark?: string) => PerformanceMeasure
+>perf.measure : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions | undefined, endMark?: string | undefined) => PerformanceMeasure
 >perf : Performance
->measure : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions, endMark?: string) => PerformanceMeasure
+>measure : (measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions | undefined, endMark?: string | undefined) => PerformanceMeasure
 >name : any
 >startTag : any
 >endTag : any
 
       perf.clearMarks(startTag)
 >perf.clearMarks(startTag) : void
->perf.clearMarks : (markName?: string) => void
+>perf.clearMarks : (markName?: string | undefined) => void
 >perf : Performance
->clearMarks : (markName?: string) => void
+>clearMarks : (markName?: string | undefined) => void
 >startTag : any
 
       perf.clearMarks(endTag)
 >perf.clearMarks(endTag) : void
->perf.clearMarks : (markName?: string) => void
+>perf.clearMarks : (markName?: string | undefined) => void
 >perf : Performance
->clearMarks : (markName?: string) => void
+>clearMarks : (markName?: string | undefined) => void
 >endTag : any
 
       // perf.clearMeasures(name)
@@= skipped -42, +42 lines =@@
 
       typeof window !== 'undefined' &&
 >typeof window !== 'undefined' &&      window.matchMedia && // no error      window.matchMedia('(max-device-width: 680px)') : false | MediaQueryList
->typeof window !== 'undefined' &&      window.matchMedia : false | (((query: string) => MediaQueryList) & ((query: string) => MediaQueryList))
+>typeof window !== 'undefined' &&      window.matchMedia : false | (query: string) => MediaQueryList & (query: string) => MediaQueryList
 >typeof window !== 'undefined' : boolean
->typeof window : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof window : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >window : Window & typeof globalThis
 >'undefined' : "undefined"
 
       window.matchMedia && // no error
->window.matchMedia : ((query: string) => MediaQueryList) & ((query: string) => MediaQueryList)
+>window.matchMedia : (query: string) => MediaQueryList & (query: string) => MediaQueryList
 >window : Window & typeof globalThis
->matchMedia : ((query: string) => MediaQueryList) & ((query: string) => MediaQueryList)
+>matchMedia : (query: string) => MediaQueryList & (query: string) => MediaQueryList
 
       window.matchMedia('(max-device-width: 680px)');
 >window.matchMedia('(max-device-width: 680px)') : MediaQueryList
->window.matchMedia : ((query: string) => MediaQueryList) & ((query: string) => MediaQueryList)
+>window.matchMedia : (query: string) => MediaQueryList & (query: string) => MediaQueryList
 >window : Window & typeof globalThis
->matchMedia : ((query: string) => MediaQueryList) & ((query: string) => MediaQueryList)
+>matchMedia : (query: string) => MediaQueryList & (query: string) => MediaQueryList
 >'(max-device-width: 680px)' : "(max-device-width: 680px)"
 
     _isMobile = isMobileMatch && isMobileMatch.matches;
