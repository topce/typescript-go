--- old.contextualTypeFunctionObjectPropertyIntersection.types
+++ new.contextualTypeFunctionObjectPropertyIntersection.types
@@= skipped -18, +18 lines =@@
 
   };
   on?: {
->on : ({ [K in TEvent["type"]]?: Action<TEvent extends { type: K; } ? TEvent : never> | undefined; } & { "*"?: Action<TEvent>; }) | undefined
+>on : { [K in TEvent["type"]]?: Action<TEvent extends { type: K; } ? TEvent : never> | undefined } & { "*"?: Action<TEvent> | undefined; } | undefined
 
     [K in TEvent["type"]]?: Action<TEvent extends { type: K } ? TEvent : never>;
 >type : K
@@= skipped -83, +83 lines =@@
 >ev : { type: "FOO"; } | { type: "BAR"; }
 
       ev.type; // should be 'FOO' | 'BAR'
->ev.type : "FOO" | "BAR"
+>ev.type : "BAR" | "FOO"
 >ev : { type: "FOO"; } | { type: "BAR"; }
->type : "FOO" | "BAR"
+>type : "BAR" | "FOO"
 
     },
   },
@@= skipped -19, +19 lines =@@
 
   };
   on?: {
->on : ({ [K in TEvent["type"] as K extends Uppercase<string> ? K : never]?: Action<TEvent extends { type: K; } ? TEvent : never> | undefined; } & { "*"?: Action<TEvent>; }) | undefined
+>on : { [K in TEvent["type"] as K extends Uppercase<string> ? K : never]?: Action<TEvent extends { type: K; } ? TEvent : never> | undefined } & { "*"?: Action<TEvent> | undefined; } | undefined
 
     [K in TEvent["type"] as K extends Uppercase<string> ? K : never]?: Action<TEvent extends { type: K } ? TEvent : never>;
 >type : K
@@= skipped -127, +127 lines =@@
 // repro from #49307#issuecomment-1143103607
 
 declare function createSlice<T>(
->createSlice : { <T>(reducers: { [K: string]: (state: string) => void; } & { [K in keyof T]: object; }): void; <State, CaseReducers extends SliceCaseReducers<State>>(options: { initialState: State | (() => State); reducers: ValidateSliceCaseReducers<State, CaseReducers>; }): void; }
+>createSlice : { <T>(reducers: { [K: string]: (state: string) => void; } & { [K in keyof T]: object }): void; <State, CaseReducers extends SliceCaseReducers<State>>(options: { initialState: State | (() => State); reducers: ValidateSliceCaseReducers<State, CaseReducers>; }): void; }
 
   reducers: { [K: string]: (state: string) => void } & {
->reducers : { [K: string]: (state: string) => void; } & { [K in keyof T]: object; }
+>reducers : { [K: string]: (state: string) => void; } & { [K in keyof T]: object }
 >K : string
 >state : string
 
@@= skipped -13, +13 lines =@@
 
 createSlice({
 >createSlice({  f(a) {},}) : void
->createSlice : { <T>(reducers: { [K: string]: (state: string) => void; } & { [K in keyof T]: object; }): void; <State, CaseReducers extends SliceCaseReducers<State>>(options: { initialState: State | (() => State); reducers: ValidateSliceCaseReducers<State, CaseReducers>; }): void; }
->{  f(a) {},} : { f(a: string): void; }
+>createSlice : { <T>(reducers: { [K: string]: (state: string) => void; } & { [K in keyof T]: object }): void; <State, CaseReducers extends SliceCaseReducers<State>>(options: { initialState: State | (() => State); reducers: ValidateSliceCaseReducers<State, CaseReducers>; }): void; }
+>{  f(a) {},} : { f: (a: string) => void; }
 
   f(a) {},
 >f : (a: string) => void
@@= skipped -47, +47 lines =@@
 
   [T in keyof ACR]: ACR[T] extends {
     reducer(s: S, action?: infer A): any;
->reducer : (s: S, action?: infer A) => any
+>reducer : (s: S, action?: A | undefined) => any
 >s : S
 >action : A | undefined
   }
@@= skipped -13, +13 lines =@@
 };
 
 declare function createSlice<
->createSlice : { <T>(reducers: { [K: string]: (state: string) => void; } & { [K in keyof T]: object; }): void; <State, CaseReducers extends SliceCaseReducers<State>>(options: { initialState: State | (() => State); reducers: ValidateSliceCaseReducers<State, CaseReducers>; }): void; }
+>createSlice : { <T>(reducers: { [K: string]: (state: string) => void; } & { [K in keyof T]: object }): void; <State, CaseReducers extends SliceCaseReducers<State>>(options: { initialState: State | (() => State); reducers: ValidateSliceCaseReducers<State, CaseReducers>; }): void; }
 
   State,
   CaseReducers extends SliceCaseReducers<State>
@@= skipped -18, +18 lines =@@
 export const clientSlice = createSlice({
 >clientSlice : void
 >createSlice({  initialState: {    username: "",    isLoggedIn: false,    userId: "",    avatar: "",  },  reducers: {    onClientUserChanged(state) {},  },}) : void
->createSlice : { <T>(reducers: { [K: string]: (state: string) => void; } & { [K in keyof T]: object; }): void; <State, CaseReducers extends SliceCaseReducers<State>>(options: { initialState: State | (() => State); reducers: ValidateSliceCaseReducers<State, CaseReducers>; }): void; }
->{  initialState: {    username: "",    isLoggedIn: false,    userId: "",    avatar: "",  },  reducers: {    onClientUserChanged(state) {},  },} : { initialState: { username: string; isLoggedIn: false; userId: string; avatar: string; }; reducers: { onClientUserChanged(state: { username: string; isLoggedIn: boolean; userId: string; avatar: string; }): void; }; }
+>createSlice : { <T>(reducers: { [K: string]: (state: string) => void; } & { [K in keyof T]: object }): void; <State, CaseReducers extends SliceCaseReducers<State>>(options: { initialState: State | (() => State); reducers: ValidateSliceCaseReducers<State, CaseReducers>; }): void; }
+>{  initialState: {    username: "",    isLoggedIn: false,    userId: "",    avatar: "",  },  reducers: {    onClientUserChanged(state) {},  },} : { initialState: { username: string; isLoggedIn: false; userId: string; avatar: string; }; reducers: { onClientUserChanged: (state: { username: string; isLoggedIn: boolean; userId: string; avatar: string; }) => void; }; }
 
   initialState: {
 >initialState : { username: string; isLoggedIn: false; userId: string; avatar: string; }
@@= skipped -25, +25 lines =@@
 
   },
   reducers: {
->reducers : { onClientUserChanged(state: { username: string; isLoggedIn: boolean; userId: string; avatar: string; }): void; }
->{    onClientUserChanged(state) {},  } : { onClientUserChanged(state: { username: string; isLoggedIn: boolean; userId: string; avatar: string; }): void; }
+>reducers : { onClientUserChanged: (state: { username: string; isLoggedIn: boolean; userId: string; avatar: string; }) => void; }
+>{    onClientUserChanged(state) {},  } : { onClientUserChanged: (state: { username: string; isLoggedIn: boolean; userId: string; avatar: string; }) => void; }
 
     onClientUserChanged(state) {},
 >onClientUserChanged : (state: { username: string; isLoggedIn: boolean; userId: string; avatar: string; }) => void
