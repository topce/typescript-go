--- old.mappedTypeUnionConstraintInferences.types
+++ new.mappedTypeUnionConstraintInferences.types
@@= skipped -7, +7 lines =@@
 >PartialProperties : PartialProperties<T, K>
 
 export function doSomething_Actual<T extends {
->doSomething_Actual : <T extends { prop: string; }>(a: T) => { [P in keyof PartialProperties<T, "prop">]: PartialProperties<T, "prop">[P]; }
+>doSomething_Actual : <T extends { prop: string; }>(a: T) => { [P in "prop" | Exclude<keyof T, "prop">]: PartialProperties<T, "prop">[P] }
 
     prop: string;
 >prop : string
@@= skipped -9, +9 lines =@@
 >a : T
 
     const x: { [P in keyof PartialProperties<T, "prop">]: PartialProperties<T, "prop">[P]; } = null as any;
->x : { [P in keyof PartialProperties<T, "prop">]: PartialProperties<T, "prop">[P]; }
+>x : { [P in "prop" | Exclude<keyof T, "prop">]: PartialProperties<T, "prop">[P] }
 >null as any : any
 
     return x;
->x : { [P in keyof PartialProperties<T, "prop">]: PartialProperties<T, "prop">[P]; }
+>x : { [P in "prop" | Exclude<keyof T, "prop">]: PartialProperties<T, "prop">[P] }
 }
 export declare function doSomething_Expected<T extends {
->doSomething_Expected : <T extends { prop: string; }>(a: T) => { [P in keyof PartialProperties<T, "prop">]: PartialProperties<T, "prop">[P]; }
+>doSomething_Expected : <T extends { prop: string; }>(a: T) => { [P in "prop" | Exclude<keyof T, "prop">]: PartialProperties<T, "prop">[P] }
 
     prop: string;
 >prop : string
@@= skipped -18, +18 lines =@@
 export let a = doSomething_Actual({ prop: "test" });
 >a : { prop?: string; }
 >doSomething_Actual({ prop: "test" }) : { prop?: string; }
->doSomething_Actual : <T extends { prop: string; }>(a: T) => { [P in keyof PartialProperties<T, "prop">]: PartialProperties<T, "prop">[P]; }
+>doSomething_Actual : <T extends { prop: string; }>(a: T) => { [P in "prop" | Exclude<keyof T, "prop">]: PartialProperties<T, "prop">[P] }
 >{ prop: "test" } : { prop: string; }
 >prop : string
 >"test" : "test"
@@= skipped -13, +13 lines =@@
 export let b = doSomething_Expected({ prop: "test" });
 >b : { prop?: string; }
 >doSomething_Expected({ prop: "test" }) : { prop?: string; }
->doSomething_Expected : <T extends { prop: string; }>(a: T) => { [P in keyof PartialProperties<T, "prop">]: PartialProperties<T, "prop">[P]; }
+>doSomething_Expected : <T extends { prop: string; }>(a: T) => { [P in "prop" | Exclude<keyof T, "prop">]: PartialProperties<T, "prop">[P] }
 >{ prop: "test" } : { prop: string; }
 >prop : string
 >"test" : "test"
