--- old.moduleAliasInterface.types
+++ new.moduleAliasInterface.types
@@= skipped -19, +19 lines =@@
 >editor : typeof editor
 
  import modes = _modes;
->modes : typeof modes
->_modes : typeof modes
+>modes : typeof _modes
+>_modes : typeof _modes
  
  var i : modes.IMode;
->i : modes.IMode
+>i : IMode
 >modes : any
   
  // If you just use p1:modes, the compiler accepts it - should be an error
@@= skipped -12, +12 lines =@@
 >Bug : Bug
 
   constructor(p1: modes.IMode, p2: modes.Mode) { }// should be an error on p2 - it's not exported
->p1 : modes.IMode
+>p1 : IMode
 >modes : any
->p2 : modes.Mode
+>p2 : Mode
 >modes : any
 
   public foo(p1:modes.IMode) {
->foo : (p1: modes.IMode) => void
->p1 : modes.IMode
+>foo : (p1: IMode) => void
+>p1 : IMode
 >modes : any
    
   } 
@@= skipped -22, +22 lines =@@
 >editor2 : typeof editor2
  
  var i : modesOuter.IMode;
->i : modesOuter.IMode
+>i : IMode
 >modesOuter : any
  
  class Bug {
 >Bug : Bug
 
      constructor(p1: modesOuter.IMode, p2: modesOuter.Mode) { }// no error here, since modesOuter is declared externally
->p1 : modesOuter.IMode
+>p1 : IMode
 >modesOuter : any
->p2 : modesOuter.Mode
+>p2 : Mode
 >modesOuter : any
   
  }
@@= skipped -22, +22 lines =@@
 >Bug2 : Bug2
 
       constructor(p1: Foo.Bar, p2: modesOuter.Mode) { }
->p1 : Foo.Bar
+>p1 : Bar
 >Foo : any
->p2 : modesOuter.Mode
+>p2 : Mode
 >modesOuter : any
   }
 }
@@= skipped -19, +19 lines =@@
 >B1 : typeof B1
 
     import A1Alias1 = A1;
->A1Alias1 : typeof A1Alias1
->A1 : typeof A1Alias1
+>A1Alias1 : typeof A1
+>A1 : typeof A1
     
     var i : A1Alias1.A1I1;   
->i : A1Alias1.A1I1
+>i : A1I1
 >A1Alias1 : any
 
     var c : A1Alias1.A1C1;
->c : A1Alias1.A1C1
+>c : A1C1
 >A1Alias1 : any
 }
 
