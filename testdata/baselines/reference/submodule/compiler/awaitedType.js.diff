--- old.awaitedType.js
+++ new.awaitedType.js
@@= skipped -266, +266 lines =@@
         MaybePromise(true),
     ]);
 }
-// non-generic
 async function f1(x) {
-    // y: string
     const y = await x;
 }
 async function f2(x) {
-    // y: unknown
     const y = await x;
 }
 async function f3(x) {
-    // y: object
     const y = await x;
 }
 async function f4(x) {
-    // y: string
     const y = await x;
 }
 async function f5(x) {
-    // y: unknown
     const y = await x;
 }
 async function f6(x) {
-    // y: object
     const y = await x;
 }
-// generic
 async function f7(x) {
-    // NOTE: T does not belong solely to the domain of primitive types and either does
-    // not have a base constraint, its base constraint is `any`, `unknown`, `{}`, or `object`,
-    // or it has a non-primitive base constraint with a callable `then`.
-    // y: Awaited<T>
     const y = await x;
 }
 async function f8(x) {
-    // NOTE: T does not belong solely to the domain of primitive types and either does
-    // not have a base constraint, its base constraint is `any`, `unknown`, `{}`, or `object`,
-    // or it has a non-primitive base constraint with a callable `then`.
-    // y: Awaited<T>
     const y = await x;
 }
 async function f9(x) {
-    // NOTE: T does not belong solely to the domain of primitive types and either does
-    // not have a base constraint, its base constraint is `any`, `unknown`, `{}`, or `object`,
-    // or it has a non-primitive base constraint with a callable `then`.
-    // y: Awaited<T>
     const y = await x;
 }
 async function f10(x) {
-    // NOTE: T does not belong solely to the domain of primitive types and either does
-    // not have a base constraint, its base constraint is `any`, `unknown`, `{}`, or `object`,
-    // or it has a non-primitive base constraint with a callable `then`.
-    // y: Awaited<T>
     const y = await x;
 }
 async function f11(x) {
-    // NOTE: T does not belong solely to the domain of primitive types and either does
-    // not have a base constraint, its base constraint is `any`, `unknown`, `{}`, or `object`,
-    // or it has a non-primitive base constraint with a callable `then`.
-    // y: Awaited<T>
     const y = await x;
 }
 async function f12(x) {
-    // NOTE: T does not belong solely to the domain of primitive types and either does
-    // not have a base constraint, its base constraint is `any`, `unknown`, `{}`, or `object`,
-    // or it has a non-primitive base constraint with a callable `then`.
-    // y: Awaited<T>
     const y = await x;
 }
 async function f13(x) {
-    // NOTE: T belongs to the domain of primitive types
-    // y: T
     const y = await x;
 }
 async function f14(x) {
-    // NOTE: T has a non-primitive base constraint without a callable `then`.
-    // y: T
     const y = await x;
 }
 async function f15(x) {
-    // NOTE: T has a non-primitive base constraint without a callable `then`.
-    // y: T
     const y = await x;
 }
 async function f16(x) {
-    // NOTE: T belongs to the domain of primitive types (regardless of `then`)
-    // y: T
     const y = await x;
 }
-// https://github.com/microsoft/TypeScript/issues/48320
 async function f17(fn) {
     const ret = await fn(1, 2, 3);
     return ret;
@@= skipped -114, +73 lines =@@
     const itsTwo1 = await findManyWrapper({ select: "foo" });
     const itsTwo2 = await findManyWrapper({ include: "bar" });
 }
-// repro from #41831
 {
     const promises = [Promise.resolve(0)];
     Promise.all(promises).then((results) => {
         const first = results[0];
-        const second = results[1]; // error
+        const second = results[1];
     });
 }
-// repro from #40330
 async function test40330() {
     const promiseNumber = Promise.resolve(1);
     const promiseVoid = async () => { };
