--- old.varianceProblingAndZeroOrderIndexSignatureRelationsAlign.js
+++ new.varianceProblingAndZeroOrderIndexSignatureRelationsAlign.js
@@= skipped -69, +69 lines =@@
 
 //// [varianceProblingAndZeroOrderIndexSignatureRelationsAlign.js]
 "use strict";
-var __extends = (this && this.__extends) || (function () {
-    var extendStatics = function (d, b) {
-        extendStatics = Object.setPrototypeOf ||
-            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
-            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
-        return extendStatics(d, b);
-    };
-    return function (d, b) {
-        if (typeof b !== "function" && b !== null)
-            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
-        extendStatics(d, b);
-        function __() { this.constructor = d; }
-        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-    };
-})();
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.MyServer = void 0;
-var Left = /** @class */ (function () {
-    function Left(value) {
+class Left {
+    value;
+    _tag = 'Left';
+    _A;
+    _L;
+    constructor(value) {
         this.value = value;
-        this._tag = 'Left';
     }
     /** The given function is applied if this is a `Right` */
-    Left.prototype.map = function (f) {
+    map(f) {
         return this;
-    };
-    Left.prototype.ap = function (fab) {
+    }
+    ap(fab) {
         return null;
-    };
-    return Left;
-}());
-var Right = /** @class */ (function () {
-    function Right(value) {
+    }
+}
+class Right {
+    value;
+    _tag = 'Right';
+    _A;
+    _L;
+    constructor(value) {
         this.value = value;
-        this._tag = 'Right';
     }
-    Right.prototype.map = function (f) {
+    map(f) {
         return new Right(f(this.value));
-    };
-    Right.prototype.ap = function (fab) {
+    }
+    ap(fab) {
         return null;
-    };
-    return Right;
-}());
-var Type = /** @class */ (function () {
-    function Type(
+    }
+}
+class Type {
+    name;
+    is;
+    validate;
+    encode;
+    _A;
+    _O;
+    _I;
+    constructor(
     /** a unique name for this codec */
     name, 
     /** a custom type guard */
@@= skipped -60, +56 lines =@@
         this.encode = encode;
     }
     /** a version of `validate` with a default context */
-    Type.prototype.decode = function (i) { return null; };
-    return Type;
-}());
-var tmp1 = null;
+    decode(i) { return null; }
+}
+const tmp1 = null;
 function tmp2(n) { }
 tmp2(tmp1); // uncommenting this line removes a type error from a completely unrelated line ??
-var Server = /** @class */ (function () {
-    function Server() {
-    }
-    return Server;
-}());
-var MyServer = /** @class */ (function (_super) {
-    __extends(MyServer, _super);
-    function MyServer() {
-        return _super !== null && _super.apply(this, arguments) || this;
-    }
-    return MyServer;
-}(Server)); // not assignable error at `MyInfo`
+class Server {
+}
+class MyServer extends Server {
+} // not assignable error at `MyInfo`
 exports.MyServer = MyServer;
