--- old.noAsConstNameLookup.js
+++ new.noAsConstNameLookup.js
@@= skipped -32, +32 lines =@@
 
 
 //// [noAsConstNameLookup.js]
-// Repros from #44292
-var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
-    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
-    return new (P || (P = Promise))(function (resolve, reject) {
-        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
-        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
-        step((generator = generator.apply(thisArg, _arguments || [])).next());
-    });
-};
 export class FeatureRunner {
-    constructor() {
-        this.cleaners = [];
+    cleaners = [];
+    async runFeature() {
+        const objectWhichShouldBeConst = {
+            flags: {},
+            settings: {},
+        };
+        return objectWhichShouldBeConst;
     }
-    runFeature() {
-        return __awaiter(this, void 0, void 0, function* () {
-            const objectWhichShouldBeConst = {
-                flags: {},
-                settings: {},
-            };
-            return objectWhichShouldBeConst;
-        });
+    async run() {
+        const result = {};
+        this.cleaners.forEach(c => c(this));
+        return result;
     }
-    run() {
-        return __awaiter(this, void 0, void 0, function* () {
-            const result = {};
-            this.cleaners.forEach(c => c(this));
-            return result;
-        });
-    }
 }
 export class C {
     f() {
