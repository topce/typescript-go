//// [tests/cases/compiler/reactDefaultPropsInferenceSuccess.tsx] ////

=== reactDefaultPropsInferenceSuccess.tsx ===
/// <reference path="react16.d.ts" />

import React from 'react';
>React : any

interface BaseProps {
  when?: ((value: string) => boolean) | "a" | "b";
>when : "a" | "b" | ((value: string) => boolean) | undefined
>value : string

  error?: boolean;
>error : boolean | undefined
}

interface Props extends BaseProps {
}

class FieldFeedback<P extends Props = BaseProps> extends React.Component<P> {
>FieldFeedback : FieldFeedback<P>
>React.Component : any
>React : any
>Component : any

  static defaultProps = {
>defaultProps : { when: () => boolean; }
>{    when: () => true  } : { when: () => boolean; }

    when: () => true
>when : () => boolean
>() => true : () => boolean
>true : true

  };

  render() {
>render : () => any

    return <div>Hello</div>;
><div>Hello</div> : any
>div : any
>div : any
  }
}

// OK
const Test1 = () => <FieldFeedback when={value => !!value} />;
>Test1 : () => any
>() => <FieldFeedback when={value => !!value} /> : () => any
><FieldFeedback when={value => !!value} /> : any
>FieldFeedback : typeof FieldFeedback
>when : any
>value => !!value : (value: any) => boolean
>value : any
>!!value : boolean
>!value : boolean
>value : any

// Error: Void not assignable to boolean
const Test2 = () => <FieldFeedback when={value => console.log(value)} />;
>Test2 : () => any
>() => <FieldFeedback when={value => console.log(value)} /> : () => any
><FieldFeedback when={value => console.log(value)} /> : any
>FieldFeedback : typeof FieldFeedback
>when : any
>value => console.log(value) : (value: any) => void
>value : any
>console.log(value) : void
>console.log : (...data: any[]) => void
>console : Console
>log : (...data: any[]) => void
>value : any

class FieldFeedbackBeta<P extends Props = BaseProps> extends React.Component<P> {
>FieldFeedbackBeta : FieldFeedbackBeta<P>
>React.Component : any
>React : any
>Component : any

  static defaultProps: BaseProps = {
>defaultProps : BaseProps
>{    when: () => true  } : { when: () => true; }

    when: () => true
>when : () => true
>() => true : () => true
>true : true

  };

  render() {
>render : () => any

    return <div>Hello</div>;
><div>Hello</div> : any
>div : any
>div : any
  }
}

// OK
const Test1a = () => <FieldFeedbackBeta when={value => !!value} error>Hah</FieldFeedbackBeta>;
>Test1a : () => any
>() => <FieldFeedbackBeta when={value => !!value} error>Hah</FieldFeedbackBeta> : () => any
><FieldFeedbackBeta when={value => !!value} error>Hah</FieldFeedbackBeta> : any
>FieldFeedbackBeta : typeof FieldFeedbackBeta
>when : any
>value => !!value : (value: any) => boolean
>value : any
>!!value : boolean
>!value : boolean
>value : any
>error : any
>FieldFeedbackBeta : typeof FieldFeedbackBeta

// Error: Void not assignable to boolean
const Test2a = () => <FieldFeedbackBeta when={value => console.log(value)} error>Hah</FieldFeedbackBeta>;
>Test2a : () => any
>() => <FieldFeedbackBeta when={value => console.log(value)} error>Hah</FieldFeedbackBeta> : () => any
><FieldFeedbackBeta when={value => console.log(value)} error>Hah</FieldFeedbackBeta> : any
>FieldFeedbackBeta : typeof FieldFeedbackBeta
>when : any
>value => console.log(value) : (value: any) => void
>value : any
>console.log(value) : void
>console.log : (...data: any[]) => void
>console : Console
>log : (...data: any[]) => void
>value : any
>error : any
>FieldFeedbackBeta : typeof FieldFeedbackBeta

interface MyPropsProps extends Props {
  when: (value: string) => boolean;
>when : (value: string) => boolean
>value : string
}

class FieldFeedback2<P extends MyPropsProps = MyPropsProps> extends FieldFeedback<P> {
>FieldFeedback2 : FieldFeedback2<P>
>FieldFeedback : FieldFeedback<P>

  static defaultProps = {
>defaultProps : { when: () => boolean; }
>{    when: () => true  } : { when: () => boolean; }

    when: () => true
>when : () => boolean
>() => true : () => boolean
>true : true

  };

  render() {
>render : () => any

    this.props.when("now"); // OK, always defined
>this.props.when("now") : any
>this.props.when : any
>this.props : any
>this : this
>props : any
>when : any
>"now" : "now"

    return <div>Hello</div>;
><div>Hello</div> : any
>div : any
>div : any
  }
}

// OK
const Test3 = () => <FieldFeedback2 when={value => !!value} />;
>Test3 : () => any
>() => <FieldFeedback2 when={value => !!value} /> : () => any
><FieldFeedback2 when={value => !!value} /> : any
>FieldFeedback2 : typeof FieldFeedback2
>when : any
>value => !!value : (value: any) => boolean
>value : any
>!!value : boolean
>!value : boolean
>value : any

// Error: Void not assignable to boolean
const Test4 = () => <FieldFeedback2 when={value => console.log(value)} />;
>Test4 : () => any
>() => <FieldFeedback2 when={value => console.log(value)} /> : () => any
><FieldFeedback2 when={value => console.log(value)} /> : any
>FieldFeedback2 : typeof FieldFeedback2
>when : any
>value => console.log(value) : (value: any) => void
>value : any
>console.log(value) : void
>console.log : (...data: any[]) => void
>console : Console
>log : (...data: any[]) => void
>value : any

// OK
const Test5 = () => <FieldFeedback2 />;
>Test5 : () => any
>() => <FieldFeedback2 /> : () => any
><FieldFeedback2 /> : any
>FieldFeedback2 : typeof FieldFeedback2

