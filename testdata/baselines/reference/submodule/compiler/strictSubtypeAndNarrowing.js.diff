--- old.strictSubtypeAndNarrowing.js
+++ new.strictSubtypeAndNarrowing.js
@@= skipped -233, +233 lines =@@
 
 
 //// [strictSubtypeAndNarrowing.js]
-"use strict";
-// Check that `any` is a strict supertype of `unknown`
-var a11 = [x11, x12];
-var a12 = [x12, x11];
-var a21 = [x22, x21];
-var a22 = [x21, x22];
-// Strict subtype doesn't infer index signatures in non-fresh object types
-var x31 = { a: 1 };
-var a31 = [x31, x32];
-var a32 = [x32, x31];
-var x42 = { a: 1 };
-var a41 = [x42, x41];
-var a42 = [x41, x42];
+const a11 = [x11, x12];
+const a12 = [x12, x11];
+const a21 = [x22, x21];
+const a22 = [x21, x22];
+const x31 = { a: 1 };
+const a31 = [x31, x32];
+const a32 = [x32, x31];
+const x42 = { a: 1 };
+const a41 = [x42, x41];
+const a42 = [x41, x42];
 function fx1(f) {
     if (isFunction(f)) {
-        f; // () => void
+        f;
     }
     else {
-        f; // undefined
+        f;
     }
-    f; // (() => void) | undefined
+    f;
 }
 function fx2(f) {
     if (isFunction(f)) {
-        f; // () => void
+        f;
     }
     else {
-        f; // undefined
+        f;
     }
-    f; // (() => void) | undefined
+    f;
 }
 function fx3(f) {
     if (isFunction(f)) {
-        f; // () => void
+        f;
     }
     else {
-        f; // undefined
+        f;
     }
-    f; // (() => void) | undefined
+    f;
 }
 function fx4(f) {
     if (isFunction(f)) {
-        f; // () => void
+        f;
     }
     else {
-        f; // undefined
+        f;
     }
-    f; // (() => void) | undefined
+    f;
 }
 function checkA(f) {
     if (isFunction(f)) {
-        f; // A | B
+        f;
     }
     else {
-        f; // C | D
+        f;
     }
-    f; // FnTypes
+    f;
 }
 function checkB(f) {
     if (isFunction(f)) {
-        f; // A | B
+        f;
     }
     else {
-        f; // C | D
+        f;
     }
-    f; // FnTypes
+    f;
 }
 function checkC(f) {
     if (isFunction(f)) {
-        f; // FnTypes
+        f;
     }
     else {
-        f; // never
+        f;
     }
-    f; // FnTypes
+    f;
 }
 function checkD(f) {
     if (isFunction(f)) {
-        f; // FnTypes
+        f;
     }
     else {
-        f; // never
+        f;
     }
-    f; // FnTypes
+    f;
 }
-// Type of x = y is y with freshness preserved
 function fx10(obj1, obj2) {
     obj1 = obj2 = { x: 1, y: 2 };
     obj2 = obj1 = { x: 1, y: 2 };
 }
 function fx11() {
-    var obj;
+    let obj;
     return obj = { x: 1, y: 2 };
 }
 function ff1(value) {
@@= skipped -129, +125 lines =@@
     assert(!doesValueAtDeepPathSatisfy(foo, ['value', 'type'], isB));
     return foo;
 }
-var f = function (value) {
+const f = (value) => {
     if (!checkIsPremium(value)) {
         value.premium;
     }
