//// [tests/cases/compiler/aliasUsageInFunctionExpression.ts] ////

=== aliasUsageInFunctionExpression_main.ts ===
import Backbone = require("./aliasUsageInFunctionExpression_backbone");
>Backbone : typeof import("aliasUsageInFunctionExpression_backbone")

import moduleA = require("./aliasUsageInFunctionExpression_moduleA");
>moduleA : typeof import("aliasUsageInFunctionExpression_moduleA")

interface IHasVisualizationModel {
    VisualizationModel: typeof Backbone.Model;
>VisualizationModel : typeof Model
>Backbone.Model : typeof Model
>Backbone : typeof import("aliasUsageInFunctionExpression_backbone")
>Model : typeof Model
}
var f = (x: IHasVisualizationModel) => x;
>f : (x: IHasVisualizationModel) => IHasVisualizationModel
>(x: IHasVisualizationModel) => x : (x: IHasVisualizationModel) => IHasVisualizationModel
>x : IHasVisualizationModel
>x : IHasVisualizationModel

f = (x) => moduleA;
>f = (x) => moduleA : (x: IHasVisualizationModel) => typeof import("aliasUsageInFunctionExpression_moduleA")
>f : (x: IHasVisualizationModel) => IHasVisualizationModel
>(x) => moduleA : (x: IHasVisualizationModel) => typeof import("aliasUsageInFunctionExpression_moduleA")
>x : IHasVisualizationModel
>moduleA : typeof import("aliasUsageInFunctionExpression_moduleA")

=== aliasUsageInFunctionExpression_backbone.ts ===
export class Model {
>Model : Model

    public someData: string;
>someData : string
}

=== aliasUsageInFunctionExpression_moduleA.ts ===
import Backbone = require("./aliasUsageInFunctionExpression_backbone");
>Backbone : typeof import("aliasUsageInFunctionExpression_backbone")

export class VisualizationModel extends Backbone.Model {
>VisualizationModel : VisualizationModel
>Backbone.Model : Model
>Backbone : typeof import("aliasUsageInFunctionExpression_backbone")
>Model : typeof Model

    // interesting stuff here
}

