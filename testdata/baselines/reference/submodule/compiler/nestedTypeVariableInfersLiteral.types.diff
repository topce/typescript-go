--- old.nestedTypeVariableInfersLiteral.types
+++ new.nestedTypeVariableInfersLiteral.types
@@= skipped -22, +22 lines =@@
 >"z" : "z"
 
 const directUnionArray = direct(["z", "y"])
->directUnionArray : Record<"z" | "y", string>
->direct(["z", "y"]) : Record<"z" | "y", string>
+>directUnionArray : Record<"y" | "z", string>
+>direct(["z", "y"]) : Record<"y" | "z", string>
 >direct : <A extends string>(a: A | A[]) => Record<A, string>
->["z", "y"] : ("z" | "y")[]
+>["z", "y"] : ("y" | "z")[]
 >"z" : "z"
 >"y" : "y"
 
@@= skipped -24, +24 lines =@@
 >"z" : "z"
 
 const nestedUnionArray = nestedUnion({fields: ["z", "y"]})
->nestedUnionArray : Record<"z" | "y", string>
->nestedUnion({fields: ["z", "y"]}) : Record<"z" | "y", string>
+>nestedUnionArray : Record<"y" | "z", string>
+>nestedUnion({fields: ["z", "y"]}) : Record<"y" | "z", string>
 >nestedUnion : <A extends string>(a: { fields: A | A[]; }) => Record<A, string>
->{fields: ["z", "y"]} : { fields: ("z" | "y")[]; }
->fields : ("z" | "y")[]
->["z", "y"] : ("z" | "y")[]
+>{fields: ["z", "y"]} : { fields: ("y" | "z")[]; }
+>fields : ("y" | "z")[]
+>["z", "y"] : ("y" | "z")[]
 >"z" : "z"
 >"y" : "y"
 
@@= skipped -22, +22 lines =@@
 hasZField(directUnionArray) // ok
 >hasZField(directUnionArray) : void
 >hasZField : (arg: { z: string; }) => void
->directUnionArray : Record<"z" | "y", string>
+>directUnionArray : Record<"y" | "z", string>
 
 hasZField(nestedSingle) // ok
 >hasZField(nestedSingle) : void
@@= skipped -15, +15 lines =@@
 hasZField(nestedUnionArray) // ok
 >hasZField(nestedUnionArray) : void
 >hasZField : (arg: { z: string; }) => void
->nestedUnionArray : Record<"z" | "y", string>
+>nestedUnionArray : Record<"y" | "z", string>
 
