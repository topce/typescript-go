--- old.underscoreTest1.types
+++ new.underscoreTest1.types
@@= skipped -0, +0 lines =@@
 //// [tests/cases/compiler/underscoreTest1.ts] ////
 
-=== Performance Stats ===
-Type Count: 1,000
-
 === underscoreTest1_underscoreTests.ts ===
 /// <reference path="underscoreTest1_underscore.ts" />
 
@@= skipped -15, +12 lines =@@
 _.each([1, 2, 3], (num) => alert(num.toString()));
 >_.each([1, 2, 3], (num) => alert(num.toString())) : void
 >_.each : { <T>(list: T[], iterator: Iterator_<T, void>, context?: any): void; <T>(list: Dictionary<T>, iterator: Iterator_<T, void>, context?: any): void; }
->_ : Underscore.Static
+>_ : Static
 >each : { <T>(list: T[], iterator: Iterator_<T, void>, context?: any): void; <T>(list: Dictionary<T>, iterator: Iterator_<T, void>, context?: any): void; }
 >[1, 2, 3] : number[]
 >1 : 1
@@= skipped -18, +18 lines =@@
 _.each({ one: 1, two: 2, three: 3 }, (value: number, key?: string) => alert(value.toString()));
 >_.each({ one: 1, two: 2, three: 3 }, (value: number, key?: string) => alert(value.toString())) : void
 >_.each : { <T>(list: T[], iterator: Iterator_<T, void>, context?: any): void; <T>(list: Dictionary<T>, iterator: Iterator_<T, void>, context?: any): void; }
->_ : Underscore.Static
+>_ : Static
 >each : { <T>(list: T[], iterator: Iterator_<T, void>, context?: any): void; <T>(list: Dictionary<T>, iterator: Iterator_<T, void>, context?: any): void; }
 >{ one: 1, two: 2, three: 3 } : { one: number; two: number; three: number; }
 >one : number
@@= skipped -22, +22 lines =@@
 _.map([1, 2, 3], (num) => num * 3);
 >_.map([1, 2, 3], (num) => num * 3) : number[]
 >_.map : { <T, U>(list: T[], iterator: Iterator_<T, U>, context?: any): U[]; <T, U>(list: Dictionary<T>, iterator: Iterator_<T, U>, context?: any): U[]; }
->_ : Underscore.Static
+>_ : Static
 >map : { <T, U>(list: T[], iterator: Iterator_<T, U>, context?: any): U[]; <T, U>(list: Dictionary<T>, iterator: Iterator_<T, U>, context?: any): U[]; }
 >[1, 2, 3] : number[]
 >1 : 1
@@= skipped -15, +15 lines =@@
 _.map({ one: 1, two: 2, three: 3 }, (value: number, key?: string) => value * 3);
 >_.map({ one: 1, two: 2, three: 3 }, (value: number, key?: string) => value * 3) : number[]
 >_.map : { <T, U>(list: T[], iterator: Iterator_<T, U>, context?: any): U[]; <T, U>(list: Dictionary<T>, iterator: Iterator_<T, U>, context?: any): U[]; }
->_ : Underscore.Static
+>_ : Static
 >map : { <T, U>(list: T[], iterator: Iterator_<T, U>, context?: any): U[]; <T, U>(list: Dictionary<T>, iterator: Iterator_<T, U>, context?: any): U[]; }
 >{ one: 1, two: 2, three: 3 } : { one: number; two: number; three: number; }
 >one : number
@@= skipped -20, +20 lines =@@
 >sum : number
 >_.reduce([1, 2, 3], (memo, num) => memo + num, 0) : number
 >_.reduce : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
->_ : Underscore.Static
+>_ : Static
 >reduce : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
 >[1, 2, 3] : number[]
 >1 : 1
@@= skipped -31, +31 lines =@@
 >flat : number[]
 >_.reduceRight(list, (a, b) => a.concat(b), []) : number[]
 >_.reduceRight : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
->_ : Underscore.Static
+>_ : Static
 >reduceRight : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
 >list : number[][]
 >(a, b) => a.concat(b) : (a: number[], b: number[]) => number[]
@@= skipped -17, +17 lines =@@
 >even : number
 >_.find([1, 2, 3, 4, 5, 6], (num) => num % 2 == 0) : number
 >_.find : { <T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T; <T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T; }
->_ : Underscore.Static
+>_ : Static
 >find : { <T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T; <T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T; }
 >[1, 2, 3, 4, 5, 6] : number[]
 >1 : 1
@@= skipped -21, +21 lines =@@
 >evens : number[]
 >_.filter([1, 2, 3, 4, 5, 6], (num) => num % 2 == 0) : number[]
 >_.filter : { <T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T[]; }
->_ : Underscore.Static
+>_ : Static
 >filter : { <T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T[]; }
 >[1, 2, 3, 4, 5, 6] : number[]
 >1 : 1
@@= skipped -45, +45 lines =@@
 _.where(listOfPlays, { author: "Shakespeare", year: 1611 });
 >_.where(listOfPlays, { author: "Shakespeare", year: 1611 }) : { title: string; author: string; year: number; }[]
 >_.where : { <T>(list: T[], properties: Object): T[]; <T>(list: Dictionary<T>, properties: Object): T[]; }
->_ : Underscore.Static
+>_ : Static
 >where : { <T>(list: T[], properties: Object): T[]; <T>(list: Dictionary<T>, properties: Object): T[]; }
 >listOfPlays : { title: string; author: string; year: number; }[]
 >{ author: "Shakespeare", year: 1611 } : { author: string; year: number; }
@@= skipped -13, +13 lines =@@
 >odds : number[]
 >_.reject([1, 2, 3, 4, 5, 6], (num) => num % 2 == 0) : number[]
 >_.reject : { <T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T[]; }
->_ : Underscore.Static
+>_ : Static
 >reject : { <T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T[]; }
 >[1, 2, 3, 4, 5, 6] : number[]
 >1 : 1
@@= skipped -20, +20 lines =@@
 _.all([true, 1, null, 'yes'], _.identity);
 >_.all([true, 1, null, 'yes'], _.identity) : boolean
 >_.all : { <T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean; <T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean; }
->_ : Underscore.Static
+>_ : Static
 >all : { <T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean; <T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean; }
 >[true, 1, null, 'yes'] : (string | number | true)[]
 >true : true
 >1 : 1
 >'yes' : "yes"
 >_.identity : <T>(value: T) => T
->_ : Underscore.Static
+>_ : Static
 >identity : <T>(value: T) => T
 
 _.any([null, 0, 'yes', false]);
 >_.any([null, 0, 'yes', false]) : boolean
 >_.any : { <T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean; <T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean; }
->_ : Underscore.Static
+>_ : Static
 >any : { <T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean; <T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean; }
 >[null, 0, 'yes', false] : (string | number | false)[]
 >0 : 0
@@= skipped -23, +23 lines =@@
 _.contains([1, 2, 3], 3);
 >_.contains([1, 2, 3], 3) : boolean
 >_.contains : { <T>(list: T[], value: T): boolean; <T>(list: Dictionary<T>, value: T): boolean; }
->_ : Underscore.Static
+>_ : Static
 >contains : { <T>(list: T[], value: T): boolean; <T>(list: Dictionary<T>, value: T): boolean; }
 >[1, 2, 3] : number[]
 >1 : 1
@@= skipped -11, +11 lines =@@
 _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
 >_.invoke([[5, 1, 7], [3, 2, 1]], 'sort') : any[]
 >_.invoke : { (list: any[], methodName: string, ...args: any[]): any[]; (list: Dictionary<any>, methodName: string, ...args: any[]): any[]; }
->_ : Underscore.Static
+>_ : Static
 >invoke : { (list: any[], methodName: string, ...args: any[]): any[]; (list: Dictionary<any>, methodName: string, ...args: any[]): any[]; }
 >[[5, 1, 7], [3, 2, 1]] : number[][]
 >[5, 1, 7] : number[]
@@= skipped -35, +35 lines =@@
 _.pluck(stooges, 'name');
 >_.pluck(stooges, 'name') : any[]
 >_.pluck : { (list: any[], propertyName: string): any[]; (list: Dictionary<any>, propertyName: string): any[]; }
->_ : Underscore.Static
+>_ : Static
 >pluck : { (list: any[], propertyName: string): any[]; (list: Dictionary<any>, propertyName: string): any[]; }
 >stooges : { name: string; age: number; }[]
 >'name' : "name"
@@= skipped -8, +8 lines =@@
 _.max(stooges, (stooge) => stooge.age);
 >_.max(stooges, (stooge) => stooge.age) : { name: string; age: number; }
 >_.max : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): T; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): T; }
->_ : Underscore.Static
+>_ : Static
 >max : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): T; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): T; }
 >stooges : { name: string; age: number; }[]
 >(stooge) => stooge.age : (stooge: { name: string; age: number; }) => number
@@= skipped -21, +21 lines =@@
 _.min(numbers);
 >_.min(numbers) : number
 >_.min : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): T; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): T; }
->_ : Underscore.Static
+>_ : Static
 >min : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): T; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): T; }
 >numbers : number[]
 
 _.sortBy([1, 2, 3, 4, 5, 6], (num) => Math.sin(num));
 >_.sortBy([1, 2, 3, 4, 5, 6], (num) => Math.sin(num)) : number[]
 >_.sortBy : { <T>(list: T[], iterator: Iterator_<T, any>, context?: any): T[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, any>, context?: any): T[]; <T>(list: T[], propertyName: string): T[]; <T>(list: Dictionary<T>, propertyName: string): T[]; }
->_ : Underscore.Static
+>_ : Static
 >sortBy : { <T>(list: T[], iterator: Iterator_<T, any>, context?: any): T[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, any>, context?: any): T[]; <T>(list: T[], propertyName: string): T[]; <T>(list: Dictionary<T>, propertyName: string): T[]; }
 >[1, 2, 3, 4, 5, 6] : number[]
 >1 : 1
@@= skipped -29, +29 lines =@@
 _([1.3, 2.1, 2.4]).groupBy((e: number, i?: number, list?: number[]) => Math.floor(e));
 >_([1.3, 2.1, 2.4]).groupBy((e: number, i?: number, list?: number[]) => Math.floor(e)) : Dictionary<number[]>
 >_([1.3, 2.1, 2.4]).groupBy : { (iterator?: Iterator_<number, any>, context?: any): Dictionary<number[]>; (propertyName: string): Dictionary<number[]>; }
->_([1.3, 2.1, 2.4]) : Underscore.WrappedArray<number>
->_ : Underscore.Static
+>_([1.3, 2.1, 2.4]) : WrappedArray<number>
+>_ : Static
 >[1.3, 2.1, 2.4] : number[]
 >1.3 : 1.3
 >2.1 : 2.1
@@= skipped -20, +20 lines =@@
 _.groupBy([1.3, 2.1, 2.4], (num: number) => Math.floor(num));
 >_.groupBy([1.3, 2.1, 2.4], (num: number) => Math.floor(num)) : Dictionary<number[]>
 >_.groupBy : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>; <T>(list: T[], propertyName: string): Dictionary<T[]>; <T>(list: Dictionary<T>, propertyName: string): Dictionary<T[]>; }
->_ : Underscore.Static
+>_ : Static
 >groupBy : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>; <T>(list: T[], propertyName: string): Dictionary<T[]>; <T>(list: Dictionary<T>, propertyName: string): Dictionary<T[]>; }
 >[1.3, 2.1, 2.4] : number[]
 >1.3 : 1.3
@@= skipped -17, +17 lines =@@
 _.groupBy(['one', 'two', 'three'], 'length');
 >_.groupBy(['one', 'two', 'three'], 'length') : Dictionary<string[]>
 >_.groupBy : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>; <T>(list: T[], propertyName: string): Dictionary<T[]>; <T>(list: Dictionary<T>, propertyName: string): Dictionary<T[]>; }
->_ : Underscore.Static
+>_ : Static
 >groupBy : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>; <T>(list: T[], propertyName: string): Dictionary<T[]>; <T>(list: Dictionary<T>, propertyName: string): Dictionary<T[]>; }
 >['one', 'two', 'three'] : string[]
 >'one' : "one"
@@= skipped -11, +11 lines =@@
 _.countBy([1, 2, 3, 4, 5], (num) => num % 2 == 0 ? 'even' : 'odd');
 >_.countBy([1, 2, 3, 4, 5], (num) => num % 2 == 0 ? 'even' : 'odd') : Dictionary<number>
 >_.countBy : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): Dictionary<number>; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): Dictionary<number>; <T>(list: T[], propertyName: string): Dictionary<number>; <T>(list: Dictionary<T>, propertyName: string): Dictionary<number>; }
->_ : Underscore.Static
+>_ : Static
 >countBy : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): Dictionary<number>; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): Dictionary<number>; <T>(list: T[], propertyName: string): Dictionary<number>; <T>(list: Dictionary<T>, propertyName: string): Dictionary<number>; }
 >[1, 2, 3, 4, 5] : number[]
 >1 : 1
@@= skipped -22, +22 lines =@@
 _.shuffle([1, 2, 3, 4, 5, 6]);
 >_.shuffle([1, 2, 3, 4, 5, 6]) : number[]
 >_.shuffle : { <T>(list: T[]): T[]; <T>(list: Dictionary<T>): T[]; }
->_ : Underscore.Static
+>_ : Static
 >shuffle : { <T>(list: T[]): T[]; <T>(list: Dictionary<T>): T[]; }
 >[1, 2, 3, 4, 5, 6] : number[]
 >1 : 1
@@= skipped -15, +15 lines =@@
 _.size({ one: 1, two: 2, three: 3 });
 >_.size({ one: 1, two: 2, three: 3 }) : number
 >_.size : { <T>(list: T[]): number; <T>(list: Dictionary<T>): number; }
->_ : Underscore.Static
+>_ : Static
 >size : { <T>(list: T[]): number; <T>(list: Dictionary<T>): number; }
 >{ one: 1, two: 2, three: 3 } : { one: number; two: number; three: number; }
 >one : number
@@= skipped -15, +15 lines =@@
 _.first([5, 4, 3, 2, 1]);
 >_.first([5, 4, 3, 2, 1]) : number
 >_.first : { <T>(list: T[]): T; <T>(list: T[], count: number): T[]; }
->_ : Underscore.Static
+>_ : Static
 >first : { <T>(list: T[]): T; <T>(list: T[], count: number): T[]; }
 >[5, 4, 3, 2, 1] : number[]
 >5 : 5
@@= skipped -12, +12 lines =@@
 _.initial([5, 4, 3, 2, 1]);
 >_.initial([5, 4, 3, 2, 1]) : number
 >_.initial : { <T>(list: T[]): T; <T>(list: T[], count: number): T[]; }
->_ : Underscore.Static
+>_ : Static
 >initial : { <T>(list: T[]): T; <T>(list: T[], count: number): T[]; }
 >[5, 4, 3, 2, 1] : number[]
 >5 : 5
@@= skipped -12, +12 lines =@@
 _.last([5, 4, 3, 2, 1]);
 >_.last([5, 4, 3, 2, 1]) : number
 >_.last : { <T>(list: T[]): T; <T>(list: T[], count: number): T[]; }
->_ : Underscore.Static
+>_ : Static
 >last : { <T>(list: T[]): T; <T>(list: T[], count: number): T[]; }
 >[5, 4, 3, 2, 1] : number[]
 >5 : 5
@@= skipped -12, +12 lines =@@
 _.rest([5, 4, 3, 2, 1]);
 >_.rest([5, 4, 3, 2, 1]) : number[]
 >_.rest : <T>(list: T[], index?: number) => T[]
->_ : Underscore.Static
+>_ : Static
 >rest : <T>(list: T[], index?: number) => T[]
 >[5, 4, 3, 2, 1] : number[]
 >5 : 5
@@= skipped -12, +12 lines =@@
 _.compact([0, 1, false, 2, '', 3]);
 >_.compact([0, 1, false, 2, '', 3]) : (string | number | boolean)[]
 >_.compact : <T>(list: T[]) => T[]
->_ : Underscore.Static
+>_ : Static
 >compact : <T>(list: T[]) => T[]
 >[0, 1, false, 2, '', 3] : (string | number | false)[]
 >0 : 0
@@= skipped -13, +13 lines =@@
 _.flatten([1, 2, 3, 4]);
 >_.flatten([1, 2, 3, 4]) : unknown[]
 >_.flatten : { <T>(list: T[][]): T[]; <T>(array: any[], shallow?: boolean): T[]; }
->_ : Underscore.Static
+>_ : Static
 >flatten : { <T>(list: T[][]): T[]; <T>(array: any[], shallow?: boolean): T[]; }
 >[1, 2, 3, 4] : number[]
 >1 : 1
@@= skipped -11, +11 lines =@@
 _.flatten([1, [2]]);
 >_.flatten([1, [2]]) : unknown[]
 >_.flatten : { <T>(list: T[][]): T[]; <T>(array: any[], shallow?: boolean): T[]; }
->_ : Underscore.Static
+>_ : Static
 >flatten : { <T>(list: T[][]): T[]; <T>(array: any[], shallow?: boolean): T[]; }
 >[1, [2]] : (number | number[])[]
 >1 : 1
@@= skipped -11, +11 lines =@@
 _.flatten([1, [2], [3, [[4]]]]);
 >_.flatten([1, [2], [3, [[4]]]]) : unknown[]
 >_.flatten : { <T>(list: T[][]): T[]; <T>(array: any[], shallow?: boolean): T[]; }
->_ : Underscore.Static
+>_ : Static
 >flatten : { <T>(list: T[][]): T[]; <T>(array: any[], shallow?: boolean): T[]; }
 >[1, [2], [3, [[4]]]] : (number | (number | number[][])[])[]
 >1 : 1
@@= skipped -15, +15 lines =@@
 _.flatten([1, [2], [3, [[4]]]], true);
 >_.flatten([1, [2], [3, [[4]]]], true) : unknown[]
 >_.flatten : { <T>(list: T[][]): T[]; <T>(array: any[], shallow?: boolean): T[]; }
->_ : Underscore.Static
+>_ : Static
 >flatten : { <T>(list: T[][]): T[]; <T>(array: any[], shallow?: boolean): T[]; }
 >[1, [2], [3, [[4]]]] : (number | (number | number[][])[])[]
 >1 : 1
@@= skipped -16, +16 lines =@@
 _.without([1, 2, 1, 0, 3, 1, 4], 0, 1);
 >_.without([1, 2, 1, 0, 3, 1, 4], 0, 1) : number[]
 >_.without : <T>(list: T[], ...values: T[]) => T[]
->_ : Underscore.Static
+>_ : Static
 >without : <T>(list: T[], ...values: T[]) => T[]
 >[1, 2, 1, 0, 3, 1, 4] : number[]
 >1 : 1
@@= skipped -16, +16 lines =@@
 _.union([1, 2, 3], [101, 2, 1, 10], [2, 1]);
 >_.union([1, 2, 3], [101, 2, 1, 10], [2, 1]) : number[]
 >_.union : <T>(...arrays: T[][]) => T[]
->_ : Underscore.Static
+>_ : Static
 >union : <T>(...arrays: T[][]) => T[]
 >[1, 2, 3] : number[]
 >1 : 1
@@= skipped -18, +18 lines =@@
 _.intersection([1, 2, 3], [101, 2, 1, 10], [2, 1]);
 >_.intersection([1, 2, 3], [101, 2, 1, 10], [2, 1]) : number[]
 >_.intersection : <T>(...arrays: T[][]) => T[]
->_ : Underscore.Static
+>_ : Static
 >intersection : <T>(...arrays: T[][]) => T[]
 >[1, 2, 3] : number[]
 >1 : 1
@@= skipped -18, +18 lines =@@
 _.difference([1, 2, 3, 4, 5], [5, 2, 10]);
 >_.difference([1, 2, 3, 4, 5], [5, 2, 10]) : number[]
 >_.difference : <T>(list: T[], ...others: T[][]) => T[]
->_ : Underscore.Static
+>_ : Static
 >difference : <T>(list: T[], ...others: T[][]) => T[]
 >[1, 2, 3, 4, 5] : number[]
 >1 : 1
@@= skipped -16, +16 lines =@@
 _.uniq([1, 2, 1, 3, 1, 4]);
 >_.uniq([1, 2, 1, 3, 1, 4]) : number[]
 >_.uniq : { <T>(list: T[], isSorted?: boolean): T[]; <T, U>(list: T[], isSorted: boolean, iterator: Iterator_<T, U>, context?: any): U[]; }
->_ : Underscore.Static
+>_ : Static
 >uniq : { <T>(list: T[], isSorted?: boolean): T[]; <T, U>(list: T[], isSorted: boolean, iterator: Iterator_<T, U>, context?: any): U[]; }
 >[1, 2, 1, 3, 1, 4] : number[]
 >1 : 1
@@= skipped -13, +13 lines =@@
 _.zip(['moe', 'larry', 'curly'], [30, 40, 50], [true, false, false]);
 >_.zip(['moe', 'larry', 'curly'], [30, 40, 50], [true, false, false]) : Tuple3<string, number, boolean>[]
 >_.zip : { <T0, T1>(a0: T0[], a1: T1[]): Tuple2<T0, T1>[]; <T0, T1, T2>(a0: T0[], a1: T1[], a2: T2[]): Tuple3<T0, T1, T2>[]; <T0, T1, T2, T3>(a0: T0[], a1: T1[], a2: T2[], a3: T3[]): Tuple4<T0, T1, T2, T3>[]; (...arrays: any[][]): any[][]; }
->_ : Underscore.Static
+>_ : Static
 >zip : { <T0, T1>(a0: T0[], a1: T1[]): Tuple2<T0, T1>[]; <T0, T1, T2>(a0: T0[], a1: T1[], a2: T2[]): Tuple3<T0, T1, T2>[]; <T0, T1, T2, T3>(a0: T0[], a1: T1[], a2: T2[], a3: T3[]): Tuple4<T0, T1, T2, T3>[]; (...arrays: any[][]): any[][]; }
 >['moe', 'larry', 'curly'] : string[]
 >'moe' : "moe"
@@= skipped -18, +18 lines =@@
 _.object(['moe', 'larry', 'curly'], [30, 40, 50]);
 >_.object(['moe', 'larry', 'curly'], [30, 40, 50]) : any
 >_.object : { (list: any[][]): any; (keys: string[], values: any[]): any; }
->_ : Underscore.Static
+>_ : Static
 >object : { (list: any[][]): any; (keys: string[], values: any[]): any; }
 >['moe', 'larry', 'curly'] : string[]
 >'moe' : "moe"
@@= skipped -14, +14 lines =@@
 _.object([['moe', 30], ['larry', 40], ['curly', 50]]);
 >_.object([['moe', 30], ['larry', 40], ['curly', 50]]) : any
 >_.object : { (list: any[][]): any; (keys: string[], values: any[]): any; }
->_ : Underscore.Static
+>_ : Static
 >object : { (list: any[][]): any; (keys: string[], values: any[]): any; }
 >[['moe', 30], ['larry', 40], ['curly', 50]] : (string | number)[][]
 >['moe', 30] : (string | number)[]
@@= skipped -16, +16 lines =@@
 _.indexOf([1, 2, 3], 2);
 >_.indexOf([1, 2, 3], 2) : number
 >_.indexOf : <T>(list: T[], value: T, isSorted?: boolean) => number
->_ : Underscore.Static
+>_ : Static
 >indexOf : <T>(list: T[], value: T, isSorted?: boolean) => number
 >[1, 2, 3] : number[]
 >1 : 1
@@= skipped -11, +11 lines =@@
 _.lastIndexOf([1, 2, 3, 1, 2, 3], 2);
 >_.lastIndexOf([1, 2, 3, 1, 2, 3], 2) : number
 >_.lastIndexOf : <T>(list: T[], value: T, fromIndex?: number) => number
->_ : Underscore.Static
+>_ : Static
 >lastIndexOf : <T>(list: T[], value: T, fromIndex?: number) => number
 >[1, 2, 3, 1, 2, 3] : number[]
 >1 : 1
@@= skipped -14, +14 lines =@@
 _.sortedIndex([10, 20, 30, 40, 50], 35);
 >_.sortedIndex([10, 20, 30, 40, 50], 35) : number
 >_.sortedIndex : { <T>(list: T[], obj: T, propertyName: string): number; <T>(list: T[], obj: T, iterator?: Iterator_<T, any>, context?: any): number; }
->_ : Underscore.Static
+>_ : Static
 >sortedIndex : { <T>(list: T[], obj: T, propertyName: string): number; <T>(list: T[], obj: T, iterator?: Iterator_<T, any>, context?: any): number; }
 >[10, 20, 30, 40, 50] : number[]
 >10 : 10
@@= skipped -13, +13 lines =@@
 _.range(10);
 >_.range(10) : number[]
 >_.range : { (stop: number): number[]; (start: number, stop: number, step?: number): number[]; }
->_ : Underscore.Static
+>_ : Static
 >range : { (stop: number): number[]; (start: number, stop: number, step?: number): number[]; }
 >10 : 10
 
 _.range(1, 11);
 >_.range(1, 11) : number[]
 >_.range : { (stop: number): number[]; (start: number, stop: number, step?: number): number[]; }
->_ : Underscore.Static
+>_ : Static
 >range : { (stop: number): number[]; (start: number, stop: number, step?: number): number[]; }
 >1 : 1
 >11 : 11
@@= skipped -15, +15 lines =@@
 _.range(0, 30, 5);
 >_.range(0, 30, 5) : number[]
 >_.range : { (stop: number): number[]; (start: number, stop: number, step?: number): number[]; }
->_ : Underscore.Static
+>_ : Static
 >range : { (stop: number): number[]; (start: number, stop: number, step?: number): number[]; }
 >0 : 0
 >30 : 30
@@= skipped -9, +9 lines =@@
 _.range(0, 30, 5);
 >_.range(0, 30, 5) : number[]
 >_.range : { (stop: number): number[]; (start: number, stop: number, step?: number): number[]; }
->_ : Underscore.Static
+>_ : Static
 >range : { (stop: number): number[]; (start: number, stop: number, step?: number): number[]; }
 >0 : 0
 >30 : 30
@@= skipped -9, +9 lines =@@
 _.range(0);
 >_.range(0) : number[]
 >_.range : { (stop: number): number[]; (start: number, stop: number, step?: number): number[]; }
->_ : Underscore.Static
+>_ : Static
 >range : { (stop: number): number[]; (start: number, stop: number, step?: number): number[]; }
 >0 : 0
 
@@= skipped -24, +24 lines =@@
 >func2 : Function
 >_.bind(func, { name: 'moe' }, 'hi') : Function
 >_.bind : { <T extends Function>(func: T, object: any): T; (func: Function, object: any, ...args: any[]): Function; }
->_ : Underscore.Static
+>_ : Static
 >bind : { <T extends Function>(func: T, object: any): T; (func: Function, object: any, ...args: any[]): Function; }
 >func : (greeting: any) => string
 >{ name: 'moe' } : { name: string; }
@@= skipped -46, +46 lines =@@
 _.bindAll(buttonView);
 >_.bindAll(buttonView) : { label: string; onClick: () => void; onHover: () => void; }
 >_.bindAll : <T>(object: T, ...methodNames: string[]) => T
->_ : Underscore.Static
+>_ : Static
 >bindAll : <T>(object: T, ...methodNames: string[]) => T
 >buttonView : { label: string; onClick: () => void; onHover: () => void; }
 
@@= skipped -20, +20 lines =@@
 >fibonacci : (n: any) => any
 >_.memoize(function (n) {    return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2);}) : (n: any) => any
 >_.memoize : <T extends Function>(func: T, hashFunction?: Function) => T
->_ : Underscore.Static
+>_ : Static
 >memoize : <T extends Function>(func: T, hashFunction?: Function) => T
 >function (n) {    return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2);} : (n: any) => any
 >n : any
@@= skipped -29, +29 lines =@@
 >log : (message?: string, ...rest: string[]) => void
 >_.bind((message?: string, ...rest: string[]) => { }, Date) : (message?: string, ...rest: string[]) => void
 >_.bind : { <T extends Function>(func: T, object: any): T; (func: Function, object: any, ...args: any[]): Function; }
->_ : Underscore.Static
+>_ : Static
 >bind : { <T extends Function>(func: T, object: any): T; (func: Function, object: any, ...args: any[]): Function; }
 >(message?: string, ...rest: string[]) => { } : (message?: string, ...rest: string[]) => void
 >message : string
@@= skipped -10, +10 lines =@@
 _.delay(log, 1000, 'logged later');
 >_.delay(log, 1000, 'logged later') : number
 >_.delay : (func: Function, wait: number, ...args: any[]) => number
->_ : Underscore.Static
+>_ : Static
 >delay : (func: Function, wait: number, ...args: any[]) => number
 >log : (message?: string, ...rest: string[]) => void
 >1000 : 1000
@@= skipped -9, +9 lines =@@
 _.defer(function () { alert('deferred'); });
 >_.defer(function () { alert('deferred'); }) : number
 >_.defer : (func: Function, ...args: any[]) => number
->_ : Underscore.Static
+>_ : Static
 >defer : (func: Function, ...args: any[]) => number
 >function () { alert('deferred'); } : () => void
 >alert('deferred') : void
@@= skipped -18, +18 lines =@@
 >throttled : () => void
 >_.throttle(updatePosition, 100) : () => void
 >_.throttle : <T extends Function>(func: T, wait: number) => T
->_ : Underscore.Static
+>_ : Static
 >throttle : <T extends Function>(func: T, wait: number) => T
 >updatePosition : () => void
 >100 : 100
@@= skipped -24, +24 lines =@@
 >lazyLayout : () => void
 >_.debounce(calculateLayout, 300) : () => void
 >_.debounce : <T extends Function>(func: T, wait: number, immediate?: boolean) => T
->_ : Underscore.Static
+>_ : Static
 >debounce : <T extends Function>(func: T, wait: number, immediate?: boolean) => T
 >calculateLayout : () => void
 >300 : 300
@@= skipped -24, +24 lines =@@
 >initialize : () => void
 >_.once(createApplication) : () => void
 >_.once : <T extends Function>(func: T) => T
->_ : Underscore.Static
+>_ : Static
 >once : <T extends Function>(func: T) => T
 >createApplication : () => void
 
@@= skipped -26, +26 lines =@@
 >renderNotes : () => void
 >_.after(notes.length, render) : () => void
 >_.after : <T extends Function>(count: number, func: T) => T
->_ : Underscore.Static
+>_ : Static
 >after : <T extends Function>(count: number, func: T) => T
 >notes.length : number
 >notes : any[]
@@= skipped -10, +10 lines =@@
 _.each(notes, (note) => note.asyncSave({ success: renderNotes }));
 >_.each(notes, (note) => note.asyncSave({ success: renderNotes })) : void
 >_.each : { <T>(list: T[], iterator: Iterator_<T, void>, context?: any): void; <T>(list: Dictionary<T>, iterator: Iterator_<T, void>, context?: any): void; }
->_ : Underscore.Static
+>_ : Static
 >each : { <T>(list: T[], iterator: Iterator_<T, void>, context?: any): void; <T>(list: Dictionary<T>, iterator: Iterator_<T, void>, context?: any): void; }
 >notes : any[]
 >(note) => note.asyncSave({ success: renderNotes }) : (note: any) => any
@@= skipped -26, +26 lines =@@
 >hello : (name: any) => string
 >_.wrap(hello, (func, arg) => { return "before, " + func(arg) + ", after"; }) : (name: any) => string
 >_.wrap : <T extends Function>(func: T, wrapper: (func: T, ...args: any[]) => any) => T
->_ : Underscore.Static
+>_ : Static
 >wrap : <T extends Function>(func: T, wrapper: (func: T, ...args: any[]) => any) => T
 >hello : (name: any) => string
 >(func, arg) => { return "before, " + func(arg) + ", after"; } : (func: (name: any) => string, arg: any) => string
@@= skipped -39, +39 lines =@@
 >welcome : Function
 >_.compose(exclaim, greet) : Function
 >_.compose : (...funcs: Function[]) => Function
->_ : Underscore.Static
+>_ : Static
 >compose : (...funcs: Function[]) => Function
 >exclaim : (statement: any) => string
 >greet : (name: any) => string
@@= skipped -15, +15 lines =@@
 _.keys({ one: 1, two: 2, three: 3 });
 >_.keys({ one: 1, two: 2, three: 3 }) : string[]
 >_.keys : (object: any) => string[]
->_ : Underscore.Static
+>_ : Static
 >keys : (object: any) => string[]
 >{ one: 1, two: 2, three: 3 } : { one: number; two: number; three: number; }
 >one : number
@@= skipped -13, +13 lines =@@
 _.values({ one: 1, two: 2, three: 3 });
 >_.values({ one: 1, two: 2, three: 3 }) : any[]
 >_.values : (object: any) => any[]
->_ : Underscore.Static
+>_ : Static
 >values : (object: any) => any[]
 >{ one: 1, two: 2, three: 3 } : { one: number; two: number; three: number; }
 >one : number
@@= skipped -13, +13 lines =@@
 _.pairs({ one: 1, two: 2, three: 3 });
 >_.pairs({ one: 1, two: 2, three: 3 }) : any[][]
 >_.pairs : (object: any) => any[][]
->_ : Underscore.Static
+>_ : Static
 >pairs : (object: any) => any[][]
 >{ one: 1, two: 2, three: 3 } : { one: number; two: number; three: number; }
 >one : number
@@= skipped -13, +13 lines =@@
 _.invert({ Moe: "Moses", Larry: "Louis", Curly: "Jerome" });
 >_.invert({ Moe: "Moses", Larry: "Louis", Curly: "Jerome" }) : any
 >_.invert : (object: any) => any
->_ : Underscore.Static
+>_ : Static
 >invert : (object: any) => any
 >{ Moe: "Moses", Larry: "Louis", Curly: "Jerome" } : { Moe: string; Larry: string; Curly: string; }
 >Moe : string
@@= skipped -13, +13 lines =@@
 _.functions(_);
 >_.functions(_) : string[]
 >_.functions : (object: any) => string[]
->_ : Underscore.Static
+>_ : Static
 >functions : (object: any) => string[]
->_ : Underscore.Static
+>_ : Static
 
 _.extend({ name: 'moe' }, { age: 50 });
 >_.extend({ name: 'moe' }, { age: 50 }) : { name: string; }
 >_.extend : <T>(destination: T, ...sources: any[]) => T
->_ : Underscore.Static
+>_ : Static
 >extend : <T>(destination: T, ...sources: any[]) => T
 >{ name: 'moe' } : { name: string; }
 >name : string
@@= skipped -19, +19 lines =@@
 _.pick({ name: 'moe', age: 50, userid: 'moe1' }, 'name', 'age');
 >_.pick({ name: 'moe', age: 50, userid: 'moe1' }, 'name', 'age') : { name: string; age: number; userid: string; }
 >_.pick : <T>(object: T, ...keys: string[]) => T
->_ : Underscore.Static
+>_ : Static
 >pick : <T>(object: T, ...keys: string[]) => T
 >{ name: 'moe', age: 50, userid: 'moe1' } : { name: string; age: number; userid: string; }
 >name : string
@@= skipped -15, +15 lines =@@
 _.omit({ name: 'moe', age: 50, userid: 'moe1' }, 'userid');
 >_.omit({ name: 'moe', age: 50, userid: 'moe1' }, 'userid') : { name: string; age: number; userid: string; }
 >_.omit : <T>(object: T, ...keys: string[]) => T
->_ : Underscore.Static
+>_ : Static
 >omit : <T>(object: T, ...keys: string[]) => T
 >{ name: 'moe', age: 50, userid: 'moe1' } : { name: string; age: number; userid: string; }
 >name : string
@@= skipped -20, +20 lines =@@
 _.defaults(iceCream, { flavor: "vanilla", sprinkles: "lots" });
 >_.defaults(iceCream, { flavor: "vanilla", sprinkles: "lots" }) : { flavor: string; }
 >_.defaults : <T>(object: T, ...defaults: any[]) => T
->_ : Underscore.Static
+>_ : Static
 >defaults : <T>(object: T, ...defaults: any[]) => T
 >iceCream : { flavor: string; }
 >{ flavor: "vanilla", sprinkles: "lots" } : { flavor: string; sprinkles: string; }
@@= skipped -12, +12 lines =@@
 _.clone({ name: 'moe' });
 >_.clone({ name: 'moe' }) : { name: string; }
 >_.clone : <T>(object: T) => T
->_ : Underscore.Static
+>_ : Static
 >clone : <T>(object: T) => T
 >{ name: 'moe' } : { name: string; }
 >name : string
@@= skipped -9, +9 lines =@@
 _.chain([1, 2, 3, 200])
 >_.chain([1, 2, 3, 200])    .filter(function (num) { return num % 2 == 0; })    .tap(<any>alert)    .map(function (num) { return num * num })    .value() : number[]
 >_.chain([1, 2, 3, 200])    .filter(function (num) { return num % 2 == 0; })    .tap(<any>alert)    .map(function (num) { return num * num })    .value : () => number[]
->_.chain([1, 2, 3, 200])    .filter(function (num) { return num % 2 == 0; })    .tap(<any>alert)    .map(function (num) { return num * num }) : Underscore.ChainedArray<number>
->_.chain([1, 2, 3, 200])    .filter(function (num) { return num % 2 == 0; })    .tap(<any>alert)    .map : <U>(iterator: Iterator_<number, U>, context?: any) => Underscore.ChainedArray<U>
->_.chain([1, 2, 3, 200])    .filter(function (num) { return num % 2 == 0; })    .tap(<any>alert) : Underscore.ChainedArray<number>
->_.chain([1, 2, 3, 200])    .filter(function (num) { return num % 2 == 0; })    .tap : (interceptor: (object: number[]) => void) => Underscore.ChainedArray<number>
->_.chain([1, 2, 3, 200])    .filter(function (num) { return num % 2 == 0; }) : Underscore.ChainedArray<number>
->_.chain([1, 2, 3, 200])    .filter : (iterator: Iterator_<number, boolean>, context?: any) => Underscore.ChainedArray<number>
->_.chain([1, 2, 3, 200]) : Underscore.ChainedArray<number>
->_.chain : { <T>(list: T[]): Underscore.ChainedArray<T>; <T>(list: Dictionary<T>): Underscore.ChainedDictionary<T>; <T>(obj: T): Underscore.ChainedObject<T>; }
->_ : Underscore.Static
->chain : { <T>(list: T[]): Underscore.ChainedArray<T>; <T>(list: Dictionary<T>): Underscore.ChainedDictionary<T>; <T>(obj: T): Underscore.ChainedObject<T>; }
+>_.chain([1, 2, 3, 200])    .filter(function (num) { return num % 2 == 0; })    .tap(<any>alert)    .map(function (num) { return num * num }) : ChainedArray<number>
+>_.chain([1, 2, 3, 200])    .filter(function (num) { return num % 2 == 0; })    .tap(<any>alert)    .map : <U>(iterator: Iterator_<number, U>, context?: any) => ChainedArray<U>
+>_.chain([1, 2, 3, 200])    .filter(function (num) { return num % 2 == 0; })    .tap(<any>alert) : ChainedArray<number>
+>_.chain([1, 2, 3, 200])    .filter(function (num) { return num % 2 == 0; })    .tap : (interceptor: (object: number[]) => void) => ChainedArray<number>
+>_.chain([1, 2, 3, 200])    .filter(function (num) { return num % 2 == 0; }) : ChainedArray<number>
+>_.chain([1, 2, 3, 200])    .filter : (iterator: Iterator_<number, boolean>, context?: any) => ChainedArray<number>
+>_.chain([1, 2, 3, 200]) : ChainedArray<number>
+>_.chain : { <T>(list: T[]): ChainedArray<T>; <T>(list: Dictionary<T>): ChainedDictionary<T>; <T>(obj: T): ChainedObject<T>; }
+>_ : Static
+>chain : { <T>(list: T[]): ChainedArray<T>; <T>(list: Dictionary<T>): ChainedDictionary<T>; <T>(obj: T): ChainedObject<T>; }
 >[1, 2, 3, 200] : number[]
 >1 : 1
 >2 : 2
@@= skipped -17, +17 lines =@@
 >200 : 200
 
     .filter(function (num) { return num % 2 == 0; })
->filter : (iterator: Iterator_<number, boolean>, context?: any) => Underscore.ChainedArray<number>
+>filter : (iterator: Iterator_<number, boolean>, context?: any) => ChainedArray<number>
 >function (num) { return num % 2 == 0; } : (num: number) => boolean
 >num : number
 >num % 2 == 0 : boolean
@@= skipped -10, +10 lines =@@
 >0 : 0
 
     .tap(<any>alert)
->tap : (interceptor: (object: number[]) => void) => Underscore.ChainedArray<number>
+>tap : (interceptor: (object: number[]) => void) => ChainedArray<number>
 ><any>alert : any
 >alert : { (message?: any): void; (x: string): void; }
 
     .map(function (num) { return num * num })
->map : <U>(iterator: Iterator_<number, U>, context?: any) => Underscore.ChainedArray<U>
+>map : <U>(iterator: Iterator_<number, U>, context?: any) => ChainedArray<U>
 >function (num) { return num * num } : (num: number) => number
 >num : number
 >num * num : number
@@= skipped -18, +18 lines =@@
 _.has({ a: 1, b: 2, c: 3 }, "b");
 >_.has({ a: 1, b: 2, c: 3 }, "b") : boolean
 >_.has : (object: any, key: string) => boolean
->_ : Underscore.Static
+>_ : Static
 >has : (object: any, key: string) => boolean
 >{ a: 1, b: 2, c: 3 } : { a: number; b: number; c: number; }
 >a : number
@@= skipped -41, +41 lines =@@
 _.isEqual(moe, clone);
 >_.isEqual(moe, clone) : boolean
 >_.isEqual : <T>(object: T, other: T) => boolean
->_ : Underscore.Static
+>_ : Static
 >isEqual : <T>(object: T, other: T) => boolean
 >moe : { name: string; luckyNumbers: number[]; }
 >clone : { name: string; luckyNumbers: number[]; }
@@= skipped -8, +8 lines =@@
 _.isEmpty([1, 2, 3]);
 >_.isEmpty([1, 2, 3]) : boolean
 >_.isEmpty : (object: any) => boolean
->_ : Underscore.Static
+>_ : Static
 >isEmpty : (object: any) => boolean
 >[1, 2, 3] : number[]
 >1 : 1
@@= skipped -10, +10 lines =@@
 _.isEmpty({});
 >_.isEmpty({}) : boolean
 >_.isEmpty : (object: any) => boolean
->_ : Underscore.Static
+>_ : Static
 >isEmpty : (object: any) => boolean
 >{} : {}
 
 _.isElement($('body')[0]);
 >_.isElement($('body')[0]) : boolean
 >_.isElement : (object: any) => boolean
->_ : Underscore.Static
+>_ : Static
 >isElement : (object: any) => boolean
 >$('body')[0] : any
 >$('body') : any
@@= skipped -21, +21 lines =@@
 >function () { return _.isArray(arguments); } : () => boolean
 >_.isArray(arguments) : boolean
 >_.isArray : (object: any) => boolean
->_ : Underscore.Static
+>_ : Static
 >isArray : (object: any) => boolean
 >arguments : IArguments
 
 _.isArray([1, 2, 3]);
 >_.isArray([1, 2, 3]) : boolean
 >_.isArray : (object: any) => boolean
->_ : Underscore.Static
+>_ : Static
 >isArray : (object: any) => boolean
 >[1, 2, 3] : number[]
 >1 : 1
@@= skipped -17, +17 lines =@@
 _.isObject({});
 >_.isObject({}) : boolean
 >_.isObject : (value: any) => boolean
->_ : Underscore.Static
+>_ : Static
 >isObject : (value: any) => boolean
 >{} : {}
 
 _.isObject(1);
 >_.isObject(1) : boolean
 >_.isObject : (value: any) => boolean
->_ : Underscore.Static
+>_ : Static
 >isObject : (value: any) => boolean
 >1 : 1
 
@@= skipped -16, +16 lines =@@
 _.isArguments([1, 2, 3]);
 >_.isArguments([1, 2, 3]) : boolean
 >_.isArguments : (object: any) => boolean
->_ : Underscore.Static
+>_ : Static
 >isArguments : (object: any) => boolean
 >[1, 2, 3] : number[]
 >1 : 1
@@= skipped -10, +10 lines =@@
 _.isFunction(alert);
 >_.isFunction(alert) : boolean
 >_.isFunction : (object: any) => boolean
->_ : Underscore.Static
+>_ : Static
 >isFunction : (object: any) => boolean
 >alert : { (message?: any): void; (x: string): void; }
 
 _.isString("moe");
 >_.isString("moe") : boolean
 >_.isString : (object: any) => boolean
->_ : Underscore.Static
+>_ : Static
 >isString : (object: any) => boolean
 >"moe" : "moe"
 
 _.isNumber(8.4 * 5);
 >_.isNumber(8.4 * 5) : boolean
 >_.isNumber : (object: any) => boolean
->_ : Underscore.Static
+>_ : Static
 >isNumber : (object: any) => boolean
 >8.4 * 5 : number
 >8.4 : 8.4
@@= skipped -23, +23 lines =@@
 _.isFinite(-101);
 >_.isFinite(-101) : boolean
 >_.isFinite : (object: any) => boolean
->_ : Underscore.Static
+>_ : Static
 >isFinite : (object: any) => boolean
 >-101 : -101
 >101 : 101
@@= skipped -8, +8 lines =@@
 _.isFinite(-Infinity);
 >_.isFinite(-Infinity) : boolean
 >_.isFinite : (object: any) => boolean
->_ : Underscore.Static
+>_ : Static
 >isFinite : (object: any) => boolean
 >-Infinity : number
 >Infinity : number
@@= skipped -8, +8 lines =@@
 _.isBoolean(null);
 >_.isBoolean(null) : boolean
 >_.isBoolean : (object: any) => boolean
->_ : Underscore.Static
+>_ : Static
 >isBoolean : (object: any) => boolean
 
 _.isDate(new Date());
 >_.isDate(new Date()) : boolean
 >_.isDate : (object: any) => boolean
->_ : Underscore.Static
+>_ : Static
 >isDate : (object: any) => boolean
 >new Date() : Date
 >Date : DateConstructor
@@= skipped -14, +14 lines =@@
 _.isRegExp(/moe/);
 >_.isRegExp(/moe/) : boolean
 >_.isRegExp : (object: any) => boolean
->_ : Underscore.Static
+>_ : Static
 >isRegExp : (object: any) => boolean
 >/moe/ : RegExp
 
 _.isNaN(NaN);
 >_.isNaN(NaN) : boolean
 >_.isNaN : (object: any) => boolean
->_ : Underscore.Static
+>_ : Static
 >isNaN : (object: any) => boolean
 >NaN : number
 
@@= skipped -19, +19 lines =@@
 _.isNaN(undefined);
 >_.isNaN(undefined) : boolean
 >_.isNaN : (object: any) => boolean
->_ : Underscore.Static
+>_ : Static
 >isNaN : (object: any) => boolean
 >undefined : undefined
 
 _.isNull(null);
 >_.isNull(null) : boolean
 >_.isNull : (object: any) => boolean
->_ : Underscore.Static
+>_ : Static
 >isNull : (object: any) => boolean
 
 _.isNull(undefined);
 >_.isNull(undefined) : boolean
 >_.isNull : (object: any) => boolean
->_ : Underscore.Static
+>_ : Static
 >isNull : (object: any) => boolean
 >undefined : undefined
 
 _.isUndefined((<any>null).missingVariable);
 >_.isUndefined((<any>null).missingVariable) : boolean
 >_.isUndefined : (value: any) => boolean
->_ : Underscore.Static
+>_ : Static
 >isUndefined : (value: any) => boolean
 >(<any>null).missingVariable : any
 >(<any>null) : any
@@= skipped -30, +30 lines =@@
 ///////////////////////////////////////////////////////////////////////////////////////
 
 var underscore = _.noConflict();
->underscore : Underscore.Static
->_.noConflict() : Underscore.Static
->_.noConflict : () => Underscore.Static
->_ : Underscore.Static
->noConflict : () => Underscore.Static
+>underscore : Static
+>_.noConflict() : Static
+>_.noConflict : () => Static
+>_ : Static
+>noConflict : () => Static
 
 var moe2 = { name: 'moe' };
 >moe2 : { name: string; }
@@= skipped -17, +17 lines =@@
 >moe2 : { name: string; }
 >_.identity(moe) : { name: string; luckyNumbers: number[]; }
 >_.identity : <T>(value: T) => T
->_ : Underscore.Static
+>_ : Static
 >identity : <T>(value: T) => T
 >moe : { name: string; luckyNumbers: number[]; }
 
@@= skipped -10, +10 lines =@@
 _.times(3, function (n) { genie.grantWishNumber(n); });
 >_.times(3, function (n) { genie.grantWishNumber(n); }) : void[]
 >_.times : <U>(n: number, iterator: Iterator_<number, U>, context?: any) => U[]
->_ : Underscore.Static
+>_ : Static
 >times : <U>(n: number, iterator: Iterator_<number, U>, context?: any) => U[]
 >3 : 3
 >function (n) { genie.grantWishNumber(n); } : (n: number) => void
@@= skipped -14, +14 lines =@@
 _.random(0, 100);
 >_.random(0, 100) : number
 >_.random : { (max: number): number; (min: number, max: number): number; }
->_ : Underscore.Static
+>_ : Static
 >random : { (max: number): number; (min: number, max: number): number; }
 >0 : 0
 >100 : 100
@@= skipped -8, +8 lines =@@
 _.mixin({
 >_.mixin({    capitalize: function (string) {        return string.charAt(0).toUpperCase() + string.substring(1).toLowerCase();    }}) : void
 >_.mixin : (object: any) => void
->_ : Underscore.Static
+>_ : Static
 >mixin : (object: any) => void
 >{    capitalize: function (string) {        return string.charAt(0).toUpperCase() + string.substring(1).toLowerCase();    }} : { capitalize: (string: any) => any; }
 
@@= skipped -34, +34 lines =@@
 >(<any>_("fabio")).capitalize : any
 >(<any>_("fabio")) : any
 ><any>_("fabio") : any
->_("fabio") : Underscore.WrappedObject<string>
->_ : Underscore.Static
+>_("fabio") : WrappedObject<string>
+>_ : Static
 >"fabio" : "fabio"
 >capitalize : any
 
 _.uniqueId('contact_');
 >_.uniqueId('contact_') : string
 >_.uniqueId : { (): number; (prefix: string): string; }
->_ : Underscore.Static
+>_ : Static
 >uniqueId : { (): number; (prefix: string): string; }
 >'contact_' : "contact_"
 
 _.escape('Curly, Larry & Moe');
 >_.escape('Curly, Larry & Moe') : string
 >_.escape : (s: string) => string
->_ : Underscore.Static
+>_ : Static
 >escape : (s: string) => string
 >'Curly, Larry & Moe' : "Curly, Larry & Moe"
 
@@= skipped -31, +31 lines =@@
 _.result(object, 'cheese');
 >_.result(object, 'cheese') : any
 >_.result : (object: any, property: string) => any
->_ : Underscore.Static
+>_ : Static
 >result : (object: any, property: string) => any
 >object : { cheese: string; stuff: () => string; }
 >'cheese' : "cheese"
@@= skipped -8, +8 lines =@@
 _.result(object, 'stuff');
 >_.result(object, 'stuff') : any
 >_.result : (object: any, property: string) => any
->_ : Underscore.Static
+>_ : Static
 >result : (object: any, property: string) => any
 >object : { cheese: string; stuff: () => string; }
 >'stuff' : "stuff"
@@= skipped -8, +8 lines =@@
 var compiled = _.template("hello: <%= name %>");
 >compiled : (data: any) => string
 >_.template("hello: <%= name %>") : (data: any) => string
->_.template : { (templateString: string): (data: any) => string; (templateString: string, data: any, settings?: Underscore.TemplateSettings): string; }
->_ : Underscore.Static
->template : { (templateString: string): (data: any) => string; (templateString: string, data: any, settings?: Underscore.TemplateSettings): string; }
+>_.template : { (templateString: string): (data: any) => string; (templateString: string, data: any, settings?: TemplateSettings): string; }
+>_ : Static
+>template : { (templateString: string): (data: any) => string; (templateString: string, data: any, settings?: TemplateSettings): string; }
 >"hello: <%= name %>" : "hello: <%= name %>"
 
 compiled({ name: 'moe' });
@@= skipped -18, +18 lines =@@
 
 _.template(list2, { people: ['moe', 'curly', 'larry'] });
 >_.template(list2, { people: ['moe', 'curly', 'larry'] }) : string
->_.template : { (templateString: string): (data: any) => string; (templateString: string, data: any, settings?: Underscore.TemplateSettings): string; }
->_ : Underscore.Static
->template : { (templateString: string): (data: any) => string; (templateString: string, data: any, settings?: Underscore.TemplateSettings): string; }
+>_.template : { (templateString: string): (data: any) => string; (templateString: string, data: any, settings?: TemplateSettings): string; }
+>_ : Static
+>template : { (templateString: string): (data: any) => string; (templateString: string, data: any, settings?: TemplateSettings): string; }
 >list2 : string
 >{ people: ['moe', 'curly', 'larry'] } : { people: string[]; }
 >people : string[]
@@= skipped -14, +14 lines =@@
 var template = _.template("<b><%- value %></b>");
 >template : (data: any) => string
 >_.template("<b><%- value %></b>") : (data: any) => string
->_.template : { (templateString: string): (data: any) => string; (templateString: string, data: any, settings?: Underscore.TemplateSettings): string; }
->_ : Underscore.Static
->template : { (templateString: string): (data: any) => string; (templateString: string, data: any, settings?: Underscore.TemplateSettings): string; }
+>_.template : { (templateString: string): (data: any) => string; (templateString: string, data: any, settings?: TemplateSettings): string; }
+>_ : Static
+>template : { (templateString: string): (data: any) => string; (templateString: string, data: any, settings?: TemplateSettings): string; }
 >"<b><%- value %></b>" : "<b><%- value %></b>"
 
 template({ value: '<script>' });
@@= skipped -15, +15 lines =@@
 var compiled2 = _.template("<% print('Hello ' + epithet); %>");
 >compiled2 : (data: any) => string
 >_.template("<% print('Hello ' + epithet); %>") : (data: any) => string
->_.template : { (templateString: string): (data: any) => string; (templateString: string, data: any, settings?: Underscore.TemplateSettings): string; }
->_ : Underscore.Static
->template : { (templateString: string): (data: any) => string; (templateString: string, data: any, settings?: Underscore.TemplateSettings): string; }
+>_.template : { (templateString: string): (data: any) => string; (templateString: string, data: any, settings?: TemplateSettings): string; }
+>_ : Static
+>template : { (templateString: string): (data: any) => string; (templateString: string, data: any, settings?: TemplateSettings): string; }
 >"<% print('Hello ' + epithet); %>" : "<% print('Hello ' + epithet); %>"
 
 compiled2({ epithet: "stooge" });
@@= skipped -14, +14 lines =@@
 
 _.templateSettings = {
 >_.templateSettings = {    interpolate: /\{\{(.+?)\}\}/g} : { interpolate: RegExp; }
->_.templateSettings : Underscore.TemplateSettings
->_ : Underscore.Static
->templateSettings : Underscore.TemplateSettings
+>_.templateSettings : TemplateSettings
+>_ : Static
+>templateSettings : TemplateSettings
 >{    interpolate: /\{\{(.+?)\}\}/g} : { interpolate: RegExp; }
 
     interpolate: /\{\{(.+?)\}\}/g
@@= skipped -13, +13 lines =@@
 var template2 = _.template("Hello {{ name }}!");
 >template2 : (data: any) => string
 >_.template("Hello {{ name }}!") : (data: any) => string
->_.template : { (templateString: string): (data: any) => string; (templateString: string, data: any, settings?: Underscore.TemplateSettings): string; }
->_ : Underscore.Static
->template : { (templateString: string): (data: any) => string; (templateString: string, data: any, settings?: Underscore.TemplateSettings): string; }
+>_.template : { (templateString: string): (data: any) => string; (templateString: string, data: any, settings?: TemplateSettings): string; }
+>_ : Static
+>template : { (templateString: string): (data: any) => string; (templateString: string, data: any, settings?: TemplateSettings): string; }
 >"Hello {{ name }}!" : "Hello {{ name }}!"
 
 template2({ name: "Mustache" });
@@= skipped -14, +14 lines =@@
 
 _.template("Using 'with': <%= data.answer %>", { answer: 'no' }, { variable: 'data' });
 >_.template("Using 'with': <%= data.answer %>", { answer: 'no' }, { variable: 'data' }) : string
->_.template : { (templateString: string): (data: any) => string; (templateString: string, data: any, settings?: Underscore.TemplateSettings): string; }
->_ : Underscore.Static
->template : { (templateString: string): (data: any) => string; (templateString: string, data: any, settings?: Underscore.TemplateSettings): string; }
+>_.template : { (templateString: string): (data: any) => string; (templateString: string, data: any, settings?: TemplateSettings): string; }
+>_ : Static
+>template : { (templateString: string): (data: any) => string; (templateString: string, data: any, settings?: TemplateSettings): string; }
 >"Using 'with': <%= data.answer %>" : "Using 'with': <%= data.answer %>"
 >{ answer: 'no' } : { answer: string; }
 >answer : string
@@= skipped -1514, +1514 lines =@@
 >obj : T
 
         chain<T>(list: T[]): ChainedArray<T>;
->chain : { <T>(list: T[]): ChainedArray<T>; <T_1>(list: Dictionary<T_1>): ChainedDictionary<T_1>; <T_1>(obj: T_1): ChainedObject<T_1>; }
+>chain : { <T>(list: T[]): ChainedArray<T>; <T>(list: Dictionary<T>): ChainedDictionary<T>; <T>(obj: T): ChainedObject<T>; }
 >list : T[]
 
         chain<T>(list: Dictionary<T>): ChainedDictionary<T>;
->chain : { <T_1>(list: T_1[]): ChainedArray<T_1>; <T>(list: Dictionary<T>): ChainedDictionary<T>; <T_1>(obj: T_1): ChainedObject<T_1>; }
+>chain : { <T>(list: T[]): ChainedArray<T>; <T>(list: Dictionary<T>): ChainedDictionary<T>; <T>(obj: T): ChainedObject<T>; }
 >list : Dictionary<T>
 
         chain<T>(obj: T): ChainedObject<T>;
->chain : { <T_1>(list: T_1[]): ChainedArray<T_1>; <T_1>(list: Dictionary<T_1>): ChainedDictionary<T_1>; <T>(obj: T): ChainedObject<T>; }
+>chain : { <T>(list: T[]): ChainedArray<T>; <T>(list: Dictionary<T>): ChainedDictionary<T>; <T>(obj: T): ChainedObject<T>; }
 >obj : T
 
         each<T>(list: T[], iterator: Iterator_<T, void>, context?: any): void;
->each : { <T>(list: T[], iterator: Iterator_<T, void>, context?: any): void; <T_1>(list: Dictionary<T_1>, iterator: Iterator_<T_1, void>, context?: any): void; }
+>each : { <T>(list: T[], iterator: Iterator_<T, void>, context?: any): void; <T>(list: Dictionary<T>, iterator: Iterator_<T, void>, context?: any): void; }
 >list : T[]
 >iterator : Iterator_<T, void>
 >context : any
 
         each<T>(list: Dictionary<T>, iterator: Iterator_<T, void>, context?: any): void;
->each : { <T_1>(list: T_1[], iterator: Iterator_<T_1, void>, context?: any): void; <T>(list: Dictionary<T>, iterator: Iterator_<T, void>, context?: any): void; }
+>each : { <T>(list: T[], iterator: Iterator_<T, void>, context?: any): void; <T>(list: Dictionary<T>, iterator: Iterator_<T, void>, context?: any): void; }
 >list : Dictionary<T>
 >iterator : Iterator_<T, void>
 >context : any
 
         forEach<T>(list: T[], iterator: Iterator_<T, void>, context?: any): void;
->forEach : { <T>(list: T[], iterator: Iterator_<T, void>, context?: any): void; <T_1>(list: Dictionary<T_1>, iterator: Iterator_<T_1, void>, context?: any): void; }
+>forEach : { <T>(list: T[], iterator: Iterator_<T, void>, context?: any): void; <T>(list: Dictionary<T>, iterator: Iterator_<T, void>, context?: any): void; }
 >list : T[]
 >iterator : Iterator_<T, void>
 >context : any
 
         forEach<T>(list: Dictionary<T>, iterator: Iterator_<T, void>, context?: any): void;
->forEach : { <T_1>(list: T_1[], iterator: Iterator_<T_1, void>, context?: any): void; <T>(list: Dictionary<T>, iterator: Iterator_<T, void>, context?: any): void; }
+>forEach : { <T>(list: T[], iterator: Iterator_<T, void>, context?: any): void; <T>(list: Dictionary<T>, iterator: Iterator_<T, void>, context?: any): void; }
 >list : Dictionary<T>
 >iterator : Iterator_<T, void>
 >context : any
 
         map<T, U>(list: T[], iterator: Iterator_<T, U>, context?: any): U[];
->map : { <T, U>(list: T[], iterator: Iterator_<T, U>, context?: any): U[]; <T_1, U_1>(list: Dictionary<T_1>, iterator: Iterator_<T_1, U_1>, context?: any): U_1[]; }
+>map : { <T, U>(list: T[], iterator: Iterator_<T, U>, context?: any): U[]; <T, U>(list: Dictionary<T>, iterator: Iterator_<T, U>, context?: any): U[]; }
 >list : T[]
 >iterator : Iterator_<T, U>
 >context : any
 
         map<T, U>(list: Dictionary<T>, iterator: Iterator_<T, U>, context?: any): U[];
->map : { <T_1, U_1>(list: T_1[], iterator: Iterator_<T_1, U_1>, context?: any): U_1[]; <T, U>(list: Dictionary<T>, iterator: Iterator_<T, U>, context?: any): U[]; }
+>map : { <T, U>(list: T[], iterator: Iterator_<T, U>, context?: any): U[]; <T, U>(list: Dictionary<T>, iterator: Iterator_<T, U>, context?: any): U[]; }
 >list : Dictionary<T>
 >iterator : Iterator_<T, U>
 >context : any
 
         collect<T, U>(list: T[], iterator: Iterator_<T, U>, context?: any): U[];
->collect : { <T, U>(list: T[], iterator: Iterator_<T, U>, context?: any): U[]; <T_1, U_1>(list: Dictionary<T_1>, iterator: Iterator_<T_1, U_1>, context?: any): U_1[]; }
+>collect : { <T, U>(list: T[], iterator: Iterator_<T, U>, context?: any): U[]; <T, U>(list: Dictionary<T>, iterator: Iterator_<T, U>, context?: any): U[]; }
 >list : T[]
 >iterator : Iterator_<T, U>
 >context : any
 
         collect<T, U>(list: Dictionary<T>, iterator: Iterator_<T, U>, context?: any): U[];
->collect : { <T_1, U_1>(list: T_1[], iterator: Iterator_<T_1, U_1>, context?: any): U_1[]; <T, U>(list: Dictionary<T>, iterator: Iterator_<T, U>, context?: any): U[]; }
+>collect : { <T, U>(list: T[], iterator: Iterator_<T, U>, context?: any): U[]; <T, U>(list: Dictionary<T>, iterator: Iterator_<T, U>, context?: any): U[]; }
 >list : Dictionary<T>
 >iterator : Iterator_<T, U>
 >context : any
 
         reduce<T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
->reduce : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T_1, U>(list: T_1[], iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; <T_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U>(list: Dictionary<T_1>, iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; }
+>reduce : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
 >list : T[]
 >iterator : Reducer<T, T>
 >initialValue : T
 >context : any
 
         reduce<T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U;
->reduce : { <T_1>(list: T_1[], iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, U_1>, initialValue: U_1, context?: any): U_1; }
+>reduce : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
 >list : T[]
 >iterator : Reducer<T, U>
 >initialValue : U
 >context : any
 
         reduce<T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
->reduce : { <T_1>(list: T_1[], iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U>(list: T_1[], iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T_1, U>(list: Dictionary<T_1>, iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; }
+>reduce : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
 >list : Dictionary<T>
 >iterator : Reducer<T, T>
 >initialValue : T
 >context : any
 
         reduce<T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U;
->reduce : { <T_1>(list: T_1[], iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U_1>(list: T_1[], iterator: Reducer<T_1, U_1>, initialValue: U_1, context?: any): U_1; <T_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
+>reduce : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
 >list : Dictionary<T>
 >iterator : Reducer<T, U>
 >initialValue : U
 >context : any
 
         foldl<T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
->foldl : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T_1, U>(list: T_1[], iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; <T_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U>(list: Dictionary<T_1>, iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; }
+>foldl : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
 >list : T[]
 >iterator : Reducer<T, T>
 >initialValue : T
 >context : any
 
         foldl<T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U;
->foldl : { <T_1>(list: T_1[], iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, U_1>, initialValue: U_1, context?: any): U_1; }
+>foldl : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
 >list : T[]
 >iterator : Reducer<T, U>
 >initialValue : U
 >context : any
 
         foldl<T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
->foldl : { <T_1>(list: T_1[], iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U>(list: T_1[], iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T_1, U>(list: Dictionary<T_1>, iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; }
+>foldl : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
 >list : Dictionary<T>
 >iterator : Reducer<T, T>
 >initialValue : T
 >context : any
 
         foldl<T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U;
->foldl : { <T_1>(list: T_1[], iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U_1>(list: T_1[], iterator: Reducer<T_1, U_1>, initialValue: U_1, context?: any): U_1; <T_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
+>foldl : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
 >list : Dictionary<T>
 >iterator : Reducer<T, U>
 >initialValue : U
 >context : any
 
         inject<T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
->inject : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T_1, U>(list: T_1[], iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; <T_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U>(list: Dictionary<T_1>, iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; }
+>inject : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
 >list : T[]
 >iterator : Reducer<T, T>
 >initialValue : T
 >context : any
 
         inject<T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U;
->inject : { <T_1>(list: T_1[], iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, U_1>, initialValue: U_1, context?: any): U_1; }
+>inject : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
 >list : T[]
 >iterator : Reducer<T, U>
 >initialValue : U
 >context : any
 
         inject<T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
->inject : { <T_1>(list: T_1[], iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U>(list: T_1[], iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T_1, U>(list: Dictionary<T_1>, iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; }
+>inject : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
 >list : Dictionary<T>
 >iterator : Reducer<T, T>
 >initialValue : T
 >context : any
 
         inject<T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U;
->inject : { <T_1>(list: T_1[], iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U_1>(list: T_1[], iterator: Reducer<T_1, U_1>, initialValue: U_1, context?: any): U_1; <T_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
+>inject : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
 >list : Dictionary<T>
 >iterator : Reducer<T, U>
 >initialValue : U
 >context : any
 
         reduceRight<T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
->reduceRight : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T_1, U>(list: T_1[], iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; <T_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U>(list: Dictionary<T_1>, iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; }
+>reduceRight : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
 >list : T[]
 >iterator : Reducer<T, T>
 >initialValue : T
 >context : any
 
         reduceRight<T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U;
->reduceRight : { <T_1>(list: T_1[], iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, U_1>, initialValue: U_1, context?: any): U_1; }
+>reduceRight : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
 >list : T[]
 >iterator : Reducer<T, U>
 >initialValue : U
 >context : any
 
         reduceRight<T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
->reduceRight : { <T_1>(list: T_1[], iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U>(list: T_1[], iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T_1, U>(list: Dictionary<T_1>, iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; }
+>reduceRight : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
 >list : Dictionary<T>
 >iterator : Reducer<T, T>
 >initialValue : T
 >context : any
 
         reduceRight<T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U;
->reduceRight : { <T_1>(list: T_1[], iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U_1>(list: T_1[], iterator: Reducer<T_1, U_1>, initialValue: U_1, context?: any): U_1; <T_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
+>reduceRight : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
 >list : Dictionary<T>
 >iterator : Reducer<T, U>
 >initialValue : U
 >context : any
 
         foldr<T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
->foldr : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T_1, U>(list: T_1[], iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; <T_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U>(list: Dictionary<T_1>, iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; }
+>foldr : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
 >list : T[]
 >iterator : Reducer<T, T>
 >initialValue : T
 >context : any
 
         foldr<T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U;
->foldr : { <T_1>(list: T_1[], iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, U_1>, initialValue: U_1, context?: any): U_1; }
+>foldr : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
 >list : T[]
 >iterator : Reducer<T, U>
 >initialValue : U
 >context : any
 
         foldr<T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
->foldr : { <T_1>(list: T_1[], iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U>(list: T_1[], iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T_1, U>(list: Dictionary<T_1>, iterator: Reducer<T_1, U>, initialValue: U, context?: any): U; }
+>foldr : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
 >list : Dictionary<T>
 >iterator : Reducer<T, T>
 >initialValue : T
 >context : any
 
         foldr<T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U;
->foldr : { <T_1>(list: T_1[], iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T_1, U_1>(list: T_1[], iterator: Reducer<T_1, U_1>, initialValue: U_1, context?: any): U_1; <T_1>(list: Dictionary<T_1>, iterator: Reducer<T_1, T_1>, initialValue?: T_1, context?: any): T_1; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
+>foldr : { <T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U; <T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T; <T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U; }
 >list : Dictionary<T>
 >iterator : Reducer<T, U>
 >initialValue : U
 >context : any
 
         find<T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T;
->find : { <T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T; <T_1>(list: Dictionary<T_1>, iterator: Iterator_<T_1, boolean>, context?: any): T_1; }
+>find : { <T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T; <T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T; }
 >list : T[]
 >iterator : Iterator_<T, boolean>
 >context : any
 
         find<T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T;
->find : { <T_1>(list: T_1[], iterator: Iterator_<T_1, boolean>, context?: any): T_1; <T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T; }
+>find : { <T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T; <T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T; }
 >list : Dictionary<T>
 >iterator : Iterator_<T, boolean>
 >context : any
 
         detect<T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T;
->detect : { <T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T; <T_1>(list: Dictionary<T_1>, iterator: Iterator_<T_1, boolean>, context?: any): T_1; }
+>detect : { <T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T; <T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T; }
 >list : T[]
 >iterator : Iterator_<T, boolean>
 >context : any
 
         detect<T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T;
->detect : { <T_1>(list: T_1[], iterator: Iterator_<T_1, boolean>, context?: any): T_1; <T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T; }
+>detect : { <T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T; <T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T; }
 >list : Dictionary<T>
 >iterator : Iterator_<T, boolean>
 >context : any
 
         filter<T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T[];
->filter : { <T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T[]; <T_1>(list: Dictionary<T_1>, iterator: Iterator_<T_1, boolean>, context?: any): T_1[]; }
+>filter : { <T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T[]; }
 >list : T[]
 >iterator : Iterator_<T, boolean>
 >context : any
 
         filter<T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T[];
->filter : { <T_1>(list: T_1[], iterator: Iterator_<T_1, boolean>, context?: any): T_1[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T[]; }
+>filter : { <T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T[]; }
 >list : Dictionary<T>
 >iterator : Iterator_<T, boolean>
 >context : any
 
         select<T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T[];
->select : { <T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T[]; <T_1>(list: Dictionary<T_1>, iterator: Iterator_<T_1, boolean>, context?: any): T_1[]; }
+>select : { <T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T[]; }
 >list : T[]
 >iterator : Iterator_<T, boolean>
 >context : any
 
         select<T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T[];
->select : { <T_1>(list: T_1[], iterator: Iterator_<T_1, boolean>, context?: any): T_1[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T[]; }
+>select : { <T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T[]; }
 >list : Dictionary<T>
 >iterator : Iterator_<T, boolean>
 >context : any
 
         where<T>(list: T[], properties: Object): T[];
->where : { <T>(list: T[], properties: Object): T[]; <T_1>(list: Dictionary<T_1>, properties: Object): T_1[]; }
+>where : { <T>(list: T[], properties: Object): T[]; <T>(list: Dictionary<T>, properties: Object): T[]; }
 >list : T[]
 >properties : Object
 
         where<T>(list: Dictionary<T>, properties: Object): T[];
->where : { <T_1>(list: T_1[], properties: Object): T_1[]; <T>(list: Dictionary<T>, properties: Object): T[]; }
+>where : { <T>(list: T[], properties: Object): T[]; <T>(list: Dictionary<T>, properties: Object): T[]; }
 >list : Dictionary<T>
 >properties : Object
 
         findWhere<T>(list: T[], properties: Object): T;
->findWhere : { <T>(list: T[], properties: Object): T; <T_1>(list: Dictionary<T_1>, properties: Object): T_1; }
+>findWhere : { <T>(list: T[], properties: Object): T; <T>(list: Dictionary<T>, properties: Object): T; }
 >list : T[]
 >properties : Object
 
         findWhere<T>(list: Dictionary<T>, properties: Object): T;
->findWhere : { <T_1>(list: T_1[], properties: Object): T_1; <T>(list: Dictionary<T>, properties: Object): T; }
+>findWhere : { <T>(list: T[], properties: Object): T; <T>(list: Dictionary<T>, properties: Object): T; }
 >list : Dictionary<T>
 >properties : Object
 
         reject<T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T[];
->reject : { <T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T[]; <T_1>(list: Dictionary<T_1>, iterator: Iterator_<T_1, boolean>, context?: any): T_1[]; }
+>reject : { <T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T[]; }
 >list : T[]
 >iterator : Iterator_<T, boolean>
 >context : any
 
         reject<T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T[];
->reject : { <T_1>(list: T_1[], iterator: Iterator_<T_1, boolean>, context?: any): T_1[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T[]; }
+>reject : { <T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T[]; }
 >list : Dictionary<T>
 >iterator : Iterator_<T, boolean>
 >context : any
 
         every<T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean;
->every : { <T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean; <T_1>(list: Dictionary<T_1>, iterator?: Iterator_<T_1, boolean>, context?: any): boolean; }
+>every : { <T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean; <T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean; }
 >list : T[]
 >iterator : Iterator_<T, boolean>
 >context : any
 
         every<T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean;
->every : { <T_1>(list: T_1[], iterator?: Iterator_<T_1, boolean>, context?: any): boolean; <T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean; }
+>every : { <T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean; <T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean; }
 >list : Dictionary<T>
 >iterator : Iterator_<T, boolean>
 >context : any
 
         all<T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean;
->all : { <T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean; <T_1>(list: Dictionary<T_1>, iterator?: Iterator_<T_1, boolean>, context?: any): boolean; }
+>all : { <T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean; <T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean; }
 >list : T[]
 >iterator : Iterator_<T, boolean>
 >context : any
 
         all<T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean;
->all : { <T_1>(list: T_1[], iterator?: Iterator_<T_1, boolean>, context?: any): boolean; <T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean; }
+>all : { <T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean; <T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean; }
 >list : Dictionary<T>
 >iterator : Iterator_<T, boolean>
 >context : any
 
         some<T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean;
->some : { <T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean; <T_1>(list: Dictionary<T_1>, iterator?: Iterator_<T_1, boolean>, context?: any): boolean; }
+>some : { <T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean; <T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean; }
 >list : T[]
 >iterator : Iterator_<T, boolean>
 >context : any
 
         some<T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean;
->some : { <T_1>(list: T_1[], iterator?: Iterator_<T_1, boolean>, context?: any): boolean; <T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean; }
+>some : { <T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean; <T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean; }
 >list : Dictionary<T>
 >iterator : Iterator_<T, boolean>
 >context : any
 
         any<T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean;
->any : { <T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean; <T_1>(list: Dictionary<T_1>, iterator?: Iterator_<T_1, boolean>, context?: any): boolean; }
+>any : { <T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean; <T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean; }
 >list : T[]
 >iterator : Iterator_<T, boolean>
 >context : any
 
         any<T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean;
->any : { <T_1>(list: T_1[], iterator?: Iterator_<T_1, boolean>, context?: any): boolean; <T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean; }
+>any : { <T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean; <T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean; }
 >list : Dictionary<T>
 >iterator : Iterator_<T, boolean>
 >context : any
 
         contains<T>(list: T[], value: T): boolean;
->contains : { <T>(list: T[], value: T): boolean; <T_1>(list: Dictionary<T_1>, value: T_1): boolean; }
+>contains : { <T>(list: T[], value: T): boolean; <T>(list: Dictionary<T>, value: T): boolean; }
 >list : T[]
 >value : T
 
         contains<T>(list: Dictionary<T>, value: T): boolean;
->contains : { <T_1>(list: T_1[], value: T_1): boolean; <T>(list: Dictionary<T>, value: T): boolean; }
+>contains : { <T>(list: T[], value: T): boolean; <T>(list: Dictionary<T>, value: T): boolean; }
 >list : Dictionary<T>
 >value : T
 
         include<T>(list: T[], value: T): boolean;
->include : { <T>(list: T[], value: T): boolean; <T_1>(list: Dictionary<T_1>, value: T_1): boolean; }
+>include : { <T>(list: T[], value: T): boolean; <T>(list: Dictionary<T>, value: T): boolean; }
 >list : T[]
 >value : T
 
         include<T>(list: Dictionary<T>, value: T): boolean;
->include : { <T_1>(list: T_1[], value: T_1): boolean; <T>(list: Dictionary<T>, value: T): boolean; }
+>include : { <T>(list: T[], value: T): boolean; <T>(list: Dictionary<T>, value: T): boolean; }
 >list : Dictionary<T>
 >value : T
 
@@= skipped -370, +370 lines =@@
 >propertyName : string
 
         max<T>(list: T[], iterator?: Iterator_<T, any>, context?: any): T;
->max : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): T; <T_1>(list: Dictionary<T_1>, iterator?: Iterator_<T_1, any>, context?: any): T_1; }
+>max : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): T; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): T; }
 >list : T[]
 >iterator : Iterator_<T, any>
 >context : any
 
         max<T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): T;
->max : { <T_1>(list: T_1[], iterator?: Iterator_<T_1, any>, context?: any): T_1; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): T; }
+>max : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): T; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): T; }
 >list : Dictionary<T>
 >iterator : Iterator_<T, any>
 >context : any
 
         min<T>(list: T[], iterator?: Iterator_<T, any>, context?: any): T;
->min : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): T; <T_1>(list: Dictionary<T_1>, iterator?: Iterator_<T_1, any>, context?: any): T_1; }
+>min : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): T; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): T; }
 >list : T[]
 >iterator : Iterator_<T, any>
 >context : any
 
         min<T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): T;
->min : { <T_1>(list: T_1[], iterator?: Iterator_<T_1, any>, context?: any): T_1; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): T; }
+>min : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): T; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): T; }
 >list : Dictionary<T>
 >iterator : Iterator_<T, any>
 >context : any
 
         sortBy<T>(list: T[], iterator: Iterator_<T, any>, context?: any): T[];
->sortBy : { <T>(list: T[], iterator: Iterator_<T, any>, context?: any): T[]; <T_1>(list: Dictionary<T_1>, iterator: Iterator_<T_1, any>, context?: any): T_1[]; <T_1>(list: T_1[], propertyName: string): T_1[]; <T_1>(list: Dictionary<T_1>, propertyName: string): T_1[]; }
+>sortBy : { <T>(list: T[], iterator: Iterator_<T, any>, context?: any): T[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, any>, context?: any): T[]; <T>(list: T[], propertyName: string): T[]; <T>(list: Dictionary<T>, propertyName: string): T[]; }
 >list : T[]
 >iterator : Iterator_<T, any>
 >context : any
 
         sortBy<T>(list: Dictionary<T>, iterator: Iterator_<T, any>, context?: any): T[];
->sortBy : { <T_1>(list: T_1[], iterator: Iterator_<T_1, any>, context?: any): T_1[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, any>, context?: any): T[]; <T_1>(list: T_1[], propertyName: string): T_1[]; <T_1>(list: Dictionary<T_1>, propertyName: string): T_1[]; }
+>sortBy : { <T>(list: T[], iterator: Iterator_<T, any>, context?: any): T[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, any>, context?: any): T[]; <T>(list: T[], propertyName: string): T[]; <T>(list: Dictionary<T>, propertyName: string): T[]; }
 >list : Dictionary<T>
 >iterator : Iterator_<T, any>
 >context : any
 
         sortBy<T>(list: T[], propertyName: string): T[];
->sortBy : { <T_1>(list: T_1[], iterator: Iterator_<T_1, any>, context?: any): T_1[]; <T_1>(list: Dictionary<T_1>, iterator: Iterator_<T_1, any>, context?: any): T_1[]; <T>(list: T[], propertyName: string): T[]; <T_1>(list: Dictionary<T_1>, propertyName: string): T_1[]; }
+>sortBy : { <T>(list: T[], iterator: Iterator_<T, any>, context?: any): T[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, any>, context?: any): T[]; <T>(list: T[], propertyName: string): T[]; <T>(list: Dictionary<T>, propertyName: string): T[]; }
 >list : T[]
 >propertyName : string
 
         sortBy<T>(list: Dictionary<T>, propertyName: string): T[];
->sortBy : { <T_1>(list: T_1[], iterator: Iterator_<T_1, any>, context?: any): T_1[]; <T_1>(list: Dictionary<T_1>, iterator: Iterator_<T_1, any>, context?: any): T_1[]; <T_1>(list: T_1[], propertyName: string): T_1[]; <T>(list: Dictionary<T>, propertyName: string): T[]; }
+>sortBy : { <T>(list: T[], iterator: Iterator_<T, any>, context?: any): T[]; <T>(list: Dictionary<T>, iterator: Iterator_<T, any>, context?: any): T[]; <T>(list: T[], propertyName: string): T[]; <T>(list: Dictionary<T>, propertyName: string): T[]; }
 >list : Dictionary<T>
 >propertyName : string
 
         groupBy<T>(list: T[], iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>;
->groupBy : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>; <T_1>(list: Dictionary<T_1>, iterator?: Iterator_<T_1, any>, context?: any): Dictionary<T_1[]>; <T_1>(list: T_1[], propertyName: string): Dictionary<T_1[]>; <T_1>(list: Dictionary<T_1>, propertyName: string): Dictionary<T_1[]>; }
+>groupBy : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>; <T>(list: T[], propertyName: string): Dictionary<T[]>; <T>(list: Dictionary<T>, propertyName: string): Dictionary<T[]>; }
 >list : T[]
 >iterator : Iterator_<T, any>
 >context : any
 
         groupBy<T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>;
->groupBy : { <T_1>(list: T_1[], iterator?: Iterator_<T_1, any>, context?: any): Dictionary<T_1[]>; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>; <T_1>(list: T_1[], propertyName: string): Dictionary<T_1[]>; <T_1>(list: Dictionary<T_1>, propertyName: string): Dictionary<T_1[]>; }
+>groupBy : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>; <T>(list: T[], propertyName: string): Dictionary<T[]>; <T>(list: Dictionary<T>, propertyName: string): Dictionary<T[]>; }
 >list : Dictionary<T>
 >iterator : Iterator_<T, any>
 >context : any
 
         groupBy<T>(list: T[], propertyName: string): Dictionary<T[]>;
->groupBy : { <T_1>(list: T_1[], iterator?: Iterator_<T_1, any>, context?: any): Dictionary<T_1[]>; <T_1>(list: Dictionary<T_1>, iterator?: Iterator_<T_1, any>, context?: any): Dictionary<T_1[]>; <T>(list: T[], propertyName: string): Dictionary<T[]>; <T_1>(list: Dictionary<T_1>, propertyName: string): Dictionary<T_1[]>; }
+>groupBy : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>; <T>(list: T[], propertyName: string): Dictionary<T[]>; <T>(list: Dictionary<T>, propertyName: string): Dictionary<T[]>; }
 >list : T[]
 >propertyName : string
 
         groupBy<T>(list: Dictionary<T>, propertyName: string): Dictionary<T[]>;
->groupBy : { <T_1>(list: T_1[], iterator?: Iterator_<T_1, any>, context?: any): Dictionary<T_1[]>; <T_1>(list: Dictionary<T_1>, iterator?: Iterator_<T_1, any>, context?: any): Dictionary<T_1[]>; <T_1>(list: T_1[], propertyName: string): Dictionary<T_1[]>; <T>(list: Dictionary<T>, propertyName: string): Dictionary<T[]>; }
+>groupBy : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>; <T>(list: T[], propertyName: string): Dictionary<T[]>; <T>(list: Dictionary<T>, propertyName: string): Dictionary<T[]>; }
 >list : Dictionary<T>
 >propertyName : string
 
         countBy<T>(list: T[], iterator?: Iterator_<T, any>, context?: any): Dictionary<number>;
->countBy : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): Dictionary<number>; <T_1>(list: Dictionary<T_1>, iterator?: Iterator_<T_1, any>, context?: any): Dictionary<number>; <T_1>(list: T_1[], propertyName: string): Dictionary<number>; <T_1>(list: Dictionary<T_1>, propertyName: string): Dictionary<number>; }
+>countBy : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): Dictionary<number>; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): Dictionary<number>; <T>(list: T[], propertyName: string): Dictionary<number>; <T>(list: Dictionary<T>, propertyName: string): Dictionary<number>; }
 >list : T[]
 >iterator : Iterator_<T, any>
 >context : any
 
         countBy<T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): Dictionary<number>;
->countBy : { <T_1>(list: T_1[], iterator?: Iterator_<T_1, any>, context?: any): Dictionary<number>; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): Dictionary<number>; <T_1>(list: T_1[], propertyName: string): Dictionary<number>; <T_1>(list: Dictionary<T_1>, propertyName: string): Dictionary<number>; }
+>countBy : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): Dictionary<number>; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): Dictionary<number>; <T>(list: T[], propertyName: string): Dictionary<number>; <T>(list: Dictionary<T>, propertyName: string): Dictionary<number>; }
 >list : Dictionary<T>
 >iterator : Iterator_<T, any>
 >context : any
 
         countBy<T>(list: T[], propertyName: string): Dictionary<number>;
->countBy : { <T_1>(list: T_1[], iterator?: Iterator_<T_1, any>, context?: any): Dictionary<number>; <T_1>(list: Dictionary<T_1>, iterator?: Iterator_<T_1, any>, context?: any): Dictionary<number>; <T>(list: T[], propertyName: string): Dictionary<number>; <T_1>(list: Dictionary<T_1>, propertyName: string): Dictionary<number>; }
+>countBy : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): Dictionary<number>; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): Dictionary<number>; <T>(list: T[], propertyName: string): Dictionary<number>; <T>(list: Dictionary<T>, propertyName: string): Dictionary<number>; }
 >list : T[]
 >propertyName : string
 
         countBy<T>(list: Dictionary<T>, propertyName: string): Dictionary<number>;
->countBy : { <T_1>(list: T_1[], iterator?: Iterator_<T_1, any>, context?: any): Dictionary<number>; <T_1>(list: Dictionary<T_1>, iterator?: Iterator_<T_1, any>, context?: any): Dictionary<number>; <T_1>(list: T_1[], propertyName: string): Dictionary<number>; <T>(list: Dictionary<T>, propertyName: string): Dictionary<number>; }
+>countBy : { <T>(list: T[], iterator?: Iterator_<T, any>, context?: any): Dictionary<number>; <T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): Dictionary<number>; <T>(list: T[], propertyName: string): Dictionary<number>; <T>(list: Dictionary<T>, propertyName: string): Dictionary<number>; }
 >list : Dictionary<T>
 >propertyName : string
 
         shuffle<T>(list: T[]): T[];
->shuffle : { <T>(list: T[]): T[]; <T_1>(list: Dictionary<T_1>): T_1[]; }
+>shuffle : { <T>(list: T[]): T[]; <T>(list: Dictionary<T>): T[]; }
 >list : T[]
 
         shuffle<T>(list: Dictionary<T>): T[];
->shuffle : { <T_1>(list: T_1[]): T_1[]; <T>(list: Dictionary<T>): T[]; }
+>shuffle : { <T>(list: T[]): T[]; <T>(list: Dictionary<T>): T[]; }
 >list : Dictionary<T>
 
         toArray<T>(list: T[]): T[];
->toArray : { <T>(list: T[]): T[]; <T_1>(list: Dictionary<T_1>): T_1[]; }
+>toArray : { <T>(list: T[]): T[]; <T>(list: Dictionary<T>): T[]; }
 >list : T[]
 
         toArray<T>(list: Dictionary<T>): T[];
->toArray : { <T_1>(list: T_1[]): T_1[]; <T>(list: Dictionary<T>): T[]; }
+>toArray : { <T>(list: T[]): T[]; <T>(list: Dictionary<T>): T[]; }
 >list : Dictionary<T>
 
         size<T>(list: T[]): number;
->size : { <T>(list: T[]): number; <T_1>(list: Dictionary<T_1>): number; }
+>size : { <T>(list: T[]): number; <T>(list: Dictionary<T>): number; }
 >list : T[]
 
         size<T>(list: Dictionary<T>): number;
->size : { <T_1>(list: T_1[]): number; <T>(list: Dictionary<T>): number; }
+>size : { <T>(list: T[]): number; <T>(list: Dictionary<T>): number; }
 >list : Dictionary<T>
 
         first<T>(list: T[]): T;
->first : { <T>(list: T[]): T; <T_1>(list: T_1[], count: number): T_1[]; }
+>first : { <T>(list: T[]): T; <T>(list: T[], count: number): T[]; }
 >list : T[]
 
         first<T>(list: T[], count: number): T[];
->first : { <T_1>(list: T_1[]): T_1; <T>(list: T[], count: number): T[]; }
+>first : { <T>(list: T[]): T; <T>(list: T[], count: number): T[]; }
 >list : T[]
 >count : number
 
         head<T>(list: T[]): T;
->head : { <T>(list: T[]): T; <T_1>(list: T_1[], count: number): T_1[]; }
+>head : { <T>(list: T[]): T; <T>(list: T[], count: number): T[]; }
 >list : T[]
 
         head<T>(list: T[], count: number): T[];
->head : { <T_1>(list: T_1[]): T_1; <T>(list: T[], count: number): T[]; }
+>head : { <T>(list: T[]): T; <T>(list: T[], count: number): T[]; }
 >list : T[]
 >count : number
 
         take<T>(list: T[]): T;
->take : { <T>(list: T[]): T; <T_1>(list: T_1[], count: number): T_1[]; }
+>take : { <T>(list: T[]): T; <T>(list: T[], count: number): T[]; }
 >list : T[]
 
         take<T>(list: T[], count: number): T[];
->take : { <T_1>(list: T_1[]): T_1; <T>(list: T[], count: number): T[]; }
+>take : { <T>(list: T[]): T; <T>(list: T[], count: number): T[]; }
 >list : T[]
 >count : number
 
         initial<T>(list: T[]): T;
->initial : { <T>(list: T[]): T; <T_1>(list: T_1[], count: number): T_1[]; }
+>initial : { <T>(list: T[]): T; <T>(list: T[], count: number): T[]; }
 >list : T[]
 
         initial<T>(list: T[], count: number): T[];
->initial : { <T_1>(list: T_1[]): T_1; <T>(list: T[], count: number): T[]; }
+>initial : { <T>(list: T[]): T; <T>(list: T[], count: number): T[]; }
 >list : T[]
 >count : number
 
         last<T>(list: T[]): T;
->last : { <T>(list: T[]): T; <T_1>(list: T_1[], count: number): T_1[]; }
+>last : { <T>(list: T[]): T; <T>(list: T[], count: number): T[]; }
 >list : T[]
 
         last<T>(list: T[], count: number): T[];
->last : { <T_1>(list: T_1[]): T_1; <T>(list: T[], count: number): T[]; }
+>last : { <T>(list: T[]): T; <T>(list: T[], count: number): T[]; }
 >list : T[]
 >count : number
 
@@= skipped -168, +168 lines =@@
 >list : T[]
 
         flatten<T>(list: T[][]): T[];
->flatten : { <T>(list: T[][]): T[]; <T_1>(array: any[], shallow?: boolean): T_1[]; }
+>flatten : { <T>(list: T[][]): T[]; <T>(array: any[], shallow?: boolean): T[]; }
 >list : T[][]
 
         flatten<T>(array: any[], shallow?: boolean): T[];
->flatten : { <T_1>(list: T_1[][]): T_1[]; <T>(array: any[], shallow?: boolean): T[]; }
+>flatten : { <T>(list: T[][]): T[]; <T>(array: any[], shallow?: boolean): T[]; }
 >array : any[]
 >shallow : boolean
 
@@= skipped -27, +27 lines =@@
 >others : T[][]
 
         uniq<T>(list: T[], isSorted?: boolean): T[];
->uniq : { <T>(list: T[], isSorted?: boolean): T[]; <T_1, U>(list: T_1[], isSorted: boolean, iterator: Iterator_<T_1, U>, context?: any): U[]; }
+>uniq : { <T>(list: T[], isSorted?: boolean): T[]; <T, U>(list: T[], isSorted: boolean, iterator: Iterator_<T, U>, context?: any): U[]; }
 >list : T[]
 >isSorted : boolean
 
         uniq<T, U>(list: T[], isSorted: boolean, iterator: Iterator_<T, U>, context?: any): U[];
->uniq : { <T_1>(list: T_1[], isSorted?: boolean): T_1[]; <T, U>(list: T[], isSorted: boolean, iterator: Iterator_<T, U>, context?: any): U[]; }
+>uniq : { <T>(list: T[], isSorted?: boolean): T[]; <T, U>(list: T[], isSorted: boolean, iterator: Iterator_<T, U>, context?: any): U[]; }
 >list : T[]
 >isSorted : boolean
 >iterator : Iterator_<T, U>
 >context : any
 
         unique<T>(list: T[], isSorted?: boolean): T[];
->unique : { <T>(list: T[], isSorted?: boolean): T[]; <T_1, U>(list: T_1[], isSorted: boolean, iterator: Iterator_<T_1, U>, context?: any): U[]; }
+>unique : { <T>(list: T[], isSorted?: boolean): T[]; <T, U>(list: T[], isSorted: boolean, iterator: Iterator_<T, U>, context?: any): U[]; }
 >list : T[]
 >isSorted : boolean
 
         unique<T, U>(list: T[], isSorted: boolean, iterator: Iterator_<T, U>, context?: any): U[];
->unique : { <T_1>(list: T_1[], isSorted?: boolean): T_1[]; <T, U>(list: T[], isSorted: boolean, iterator: Iterator_<T, U>, context?: any): U[]; }
+>unique : { <T>(list: T[], isSorted?: boolean): T[]; <T, U>(list: T[], isSorted: boolean, iterator: Iterator_<T, U>, context?: any): U[]; }
 >list : T[]
 >isSorted : boolean
 >iterator : Iterator_<T, U>
 >context : any
 
         zip<T0, T1>(a0: T0[], a1: T1[]): Tuple2<T0, T1>[];
->zip : { <T0, T1>(a0: T0[], a1: T1[]): Tuple2<T0, T1>[]; <T0_1, T1_1, T2>(a0: T0_1[], a1: T1_1[], a2: T2[]): Tuple3<T0_1, T1_1, T2>[]; <T0_1, T1_1, T2, T3>(a0: T0_1[], a1: T1_1[], a2: T2[], a3: T3[]): Tuple4<T0_1, T1_1, T2, T3>[]; (...arrays: any[][]): any[][]; }
+>zip : { <T0, T1>(a0: T0[], a1: T1[]): Tuple2<T0, T1>[]; <T0, T1, T2>(a0: T0[], a1: T1[], a2: T2[]): Tuple3<T0, T1, T2>[]; <T0, T1, T2, T3>(a0: T0[], a1: T1[], a2: T2[], a3: T3[]): Tuple4<T0, T1, T2, T3>[]; (...arrays: any[][]): any[][]; }
 >a0 : T0[]
 >a1 : T1[]
 
         zip<T0, T1, T2>(a0: T0[], a1: T1[], a2: T2[]): Tuple3<T0, T1, T2>[];
->zip : { <T0_1, T1_1>(a0: T0_1[], a1: T1_1[]): Tuple2<T0_1, T1_1>[]; <T0, T1, T2>(a0: T0[], a1: T1[], a2: T2[]): Tuple3<T0, T1, T2>[]; <T0_1, T1_1, T2_1, T3>(a0: T0_1[], a1: T1_1[], a2: T2_1[], a3: T3[]): Tuple4<T0_1, T1_1, T2_1, T3>[]; (...arrays: any[][]): any[][]; }
+>zip : { <T0, T1>(a0: T0[], a1: T1[]): Tuple2<T0, T1>[]; <T0, T1, T2>(a0: T0[], a1: T1[], a2: T2[]): Tuple3<T0, T1, T2>[]; <T0, T1, T2, T3>(a0: T0[], a1: T1[], a2: T2[], a3: T3[]): Tuple4<T0, T1, T2, T3>[]; (...arrays: any[][]): any[][]; }
 >a0 : T0[]
 >a1 : T1[]
 >a2 : T2[]
 
         zip<T0, T1, T2, T3>(a0: T0[], a1: T1[], a2: T2[], a3: T3[]): Tuple4<T0, T1, T2, T3>[];
->zip : { <T0_1, T1_1>(a0: T0_1[], a1: T1_1[]): Tuple2<T0_1, T1_1>[]; <T0_1, T1_1, T2_1>(a0: T0_1[], a1: T1_1[], a2: T2_1[]): Tuple3<T0_1, T1_1, T2_1>[]; <T0, T1, T2, T3>(a0: T0[], a1: T1[], a2: T2[], a3: T3[]): Tuple4<T0, T1, T2, T3>[]; (...arrays: any[][]): any[][]; }
+>zip : { <T0, T1>(a0: T0[], a1: T1[]): Tuple2<T0, T1>[]; <T0, T1, T2>(a0: T0[], a1: T1[], a2: T2[]): Tuple3<T0, T1, T2>[]; <T0, T1, T2, T3>(a0: T0[], a1: T1[], a2: T2[], a3: T3[]): Tuple4<T0, T1, T2, T3>[]; (...arrays: any[][]): any[][]; }
 >a0 : T0[]
 >a1 : T1[]
 >a2 : T2[]
@@= skipped -67, +67 lines =@@
 >fromIndex : number
 
         sortedIndex<T>(list: T[], obj: T, propertyName: string): number;
->sortedIndex : { <T>(list: T[], obj: T, propertyName: string): number; <T_1>(list: T_1[], obj: T_1, iterator?: Iterator_<T_1, any>, context?: any): number; }
+>sortedIndex : { <T>(list: T[], obj: T, propertyName: string): number; <T>(list: T[], obj: T, iterator?: Iterator_<T, any>, context?: any): number; }
 >list : T[]
 >obj : T
 >propertyName : string
 
         sortedIndex<T>(list: T[], obj: T, iterator?: Iterator_<T, any>, context?: any): number;
->sortedIndex : { <T_1>(list: T_1[], obj: T_1, propertyName: string): number; <T>(list: T[], obj: T, iterator?: Iterator_<T, any>, context?: any): number; }
+>sortedIndex : { <T>(list: T[], obj: T, propertyName: string): number; <T>(list: T[], obj: T, iterator?: Iterator_<T, any>, context?: any): number; }
 >list : T[]
 >obj : T
 >iterator : Iterator_<T, any>
@@= skipped -277, +277 lines =@@
 }
 
 declare var _: Underscore.Static;
->_ : Underscore.Static
+>_ : Static
 >Underscore : any
 
