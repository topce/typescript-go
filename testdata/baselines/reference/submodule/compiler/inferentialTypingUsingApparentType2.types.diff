--- old.inferentialTypingUsingApparentType2.types
+++ new.inferentialTypingUsingApparentType2.types
@@= skipped -1, +1 lines =@@
 
 === inferentialTypingUsingApparentType2.ts ===
 function foo<T extends { m(p: string): number }>(x: T): T {
->foo : <T extends { m(p: string): number; }>(x: T) => T
+>foo : <T extends { m: (p: string) => number; }>(x: T) => T
 >m : (p: string) => number
 >p : string
 >x : T
@@= skipped -10, +10 lines =@@
 }
 
 foo({ m(x) { return x.length } });
->foo({ m(x) { return x.length } }) : { m(x: string): number; }
->foo : <T extends { m(p: string): number; }>(x: T) => T
->{ m(x) { return x.length } } : { m(x: string): number; }
+>foo({ m(x) { return x.length } }) : { m: (x: string) => number; }
+>foo : <T extends { m: (p: string) => number; }>(x: T) => T
+>{ m(x) { return x.length } } : { m: (x: string) => number; }
 >m : (x: string) => number
 >x : string
 >x.length : number
