--- old.subtypeReductionUnionConstraints.types
+++ new.subtypeReductionUnionConstraints.types
@@= skipped -44, +44 lines =@@
 
 export function visitNodes<T extends Node>(node: Document | Node, predicate: (testNode: Node) => testNode is T): void {
 >visitNodes : <T extends Node>(node: Document | Node, predicate: (testNode: Node) => testNode is T) => void
->node : Node | Document
+>node : Document | Node
 >predicate : (testNode: Node) => testNode is T
 >testNode : Node
 
@@= skipped -8, +8 lines =@@
 >isNode(node) && predicate(node) : boolean
 >isNode(node) : boolean
 >isNode : (node: unknown) => node is Node
->node : Node | Document
+>node : Document | Node
 >predicate(node) : boolean
 >predicate : (testNode: Node) => testNode is T
 >node : Node
@@= skipped -10, +10 lines =@@
 >!isNode(node) : boolean
 >isNode(node) : boolean
 >isNode : (node: unknown) => node is Node
->node : Node | Document
+>node : Document | Node
 >!isBar(node) : boolean
 >isBar(node) : boolean
 >isBar : (node: Node) => node is BarNode
@@= skipped -9, +9 lines =@@
         const nodes: Node[] = node.children;
 >nodes : Node[]
 >node.children : Node[]
->node : FooNode | Document
+>node : Document | FooNode
 >children : Node[]
     }
 }
