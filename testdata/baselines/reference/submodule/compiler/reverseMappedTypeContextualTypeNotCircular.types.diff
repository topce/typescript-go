--- old.reverseMappedTypeContextualTypeNotCircular.types
+++ new.reverseMappedTypeContextualTypeNotCircular.types
@@= skipped -5, +5 lines =@@
 >state : S
 
 declare function createStructuredSelector<S, T>(
->createStructuredSelector : <S, T>(selectors: { [K in keyof T]: Selector<S, T[K]>; }) => Selector<S, T>
+>createStructuredSelector : <S, T>(selectors: { [K in keyof T]: Selector<S, T[K]> }) => Selector<S, T>
 
   selectors: {[K in keyof T]: Selector<S, T[K]>},
->selectors : { [K in keyof T]: Selector<S, T[K]>; }
+>selectors : { [K in keyof T]: Selector<S, T[K]> }
 
 ): Selector<S, T>;
 
@@= skipped -16, +16 lines =@@
 const mapStateToProps = createStructuredSelector({
 >mapStateToProps : Selector<unknown, { editable: {}; }>
 >createStructuredSelector({  editable: (state: any, props: any) => editable(), // expect "Type '(state: any, props: any) => {}' is not assignable to type 'Selector<unknown, {}>'", _not_ a circularity error}) : Selector<unknown, { editable: {}; }>
->createStructuredSelector : <S, T>(selectors: { [K in keyof T]: Selector<S, T[K]>; }) => Selector<S, T>
+>createStructuredSelector : <S, T>(selectors: { [K in keyof T]: Selector<S, T[K]> }) => Selector<S, T>
 >{  editable: (state: any, props: any) => editable(), // expect "Type '(state: any, props: any) => {}' is not assignable to type 'Selector<unknown, {}>'", _not_ a circularity error} : { editable: (state: any, props: any) => {}; }
 
   editable: (state: any, props: any) => editable(), // expect "Type '(state: any, props: any) => {}' is not assignable to type 'Selector<unknown, {}>'", _not_ a circularity error
