--- old.truthinessCallExpressionCoercion.js
+++ new.truthinessCallExpressionCoercion.js
@@= skipped -100, +100 lines =@@
 
 //// [truthinessCallExpressionCoercion.js]
 function onlyErrorsWhenTestingNonNullableFunctionType(required, optional) {
-    if (required) { // error
+    if (required) {
     }
-    if (optional) { // ok
+    if (optional) {
     }
-    if (!!required) { // ok
+    if (!!required) {
     }
-    if (required()) { // ok
+    if (required()) {
     }
 }
 function onlyErrorsWhenUnusedInBody() {
     function test() { return Math.random() > 0.5; }
-    if (test) { // error
+    if (test) {
         console.log('test');
     }
-    if (test) { // ok
+    if (test) {
         console.log(test);
     }
-    if (test) { // ok
+    if (test) {
         test();
     }
-    if (test) { // ok
-        [function () { return null; }].forEach(function () {
+    if (test) {
+        [() => null].forEach(() => {
             test();
         });
     }
-    if (test) { // error
-        [function () { return null; }].forEach(function (test) {
+    if (test) {
+        [() => null].forEach(test => {
             test();
         });
     }
 }
 function checksPropertyAccess() {
-    var x = {
+    const x = {
         foo: {
-            bar: function () { return true; }
+            bar() { return true; }
         }
     };
-    if (x.foo.bar) { // error
+    if (x.foo.bar) {
     }
-    if (x.foo.bar) { // ok
+    if (x.foo.bar) {
         x.foo.bar;
     }
 }
-var Foo = /** @class */ (function () {
-    function Foo() {
-    }
-    Foo.prototype.isUser = function () {
+class Foo {
+    maybeIsUser;
+    isUser() {
         return true;
-    };
-    Foo.prototype.test = function () {
-        if (this.isUser) { // error
+    }
+    test() {
+        if (this.isUser) {
         }
-        if (this.maybeIsUser) { // ok
+        if (this.maybeIsUser) {
         }
-    };
-    return Foo;
-}());
-// Test for GH-35557 where ids were not assigned for a symbol.
+    }
+}
 function A(stats) {
-    if (stats.isDirectory) { // err
-        console.log("[Directory] ".concat(stats.ctime));
+    if (stats.isDirectory) {
+        console.log(`[Directory] ${stats.ctime}`);
     }
 }
 function B(a, b) {
-    if (a.stats.isDirectory) { // err
+    if (a.stats.isDirectory) {
         b.stats.isDirectory();
     }
-    if (a.stats.isDirectory) { // ok
+    if (a.stats.isDirectory) {
         a.stats.isDirectory();
     }
 }
