--- old.isolatedDeclarationErrorsObjects.types
+++ new.isolatedDeclarationErrorsObjects.types
@@= skipped -59, +59 lines =@@
 }
 
 export let oWithMethods = {
->oWithMethods : { method(): void; okMethod(): void; a: number; bad(): void; e: number; }
->{    method() { },    okMethod(): void { },    a: 1,    bad() { },    e: V,} : { method(): void; okMethod(): void; a: number; bad(): void; e: number; }
+>oWithMethods : { method: () => void; okMethod: () => void; a: number; bad: () => void; e: number; }
+>{    method() { },    okMethod(): void { },    a: 1,    bad() { },    e: V,} : { method: () => void; okMethod: () => void; a: number; bad: () => void; e: number; }
 
     method() { },
 >method : () => void
@@= skipped -21, +21 lines =@@
 >V : 1
 }
 export let oWithMethodsNested = {
->oWithMethodsNested : { foo: { method(): void; a: number; okMethod(): void; bad(): void; }; }
->{    foo: {        method() { },        a: 1,        okMethod(): void { },        bad() { }    }} : { foo: { method(): void; a: number; okMethod(): void; bad(): void; }; }
+>oWithMethodsNested : { foo: { method: () => void; a: number; okMethod: () => void; bad: () => void; }; }
+>{    foo: {        method() { },        a: 1,        okMethod(): void { },        bad() { }    }} : { foo: { method: () => void; a: number; okMethod: () => void; bad: () => void; }; }
 
     foo: {
->foo : { method(): void; a: number; okMethod(): void; bad(): void; }
->{        method() { },        a: 1,        okMethod(): void { },        bad() { }    } : { method(): void; a: number; okMethod(): void; bad(): void; }
+>foo : { method: () => void; a: number; okMethod: () => void; bad: () => void; }
+>{        method() { },        a: 1,        okMethod(): void { },        bad() { }    } : { method: () => void; a: number; okMethod: () => void; bad: () => void; }
 
         method() { },
 >method : () => void
@@= skipped -91, +91 lines =@@
 >10 : 10
 }
 export const oWithComputedProperties = {
->oWithComputedProperties : { [x: string]: number; [x: number]: number; 1: number; 2: number; [s]: number; 10: number; }
->{    [1]: 1,    [1 + 3]: 1,    [prop(2)]: 2,    [s]: 1,    [E.V]: 1,    [str]: 0,} : { [x: string]: number; [x: number]: number; 1: number; 2: number; [s]: number; 10: number; }
+>oWithComputedProperties : { [x: string]: number; [x: number]: number; [1]: number; [prop(2)]: number; [s]: number; [E.V]: number; }
+>{    [1]: 1,    [1 + 3]: 1,    [prop(2)]: 2,    [s]: 1,    [E.V]: 1,    [str]: 0,} : { [x: string]: number; [x: number]: number; [1]: number; [prop(2)]: number; [s]: number; [E.V]: number; }
 
     [1]: 1,
 >[1] : number
@@= skipped -47, +47 lines =@@
 >1 : 1
 
 export const oWithSpread = {
->oWithSpread : { c: number; part: { a: number; }; a: number; b: number; }
->{    b: 1,    ...part,    c: 1,    part,} : { c: number; part: { a: number; }; a: number; b: number; }
+>oWithSpread : { a: number; b: number; c: number; part: { a: number; }; }
+>{    b: 1,    ...part,    c: 1,    part,} : { a: number; b: number; c: number; part: { a: number; }; }
 
     b: 1,
 >b : number
