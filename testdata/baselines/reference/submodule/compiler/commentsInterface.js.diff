--- old.commentsInterface.js
+++ new.commentsInterface.js
@@= skipped -90, +90 lines =@@
 var i2_i_nc_fnfoo_r = i2_i.nc_fnfoo(10);
 var i3_i;
 i3_i = {
-    f: /**own f*/ function (/**i3_i a*/ a) { return "Hello" + a; },
+    f: (/**i3_i a*/ a) => "Hello" + a,
     l: this.f,
     /** own x*/
     x: this.f(10),
@@= skipped -12, +12 lines =@@
 i3_i.l(10);
 i3_i.nc_f(10);
 i3_i.nc_l(10);
-
-
-//// [commentsInterface.d.ts]
-/** this is interface 1*/
-interface i1 {
-}
-declare var i1_i: i1;
-interface nc_i1 {
-}
-declare var nc_i1_i: nc_i1;
-/** this is interface 2 with memebers*/
-interface i2 {
-    /** this is x*/
-    x: number;
-    /** this is foo*/
-    foo: (/**param help*/ b: number) => string;
-    /** this is indexer*/
-    [/**string param*/ i: string]: any;
-    /**new method*/
-    new (/** param*/ i: i1): any;
-    nc_x: number;
-    nc_foo: (b: number) => string;
-    [i: number]: number;
-    /** this is call signature*/
-    (/**paramhelp a*/ a: number, /**paramhelp b*/ b: number): number;
-    /** this is fnfoo*/
-    fnfoo(/**param help*/ b: number): string;
-    nc_fnfoo(b: number): string;
-    nc_y: number;
-}
-declare var i2_i: i2;
-declare var i2_i_x: number;
-declare var i2_i_foo: (b: number) => string;
-declare var i2_i_foo_r: string;
-declare var i2_i_i2_si: any;
-declare var i2_i_i2_ii: number;
-declare var i2_i_n: any;
-declare var i2_i_nc_x: number;
-declare var i2_i_nc_foo: (b: number) => string;
-declare var i2_i_nc_foo_r: string;
-declare var i2_i_r: number;
-declare var i2_i_fnfoo: (b: number) => string;
-declare var i2_i_fnfoo_r: string;
-declare var i2_i_nc_fnfoo: (b: number) => string;
-declare var i2_i_nc_fnfoo_r: string;
-interface i3 {
-    /** Comment i3 x*/
-    x: number;
-    /** Function i3 f*/
-    f(/**number parameter*/ a: number): string;
-    /** i3 l*/
-    l: (/**comment i3 l b*/ b: number) => string;
-    nc_x: number;
-    nc_f(a: number): string;
-    nc_l: (b: number) => string;
-}
-declare var i3_i: i3;
