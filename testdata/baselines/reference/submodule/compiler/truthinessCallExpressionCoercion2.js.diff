--- old.truthinessCallExpressionCoercion2.js
+++ new.truthinessCallExpressionCoercion2.js
@@= skipped -217, +217 lines =@@
     // ok
     required1 && required2 && required1() && required2();
     // ok
-    [].forEach(function (f) { return f && f.apply(parent, []); });
+    [].forEach((f) => f && f.apply(parent, []));
     // error
     required1 && required2 && required1() && console.log('foo');
     // error
@@= skipped -13, +13 lines =@@
     if (required1 || required2) {
     }
     // error
-    if (required1 !== null && required1 !== void 0 ? required1 : b) {
+    if (required1 ?? b) {
     }
     // error
-    if (required1 !== null && required1 !== void 0 ? required1 : required2) {
+    if (required1 ?? required2) {
     }
     // error
     if (((required1 && b))) {
@@= skipped -17, +17 lines =@@
         required1();
     }
     // ok
-    if (required1 !== null && required1 !== void 0 ? required1 : b) {
+    if (required1 ?? b) {
         required1();
     }
     // ok
-    if (b !== null && b !== void 0 ? b : required1) {
+    if (b ?? required1) {
         required1();
     }
     // ok
@@= skipped -21, +21 lines =@@
     if ((required1 || required2) && b) {
     }
     // error
-    if (b && (required1 !== null && required1 !== void 0 ? required1 : required2)) {
+    if (b && (required1 ?? required2)) {
     }
     // error
-    if ((required1 !== null && required1 !== void 0 ? required1 : required2) && b) {
+    if ((required1 ?? required2) && b) {
     }
 }
 function checksConsole() {
@@= skipped -12, +12 lines =@@
         (window.console.firebug || (window.console.error && window.console.table));
 }
 function checksPropertyAccess() {
-    var _a, _b;
-    var x = {
+    const x = {
         foo: {
-            bar: function () { return true; }
+            bar() { return true; }
         }
     };
     // error
@@= skipped -15, +14 lines =@@
     // ok
     x.foo.bar && 1 && x.foo.bar();
     // ok
-    var y = A.from && A.from !== B.from ? true : false;
+    const y = A.from && A.from !== B.from ? true : false;
     y;
-    var x1 = {
-        a: { b: { c: function () { } } }
+    const x1 = {
+        a: { b: { c: () => { } } }
     };
-    var x2 = {
-        a: { b: { c: function () { } } }
+    const x2 = {
+        a: { b: { c: () => { } } }
     };
     // error
     x1.a.b.c && x2.a.b.c();
@@= skipped -20, +20 lines =@@
     if ((x1.a.b.c || x2.a.b.c) && 1) {
     }
     // error
-    if (1 && ((_a = x1.a.b.c) !== null && _a !== void 0 ? _a : x2.a.b.c)) {
+    if (1 && (x1.a.b.c ?? x2.a.b.c)) {
     }
     // error
-    if (((_b = x1.a.b.c) !== null && _b !== void 0 ? _b : x2.a.b.c) && 1) {
+    if ((x1.a.b.c ?? x2.a.b.c) && 1) {
     }
 }
-var Foo = /** @class */ (function () {
-    function Foo() {
-    }
-    Foo.prototype.required = function () {
+class Foo {
+    optional;
+    required() {
         return true;
-    };
-    Foo.prototype.test = function () {
+    }
+    test() {
         // error
         this.required && console.log('required');
         // error
@@= skipped -23, +22 lines =@@
         this.required && 1 && this.required();
         // ok
         1 && this.optional && console.log('optional');
-    };
-    return Foo;
-}());
+    }
+}
