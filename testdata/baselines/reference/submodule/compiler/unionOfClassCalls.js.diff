--- old.unionOfClassCalls.js
+++ new.unionOfClassCalls.js
@@= skipped -79, +79 lines =@@
 
 
 //// [unionOfClassCalls.js]
-"use strict";
 switch (tmp.get('t')) {
     case 'A': break;
     case 'B': break;
 }
 // from https://github.com/microsoft/TypeScript/issues/36390
-var arr = []; // Works with Array<number | string>
-var arr1 = [];
-var arr2 = [];
-arr.map(function (a, index) {
+const arr = []; // Works with Array<number | string>
+const arr1 = [];
+const arr2 = [];
+arr.map((a, index) => {
     return index;
 });
 // This case still doesn't work because `reduce` has multiple overloads :(
-arr.reduce(function (acc, a, index) {
+arr.reduce((acc, a, index) => {
     return [];
 }, []);
-arr.forEach(function (a, index) {
+arr.forEach((a, index) => {
     return index;
 });
-arr1.map(function (a, index) {
+arr1.map((a, index) => {
     return index;
 });
-arr1.reduce(function (acc, a, index) {
+arr1.reduce((acc, a, index) => {
     return [a];
 }, []);
-arr1.forEach(function (a, index) {
+arr1.forEach((a, index) => {
     return index;
 });
-arr2.map(function (a, index) {
+arr2.map((a, index) => {
     return index;
 });
-arr2.reduce(function (acc, a, index) {
+arr2.reduce((acc, a, index) => {
     return [];
 }, []);
-arr2.forEach(function (a, index) {
+arr2.forEach((a, index) => {
     return index;
 });
 // note, you must annotate `result` for now
-a.doThing().then(function (result) {
+a.doThing().then((result) => {
     // whatever
 });
