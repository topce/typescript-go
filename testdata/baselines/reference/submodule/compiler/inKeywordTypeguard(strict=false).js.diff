--- old.inKeywordTypeguard(strict=false).js
+++ new.inKeywordTypeguard(strict=false).js
@@= skipped -387, +387 lines =@@
 
 //// [inKeywordTypeguard.js]
 class A {
+    a;
 }
 class B {
+    b;
 }
 function negativeClassesTest(x) {
     if ("a" in x) {
@@= skipped -20, +22 lines =@@
     }
 }
 class AWithOptionalProp {
+    a;
 }
 class BWithOptionalProp {
+    b;
 }
 function positiveTestClassesWithOptionalProperties(x) {
     if ("a" in x) {
@@= skipped -36, +38 lines =@@
     }
 }
 class C {
+    a;
 }
 class D {
+    a;
 }
 function negativeMultipleClassesTest(x) {
     if ("a" in x) {
@@= skipped -12, +14 lines =@@
     }
 }
 class ClassWithUnionProp {
+    prop;
 }
 function negativePropTest(x) {
     if ("a" in x.prop) {
@@= skipped -10, +11 lines =@@
     }
 }
 class NegativeClassTest {
+    prop;
     inThis() {
         if ("a" in this.prop) {
             let z = this.prop.b;
@@= skipped -10, +11 lines =@@
     }
 }
 class UnreachableCodeDetection {
+    a;
     inThis() {
         if ("a" in this) {
         }
@@= skipped -17, +18 lines =@@
     }
 }
 if ('extra' in error) {
-    error; // Still Error
+    error;
 }
 else {
-    error; // Error
+    error;
 }
 function narrowsToNever(x) {
     let v;
@@= skipped -25, +25 lines =@@
     else if ("bProp" in x) {
         x.bProp;
     }
-    // x is never because of the type predicate from unknown
     else if ("cProp" in x) {
         const _never = x;
     }
@@= skipped -67, +66 lines =@@
 }
 function f5(x) {
     if ("a" in x) {
-        x; // { a: string }
+        x;
     }
     else if ("b" in x) {
-        x; // { b: string }
+        x;
     }
     else {
-        x; // never
+        x;
     }
 }
 function f6(x) {
     if ("a" in x) {
-        x; // { a: string }
+        x;
     }
     else if ("a" in x) {
-        x; // { b: string } & Record<"a", unknown>
+        x;
     }
     else {
-        x; // { b: string }
+        x;
     }
 }
-// Object and corresponding intersection should narrow the same
 function f7(x, y) {
     if ("a" in x) {
         x;
     }
     else {
-        x; // never
+        x;
     }
     if ("a" in y) {
         y;
     }
     else {
-        y; // never
+        y;
     }
 }
 const sym = Symbol();
@@= skipped -105, +104 lines =@@
 function f16(x, y) {
     x = y;
 }
-// Repro from #50639
 function foo(value) {
     if (typeof value === "object" && value !== null && "prop" in value) {
-        value; // A & object & Record<"prop", unknown>
+        value;
     }
 }
-// Repro from #50954
 const checkIsTouchDevice = () => "ontouchstart" in window || "msMaxTouchPoints" in window.navigator;
-// Repro from #51501
 function isHTMLTable(table) {
     return !!table && 'html' in table;
 }
-// Repro from #51549
 const f = (a) => {
     "foo" in a;
 };
-// Repro from #53773
 function test1(obj) {
     if (Array.isArray(obj) || 'length' in obj) {
-        obj; // T
+        obj;
     }
     else {
-        obj; // T
+        obj;
     }
 }
 function test2(obj) {
     if (Array.isArray(obj)) {
-        obj; // T & any[]
+        obj;
     }
     else {
-        obj; // T
+        obj;
     }
 }
 function test3(obj) {
     if ('length' in obj) {
-        obj; // T
+        obj;
     }
     else {
-        obj; // T
+        obj;
     }
 }
