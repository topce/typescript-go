--- old.moduleVisibilityTest2.types
+++ new.moduleVisibilityTest2.types
@@= skipped -18, +18 lines =@@
 }
 
 import OuterInnerAlias = OuterMod.OuterInnerMod;
->OuterInnerAlias : typeof OuterInnerAlias
+>OuterInnerAlias : typeof OuterInnerMod
 >OuterMod : typeof OuterMod
->OuterInnerMod : typeof OuterInnerAlias
+>OuterInnerMod : typeof OuterInnerMod
 
 module M {
 >M : typeof M
@@= skipped -60, +60 lines =@@
 >someMethodThatCallsAnOuterMethod : () => string
 >OuterInnerAlias.someExportedOuterInnerFunc() : string
 >OuterInnerAlias.someExportedOuterInnerFunc : () => string
->OuterInnerAlias : typeof OuterInnerAlias
+>OuterInnerAlias : typeof OuterInnerMod
 >someExportedOuterInnerFunc : () => string
 
 		public someMethodThatCallsAnInnerMethod() {return InnerMod.someExportedInnerFunc();}
@@= skipped -63, +63 lines =@@
 }
 
 var cprime : M.I = <M.I>null;
->cprime : M.I
+>cprime : I
 >M : any
-><M.I>null : M.I
+><M.I>null : I
 >M : any
 
 var c = new M.C();
->c : M.C
->new M.C() : M.C
->M.C : typeof M.C
+>c : C
+>new M.C() : C
+>M.C : typeof C
 >M : typeof M
->C : typeof M.C
+>C : typeof C
 
 var z = M.x;
 >z : any
@@= skipped -35, +35 lines =@@
 c.someMethodThatCallsAnOuterMethod();
 >c.someMethodThatCallsAnOuterMethod() : string
 >c.someMethodThatCallsAnOuterMethod : () => string
->c : M.C
+>c : C
 >someMethodThatCallsAnOuterMethod : () => string
 
