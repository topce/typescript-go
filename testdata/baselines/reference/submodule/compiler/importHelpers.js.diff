--- old.importHelpers.js
+++ new.importHelpers.js
@@= skipped -49, +49 lines =@@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.result = exports.B = exports.A = void 0;
-var tslib_1 = require("tslib");
-var A = /** @class */ (function () {
-    function A() {
-    }
-    return A;
-}());
+class A {
+}
 exports.A = A;
-var B = /** @class */ (function (_super) {
-    tslib_1.__extends(B, _super);
-    function B() {
-        return _super !== null && _super.apply(this, arguments) || this;
-    }
-    return B;
-}(A));
+class B extends A {
+}
 exports.B = B;
-var C = /** @class */ (function () {
-    function C() {
+@dec
+class C {
+    method(x) {
     }
-    C.prototype.method = function (x) {
-    };
-    tslib_1.__decorate([
-        tslib_1.__param(0, dec),
-        tslib_1.__metadata("design:type", Function),
-        tslib_1.__metadata("design:paramtypes", [Number]),
-        tslib_1.__metadata("design:returntype", void 0)
-    ], C.prototype, "method", null);
-    C = tslib_1.__decorate([
-        dec
-    ], C);
-    return C;
-}());
+}
 function id(x) {
     return x;
 }
-exports.result = id(templateObject_1 || (templateObject_1 = tslib_1.__makeTemplateObject(["hello world"], ["hello world"])));
-var templateObject_1;
+exports.result = id `hello world`;
 //// [script.js]
-var __extends = (this && this.__extends) || (function () {
-    var extendStatics = function (d, b) {
-        extendStatics = Object.setPrototypeOf ||
-            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
-            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
-        return extendStatics(d, b);
-    };
-    return function (d, b) {
-        if (typeof b !== "function" && b !== null)
-            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
-        extendStatics(d, b);
-        function __() { this.constructor = d; }
-        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-    };
-})();
-var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
-    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
-    return cooked;
-};
-var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
-    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
-    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
-    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
-    return c > 3 && r && Object.defineProperty(target, key, r), r;
-};
-var __metadata = (this && this.__metadata) || function (k, v) {
-    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
-};
-var __param = (this && this.__param) || function (paramIndex, decorator) {
-    return function (target, key) { decorator(target, key, paramIndex); }
-};
-var A = /** @class */ (function () {
-    function A() {
+class A {
+}
+class B extends A {
+}
+@dec
+class C {
+    method(x) {
     }
-    return A;
-}());
-var B = /** @class */ (function (_super) {
-    __extends(B, _super);
-    function B() {
-        return _super !== null && _super.apply(this, arguments) || this;
-    }
-    return B;
-}(A));
-var C = /** @class */ (function () {
-    function C() {
-    }
-    C.prototype.method = function (x) {
-    };
-    __decorate([
-        __param(0, dec),
-        __metadata("design:type", Function),
-        __metadata("design:paramtypes", [Number]),
-        __metadata("design:returntype", void 0)
-    ], C.prototype, "method", null);
-    C = __decorate([
-        dec
-    ], C);
-    return C;
-}());
+}
 function id(x) {
     return x;
 }
-var result = id(__makeTemplateObject(["hello world"], ["hello world"]));
+const result = id `hello world`;
