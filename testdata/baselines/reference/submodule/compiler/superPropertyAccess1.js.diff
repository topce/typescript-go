--- old.superPropertyAccess1.js
+++ new.superPropertyAccess1.js
@@= skipped -29, +29 lines =@@
 }
 
 //// [superPropertyAccess1.js]
-var __extends = (this && this.__extends) || (function () {
-    var extendStatics = function (d, b) {
-        extendStatics = Object.setPrototypeOf ||
-            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
-            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
-        return extendStatics(d, b);
-    };
-    return function (d, b) {
-        if (typeof b !== "function" && b !== null)
-            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
-        extendStatics(d, b);
-        function __() { this.constructor = d; }
-        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-    };
-})();
-var C = /** @class */ (function () {
-    function C() {
+class C {
+    foo() { }
+    get x() {
+        return 1;
     }
-    C.prototype.foo = function () { };
-    Object.defineProperty(C.prototype, "x", {
-        get: function () {
-            return 1;
-        },
-        enumerable: false,
-        configurable: true
-    });
-    C.prototype.bar = function () { };
-    return C;
-}());
-var D = /** @class */ (function (_super) {
-    __extends(D, _super);
-    function D() {
-        var _this = _super.call(this) || this;
-        _super.prototype.bar.call(_this);
-        _super.prototype.x; // error
-        return _this;
+    bar() { }
+}
+class D extends C {
+    foo() {
+        super.bar();
+        super.x; // error
     }
-    D.prototype.foo = function () {
-        _super.prototype.bar.call(this);
-        _super.prototype.x; // error
-    };
-    Object.defineProperty(D.prototype, "y", {
-        get: function () {
-            _super.prototype.bar.call(this);
-            _super.prototype.x; // error
-            return 1;
-        },
-        enumerable: false,
-        configurable: true
-    });
-    return D;
-}(C));
+    constructor() {
+        super();
+        super.bar();
+        super.x; // error
+    }
+    get y() {
+        super.bar();
+        super.x; // error
+        return 1;
+    }
+}
