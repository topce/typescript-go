--- old.genericFunctionsWithOptionalParameters1.types
+++ new.genericFunctionsWithOptionalParameters1.types
@@= skipped -2, +2 lines =@@
 === genericFunctionsWithOptionalParameters1.ts ===
 interface Utils {
    fold<T, S>(c?: Array<T>, folder?: (s: S, t: T) => T, init?: S): T;
->fold : <T, S>(c?: Array<T>, folder?: (s: S, t: T) => T, init?: S) => T
+>fold : <T, S>(c?: T[], folder?: (s: S, t: T) => T, init?: S) => T
 >c : T[]
 >folder : (s: S, t: T) => T
 >s : S
@@= skipped -13, +13 lines =@@
 
 utils.fold(); // no error
 >utils.fold() : unknown
->utils.fold : <T, S>(c?: Array<T>, folder?: (s: S, t: T) => T, init?: S) => T
+>utils.fold : <T, S>(c?: T[], folder?: (s: S, t: T) => T, init?: S) => T
 >utils : Utils
->fold : <T, S>(c?: Array<T>, folder?: (s: S, t: T) => T, init?: S) => T
+>fold : <T, S>(c?: T[], folder?: (s: S, t: T) => T, init?: S) => T
 
 utils.fold(null); // no error
 >utils.fold(null) : unknown
->utils.fold : <T, S>(c?: Array<T>, folder?: (s: S, t: T) => T, init?: S) => T
+>utils.fold : <T, S>(c?: T[], folder?: (s: S, t: T) => T, init?: S) => T
 >utils : Utils
->fold : <T, S>(c?: Array<T>, folder?: (s: S, t: T) => T, init?: S) => T
+>fold : <T, S>(c?: T[], folder?: (s: S, t: T) => T, init?: S) => T
 
 utils.fold(null, null); // no error
 >utils.fold(null, null) : unknown
->utils.fold : <T, S>(c?: Array<T>, folder?: (s: S, t: T) => T, init?: S) => T
+>utils.fold : <T, S>(c?: T[], folder?: (s: S, t: T) => T, init?: S) => T
 >utils : Utils
->fold : <T, S>(c?: Array<T>, folder?: (s: S, t: T) => T, init?: S) => T
+>fold : <T, S>(c?: T[], folder?: (s: S, t: T) => T, init?: S) => T
 
 utils.fold(null, null, null); // no error
 >utils.fold(null, null, null) : unknown
->utils.fold : <T, S>(c?: Array<T>, folder?: (s: S, t: T) => T, init?: S) => T
+>utils.fold : <T, S>(c?: T[], folder?: (s: S, t: T) => T, init?: S) => T
 >utils : Utils
->fold : <T, S>(c?: Array<T>, folder?: (s: S, t: T) => T, init?: S) => T
+>fold : <T, S>(c?: T[], folder?: (s: S, t: T) => T, init?: S) => T
 
