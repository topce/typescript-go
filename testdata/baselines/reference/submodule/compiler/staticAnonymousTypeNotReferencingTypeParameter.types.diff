--- old.staticAnonymousTypeNotReferencingTypeParameter.types
+++ new.staticAnonymousTypeNotReferencingTypeParameter.types
@@= skipped -8, +8 lines =@@
 >x : T
 
   class Inner {
->Inner : Inner
+>Inner : Inner<T>
 
     static y: T = x;
 >y : T
@@= skipped -12, +12 lines =@@
 let y: number = outer(5).y;
 >y : number
 >outer(5).y : number
->outer(5) : typeof Inner
+>outer(5) : { new (): Inner<number>; y: number; prototype: Inner<any>; }
 >outer : <T>(x: T) => typeof Inner
 >5 : 5
 >y : number
@@= skipped -28, +28 lines =@@
     var a = ListWrapper2.clone(dit, array);
 >a : T[]
 >ListWrapper2.clone(dit, array) : T[]
->ListWrapper2.clone : <T_1>(dit: typeof ListWrapper2, array: T_1[]) => T_1[]
+>ListWrapper2.clone : <T>(dit: typeof ListWrapper2, array: T[]) => T[]
 >ListWrapper2 : typeof ListWrapper2
->clone : <T_1>(dit: typeof ListWrapper2, array: T_1[]) => T_1[]
+>clone : <T>(dit: typeof ListWrapper2, array: T[]) => T[]
 >dit : typeof ListWrapper2
 >array : T[]
 
@@= skipped -213, +213 lines =@@
     var a = ListWrapper.clone(dit, array);
 >a : T[]
 >ListWrapper.clone(dit, array) : T[]
->ListWrapper.clone : <T_1>(dit: typeof ListWrapper, array: T_1[]) => T_1[]
+>ListWrapper.clone : <T>(dit: typeof ListWrapper, array: T[]) => T[]
 >ListWrapper : typeof ListWrapper
->clone : <T_1>(dit: typeof ListWrapper, array: T_1[]) => T_1[]
+>clone : <T>(dit: typeof ListWrapper, array: T[]) => T[]
 >dit : typeof ListWrapper
 >array : T[]
 
@@= skipped -11, +11 lines =@@
 
     scanner.scanRange(3, 5, () => {  });
 >scanner.scanRange(3, 5, () => {  }) : void
->scanner.scanRange : <T_1>(start: number, length: number, callback: () => T_1) => T_1
+>scanner.scanRange : <T>(start: number, length: number, callback: () => T) => T
 >scanner : Scanner
->scanRange : <T_1>(start: number, length: number, callback: () => T_1) => T_1
+>scanRange : <T>(start: number, length: number, callback: () => T) => T
 >3 : 3
 >5 : 5
 >() => {  } : () => void
@@= skipped -10, +10 lines =@@
     return tessst.funkyFor(array, t => t.toString()) ? a.reverse() : a;
 >tessst.funkyFor(array, t => t.toString()) ? a.reverse() : a : T[]
 >tessst.funkyFor(array, t => t.toString()) : string
->tessst.funkyFor : <T_1, U>(array: T_1[], callback: (element: T_1, index: number) => U) => U
+>tessst.funkyFor : <T, U>(array: T[], callback: (element: T, index: number) => U) => U
 >tessst : typeof tessst
->funkyFor : <T_1, U>(array: T_1[], callback: (element: T_1, index: number) => U) => U
+>funkyFor : <T, U>(array: T[], callback: (element: T, index: number) => U) => U
 >array : T[]
 >t => t.toString() : (t: T) => string
 >t : T
@@= skipped -273, +273 lines =@@
 
     if (isPresent(compareFn)) {
 >isPresent(compareFn) : boolean
->isPresent : <T_1>(compareFn?: (a: T_1, b: T_1) => number) => boolean
+>isPresent : <T>(compareFn?: (a: T, b: T) => number) => boolean
 >compareFn : (a: T, b: T) => number
 
       l.sort(compareFn);
@@= skipped -34, +34 lines =@@
 >ListWrapper : typeof ListWrapper
 >l : T[]
 >JSON.stringify(l) : string
->JSON.stringify : { (value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string; (value: any, replacer?: (number | string)[] | null, space?: string | number): string; }
+>JSON.stringify : { (value: any, replacer?: (key: string, value: any) => any, space?: string | number): string; (value: any, replacer?: (string | number)[], space?: string | number): string; }
 >JSON : JSON
->stringify : { (value: any, replacer?: (this: any, key: string, value: any) => any, space?: string | number): string; (value: any, replacer?: (number | string)[] | null, space?: string | number): string; }
+>stringify : { (value: any, replacer?: (key: string, value: any) => any, space?: string | number): string; (value: any, replacer?: (string | number)[], space?: string | number): string; }
 >l : T[]
 
   static maximum<T>(dit: typeof ListWrapper, list: T[], predicate: (t: T) => number): T {
