--- old.baseConstraintOfDecorator.js
+++ new.baseConstraintOfDecorator.js
@@= skipped -22, +22 lines =@@
 
 //// [baseConstraintOfDecorator.js]
 "use strict";
-var __extends = (this && this.__extends) || (function () {
-    var extendStatics = function (d, b) {
-        extendStatics = Object.setPrototypeOf ||
-            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
-            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
-        return extendStatics(d, b);
-    };
-    return function (d, b) {
-        if (typeof b !== "function" && b !== null)
-            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
-        extendStatics(d, b);
-        function __() { this.constructor = d; }
-        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-    };
-})();
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.classExtender = classExtender;
 exports.classExtender2 = classExtender2;
 function classExtender(superClass, _instanceModifier) {
-    return /** @class */ (function (_super) {
-        __extends(decoratorFunc, _super);
-        function decoratorFunc() {
-            var args = [];
-            for (var _i = 0; _i < arguments.length; _i++) {
-                args[_i] = arguments[_i];
-            }
-            var _this = _super.apply(this, args) || this;
-            _instanceModifier(_this, args);
-            return _this;
+    return class decoratorFunc extends superClass {
+        constructor(...args) {
+            super(...args);
+            _instanceModifier(this, args);
         }
-        return decoratorFunc;
-    }(superClass));
+    };
 }
-var MyClass = /** @class */ (function () {
-    function MyClass() {
-    }
-    return MyClass;
-}());
+class MyClass {
+    x;
+}
 function classExtender2(superClass, _instanceModifier) {
-    return /** @class */ (function (_super) {
-        __extends(decoratorFunc, _super);
-        function decoratorFunc() {
-            var args = [];
-            for (var _i = 0; _i < arguments.length; _i++) {
-                args[_i] = arguments[_i];
-            }
-            var _this = _super.apply(this, args) || this;
-            _instanceModifier(_this, args);
-            return _this;
+    return class decoratorFunc extends superClass {
+        constructor(...args) {
+            super(...args);
+            _instanceModifier(this, args);
         }
-        return decoratorFunc;
-    }(superClass));
+    };
 }
