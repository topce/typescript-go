--- old.contextualTypeForInitalizedVariablesFiltersUndefined.types
+++ new.contextualTypeForInitalizedVariablesFiltersUndefined.types
@@= skipped -1, +1 lines =@@
 
 === contextualTypeForInitalizedVariablesFiltersUndefined.ts ===
 const fInferred = ({ a = 0 } = {}) => a;
->fInferred : ({ a }?: { a?: number | undefined; }) => number
->({ a = 0 } = {}) => a : ({ a }?: { a?: number | undefined; }) => number
+>fInferred : (__0?: { a?: number | undefined; }) => number
+>({ a = 0 } = {}) => a : (__0?: { a?: number | undefined; }) => number
 >a : number
 >0 : 0
 >{} : {}
@@= skipped -10, +10 lines =@@
 // const fInferred: ({ a }?: { a?: number; }) => number
 
 const fAnnotated: typeof fInferred = ({ a = 0 } = {}) => a;
->fAnnotated : ({ a }?: { a?: number | undefined; }) => number
->fInferred : ({ a }?: { a?: number | undefined; }) => number
->({ a = 0 } = {}) => a : ({ a }?: { a?: number | undefined; } | undefined) => number
+>fAnnotated : (__0?: { a?: number | undefined; }) => number
+>fInferred : (__0?: { a?: number | undefined; }) => number
+>({ a = 0 } = {}) => a : (__0?: { a?: number | undefined; } | undefined) => number
 >a : number
 >0 : 0
 >{} : {}
@@= skipped -17, +17 lines =@@
 >t : { s: string; } | undefined
 
 function fst({ s } = t) { }
->fst : ({ s }?: { s: string; } | undefined) => void
+>fst : (__0?: { s: string; } | undefined) => void
 >s : any
 >t : { s: string; } | undefined
 
