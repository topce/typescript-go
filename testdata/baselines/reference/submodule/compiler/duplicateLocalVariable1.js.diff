--- old.duplicateLocalVariable1.js
+++ new.duplicateLocalVariable1.js
@@= skipped -346, +346 lines =@@
 
 //// [duplicateLocalVariable1.js]
 "use strict";
-//import FileManager = require('filemanager');
-//import App = require('app');
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.tests = exports.TestRunner = exports.TestCase = void 0;
 var TestFileDir = ".\\TempTestFiles";
-var TestCase = /** @class */ (function () {
-    function TestCase(name, test, errorMessageRegEx) {
+class TestCase {
+    name;
+    test;
+    errorMessageRegEx;
+    constructor(name, test, errorMessageRegEx) {
         this.name = name;
         this.test = test;
         this.errorMessageRegEx = errorMessageRegEx;
     }
-    return TestCase;
-}());
+}
 exports.TestCase = TestCase;
-var TestRunner = /** @class */ (function () {
-    function TestRunner() {
-        this.tests = [];
-    }
-    TestRunner.arrayCompare = function (arg1, arg2) {
+class TestRunner {
+    tests = [];
+    static arrayCompare(arg1, arg2) {
         return (arg1.every(function (val, index) { return val === arg2[index]; }));
-    };
-    TestRunner.prototype.addTest = function (test) {
+    }
+    addTest(test) {
         this.tests.push(test);
-    };
-    TestRunner.prototype.run = function () {
+    }
+    run() {
         var success = true;
         for (var test in this.tests) {
             var exception = false;
@@= skipped -37, +35 lines =@@
                 exception = true;
                 testResult = false;
                 if (typeof testcase.errorMessageRegEx === "string") {
-                    if (testcase.errorMessageRegEx === "") { // Any error is fine
+                    if (testcase.errorMessageRegEx === "") {
                         testResult = true;
                     }
                     else if (e.message) {
@@= skipped -9, +9 lines =@@
                     }
                 }
                 if (testResult === false) {
-                    //console.log(e.message);
                 }
             }
             if ((testcase.errorMessageRegEx !== undefined) && !exception) {
@@= skipped -14, +13 lines =@@
         }
         else {
         }
-    };
-    return TestRunner;
-}());
+    }
+}
 exports.TestRunner = TestRunner;
 exports.tests = (function () {
     var testRunner = new TestRunner();
-    // First 3 are for simple harness validation
     testRunner.addTest(new TestCase("Basic test", function () { return true; }));
     testRunner.addTest(new TestCase("Test for any error", function () { throw new Error(); return false; }, ""));
     testRunner.addTest(new TestCase("Test RegEx error message match", function () { throw new Error("Should also pass"); return false; }, "Should [also]+ pass"));
     testRunner.addTest(new TestCase("Test array compare true", function () { return TestRunner.arrayCompare([1, 2, 3], [1, 2, 3]); }));
     testRunner.addTest(new TestCase("Test array compare false", function () { return !TestRunner.arrayCompare([3, 2, 3], [1, 2, 3]); }));
-    // File detection tests
     testRunner.addTest(new TestCase("Check file exists", function () {
         return FileManager.DirectoryManager.fileExists(TestFileDir + "\\Test.txt");
     }));
     testRunner.addTest(new TestCase("Check file doesn't exist", function () {
         return !FileManager.DirectoryManager.fileExists(TestFileDir + "\\Test2.txt");
     }));
-    // File pattern matching tests
     testRunner.addTest(new TestCase("Check text file match", function () {
         return (FileManager.FileBuffer.isTextFile("C:\\somedir\\readme.txt") &&
             FileManager.FileBuffer.isTextFile("C:\\spaces path\\myapp.str") &&
@@= skipped -32, +28 lines =@@
         return (!FileManager.FileBuffer.isTextFile("C:\\somedir\\app.exe") &&
             !FileManager.FileBuffer.isTextFile("C:\\somedir\\my lib.dll"));
     }));
-    // Command-line parameter tests
     testRunner.addTest(new TestCase("Check App defaults", function () {
         var app = new App.App([]);
         return (app.fixLines === false &&
@@= skipped -22, +21 lines =@@
             app.encodings[1] === "ascii" &&
             app.encodings.length === 2);
     }));
-    // File BOM detection tests
     testRunner.addTest(new TestCase("Check encoding detection no BOM", function () {
         var fb = new FileManager.FileBuffer(TestFileDir + "\\noBOM.txt");
         return fb.bom === 'none' && fb.encoding === 'utf8';
@@= skipped -25, +24 lines =@@
         var fb = new FileManager.FileBuffer(TestFileDir + "\\0bytefile.txt");
         return fb.bom === 'none' && fb.encoding === 'utf8';
     }));
-    // UTF8 encoding tests
     testRunner.addTest(new TestCase("Check byte reader", function () {
         var fb = new FileManager.FileBuffer(TestFileDir + "\\UTF8BOM.txt");
         var chars = [];
@@= skipped -32, +31 lines =@@
         var expected = [0xEF, 0xBB, 0xBF, 0x54, 0xC3, 0xA8, 0xE1, 0xB4, 0xA3, 0xE2, 0x80, 0xA0, 0x0D, 0x0A];
         return TestRunner.arrayCompare(bytes, expected);
     }));
-    // Test reading and writing files
     testRunner.addTest(new TestCase("Check saving a file", function () {
         var filename = TestFileDir + "\\tmpUTF16LE.txt";
         var fb = new FileManager.FileBuffer(14);
@@= skipped -32, +31 lines =@@
         fb.writeByte(5, 200);
         return true;
     }, "write beyond buffer length"));
-    // Non-BMP unicode char tests
     testRunner.addTest(new TestCase("Read non-BMP utf16 chars", function () {
         var savedFile = new FileManager.FileBuffer(TestFileDir + "\\utf16leNonBmp.txt");
         if (savedFile.encoding !== 'utf16le') {
@@= skipped -74, +73 lines =@@
         var fb = new FileManager.FileBuffer(filename);
         return true;
     }, "Trail surrogate has an invalid value"));
-    // Count of CRs & LFs
     testRunner.addTest(new TestCase("Count character occurrences", function () {
         var filename = TestFileDir + "\\charCountASCII.txt";
         var fb = new FileManager.FileBuffer(filename);
         var result = (fb.countCR === 5 && fb.countLF === 4 && fb.countCRLF === 5 && fb.countHT === 3);
         return result;
     }));
-    // Control characters in text
     testRunner.addTest(new TestCase("Test file with control character", function () {
         var filename = TestFileDir + "\\controlChar.txt";
         var fb = new FileManager.FileBuffer(filename);
