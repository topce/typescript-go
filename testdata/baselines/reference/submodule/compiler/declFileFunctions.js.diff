--- old.declFileFunctions.js
+++ new.declFileFunctions.js
@@= skipped -87, +87 lines =@@
 exports.fooWithTypePredicateAndMulitpleParams = fooWithTypePredicateAndMulitpleParams;
 exports.fooWithTypeTypePredicateAndGeneric = fooWithTypeTypePredicateAndGeneric;
 exports.fooWithTypeTypePredicateAndRestParam = fooWithTypeTypePredicateAndRestParam;
-/** This comment should appear for foo*/
 function foo() {
 }
-/** This is comment for function signature*/
-function fooWithParameters(/** this is comment about a*/ a, 
-/** this is comment for b*/
-b) {
+function fooWithParameters(a, b) {
     var d = a;
 }
-function fooWithRestParameters(a) {
-    var rests = [];
-    for (var _i = 1; _i < arguments.length; _i++) {
-        rests[_i - 1] = arguments[_i];
-    }
+function fooWithRestParameters(a, ...rests) {
     return a + rests.join("");
 }
 function fooWithOverloads(a) {
@@= skipped -31, +23 lines =@@
 function fooWithTypeTypePredicateAndGeneric(a) {
     return true;
 }
-function fooWithTypeTypePredicateAndRestParam(a) {
-    var rest = [];
-    for (var _i = 1; _i < arguments.length; _i++) {
-        rest[_i - 1] = arguments[_i];
-    }
+function fooWithTypeTypePredicateAndRestParam(a, ...rest) {
     return true;
 }
-/** This comment should appear for nonExportedFoo*/
 function nonExportedFoo() {
 }
-/** This is comment for function signature*/
-function nonExportedFooWithParameters(/** this is comment about a*/ a, 
-/** this is comment for b*/
-b) {
+function nonExportedFooWithParameters(a, b) {
     var d = a;
 }
-function nonExportedFooWithRestParameters(a) {
-    var rests = [];
-    for (var _i = 1; _i < arguments.length; _i++) {
-        rests[_i - 1] = arguments[_i];
-    }
+function nonExportedFooWithRestParameters(a, ...rests) {
     return a + rests.join("");
 }
 function nonExportedFooWithOverloads(a) {
     return a;
 }
 //// [declFileFunctions_1.js]
-/** This comment should appear for foo*/
 function globalfoo() {
 }
-/** This is comment for function signature*/
-function globalfooWithParameters(/** this is comment about a*/ a, 
-/** this is comment for b*/
-b) {
+function globalfooWithParameters(a, b) {
     var d = a;
 }
-function globalfooWithRestParameters(a) {
-    var rests = [];
-    for (var _i = 1; _i < arguments.length; _i++) {
-        rests[_i - 1] = arguments[_i];
-    }
+function globalfooWithRestParameters(a, ...rests) {
     return a + rests.join("");
 }
 function globalfooWithOverloads(a) {
     return a;
 }
-
-
-//// [declFileFunctions_0.d.ts]
-/** This comment should appear for foo*/
-export declare function foo(): void;
-/** This is comment for function signature*/
-export declare function fooWithParameters(/** this is comment about a*/ a: string, 
-/** this is comment for b*/
-b: number): void;
-export declare function fooWithRestParameters(a: string, ...rests: string[]): string;
-export declare function fooWithOverloads(a: string): string;
-export declare function fooWithOverloads(a: number): number;
-export declare function fooWithSingleOverload(a: string): string;
-export declare function fooWithTypePredicate(a: any): a is number;
-export declare function fooWithTypePredicateAndMulitpleParams(a: any, b: any, c: any): a is number;
-export declare function fooWithTypeTypePredicateAndGeneric<T>(a: any): a is T;
-export declare function fooWithTypeTypePredicateAndRestParam(a: any, ...rest: any[]): a is number;
-//// [declFileFunctions_1.d.ts]
-/** This comment should appear for foo*/
-declare function globalfoo(): void;
-/** This is comment for function signature*/
-declare function globalfooWithParameters(/** this is comment about a*/ a: string, 
-/** this is comment for b*/
-b: number): void;
-declare function globalfooWithRestParameters(a: string, ...rests: string[]): string;
-declare function globalfooWithOverloads(a: string): string;
-declare function globalfooWithOverloads(a: number): number;
