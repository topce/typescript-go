--- old.mapGroupBy.types
+++ new.mapGroupBy.types
@@= skipped -1, +1 lines =@@
 
 === mapGroupBy.ts ===
 const basic = Map.groupBy([0, 2, 8], x => x < 5 ? 'small' : 'large');
->basic : Map<"small" | "large", number[]>
->Map.groupBy([0, 2, 8], x => x < 5 ? 'small' : 'large') : Map<"small" | "large", number[]>
->Map.groupBy : <K, T>(items: Iterable<T>, keySelector: (item: T, index: number) => K) => Map<K, T[]>
+>basic : Map<"large" | "small", number[]>
+>Map.groupBy([0, 2, 8], x => x < 5 ? 'small' : 'large') : Map<"large" | "small", number[]>
+>Map.groupBy : <K, T>(items: Iterable<T, any, any>, keySelector: (item: T, index: number) => K) => Map<K, T[]>
 >Map : MapConstructor
->groupBy : <K, T>(items: Iterable<T>, keySelector: (item: T, index: number) => K) => Map<K, T[]>
+>groupBy : <K, T>(items: Iterable<T, any, any>, keySelector: (item: T, index: number) => K) => Map<K, T[]>
 >[0, 2, 8] : number[]
 >0 : 0
 >2 : 2
 >8 : 8
->x => x < 5 ? 'small' : 'large' : (x: number) => "small" | "large"
+>x => x < 5 ? 'small' : 'large' : (x: number) => "large" | "small"
 >x : number
->x < 5 ? 'small' : 'large' : "small" | "large"
+>x < 5 ? 'small' : 'large' : "large" | "small"
 >x < 5 : boolean
 >x : number
 >5 : 5
@@= skipped -21, +21 lines =@@
 const chars = Map.groupBy('a string', c => c);
 >chars : Map<string, string[]>
 >Map.groupBy('a string', c => c) : Map<string, string[]>
->Map.groupBy : <K, T>(items: Iterable<T>, keySelector: (item: T, index: number) => K) => Map<K, T[]>
+>Map.groupBy : <K, T>(items: Iterable<T, any, any>, keySelector: (item: T, index: number) => K) => Map<K, T[]>
 >Map : MapConstructor
->groupBy : <K, T>(items: Iterable<T>, keySelector: (item: T, index: number) => K) => Map<K, T[]>
+>groupBy : <K, T>(items: Iterable<T, any, any>, keySelector: (item: T, index: number) => K) => Map<K, T[]>
 >'a string' : "a string"
 >c => c : (c: string) => string
 >c : string
@@= skipped -21, +21 lines =@@
 const byRole = Map.groupBy(employees, x => x.role);
 >byRole : Map<"ic" | "manager", Employee[]>
 >Map.groupBy(employees, x => x.role) : Map<"ic" | "manager", Employee[]>
->Map.groupBy : <K, T>(items: Iterable<T>, keySelector: (item: T, index: number) => K) => Map<K, T[]>
+>Map.groupBy : <K, T>(items: Iterable<T, any, any>, keySelector: (item: T, index: number) => K) => Map<K, T[]>
 >Map : MapConstructor
->groupBy : <K, T>(items: Iterable<T>, keySelector: (item: T, index: number) => K) => Map<K, T[]>
+>groupBy : <K, T>(items: Iterable<T, any, any>, keySelector: (item: T, index: number) => K) => Map<K, T[]>
 >employees : Set<Employee>
 >x => x.role : (x: Employee) => "ic" | "manager"
 >x : Employee
@@= skipped -13, +13 lines =@@
 const byNonKey = Map.groupBy(employees, x => x);
 >byNonKey : Map<Employee, Employee[]>
 >Map.groupBy(employees, x => x) : Map<Employee, Employee[]>
->Map.groupBy : <K, T>(items: Iterable<T>, keySelector: (item: T, index: number) => K) => Map<K, T[]>
+>Map.groupBy : <K, T>(items: Iterable<T, any, any>, keySelector: (item: T, index: number) => K) => Map<K, T[]>
 >Map : MapConstructor
->groupBy : <K, T>(items: Iterable<T>, keySelector: (item: T, index: number) => K) => Map<K, T[]>
+>groupBy : <K, T>(items: Iterable<T, any, any>, keySelector: (item: T, index: number) => K) => Map<K, T[]>
 >employees : Set<Employee>
 >x => x : (x: Employee) => Employee
 >x : Employee
