--- old.dynamicImportWithNestedThis_es5.js
+++ new.dynamicImportWithNestedThis_es5.js
@@= skipped -13, +13 lines =@@
 c.dynamic();
 
 //// [dynamicImportWithNestedThis_es5.js]
-(function (factory) {
-    if (typeof module === "object" && typeof module.exports === "object") {
-        var v = factory(require, exports);
-        if (v !== undefined) module.exports = v;
+// https://github.com/Microsoft/TypeScript/issues/17564
+class C {
+    _path = './other';
+    dynamic() {
+        return Promise.resolve(`${this._path}`).then(s => require(s));
     }
-    else if (typeof define === "function" && define.amd) {
-        define(["require", "exports"], factory);
-    }
-})(function (require, exports) {
-    "use strict";
-    var __syncRequire = typeof module === "object" && typeof module.exports === "object";
-    // https://github.com/Microsoft/TypeScript/issues/17564
-    var C = /** @class */ (function () {
-        function C() {
-            this._path = './other';
-        }
-        C.prototype.dynamic = function () {
-            var _a;
-            return _a = this._path, __syncRequire ? Promise.resolve().then(function () { return require(_a); }) : new Promise(function (resolve_1, reject_1) { require([_a], resolve_1, reject_1); });
-        };
-        return C;
-    }());
-    var c = new C();
-    c.dynamic();
-});
+}
+const c = new C();
+c.dynamic();
