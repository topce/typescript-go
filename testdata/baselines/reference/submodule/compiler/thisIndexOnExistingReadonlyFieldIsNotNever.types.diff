--- old.thisIndexOnExistingReadonlyFieldIsNotNever.types
+++ new.thisIndexOnExistingReadonlyFieldIsNotNever.types
@@= skipped -12, +12 lines =@@
 }
 interface CoachMarkAnchorProps<C> {
     anchorRef?: (anchor: C) => void;
->anchorRef : ((anchor: C) => void) | undefined
+>anchorRef : (anchor: C) => void | undefined
 >anchor : C
 }
 type AnchorType<P> = Component<P>;
@@= skipped -24, +24 lines =@@
 >anchor : AnchorType<P>
 
                 const anchorRef = this.props.anchorRef;
->anchorRef : (CoachMarkAnchorProps<AnchorType<P>> & P)["anchorRef"] | undefined
->this.props.anchorRef : (CoachMarkAnchorProps<AnchorType<P>> & P)["anchorRef"] | undefined
+>anchorRef : CoachMarkAnchorProps<AnchorType<P>> & P["anchorRef"] | undefined
+>this.props.anchorRef : CoachMarkAnchorProps<AnchorType<P>> & P["anchorRef"] | undefined
 >this.props : Readonly<{ children?: unknown; }> & Readonly<CoachMarkAnchorProps<AnchorType<P>> & P>
 >this : this
 >props : Readonly<{ children?: unknown; }> & Readonly<CoachMarkAnchorProps<AnchorType<P>> & P>
->anchorRef : (CoachMarkAnchorProps<AnchorType<P>> & P)["anchorRef"] | undefined
+>anchorRef : CoachMarkAnchorProps<AnchorType<P>> & P["anchorRef"] | undefined
 
                 if (anchorRef) {
->anchorRef : (CoachMarkAnchorProps<AnchorType<P>> & P)["anchorRef"] | undefined
+>anchorRef : CoachMarkAnchorProps<AnchorType<P>> & P["anchorRef"] | undefined
 
                     anchorRef(anchor);
 >anchorRef(anchor) : void
