--- old.coAndContraVariantInferences3.js
+++ new.coAndContraVariantInferences3.js
@@= skipped -125, +125 lines =@@
 
 
 //// [coAndContraVariantInferences3.js]
-"use strict";
+var SyntaxKind;
+(function (SyntaxKind) {
+    SyntaxKind[SyntaxKind["ImportDeclaration"] = 0] = "ImportDeclaration";
+    SyntaxKind[SyntaxKind["Modifier"] = 1] = "Modifier";
+    SyntaxKind[SyntaxKind["ImportClause"] = 2] = "ImportClause";
+    SyntaxKind[SyntaxKind["AssertClause"] = 3] = "AssertClause";
+    SyntaxKind[SyntaxKind["Decorator"] = 4] = "Decorator";
+})(SyntaxKind || (SyntaxKind = {}));
 ;
 buildOverload("updateImportDeclaration")
     .overload({
-    0: function (node, modifiers, importClause, moduleSpecifier, assertClause) {
+    0(node, modifiers, importClause, moduleSpecifier, assertClause) {
         return updateImportDeclaration(node, modifiers, importClause, moduleSpecifier, assertClause);
     },
-    1: function (node, _decorators, modifiers, importClause, moduleSpecifier, assertClause) {
+    1(node, _decorators, modifiers, importClause, moduleSpecifier, assertClause) {
         return updateImportDeclaration(node, modifiers, importClause, moduleSpecifier, assertClause);
     },
 })
     .bind({
-    0: function (_a) {
-        var modifiers = _a[1], importClause = _a[2], moduleSpecifier = _a[3], assertClause = _a[4], other = _a[5];
-        return (other === undefined) &&
-            (modifiers === undefined || every(modifiers, isModifier)) &&
-            (importClause === undefined || !isArray(importClause)) &&
-            (moduleSpecifier === undefined || isExpression(moduleSpecifier)) &&
-            (assertClause === undefined || isAssertClause(assertClause));
-    },
-    1: function (_a) {
-        var decorators = _a[1], modifiers = _a[2], importClause = _a[3], moduleSpecifier = _a[4], assertClause = _a[5];
-        return (decorators === undefined || every(decorators, isDecorator)) &&
-            (modifiers === undefined || isArray(modifiers)) &&
-            (importClause === undefined || isImportClause(importClause)) &&
-            (moduleSpecifier !== undefined && isExpression(moduleSpecifier)) &&
-            (assertClause === undefined || isAssertClause(assertClause));
-    },
+    0: ([, modifiers, importClause, moduleSpecifier, assertClause, other]) => (other === undefined) &&
+        (modifiers === undefined || every(modifiers, isModifier)) &&
+        (importClause === undefined || !isArray(importClause)) &&
+        (moduleSpecifier === undefined || isExpression(moduleSpecifier)) &&
+        (assertClause === undefined || isAssertClause(assertClause)),
+    1: ([, decorators, modifiers, importClause, moduleSpecifier, assertClause]) => (decorators === undefined || every(decorators, isDecorator)) &&
+        (modifiers === undefined || isArray(modifiers)) &&
+        (importClause === undefined || isImportClause(importClause)) &&
+        (moduleSpecifier !== undefined && isExpression(moduleSpecifier)) &&
+        (assertClause === undefined || isAssertClause(assertClause)),
 })
     .deprecate({
     1: DISALLOW_DECORATORS
