--- old.defaultParameterAddsUndefinedWithStrictNullChecks.js
+++ new.defaultParameterAddsUndefinedWithStrictNullChecks.js
@@= skipped -61, +61 lines =@@
 
 
 //// [defaultParameterAddsUndefinedWithStrictNullChecks.js]
-function f(addUndefined1, addUndefined2) {
-    if (addUndefined1 === void 0) { addUndefined1 = "J"; }
+function f(addUndefined1 = "J", addUndefined2) {
     return addUndefined1.length + (addUndefined2 || 0);
 }
-function g(addUndefined, addDefined) {
-    if (addUndefined === void 0) { addUndefined = "J"; }
+function g(addUndefined = "J", addDefined) {
     return addUndefined.length + addDefined;
 }
-var total = f() + f('a', 1) + f('b') + f(undefined, 2);
+let total = f() + f('a', 1) + f('b') + f(undefined, 2);
 total = g('c', 3) + g(undefined, 4);
-function foo1(x, b) {
-    if (x === void 0) { x = "string"; }
+function foo1(x = "string", b) {
     x.length;
 }
-function foo2(x, b) {
-    if (x === void 0) { x = "string"; }
-    x.length; // ok, should be string
+function foo2(x = "string", b) {
+    x.length;
 }
-function foo3(x, b) {
-    if (x === void 0) { x = "string"; }
-    x.length; // ok, should be string
+function foo3(x = "string", b) {
+    x.length;
     x = undefined;
 }
-function foo4(x, b) {
-    if (x === void 0) { x = undefined; }
-    x; // should be string | undefined
+function foo4(x = undefined, b) {
+    x;
     x = undefined;
 }
-function allowsNull(val) {
-    if (val === void 0) { val = ""; }
+function allowsNull(val = "") {
     val = null;
     val = 'string and null are both ok';
 }
-allowsNull(null); // still allows passing null
-// .d.ts should have `string | undefined` for foo1, foo2, foo3 and foo4
+allowsNull(null);
 foo1(undefined, 1);
 foo2(undefined, 1);
 foo3(undefined, 1);
 foo4(undefined, 1);
-function removeUndefinedButNotFalse(x) {
-    if (x === void 0) { x = true; }
+function removeUndefinedButNotFalse(x = true) {
     if (x === false) {
         return x;
     }
 }
-function removeNothing(y) {
-    if (y === void 0) { y = cond ? true : undefined; }
+function removeNothing(y = cond ? true : undefined) {
     if (y !== undefined) {
         if (y === false) {
             return y;
@@= skipped -54, +44 lines =@@
     }
     return true;
 }
-
-
-//// [defaultParameterAddsUndefinedWithStrictNullChecks.d.ts]
-declare function f(addUndefined1?: string, addUndefined2?: number): number;
-declare function g(addUndefined: string | undefined, addDefined: number): number;
-declare let total: number;
-declare function foo1(x: string | undefined, b: number): void;
-declare function foo2(x: string | undefined, b: number): void;
-declare function foo3(x: string | undefined, b: number): void;
-declare function foo4(x: string | undefined, b: number): void;
-type OptionalNullableString = string | null | undefined;
-declare function allowsNull(val?: OptionalNullableString): void;
-declare function removeUndefinedButNotFalse(x?: boolean): false | undefined;
-declare const cond: boolean;
-declare function removeNothing(y?: boolean | undefined): boolean;
