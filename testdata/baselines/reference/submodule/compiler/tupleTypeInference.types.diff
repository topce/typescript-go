--- old.tupleTypeInference.types
+++ new.tupleTypeInference.types
@@= skipped -5, +5 lines =@@
 
 interface IQService {
     all<T1, T2, T3>(x: [IPromise<T1>, IPromise<T2>, IPromise<T3>]): IPromise<[T1, T2, T3]>;
->all : { <T1, T2, T3>(x: [IPromise<T1>, IPromise<T2>, IPromise<T3>]): IPromise<[T1, T2, T3]>; <T1_1, T2_1>(x: [IPromise<T1_1>, IPromise<T2_1>]): IPromise<[T1_1, T2_1]>; <T1_1>(x: [IPromise<T1_1>]): IPromise<[T1_1]>; }
+>all : { <T1, T2, T3>(x: [IPromise<T1>, IPromise<T2>, IPromise<T3>]): IPromise<[T1, T2, T3]>; <T1, T2>(x: [IPromise<T1>, IPromise<T2>]): IPromise<[T1, T2]>; <T1>(x: [IPromise<T1>]): IPromise<[T1]>; }
 >x : [IPromise<T1>, IPromise<T2>, IPromise<T3>]
 
     all<T1, T2>(x: [IPromise<T1>, IPromise<T2>]): IPromise<[T1, T2]>;
->all : { <T1_1, T2_1, T3>(x: [IPromise<T1_1>, IPromise<T2_1>, IPromise<T3>]): IPromise<[T1_1, T2_1, T3]>; <T1, T2>(x: [IPromise<T1>, IPromise<T2>]): IPromise<[T1, T2]>; <T1_1>(x: [IPromise<T1_1>]): IPromise<[T1_1]>; }
+>all : { <T1, T2, T3>(x: [IPromise<T1>, IPromise<T2>, IPromise<T3>]): IPromise<[T1, T2, T3]>; <T1, T2>(x: [IPromise<T1>, IPromise<T2>]): IPromise<[T1, T2]>; <T1>(x: [IPromise<T1>]): IPromise<[T1]>; }
 >x : [IPromise<T1>, IPromise<T2>]
 
     all<T1>(x: [IPromise<T1>]): IPromise<[T1]>;
->all : { <T1_1, T2, T3>(x: [IPromise<T1_1>, IPromise<T2>, IPromise<T3>]): IPromise<[T1_1, T2, T3]>; <T1_1, T2>(x: [IPromise<T1_1>, IPromise<T2>]): IPromise<[T1_1, T2]>; <T1>(x: [IPromise<T1>]): IPromise<[T1]>; }
+>all : { <T1, T2, T3>(x: [IPromise<T1>, IPromise<T2>, IPromise<T3>]): IPromise<[T1, T2, T3]>; <T1, T2>(x: [IPromise<T1>, IPromise<T2>]): IPromise<[T1, T2]>; <T1>(x: [IPromise<T1>]): IPromise<[T1]>; }
 >x : [IPromise<T1>]
 
     when<T>(t?: T): IPromise<T>;
