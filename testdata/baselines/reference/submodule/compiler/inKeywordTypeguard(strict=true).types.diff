--- old.inKeywordTypeguard(strict=true).types
+++ new.inKeywordTypeguard(strict=true).types
@@= skipped -441, +441 lines =@@
 >window : Window & typeof globalThis
 
         window.ontouchstart
->window.ontouchstart : (((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: Window, ev: TouchEvent) => any)) | null | undefined
+>window.ontouchstart : ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: Window, ev: TouchEvent) => any) | null | undefined
 >window : Window & typeof globalThis
->ontouchstart : (((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: Window, ev: TouchEvent) => any)) | null | undefined
+>ontouchstart : ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: Window, ev: TouchEvent) => any) | null | undefined
 
     } else {
         window.ontouchstart
->window.ontouchstart : (((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: Window, ev: TouchEvent) => any)) | null | undefined
+>window.ontouchstart : ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: Window, ev: TouchEvent) => any) | null | undefined
 >window : Window & typeof globalThis
->ontouchstart : (((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: Window, ev: TouchEvent) => any)) | null | undefined
+>ontouchstart : ((this: GlobalEventHandlers, ev: TouchEvent) => any) & ((this: Window, ev: TouchEvent) => any) | null | undefined
     }
 }
 
@@= skipped -43, +43 lines =@@
 >x && typeof x === "object" : unknown
 >x : unknown
 >typeof x === "object" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : {}
 >"object" : "object"
 >"a" in x : boolean
@@= skipped -19, +19 lines =@@
 >x && typeof x === "object" : unknown
 >x : unknown
 >typeof x === "object" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : {}
 >"object" : "object"
 >"a" in x : boolean
@@= skipped -105, +105 lines =@@
 >x && typeof x === "object" : boolean
 >x : T
 >typeof x === "object" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : NonNullable<T>
 >"object" : "object"
 >"a" in x : boolean
@@= skipped -19, +19 lines =@@
 >x && typeof x === "object" : boolean
 >x : T
 >typeof x === "object" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : NonNullable<T>
 >"object" : "object"
 >"a" in x : boolean
@@= skipped -319, +319 lines =@@
 }
 
 function f13(x: { a?: string }) {
->f13 : (x: { a?: string; }) => void
->x : { a?: string; }
+>f13 : (x: { a?: string | undefined; }) => void
+>x : { a?: string | undefined; }
 >a : string | undefined
 
     if ("a" in x) {
 >"a" in x : boolean
 >"a" : "a"
->x : { a?: string; }
+>x : { a?: string | undefined; }
 
         x;
->x : { a?: string; }
+>x : { a?: string | undefined; }
     }
     else {
         x;
->x : { a?: string; }
+>x : { a?: string | undefined; }
     }
 }
 
@@= skipped -79, +79 lines =@@
 >typeof value === "object" && value !== null && "prop" in value : boolean
 >typeof value === "object" && value !== null : boolean
 >typeof value === "object" : boolean
->typeof value : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof value : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >value : A
 >"object" : "object"
 >value !== null : boolean
->value : (A & object) | (A & null)
+>value : A & null | A & object
 >"prop" in value : boolean
 >"prop" : "prop"
 >value : A & object
@@= skipped -50, +50 lines =@@
 // Repro from #51549
 
 const f = <P extends object>(a: P & {}) => {
->f : <P extends object>(a: P & {}) => void
-><P extends object>(a: P & {}) => {    "foo" in a;} : <P extends object>(a: P & {}) => void
+>f : <P extends object>(a: P) => void
+><P extends object>(a: P & {}) => {    "foo" in a;} : <P extends object>(a: P) => void
 >a : P
 
     "foo" in a;
