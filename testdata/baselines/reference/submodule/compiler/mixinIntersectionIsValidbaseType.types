//// [tests/cases/compiler/mixinIntersectionIsValidbaseType.ts] ////

=== mixinIntersectionIsValidbaseType.ts ===
export type Constructor<T extends object = object> = new (...args: any[]) => T;
>Constructor : Constructor<T>
>args : any[]

export interface Initable {
    init(...args: any[]): void;
>init : (...args: any[]) => void
>args : any[]
}

/**
 * Plain mixin where the superclass must be Initable
 */
export const Serializable = <K extends Constructor<Initable> & Initable>(
>Serializable : <K extends Constructor<Initable> & Initable>(SuperClass: K) => { new (...args: any[]): SerializableLocal<K>; init: (...args: any[]) => void; prototype: SerializableLocal<any>; } & K
><K extends Constructor<Initable> & Initable>(    SuperClass: K) => {    const LocalMixin = (InnerSuperClass: K) => {        return class SerializableLocal extends InnerSuperClass {        }    };    let ResultClass = LocalMixin(SuperClass);    return ResultClass;} : <K extends Constructor<Initable> & Initable>(SuperClass: K) => { new (...args: any[]): SerializableLocal<K>; init: (...args: any[]) => void; prototype: SerializableLocal<any>; } & K

    SuperClass: K
>SuperClass : K

) => {
    const LocalMixin = (InnerSuperClass: K) => {
>LocalMixin : (InnerSuperClass: K) => { new (...args: any[]): SerializableLocal<K>; init: (...args: any[]) => void; prototype: SerializableLocal<any>; } & K
>(InnerSuperClass: K) => {        return class SerializableLocal extends InnerSuperClass {        }    } : (InnerSuperClass: K) => { new (...args: any[]): SerializableLocal<K>; init: (...args: any[]) => void; prototype: SerializableLocal<any>; } & K
>InnerSuperClass : K

        return class SerializableLocal extends InnerSuperClass {
>class SerializableLocal extends InnerSuperClass {        } : { new (...args: any[]): SerializableLocal<K>; init: (...args: any[]) => void; prototype: SerializableLocal<any>; } & K
>SerializableLocal : { new (...args: any[]): SerializableLocal<K>; init: (...args: any[]) => void; prototype: SerializableLocal<any>; } & K
>InnerSuperClass : Initable
        }
    };
    let ResultClass = LocalMixin(SuperClass);
>ResultClass : { new (...args: any[]): SerializableLocal<K>; init: (...args: any[]) => void; prototype: SerializableLocal<any>; } & K
>LocalMixin(SuperClass) : { new (...args: any[]): SerializableLocal<K>; init: (...args: any[]) => void; prototype: SerializableLocal<any>; } & K
>LocalMixin : (InnerSuperClass: K) => { new (...args: any[]): SerializableLocal<K>; init: (...args: any[]) => void; prototype: SerializableLocal<any>; } & K
>SuperClass : K

    return ResultClass;
>ResultClass : { new (...args: any[]): SerializableLocal<K>; init: (...args: any[]) => void; prototype: SerializableLocal<any>; } & K

};

const AMixin = <K extends Constructor<Initable> & Initable>(SuperClass: K) => {
>AMixin : <K extends Constructor<Initable> & Initable>(SuperClass: K) => void
><K extends Constructor<Initable> & Initable>(SuperClass: K) => {    let SomeHowOkay = class A extends SuperClass {    };    let SomeHowNotOkay = class A extends Serializable(SuperClass) {    };} : <K extends Constructor<Initable> & Initable>(SuperClass: K) => void
>SuperClass : K

    let SomeHowOkay = class A extends SuperClass {
>SomeHowOkay : { new (...args: any[]): A<K>; init: (...args: any[]) => void; prototype: A<any>; } & K
>class A extends SuperClass {    } : { new (...args: any[]): A<K>; init: (...args: any[]) => void; prototype: A<any>; } & K
>A : { new (...args: any[]): A<K>; init: (...args: any[]) => void; prototype: A<any>; } & K
>SuperClass : Initable

    };

    let SomeHowNotOkay = class A extends Serializable(SuperClass) {
>SomeHowNotOkay : { new (...args: any[]): A<K>; init: (...args: any[]) => void; prototype: A<any>; } & K
>class A extends Serializable(SuperClass) {    } : { new (...args: any[]): A<K>; init: (...args: any[]) => void; prototype: A<any>; } & K
>A : { new (...args: any[]): A<K>; init: (...args: any[]) => void; prototype: A<any>; } & K
>Serializable(SuperClass) : SerializableLocal<K> & Initable
>Serializable : <K extends Constructor<Initable> & Initable>(SuperClass: K) => { new (...args: any[]): SerializableLocal<K>; init: (...args: any[]) => void; prototype: SerializableLocal<any>; } & K
>SuperClass : K

    };
};
