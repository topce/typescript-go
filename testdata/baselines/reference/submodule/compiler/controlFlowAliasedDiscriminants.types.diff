--- old.controlFlowAliasedDiscriminants.types
+++ new.controlFlowAliasedDiscriminants.types
@@= skipped -70, +70 lines =@@
 
     data1.toExponential();  // should ok
 >data1.toExponential() : string
->data1.toExponential : (fractionDigits?: number) => string
+>data1.toExponential : (fractionDigits?: number | undefined) => string
 >data1 : number
->toExponential : (fractionDigits?: number) => string
+>toExponential : (fractionDigits?: number | undefined) => string
 
     data2.toExponential();  // should ok
 >data2.toExponential() : string
->data2.toExponential : (fractionDigits?: number) => string
+>data2.toExponential : (fractionDigits?: number | undefined) => string
 >data2 : number
->toExponential : (fractionDigits?: number) => string
+>toExponential : (fractionDigits?: number | undefined) => string
 
     data3.toExponential();  // should ok
 >data3.toExponential() : string
->data3.toExponential : (fractionDigits?: number) => string
+>data3.toExponential : (fractionDigits?: number | undefined) => string
 >data3 : number
->toExponential : (fractionDigits?: number) => string
+>toExponential : (fractionDigits?: number | undefined) => string
 }
 
 const areSuccess = isSuccess1 && isSuccess2 && isSuccess3;
@@= skipped -30, +30 lines =@@
 
     data1.toExponential();  // should ok
 >data1.toExponential() : string
->data1.toExponential : (fractionDigits?: number) => string
+>data1.toExponential : (fractionDigits?: number | undefined) => string
 >data1 : number
->toExponential : (fractionDigits?: number) => string
+>toExponential : (fractionDigits?: number | undefined) => string
 
     data2.toExponential();  // should ok
 >data2.toExponential() : string
->data2.toExponential : (fractionDigits?: number) => string
+>data2.toExponential : (fractionDigits?: number | undefined) => string
 >data2 : number
->toExponential : (fractionDigits?: number) => string
+>toExponential : (fractionDigits?: number | undefined) => string
 
     data3.toExponential();  // should ok
 >data3.toExponential() : string
->data3.toExponential : (fractionDigits?: number) => string
+>data3.toExponential : (fractionDigits?: number | undefined) => string
 >data3 : number
->toExponential : (fractionDigits?: number) => string
+>toExponential : (fractionDigits?: number | undefined) => string
 }
 
 {
@@= skipped -55, +55 lines =@@
 
         data1.toExponential();  // should error
 >data1.toExponential() : string
->data1.toExponential : (fractionDigits?: number) => string
+>data1.toExponential : (fractionDigits?: number | undefined) => string
 >data1 : number | undefined
->toExponential : (fractionDigits?: number) => string
+>toExponential : (fractionDigits?: number | undefined) => string
 
         data2.toExponential();  // should error
 >data2.toExponential() : string
->data2.toExponential : (fractionDigits?: number) => string
+>data2.toExponential : (fractionDigits?: number | undefined) => string
 >data2 : number | undefined
->toExponential : (fractionDigits?: number) => string
+>toExponential : (fractionDigits?: number | undefined) => string
 
         data3.toExponential();  // should ok
 >data3.toExponential() : string
->data3.toExponential : (fractionDigits?: number) => string
+>data3.toExponential : (fractionDigits?: number | undefined) => string
 >data3 : number
->toExponential : (fractionDigits?: number) => string
+>toExponential : (fractionDigits?: number | undefined) => string
     }
 }
 
 declare function getArrayResult(): [true, number] | [false, undefined];
->getArrayResult : () => [true, number] | [false, undefined]
+>getArrayResult : () => [false, undefined] | [true, number]
 >true : true
 >false : false
 {
     const [foo1, bar1] = getArrayResult();
 >foo1 : boolean
 >bar1 : number | undefined
->getArrayResult() : [true, number] | [false, undefined]
->getArrayResult : () => [true, number] | [false, undefined]
+>getArrayResult() : [false, undefined] | [true, number]
+>getArrayResult : () => [false, undefined] | [true, number]
 
     const [foo2, bar2] = getArrayResult();
 >foo2 : boolean
 >bar2 : number | undefined
->getArrayResult() : [true, number] | [false, undefined]
->getArrayResult : () => [true, number] | [false, undefined]
+>getArrayResult() : [false, undefined] | [true, number]
+>getArrayResult : () => [false, undefined] | [true, number]
 
     const [foo3, bar3] = getArrayResult();
 >foo3 : boolean
 >bar3 : number | undefined
->getArrayResult() : [true, number] | [false, undefined]
->getArrayResult : () => [true, number] | [false, undefined]
+>getArrayResult() : [false, undefined] | [true, number]
+>getArrayResult : () => [false, undefined] | [true, number]
 
     const arrayAllSuccess = foo1 && foo2 && foo3;
 >arrayAllSuccess : boolean
@@= skipped -54, +54 lines =@@
 
         bar1.toExponential();  // should ok
 >bar1.toExponential() : string
->bar1.toExponential : (fractionDigits?: number) => string
+>bar1.toExponential : (fractionDigits?: number | undefined) => string
 >bar1 : number
->toExponential : (fractionDigits?: number) => string
+>toExponential : (fractionDigits?: number | undefined) => string
 
         bar2.toExponential();  // should ok
 >bar2.toExponential() : string
->bar2.toExponential : (fractionDigits?: number) => string
+>bar2.toExponential : (fractionDigits?: number | undefined) => string
 >bar2 : number
->toExponential : (fractionDigits?: number) => string
+>toExponential : (fractionDigits?: number | undefined) => string
 
         bar3.toExponential();  // should ok
 >bar3.toExponential() : string
->bar3.toExponential : (fractionDigits?: number) => string
+>bar3.toExponential : (fractionDigits?: number | undefined) => string
 >bar3 : number
->toExponential : (fractionDigits?: number) => string
+>toExponential : (fractionDigits?: number | undefined) => string
     }
 }
 
@@= skipped -22, +22 lines =@@
     const [foo1, bar1] = getArrayResult();
 >foo1 : boolean
 >bar1 : number | undefined
->getArrayResult() : [true, number] | [false, undefined]
->getArrayResult : () => [true, number] | [false, undefined]
+>getArrayResult() : [false, undefined] | [true, number]
+>getArrayResult : () => [false, undefined] | [true, number]
 
     let [foo2, bar2] = getArrayResult();
 >foo2 : boolean
 >bar2 : number | undefined
->getArrayResult() : [true, number] | [false, undefined]
->getArrayResult : () => [true, number] | [false, undefined]
+>getArrayResult() : [false, undefined] | [true, number]
+>getArrayResult : () => [false, undefined] | [true, number]
 
     let [foo3, bar3] = getArrayResult();
 >foo3 : boolean
 >bar3 : number | undefined
->getArrayResult() : [true, number] | [false, undefined]
->getArrayResult : () => [true, number] | [false, undefined]
+>getArrayResult() : [false, undefined] | [true, number]
+>getArrayResult : () => [false, undefined] | [true, number]
 
     const arrayAllSuccess = foo1 && foo2 && foo3;
 >arrayAllSuccess : boolean
@@= skipped -28, +28 lines =@@
 
         bar1.toExponential();   // should ok
 >bar1.toExponential() : string
->bar1.toExponential : (fractionDigits?: number) => string
+>bar1.toExponential : (fractionDigits?: number | undefined) => string
 >bar1 : number
->toExponential : (fractionDigits?: number) => string
+>toExponential : (fractionDigits?: number | undefined) => string
 
         bar2.toExponential();   // should error
 >bar2.toExponential() : string
->bar2.toExponential : (fractionDigits?: number) => string
+>bar2.toExponential : (fractionDigits?: number | undefined) => string
 >bar2 : number | undefined
->toExponential : (fractionDigits?: number) => string
+>toExponential : (fractionDigits?: number | undefined) => string
 
         bar3.toExponential();   // should error
 >bar3.toExponential() : string
->bar3.toExponential : (fractionDigits?: number) => string
+>bar3.toExponential : (fractionDigits?: number | undefined) => string
 >bar3 : number | undefined
->toExponential : (fractionDigits?: number) => string
+>toExponential : (fractionDigits?: number | undefined) => string
     }
 }
 
@@= skipped -49, +49 lines =@@
     const { resp: { data }, type } = resp;
 >resp : any
 >data : string | number
->type : "string" | "number"
+>type : "number" | "string"
 >resp : Nested
 
     if (type === 'string') {
 >type === 'string' : boolean
->type : "string" | "number"
+>type : "number" | "string"
 >'string' : "string"
 
         data satisfies string;
@@= skipped -14, +14 lines =@@
     }
     if (resp.type === 'string') {
 >resp.type === 'string' : boolean
->resp.type : "string" | "number"
+>resp.type : "number" | "string"
 >resp : Nested
->type : "string" | "number"
+>type : "number" | "string"
 >'string' : "string"
 
         resp.resp.data satisfies string;
@@= skipped -24, +24 lines =@@
 >resp : any
 >data : any
 >dataAlias : string | number
->type : "string" | "number"
+>type : "number" | "string"
 >resp : Nested
 
     if (type === 'string') {
 >type === 'string' : boolean
->type : "string" | "number"
+>type : "number" | "string"
 >'string' : "string"
 
         dataAlias satisfies string;
@@= skipped -14, +14 lines =@@
     }
     if (resp.type === 'string') {
 >resp.type === 'string' : boolean
->resp.type : "string" | "number"
+>resp.type : "number" | "string"
 >resp : Nested
->type : "string" | "number"
+>type : "number" | "string"
 >'string' : "string"
 
         resp.resp.data satisfies string;
@@= skipped -16, +16 lines =@@
 }
 
 function bindingPatternInParameter({ data: data1, isSuccess: isSuccess1 }: UseQueryResult<number>) {
->bindingPatternInParameter : ({ data: data1, isSuccess: isSuccess1 }: UseQueryResult<number>) => void
+>bindingPatternInParameter : (__0: UseQueryResult<number>) => void
 >data : any
 >data1 : number | undefined
 >isSuccess : any
@@= skipped -25, +25 lines =@@
 
     data1.toExponential();
 >data1.toExponential() : string
->data1.toExponential : (fractionDigits?: number) => string
+>data1.toExponential : (fractionDigits?: number | undefined) => string
 >data1 : number
->toExponential : (fractionDigits?: number) => string
+>toExponential : (fractionDigits?: number | undefined) => string
 
     data2.toExponential();
 >data2.toExponential() : string
->data2.toExponential : (fractionDigits?: number) => string
+>data2.toExponential : (fractionDigits?: number | undefined) => string
 >data2 : number
->toExponential : (fractionDigits?: number) => string
+>toExponential : (fractionDigits?: number | undefined) => string
   }
 }
 
