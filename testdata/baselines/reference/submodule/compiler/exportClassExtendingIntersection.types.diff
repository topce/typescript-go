--- old.exportClassExtendingIntersection.types
+++ new.exportClassExtendingIntersection.types
@@= skipped -28, +28 lines =@@
 >base : T
 
     return class extends base {
->class extends base {        mixinProperty: string;    } : { new (...args: any[]): (Anonymous class); prototype: MyMixin<any>.(Anonymous class); } & T
+>class extends base {        mixinProperty: string;    } : { new (...args: any[]): (Anonymous class)<T>; prototype: (Anonymous class)<any>; } & T
 >base : MyBaseClass<any>
 
         mixinProperty: string;
@@= skipped -12, +12 lines =@@
 >MyBaseClass : typeof MyBaseClass
 
 import { MyMixin } from './MixinClass';
->MyMixin : <T extends import("BaseClass").Constructor<MyBaseClass<any>>>(base: T) => T & import("BaseClass").Constructor<MyMixin>
+>MyMixin : <T extends Constructor<MyBaseClass<any>>>(base: T) => T & Constructor<MyMixin>
 
 export class MyExtendedClass extends MyMixin(MyBaseClass)<string> {
 >MyExtendedClass : MyExtendedClass
 >MyMixin(MyBaseClass) : MyBaseClass<string> & MyMixin
->MyMixin : <T extends import("BaseClass").Constructor<MyBaseClass<any>>>(base: T) => T & import("BaseClass").Constructor<MyMixin>
+>MyMixin : <T extends Constructor<MyBaseClass<any>>>(base: T) => T & Constructor<MyMixin>
 >MyBaseClass : typeof MyBaseClass
 
     extendedClassProperty: number;
@@= skipped -16, +16 lines =@@
 >MyExtendedClass : typeof MyExtendedClass
 
 import { MyMixin } from './MixinClass';
->MyMixin : <T extends import("BaseClass").Constructor<import("BaseClass").MyBaseClass<any>>>(base: T) => T & import("BaseClass").Constructor<MyMixin>
+>MyMixin : <T extends Constructor<MyBaseClass<any>>>(base: T) => T & Constructor<MyMixin>
 
 const myExtendedClass = new MyExtendedClass('string');
 >myExtendedClass : MyExtendedClass
@@= skipped -9, +9 lines =@@
 >'string' : "string"
 
 const AnotherMixedClass = MyMixin(MyExtendedClass);
->AnotherMixedClass : typeof MyExtendedClass & import("BaseClass").Constructor<MyMixin>
->MyMixin(MyExtendedClass) : typeof MyExtendedClass & import("BaseClass").Constructor<MyMixin>
->MyMixin : <T extends import("BaseClass").Constructor<import("BaseClass").MyBaseClass<any>>>(base: T) => T & import("BaseClass").Constructor<MyMixin>
+>AnotherMixedClass : typeof MyExtendedClass & Constructor<MyMixin>
+>MyMixin(MyExtendedClass) : typeof MyExtendedClass & Constructor<MyMixin>
+>MyMixin : <T extends Constructor<MyBaseClass<any>>>(base: T) => T & Constructor<MyMixin>
 >MyExtendedClass : typeof MyExtendedClass
 
