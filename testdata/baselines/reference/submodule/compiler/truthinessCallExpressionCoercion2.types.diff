--- old.truthinessCallExpressionCoercion2.types
+++ new.truthinessCallExpressionCoercion2.types
@@= skipped -15, +15 lines =@@
 }
 
 function test(required1: () => boolean, required2: () => boolean, b: boolean, optional?: () => boolean) {
->test : (required1: () => boolean, required2: () => boolean, b: boolean, optional?: () => boolean) => void
+>test : (required1: () => boolean, required2: () => boolean, b: boolean, optional?: () => boolean | undefined) => void
 >required1 : () => boolean
 >required2 : () => boolean
 >b : boolean
->optional : (() => boolean) | undefined
+>optional : () => boolean | undefined
 
     // error
     required1 && console.log('required');
@@= skipped -47, +47 lines =@@
     // ok
     optional && console.log('optional');
 >optional && console.log('optional') : void | undefined
->optional : (() => boolean) | undefined
+>optional : () => boolean | undefined
 >console.log('optional') : void
 >console.log : (...data: any[]) => void
 >console : Console
@@= skipped -10, +10 lines =@@
     // ok
     1 && optional && console.log('optional');
 >1 && optional && console.log('optional') : void | undefined
->1 && optional : (() => boolean) | undefined
+>1 && optional : () => boolean | undefined
 >1 : 1
->optional : (() => boolean) | undefined
+>optional : () => boolean | undefined
 >console.log('optional') : void
 >console.log : (...data: any[]) => void
 >console : Console
@@= skipped -23, +23 lines =@@
 
     // ok
     required1() && console.log('required call');
->required1() && console.log('required call') : false | void
+>required1() && console.log('required call') : void | false
 >required1() : boolean
 >required1 : () => boolean
 >console.log('required call') : void
@@= skipped -40, +40 lines =@@
 
     // error
     required1 && required2 && required1() && console.log('foo');
->required1 && required2 && required1() && console.log('foo') : false | void
+>required1 && required2 && required1() && console.log('foo') : void | false
 >required1 && required2 && required1() : boolean
 >required1 && required2 : () => boolean
 >required1 : () => boolean
@@= skipped -122, +122 lines =@@
 
     // error
     if (b && (required1 || required2)) {
->b && (required1 || required2) : false | (() => boolean)
+>b && (required1 || required2) : false | () => boolean
 >b : boolean
 >(required1 || required2) : () => boolean
 >required1 || required2 : () => boolean
@@= skipped -20, +20 lines =@@
 
     // error
     if (b && (required1 ?? required2)) {
->b && (required1 ?? required2) : false | (() => boolean)
+>b && (required1 ?? required2) : false | () => boolean
 >b : boolean
 >(required1 ?? required2) : () => boolean
 >required1 ?? required2 : () => boolean
@@= skipped -27, +27 lines =@@
 >typeof window !== 'undefined' && window.console &&        ((window.console as any).firebug || (window.console.error && window.console.table)) : any
 >typeof window !== 'undefined' && window.console : false | Console
 >typeof window !== 'undefined' : boolean
->typeof window : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof window : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >window : Window & typeof globalThis
 >'undefined' : "undefined"
 >window.console : Console
@@= skipped -17, +17 lines =@@
 >window : Window & typeof globalThis
 >console : Console
 >firebug : any
->(window.console.error && window.console.table) : (tabularData?: any, properties?: string[]) => void
->window.console.error && window.console.table : (tabularData?: any, properties?: string[]) => void
+>(window.console.error && window.console.table) : (tabularData?: any, properties?: string[] | undefined) => void
+>window.console.error && window.console.table : (tabularData?: any, properties?: string[] | undefined) => void
 >window.console.error : (...data: any[]) => void
 >window.console : Console
 >window : Window & typeof globalThis
 >console : Console
 >error : (...data: any[]) => void
->window.console.table : (tabularData?: any, properties?: string[]) => void
+>window.console.table : (tabularData?: any, properties?: string[] | undefined) => void
 >window.console : Console
 >window : Window & typeof globalThis
 >console : Console
->table : (tabularData?: any, properties?: string[]) => void
+>table : (tabularData?: any, properties?: string[] | undefined) => void
 }
 
 function checksPropertyAccess() {
 >checksPropertyAccess : () => void
 
     const x = {
->x : { foo: { bar(): boolean; }; }
->{        foo: {            bar() { return true; }        }    } : { foo: { bar(): boolean; }; }
+>x : { foo: { bar: () => boolean; }; }
+>{        foo: {            bar() { return true; }        }    } : { foo: { bar: () => boolean; }; }
 
         foo: {
->foo : { bar(): boolean; }
->{            bar() { return true; }        } : { bar(): boolean; }
+>foo : { bar: () => boolean; }
+>{            bar() { return true; }        } : { bar: () => boolean; }
 
             bar() { return true; }
 >bar : () => boolean
@@= skipped -35, +35 lines =@@
     x.foo.bar && console.log('x.foo.bar');
 >x.foo.bar && console.log('x.foo.bar') : void
 >x.foo.bar : () => boolean
->x.foo : { bar(): boolean; }
->x : { foo: { bar(): boolean; }; }
->foo : { bar(): boolean; }
+>x.foo : { bar: () => boolean; }
+>x : { foo: { bar: () => boolean; }; }
+>foo : { bar: () => boolean; }
 >bar : () => boolean
 >console.log('x.foo.bar') : void
 >console.log : (...data: any[]) => void
@@= skipped -16, +16 lines =@@
 >1 && x.foo.bar : () => boolean
 >1 : 1
 >x.foo.bar : () => boolean
->x.foo : { bar(): boolean; }
->x : { foo: { bar(): boolean; }; }
->foo : { bar(): boolean; }
+>x.foo : { bar: () => boolean; }
+>x : { foo: { bar: () => boolean; }; }
+>foo : { bar: () => boolean; }
 >bar : () => boolean
 >console.log('x.foo.bar') : void
 >console.log : (...data: any[]) => void
@@= skipped -14, +14 lines =@@
     x.foo.bar && x.foo.bar();
 >x.foo.bar && x.foo.bar() : boolean
 >x.foo.bar : () => boolean
->x.foo : { bar(): boolean; }
->x : { foo: { bar(): boolean; }; }
->foo : { bar(): boolean; }
+>x.foo : { bar: () => boolean; }
+>x : { foo: { bar: () => boolean; }; }
+>foo : { bar: () => boolean; }
 >bar : () => boolean
 >x.foo.bar() : boolean
 >x.foo.bar : () => boolean
->x.foo : { bar(): boolean; }
->x : { foo: { bar(): boolean; }; }
->foo : { bar(): boolean; }
+>x.foo : { bar: () => boolean; }
+>x : { foo: { bar: () => boolean; }; }
+>foo : { bar: () => boolean; }
 >bar : () => boolean
 
     // ok
@@= skipped -16, +16 lines =@@
 >x.foo.bar && 1 && x.foo.bar() : boolean
 >x.foo.bar && 1 : 1
 >x.foo.bar : () => boolean
->x.foo : { bar(): boolean; }
->x : { foo: { bar(): boolean; }; }
->foo : { bar(): boolean; }
+>x.foo : { bar: () => boolean; }
+>x : { foo: { bar: () => boolean; }; }
+>foo : { bar: () => boolean; }
 >bar : () => boolean
 >1 : 1
 >x.foo.bar() : boolean
 >x.foo.bar : () => boolean
->x.foo : { bar(): boolean; }
->x : { foo: { bar(): boolean; }; }
->foo : { bar(): boolean; }
+>x.foo : { bar: () => boolean; }
+>x : { foo: { bar: () => boolean; }; }
+>foo : { bar: () => boolean; }
 >bar : () => boolean
 
     // ok
@@= skipped -184, +184 lines =@@
 >Foo : Foo
 
     optional?: () => boolean;
->optional : (() => boolean) | undefined
+>optional : () => boolean | undefined
 
     required() {
 >required : () => boolean
@@= skipped -64, +64 lines =@@
         // ok
         1 && this.optional && console.log('optional');
 >1 && this.optional && console.log('optional') : void | undefined
->1 && this.optional : (() => boolean) | undefined
+>1 && this.optional : () => boolean | undefined
 >1 : 1
->this.optional : (() => boolean) | undefined
+>this.optional : () => boolean | undefined
 >this : this
->optional : (() => boolean) | undefined
+>optional : () => boolean | undefined
 >console.log('optional') : void
 >console.log : (...data: any[]) => void
 >console : Console
