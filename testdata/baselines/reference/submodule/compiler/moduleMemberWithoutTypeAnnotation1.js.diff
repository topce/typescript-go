--- old.moduleMemberWithoutTypeAnnotation1.js
+++ new.moduleMemberWithoutTypeAnnotation1.js
@@= skipped -50, +50 lines =@@
 //// [moduleMemberWithoutTypeAnnotation1.js]
 var TypeScript;
 (function (TypeScript) {
-    var Parser;
+    let Parser;
     (function (Parser) {
-        var SyntaxCursor = /** @class */ (function () {
-            function SyntaxCursor() {
-            }
-            SyntaxCursor.prototype.currentNode = function () {
+        class SyntaxCursor {
+            currentNode() {
                 return null;
-            };
-            return SyntaxCursor;
-        }());
+            }
+        }
     })(Parser = TypeScript.Parser || (TypeScript.Parser = {}));
 })(TypeScript || (TypeScript = {}));
 (function (TypeScript) {
     ;
     ;
-    var PositionedElement = /** @class */ (function () {
-        function PositionedElement() {
+    class PositionedElement {
+        childIndex(child) {
+            return Syntax.childIndex();
         }
-        PositionedElement.prototype.childIndex = function (child) {
-            return TypeScript.Syntax.childIndex();
-        };
-        return PositionedElement;
-    }());
+    }
     TypeScript.PositionedElement = PositionedElement;
-    var PositionedToken = /** @class */ (function () {
-        function PositionedToken(parent, token, fullStart) {
+    class PositionedToken {
+        constructor(parent, token, fullStart) {
         }
-        return PositionedToken;
-    }());
+    }
     TypeScript.PositionedToken = PositionedToken;
 })(TypeScript || (TypeScript = {}));
 (function (TypeScript) {
-    var SyntaxNode = /** @class */ (function () {
-        function SyntaxNode() {
-        }
-        SyntaxNode.prototype.findToken = function (position, includeSkippedTokens) {
-            if (includeSkippedTokens === void 0) { includeSkippedTokens = false; }
+    class SyntaxNode {
+        findToken(position, includeSkippedTokens = false) {
             var positionedToken = this.findTokenInternal(null, position, 0);
             return null;
-        };
-        SyntaxNode.prototype.findTokenInternal = function (x, y, z) {
+        }
+        findTokenInternal(x, y, z) {
             return null;
-        };
-        return SyntaxNode;
-    }());
+        }
+    }
     TypeScript.SyntaxNode = SyntaxNode;
 })(TypeScript || (TypeScript = {}));
 (function (TypeScript) {
-    var Syntax;
+    let Syntax;
     (function (Syntax) {
         function childIndex() { }
         Syntax.childIndex = childIndex;
-        var VariableWidthTokenWithTrailingTrivia = /** @class */ (function () {
-            function VariableWidthTokenWithTrailingTrivia() {
+        class VariableWidthTokenWithTrailingTrivia {
+            findTokenInternal(parent, position, fullStart) {
+                return new PositionedToken(parent, this, fullStart);
             }
-            VariableWidthTokenWithTrailingTrivia.prototype.findTokenInternal = function (parent, position, fullStart) {
-                return new TypeScript.PositionedToken(parent, this, fullStart);
-            };
-            return VariableWidthTokenWithTrailingTrivia;
-        }());
+        }
         Syntax.VariableWidthTokenWithTrailingTrivia = VariableWidthTokenWithTrailingTrivia;
     })(Syntax = TypeScript.Syntax || (TypeScript.Syntax = {}));
 })(TypeScript || (TypeScript = {}));
