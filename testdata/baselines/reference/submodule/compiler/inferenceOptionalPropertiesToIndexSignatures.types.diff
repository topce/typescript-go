--- old.inferenceOptionalPropertiesToIndexSignatures.types
+++ new.inferenceOptionalPropertiesToIndexSignatures.types
@@= skipped -16, +16 lines =@@
 >b : number | undefined
 
 declare const x3: { a: string, b?: number };
->x3 : { a: string; b?: number; }
+>x3 : { a: string; b?: number | undefined; }
 >a : string
 >b : number | undefined
 
@@= skipped -25, +25 lines =@@
 >a3 : string | number
 >foo(x3) : string | number
 >foo : <T>(obj: { [x: string]: T; }) => T
->x3 : { a: string; b?: number; }
+>x3 : { a: string; b?: number | undefined; }
 
 let a4 = foo(x4);  // string | number
 >a4 : string | number
@@= skipped -22, +22 lines =@@
 >'value2' : "value2"
 
 const obj = {
->obj : { param2?: string | undefined; param1: string; }
->{    param1: 'value1',    ...(param2 ? {param2} : {})} : { param2?: string | undefined; param1: string; }
+>obj : { param1: string; param2?: string | undefined; }
+>{    param1: 'value1',    ...(param2 ? {param2} : {})} : { param1: string; param2?: string | undefined; }
 
     param1: 'value1',
 >param1 : string
@@= skipped -20, +20 lines =@@
 const query = Object.entries(obj).map(
 >query : string
 >Object.entries(obj).map(    ([k, v]) => `${k}=${encodeURIComponent(v)}`).join('&') : string
->Object.entries(obj).map(    ([k, v]) => `${k}=${encodeURIComponent(v)}`).join : (separator?: string) => string
+>Object.entries(obj).map(    ([k, v]) => `${k}=${encodeURIComponent(v)}`).join : (separator?: string | undefined) => string
 >Object.entries(obj).map(    ([k, v]) => `${k}=${encodeURIComponent(v)}`) : string[]
 >Object.entries(obj).map : <U>(callbackfn: (value: [string, string], index: number, array: [string, string][]) => U, thisArg?: any) => U[]
 >Object.entries(obj) : [string, string][]
->Object.entries : { <T>(o: { [s: string]: T; } | ArrayLike<T>): [string, T][]; (o: {}): [string, any][]; }
+>Object.entries : { <T>(o: ArrayLike<T> | { [s: string]: T; }): [string, T][]; (o: {}): [string, any][]; }
 >Object : ObjectConstructor
->entries : { <T>(o: { [s: string]: T; } | ArrayLike<T>): [string, T][]; (o: {}): [string, any][]; }
->obj : { param2?: string | undefined; param1: string; }
+>entries : { <T>(o: ArrayLike<T> | { [s: string]: T; }): [string, T][]; (o: {}): [string, any][]; }
+>obj : { param1: string; param2?: string | undefined; }
 >map : <U>(callbackfn: (value: [string, string], index: number, array: [string, string][]) => U, thisArg?: any) => U[]
 
     ([k, v]) => `${k}=${encodeURIComponent(v)}`
->([k, v]) => `${k}=${encodeURIComponent(v)}` : ([k, v]: [string, string]) => string
+>([k, v]) => `${k}=${encodeURIComponent(v)}` : (__0: [string, string]) => string
 >k : string
 >v : string
 >`${k}=${encodeURIComponent(v)}` : string
@@= skipped -21, +21 lines =@@
 >v : string
 
 ).join('&');
->join : (separator?: string) => string
+>join : (separator?: string | undefined) => string
 >'&' : "&"
 
