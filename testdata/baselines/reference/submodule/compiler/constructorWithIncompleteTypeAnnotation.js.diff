--- old.constructorWithIncompleteTypeAnnotation.js
+++ new.constructorWithIncompleteTypeAnnotation.js
@@= skipped -281, +281 lines =@@
 
 
 //// [constructorWithIncompleteTypeAnnotation.js]
-var __extends = (this && this.__extends) || (function () {
-    var extendStatics = function (d, b) {
-        extendStatics = Object.setPrototypeOf ||
-            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
-            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
-        return extendStatics(d, b);
-    };
-    return function (d, b) {
-        if (typeof b !== "function" && b !== null)
-            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
-        extendStatics(d, b);
-        function __() { this.constructor = d; }
-        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-    };
-})();
-var fs = module;
 ("fs");
 var TypeScriptAllInOne;
 (function (TypeScriptAllInOne) {
-    var Program = /** @class */ (function () {
-        function Program() {
-            this.case = bfs.STATEMENTS(4);
-        }
-        Program.Main = function () {
-            var args = [];
-            for (var _i = 0; _i < arguments.length; _i++) {
-                args[_i] = arguments[_i];
-            }
+    class Program {
+        static Main(...args) {
             try {
                 var bfs = new BasicFeatures();
                 var retValue = 0;
                 retValue = bfs.VARIABLES();
                 if (retValue != 0)
                      ^= {
-                        return: 1
+                        return: 1,
                     };
             }
             finally {
             }
-        };
-        Program.prototype.if = function (retValue) { };
-        return Program;
-    }());
+        }
+        case = bfs.STATEMENTS(4);
+        if(retValue) { }
+    }
     TypeScriptAllInOne.Program = Program;
      != 0;
     {
@@= skipped -70, +47 lines =@@
     console.log('Done');
     return 0;
 })(TypeScriptAllInOne || (TypeScriptAllInOne = {}));
-var BasicFeatures = /** @class */ (function () {
-    function BasicFeatures() {
-    }
-    /// <summary>
-    /// Test various of variables. Including nullable,key world as variable,special format
-    /// </summary>
-    /// <returns></returns>
-    BasicFeatures.prototype.VARIABLES = function () {
+class BasicFeatures {
+    VARIABLES() {
         var local = Number.MAX_VALUE;
         var min = Number.MIN_VALUE;
         var inf = Number.NEGATIVE_INFINITY -
@@= skipped -24, +18 lines =@@
         ;
         var quoted = '"', quoted2 = "'";
         var reg = /\w*/;
-        var objLit = { "var": number = 42, equals: function (x) { return x["var"] === 42; }, instanceof: function () { return 'objLit{42}'; } };
+        var objLit = { "var": number = 42, equals: function (x) { return x["var"] === 42; }, instanceof: () => 'objLit{42}' };
         var weekday = Weekdays.Monday;
         var con = char + f + hexchar + float.toString() + float2.toString() + reg.toString() + objLit + weekday;
-        //
         var any = 0 ^=
         ;
         var bool = 0;
@@= skipped -26, +25 lines =@@
         var yield = 0;
         var sum3 = any + bool + declare + constructor + get + implements + interface + let + module + number + package + private + protected + public + set + static + string + yield;
         return 0;
-    };
-    /// <summary>
-    /// Test different statements. Including if-else,swith,foreach,(un)checked,lock,using,try-catch-finally
-    /// </summary>
-    /// <param name="i"></param>
-    /// <returns></returns>
-    BasicFeatures.prototype.STATEMENTS = function (i) {
+    }
+    STATEMENTS(i) {
         var retVal = 0;
         if (i == 1)
             retVal = 1;
@@= skipped -36, +31 lines =@@
             catch (Exception) { }
         }
         return retVal;
-    };
-    /// <summary>
-    /// Test types in ts language. Including class,struct,interface,delegate,anonymous type
-    /// </summary>
-    /// <returns></returns>
-    BasicFeatures.prototype.TYPES = function () {
+    }
+    TYPES() {
         var retVal = 0;
         var c = new CLASS();
         var xx = c;
         retVal += ;
         try { }
-        catch (_a) { }
+        catch { }
         Property;
         retVal += c.Member();
         retVal += xx.Foo() ? 0 : 1;
-        //anonymous type
         var anony = { a: new CLASS() };
         retVal += anony.a.d();
         return retVal;
-    };
-    ///// <summary>
-    ///// Test different operators
-    ///// </summary>
-    ///// <returns></returns>
-    BasicFeatures.prototype.OPERATOR = function () {
-        var a = [1, 2, 3, 4, 5,]; /*[] bug*/ // YES []
-        var i = a[1]; /*[]*/
-        i = i + i - i * i / i % i & i | i ^ i; /*+ - * / % & | ^*/
-        var b = true && false || true ^ false; /*& | ^*/
-        b = !b; /*!*/
-        i = ~i; /*~i*/
-        b = i < (i - 1) && (i + 1) > i; /*< && >*/
-        var f = true ? 1 : 0; /*? :*/ // YES :
-        i++; /*++*/
-        i--; /*--*/
-        b = true && false || true; /*&& ||*/
-        i = i << 5; /*<<*/
-        i = i >> 5; /*>>*/
+    }
+    OPERATOR() {
+        var a = [1, 2, 3, 4, 5,];
+        var i = a[1];
+        i = i + i - i * i / i % i & i | i ^ i;
+        var b = true && false || true ^ false;
+        b = !b;
+        i = ~i;
+        b = i < (i - 1) && (i + 1) > i;
+        var f = true ? 1 : 0;
+        i++;
+        i--;
+        b = true && false || true;
+        i = i << 5;
+        i = i >> 5;
         var j = i;
-        b = i == j && i != j && i <= j && i >= j; /*= == && != <= >=*/
-        i += 5.0; /*+=*/
-        i -= i; /*-=*/
-        i *= i; /**=*/
+        b = i == j && i != j && i <= j && i >= j;
+        i += 5.0;
+        i -= i;
+        i *= i;
         if (i == 0)
             i++;
-        i /= i; /*/=*/
-        i %= i; /*%=*/
-        i &= i; /*&=*/
-        i |= i; /*|=*/
-        i ^= i; /*^=*/
-        i <<= i; /*<<=*/
-        i >>= i; /*>>=*/
+        i /= i;
+        i %= i;
+        i &= i;
+        i |= i;
+        i ^= i;
+        i <<= i;
+        i >>= i;
         if (i == 0 &&  != b && f == 1)
             return 0;
         else
             return 1;
-    };
-    return BasicFeatures;
-}());
-var CLASS = /** @class */ (function () {
-    function CLASS() {
-        this.d = function () { yield 0; };
     }
-    Object.defineProperty(CLASS.prototype, "Property", {
-        get: function () { return 0; },
-        enumerable: false,
-        configurable: true
-    });
-    CLASS.prototype.Member = function () {
+}
+class CLASS {
+    d = () => { yield 0; };
+    get Property() { return 0; }
+    Member() {
         return 0;
-    };
-    CLASS.prototype.Foo = function () {
-        var myEvent = function () { return 1; };
+    }
+    Foo() {
+        var myEvent = () => { return 1; };
         if (myEvent() == 1)
             return true ?
                 :
             ;
         else
             return false;
-    };
-    return CLASS;
-}());
-// todo: use these
-var A = /** @class */ (function () {
-    function A() {
     }
-    return A;
-}());
+}
+class A {
+}
 method1(val, number);
 {
     return val;
@@= skipped -96, +75 lines =@@
 {
     return 2 * this.method1(2);
 }
-var B = /** @class */ (function (_super) {
-    __extends(B, _super);
-    function B() {
-        return _super !== null && _super.apply(this, arguments) || this;
-    }
-    B.prototype.method2 = function () {
+class B extends A {
+    method2() {
         return this.method1(2);
-    };
-    return B;
-}(A));
-var Overloading = /** @class */ (function () {
-    function Overloading() {
-        this.otherValue = 42;
     }
-    return Overloading;
-}());
+}
+class Overloading {
+    otherValue = 42;
+}
 Overloads(value, string);
 Overloads();
 while ()
