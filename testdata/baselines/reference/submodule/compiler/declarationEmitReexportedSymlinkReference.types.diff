--- old.declarationEmitReexportedSymlinkReference.types
+++ new.declarationEmitReexportedSymlinkReference.types
@@= skipped -7, +7 lines =@@
 >MetadataAccessor : typeof MetadataAccessor
 
 export const ADMIN = MetadataAccessor.create<boolean>('1');
->ADMIN : MetadataAccessor<boolean, import("monorepo/pkg1/dist/types").IdType>
->MetadataAccessor.create<boolean>('1') : MetadataAccessor<boolean, import("monorepo/pkg1/dist/types").IdType>
->MetadataAccessor.create : <T, D extends import("monorepo/pkg1/dist/types").IdType = import("monorepo/pkg1/dist/types").IdType>(key: string) => MetadataAccessor<T, D>
+>ADMIN : MetadataAccessor<boolean, IdType>
+>MetadataAccessor.create<boolean>('1') : MetadataAccessor<boolean, IdType>
+>MetadataAccessor.create : <T, D extends IdType>(key: string) => MetadataAccessor<T, D>
 >MetadataAccessor : typeof MetadataAccessor
->create : <T, D extends import("monorepo/pkg1/dist/types").IdType = import("monorepo/pkg1/dist/types").IdType>(key: string) => MetadataAccessor<T, D>
+>create : <T, D extends IdType>(key: string) => MetadataAccessor<T, D>
 >'1' : "1"
 
 === monorepo/pkg1/dist/index.d.ts ===
@@= skipped -39, +39 lines =@@
 >toString : () => string
 
     static create<T, D extends IdType = IdType>(key: string): MetadataAccessor<T, D>;
->create : <T, D extends IdType = IdType>(key: string) => MetadataAccessor<T, D>
+>create : <T, D extends IdType>(key: string) => MetadataAccessor<T, D>
 >key : string
 }
 === monorepo/pkg2/dist/index.d.ts ===
