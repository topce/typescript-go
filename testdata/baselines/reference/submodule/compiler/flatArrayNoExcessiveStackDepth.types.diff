--- old.flatArrayNoExcessiveStackDepth.types
+++ new.flatArrayNoExcessiveStackDepth.types
@@= skipped -8, +8 lines =@@
 const bar = foo.flatMap(bar => bar as Foo);
 >bar : string[]
 >foo.flatMap(bar => bar as Foo) : string[]
->foo.flatMap : <U, This = undefined>(callback: (this: This, value: unknown, index: number, array: unknown[]) => U | readonly U[], thisArg?: This | undefined) => U[]
+>foo.flatMap : <U, This>(callback: (this: This, value: unknown, index: number, array: unknown[]) => U | readonly U[], thisArg?: This | undefined) => U[]
 >foo : unknown[]
->flatMap : <U, This = undefined>(callback: (this: This, value: unknown, index: number, array: unknown[]) => U | readonly U[], thisArg?: This | undefined) => U[]
+>flatMap : <U, This>(callback: (this: This, value: unknown, index: number, array: unknown[]) => U | readonly U[], thisArg?: This | undefined) => U[]
 >bar => bar as Foo : (this: undefined, bar: unknown) => Foo
 >bar : unknown
 >bar as Foo : Foo
@@= skipped -19, +19 lines =@@
 
     if (typeof value !== "string") {
 >typeof value !== "string" : boolean
->typeof value : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof value : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >value : unknown
 >"string" : "string"
 
@@= skipped -10, +10 lines =@@
 >"No" : "No"
     }
     const match = value.match(/anything/) || [];
->match : [] | RegExpMatchArray
+>match : RegExpMatchArray | []
 >value.match(/anything/) || [] : RegExpMatchArray | []
 >value.match(/anything/) : RegExpMatchArray | null
->value.match : { (regexp: string | RegExp): RegExpMatchArray | null; (matcher: { [Symbol.match](string: string): RegExpMatchArray | null; }): RegExpMatchArray | null; }
+>value.match : { (regexp: string | RegExp): RegExpMatchArray | null; (matcher: { [Symbol.match]: (string: string) => RegExpMatchArray | null; }): RegExpMatchArray | null; }
 >value : string
->match : { (regexp: string | RegExp): RegExpMatchArray | null; (matcher: { [Symbol.match](string: string): RegExpMatchArray | null; }): RegExpMatchArray | null; }
+>match : { (regexp: string | RegExp): RegExpMatchArray | null; (matcher: { [Symbol.match]: (string: string) => RegExpMatchArray | null; }): RegExpMatchArray | null; }
 >/anything/ : RegExp
 >[] : []
 
     const [, extracted] = match;
-> : undefined
 >extracted : string
->match : [] | RegExpMatchArray
+>match : RegExpMatchArray | []
 
 };
 
