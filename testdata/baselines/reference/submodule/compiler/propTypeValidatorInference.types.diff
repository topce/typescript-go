--- old.propTypeValidatorInference.types
+++ new.propTypeValidatorInference.types
@@= skipped -0, +0 lines =@@
 //// [tests/cases/compiler/propTypeValidatorInference.ts] ////
 
-=== Performance Stats ===
-Instantiation count: 2,500
-
 === node_modules/prop-types/index.d.ts ===
 export const nominalTypeHack: unique symbol;
 >nominalTypeHack : unique symbol
@@= skipped -79, +76 lines =@@
 
 === file.ts ===
 import * as PropTypes from "prop-types";
->PropTypes : typeof PropTypes
+>PropTypes : typeof import("node_modules/prop-types/index")
 
 interface Props {
     any?: any;
@@= skipped -13, +13 lines =@@
 >bool : boolean
 
     shape: {
->shape : { foo: string; bar?: boolean; baz?: any; }
+>shape : { foo: string; bar?: boolean | undefined; baz?: any; }
 
         foo: string;
 >foo : string
@@= skipped -13, +13 lines =@@
 
     };
     oneOfType: string | boolean | {
->oneOfType : string | boolean | { foo?: string; bar: number; }
+>oneOfType : string | boolean | { foo?: string | undefined; bar: number; }
 
         foo?: string;
 >foo : string | undefined
@@= skipped -12, +12 lines =@@
 }
 
 type PropTypesMap = PropTypes.ValidationMap<Props>;
->PropTypesMap : PropTypes.ValidationMap<Props>
+>PropTypesMap : ValidationMap<Props>
 >PropTypes : any
 
 const innerProps = {
->innerProps : { foo: PropTypes.Validator<string>; bar: PropTypes.Requireable<boolean>; baz: PropTypes.Requireable<any>; }
->{    foo: PropTypes.string.isRequired,    bar: PropTypes.bool,    baz: PropTypes.any} : { foo: PropTypes.Validator<string>; bar: PropTypes.Requireable<boolean>; baz: PropTypes.Requireable<any>; }
+>innerProps : { foo: Validator<string>; bar: Requireable<boolean>; baz: Requireable<any>; }
+>{    foo: PropTypes.string.isRequired,    bar: PropTypes.bool,    baz: PropTypes.any} : { foo: Validator<string>; bar: Requireable<boolean>; baz: Requireable<any>; }
 
     foo: PropTypes.string.isRequired,
->foo : PropTypes.Validator<string>
->PropTypes.string.isRequired : PropTypes.Validator<string>
->PropTypes.string : PropTypes.Requireable<string>
->PropTypes : typeof PropTypes
->string : PropTypes.Requireable<string>
->isRequired : PropTypes.Validator<string>
+>foo : Validator<string>
+>PropTypes.string.isRequired : Validator<string>
+>PropTypes.string : Requireable<string>
+>PropTypes : typeof import("node_modules/prop-types/index")
+>string : Requireable<string>
+>isRequired : Validator<string>
 
     bar: PropTypes.bool,
->bar : PropTypes.Requireable<boolean>
->PropTypes.bool : PropTypes.Requireable<boolean>
->PropTypes : typeof PropTypes
->bool : PropTypes.Requireable<boolean>
+>bar : Requireable<boolean>
+>PropTypes.bool : Requireable<boolean>
+>PropTypes : typeof import("node_modules/prop-types/index")
+>bool : Requireable<boolean>
 
     baz: PropTypes.any
->baz : PropTypes.Requireable<any>
->PropTypes.any : PropTypes.Requireable<any>
->PropTypes : typeof PropTypes
->any : PropTypes.Requireable<any>
+>baz : Requireable<any>
+>PropTypes.any : Requireable<any>
+>PropTypes : typeof import("node_modules/prop-types/index")
+>any : Requireable<any>
 
 };
 
 const arrayOfTypes = [PropTypes.string, PropTypes.bool, PropTypes.shape({
->arrayOfTypes : (PropTypes.Requireable<boolean> | PropTypes.Requireable<string> | PropTypes.Requireable<PropTypes.InferProps<{ foo: PropTypes.Requireable<string>; bar: PropTypes.Validator<number>; }>>)[]
->[PropTypes.string, PropTypes.bool, PropTypes.shape({    foo: PropTypes.string,    bar: PropTypes.number.isRequired})] : (PropTypes.Requireable<boolean> | PropTypes.Requireable<string> | PropTypes.Requireable<PropTypes.InferProps<{ foo: PropTypes.Requireable<string>; bar: PropTypes.Validator<number>; }>>)[]
->PropTypes.string : PropTypes.Requireable<string>
->PropTypes : typeof PropTypes
->string : PropTypes.Requireable<string>
->PropTypes.bool : PropTypes.Requireable<boolean>
->PropTypes : typeof PropTypes
->bool : PropTypes.Requireable<boolean>
->PropTypes.shape({    foo: PropTypes.string,    bar: PropTypes.number.isRequired}) : PropTypes.Requireable<PropTypes.InferProps<{ foo: PropTypes.Requireable<string>; bar: PropTypes.Validator<number>; }>>
->PropTypes.shape : <P extends PropTypes.ValidationMap<any>>(type: P) => PropTypes.Requireable<PropTypes.InferProps<P>>
->PropTypes : typeof PropTypes
->shape : <P extends PropTypes.ValidationMap<any>>(type: P) => PropTypes.Requireable<PropTypes.InferProps<P>>
->{    foo: PropTypes.string,    bar: PropTypes.number.isRequired} : { foo: PropTypes.Requireable<string>; bar: PropTypes.Validator<number>; }
+>arrayOfTypes : (Requireable<string> | Requireable<boolean> | Requireable<InferProps<{ foo: Requireable<string>; bar: Validator<number>; }>>)[]
+>[PropTypes.string, PropTypes.bool, PropTypes.shape({    foo: PropTypes.string,    bar: PropTypes.number.isRequired})] : (Requireable<string> | Requireable<boolean> | Requireable<InferProps<{ foo: Requireable<string>; bar: Validator<number>; }>>)[]
+>PropTypes.string : Requireable<string>
+>PropTypes : typeof import("node_modules/prop-types/index")
+>string : Requireable<string>
+>PropTypes.bool : Requireable<boolean>
+>PropTypes : typeof import("node_modules/prop-types/index")
+>bool : Requireable<boolean>
+>PropTypes.shape({    foo: PropTypes.string,    bar: PropTypes.number.isRequired}) : Requireable<InferProps<{ foo: Requireable<string>; bar: Validator<number>; }>>
+>PropTypes.shape : <P extends ValidationMap<any>>(type: P) => Requireable<InferProps<P>>
+>PropTypes : typeof import("node_modules/prop-types/index")
+>shape : <P extends ValidationMap<any>>(type: P) => Requireable<InferProps<P>>
+>{    foo: PropTypes.string,    bar: PropTypes.number.isRequired} : { foo: Requireable<string>; bar: Validator<number>; }
 
     foo: PropTypes.string,
->foo : PropTypes.Requireable<string>
->PropTypes.string : PropTypes.Requireable<string>
->PropTypes : typeof PropTypes
->string : PropTypes.Requireable<string>
+>foo : Requireable<string>
+>PropTypes.string : Requireable<string>
+>PropTypes : typeof import("node_modules/prop-types/index")
+>string : Requireable<string>
 
     bar: PropTypes.number.isRequired
->bar : PropTypes.Validator<number>
->PropTypes.number.isRequired : PropTypes.Validator<number>
->PropTypes.number : PropTypes.Requireable<number>
->PropTypes : typeof PropTypes
->number : PropTypes.Requireable<number>
->isRequired : PropTypes.Validator<number>
+>bar : Validator<number>
+>PropTypes.number.isRequired : Validator<number>
+>PropTypes.number : Requireable<number>
+>PropTypes : typeof import("node_modules/prop-types/index")
+>number : Requireable<number>
+>isRequired : Validator<number>
 
 })];
 
 // TS checking
 const propTypes: PropTypesMap = {
->propTypes : PropTypes.ValidationMap<Props>
->{    any: PropTypes.any,    array: PropTypes.array.isRequired,    bool: PropTypes.bool.isRequired,    shape: PropTypes.shape(innerProps).isRequired,    oneOfType: PropTypes.oneOfType(arrayOfTypes).isRequired,} : { any: PropTypes.Requireable<any>; array: PropTypes.Validator<any[]>; bool: PropTypes.Validator<boolean>; shape: PropTypes.Validator<NonNullable<PropTypes.InferProps<{ foo: PropTypes.Validator<string>; bar: PropTypes.Requireable<boolean>; baz: PropTypes.Requireable<any>; }>>>; oneOfType: PropTypes.Validator<NonNullable<NonNullable<string | boolean | PropTypes.InferProps<{ foo: PropTypes.Requireable<string>; bar: PropTypes.Validator<number>; }>>>>; }
+>propTypes : ValidationMap<Props>
+>{    any: PropTypes.any,    array: PropTypes.array.isRequired,    bool: PropTypes.bool.isRequired,    shape: PropTypes.shape(innerProps).isRequired,    oneOfType: PropTypes.oneOfType(arrayOfTypes).isRequired,} : { any: Requireable<any>; array: Validator<any[]>; bool: Validator<boolean>; shape: Validator<NonNullable<InferProps<{ foo: Validator<string>; bar: Requireable<boolean>; baz: Requireable<any>; }>>>; oneOfType: Validator<NonNullable<NonNullable<string | boolean | InferProps<{ foo: Requireable<string>; bar: Validator<number>; }>>>>; }
 
     any: PropTypes.any,
->any : PropTypes.Requireable<any>
->PropTypes.any : PropTypes.Requireable<any>
->PropTypes : typeof PropTypes
->any : PropTypes.Requireable<any>
+>any : Requireable<any>
+>PropTypes.any : Requireable<any>
+>PropTypes : typeof import("node_modules/prop-types/index")
+>any : Requireable<any>
 
     array: PropTypes.array.isRequired,
->array : PropTypes.Validator<any[]>
->PropTypes.array.isRequired : PropTypes.Validator<any[]>
->PropTypes.array : PropTypes.Requireable<any[]>
->PropTypes : typeof PropTypes
->array : PropTypes.Requireable<any[]>
->isRequired : PropTypes.Validator<any[]>
+>array : Validator<any[]>
+>PropTypes.array.isRequired : Validator<any[]>
+>PropTypes.array : Requireable<any[]>
+>PropTypes : typeof import("node_modules/prop-types/index")
+>array : Requireable<any[]>
+>isRequired : Validator<any[]>
 
     bool: PropTypes.bool.isRequired,
->bool : PropTypes.Validator<boolean>
->PropTypes.bool.isRequired : PropTypes.Validator<boolean>
->PropTypes.bool : PropTypes.Requireable<boolean>
->PropTypes : typeof PropTypes
->bool : PropTypes.Requireable<boolean>
->isRequired : PropTypes.Validator<boolean>
+>bool : Validator<boolean>
+>PropTypes.bool.isRequired : Validator<boolean>
+>PropTypes.bool : Requireable<boolean>
+>PropTypes : typeof import("node_modules/prop-types/index")
+>bool : Requireable<boolean>
+>isRequired : Validator<boolean>
 
     shape: PropTypes.shape(innerProps).isRequired,
->shape : PropTypes.Validator<NonNullable<PropTypes.InferProps<{ foo: PropTypes.Validator<string>; bar: PropTypes.Requireable<boolean>; baz: PropTypes.Requireable<any>; }>>>
->PropTypes.shape(innerProps).isRequired : PropTypes.Validator<NonNullable<PropTypes.InferProps<{ foo: PropTypes.Validator<string>; bar: PropTypes.Requireable<boolean>; baz: PropTypes.Requireable<any>; }>>>
->PropTypes.shape(innerProps) : PropTypes.Requireable<PropTypes.InferProps<{ foo: PropTypes.Validator<string>; bar: PropTypes.Requireable<boolean>; baz: PropTypes.Requireable<any>; }>>
->PropTypes.shape : <P extends PropTypes.ValidationMap<any>>(type: P) => PropTypes.Requireable<PropTypes.InferProps<P>>
->PropTypes : typeof PropTypes
->shape : <P extends PropTypes.ValidationMap<any>>(type: P) => PropTypes.Requireable<PropTypes.InferProps<P>>
->innerProps : { foo: PropTypes.Validator<string>; bar: PropTypes.Requireable<boolean>; baz: PropTypes.Requireable<any>; }
->isRequired : PropTypes.Validator<NonNullable<PropTypes.InferProps<{ foo: PropTypes.Validator<string>; bar: PropTypes.Requireable<boolean>; baz: PropTypes.Requireable<any>; }>>>
+>shape : Validator<NonNullable<InferProps<{ foo: Validator<string>; bar: Requireable<boolean>; baz: Requireable<any>; }>>>
+>PropTypes.shape(innerProps).isRequired : Validator<NonNullable<InferProps<{ foo: Validator<string>; bar: Requireable<boolean>; baz: Requireable<any>; }>>>
+>PropTypes.shape(innerProps) : Requireable<InferProps<{ foo: Validator<string>; bar: Requireable<boolean>; baz: Requireable<any>; }>>
+>PropTypes.shape : <P extends ValidationMap<any>>(type: P) => Requireable<InferProps<P>>
+>PropTypes : typeof import("node_modules/prop-types/index")
+>shape : <P extends ValidationMap<any>>(type: P) => Requireable<InferProps<P>>
+>innerProps : { foo: Validator<string>; bar: Requireable<boolean>; baz: Requireable<any>; }
+>isRequired : Validator<NonNullable<InferProps<{ foo: Validator<string>; bar: Requireable<boolean>; baz: Requireable<any>; }>>>
 
     oneOfType: PropTypes.oneOfType(arrayOfTypes).isRequired,
->oneOfType : PropTypes.Validator<NonNullable<NonNullable<string | boolean | PropTypes.InferProps<{ foo: PropTypes.Requireable<string>; bar: PropTypes.Validator<number>; }>>>>
->PropTypes.oneOfType(arrayOfTypes).isRequired : PropTypes.Validator<NonNullable<NonNullable<string | boolean | PropTypes.InferProps<{ foo: PropTypes.Requireable<string>; bar: PropTypes.Validator<number>; }>>>>
->PropTypes.oneOfType(arrayOfTypes) : PropTypes.Requireable<NonNullable<string | boolean | PropTypes.InferProps<{ foo: PropTypes.Requireable<string>; bar: PropTypes.Validator<number>; }>>>
->PropTypes.oneOfType : <T extends PropTypes.Validator<any>>(types: T[]) => PropTypes.Requireable<NonNullable<PropTypes.InferType<T>>>
->PropTypes : typeof PropTypes
->oneOfType : <T extends PropTypes.Validator<any>>(types: T[]) => PropTypes.Requireable<NonNullable<PropTypes.InferType<T>>>
->arrayOfTypes : (PropTypes.Requireable<boolean> | PropTypes.Requireable<string> | PropTypes.Requireable<PropTypes.InferProps<{ foo: PropTypes.Requireable<string>; bar: PropTypes.Validator<number>; }>>)[]
->isRequired : PropTypes.Validator<NonNullable<NonNullable<string | boolean | PropTypes.InferProps<{ foo: PropTypes.Requireable<string>; bar: PropTypes.Validator<number>; }>>>>
+>oneOfType : Validator<NonNullable<NonNullable<string | boolean | InferProps<{ foo: Requireable<string>; bar: Validator<number>; }>>>>
+>PropTypes.oneOfType(arrayOfTypes).isRequired : Validator<NonNullable<NonNullable<string | boolean | InferProps<{ foo: Requireable<string>; bar: Validator<number>; }>>>>
+>PropTypes.oneOfType(arrayOfTypes) : Requireable<NonNullable<string | boolean | InferProps<{ foo: Requireable<string>; bar: Validator<number>; }>>>
+>PropTypes.oneOfType : <T extends Validator<any>>(types: T[]) => Requireable<NonNullable<InferType<T>>>
+>PropTypes : typeof import("node_modules/prop-types/index")
+>oneOfType : <T extends Validator<any>>(types: T[]) => Requireable<NonNullable<InferType<T>>>
+>arrayOfTypes : (Requireable<string> | Requireable<boolean> | Requireable<InferProps<{ foo: Requireable<string>; bar: Validator<number>; }>>)[]
+>isRequired : Validator<NonNullable<NonNullable<string | boolean | InferProps<{ foo: Requireable<string>; bar: Validator<number>; }>>>>
 
 };
 
 // JS checking
 const propTypesWithoutAnnotation = {
->propTypesWithoutAnnotation : { any: PropTypes.Requireable<any>; array: PropTypes.Validator<any[]>; bool: PropTypes.Validator<boolean>; shape: PropTypes.Validator<NonNullable<PropTypes.InferProps<{ foo: PropTypes.Validator<string>; bar: PropTypes.Requireable<boolean>; baz: PropTypes.Requireable<any>; }>>>; oneOfType: PropTypes.Validator<NonNullable<NonNullable<string | boolean | PropTypes.InferProps<{ foo: PropTypes.Requireable<string>; bar: PropTypes.Validator<number>; }>>>>; }
->{    any: PropTypes.any,    array: PropTypes.array.isRequired,    bool: PropTypes.bool.isRequired,    shape: PropTypes.shape(innerProps).isRequired,    oneOfType: PropTypes.oneOfType(arrayOfTypes).isRequired,} : { any: PropTypes.Requireable<any>; array: PropTypes.Validator<any[]>; bool: PropTypes.Validator<boolean>; shape: PropTypes.Validator<NonNullable<PropTypes.InferProps<{ foo: PropTypes.Validator<string>; bar: PropTypes.Requireable<boolean>; baz: PropTypes.Requireable<any>; }>>>; oneOfType: PropTypes.Validator<NonNullable<NonNullable<string | boolean | PropTypes.InferProps<{ foo: PropTypes.Requireable<string>; bar: PropTypes.Validator<number>; }>>>>; }
+>propTypesWithoutAnnotation : { any: Requireable<any>; array: Validator<any[]>; bool: Validator<boolean>; shape: Validator<NonNullable<InferProps<{ foo: Validator<string>; bar: Requireable<boolean>; baz: Requireable<any>; }>>>; oneOfType: Validator<NonNullable<NonNullable<string | boolean | InferProps<{ foo: Requireable<string>; bar: Validator<number>; }>>>>; }
+>{    any: PropTypes.any,    array: PropTypes.array.isRequired,    bool: PropTypes.bool.isRequired,    shape: PropTypes.shape(innerProps).isRequired,    oneOfType: PropTypes.oneOfType(arrayOfTypes).isRequired,} : { any: Requireable<any>; array: Validator<any[]>; bool: Validator<boolean>; shape: Validator<NonNullable<InferProps<{ foo: Validator<string>; bar: Requireable<boolean>; baz: Requireable<any>; }>>>; oneOfType: Validator<NonNullable<NonNullable<string | boolean | InferProps<{ foo: Requireable<string>; bar: Validator<number>; }>>>>; }
 
     any: PropTypes.any,
->any : PropTypes.Requireable<any>
->PropTypes.any : PropTypes.Requireable<any>
->PropTypes : typeof PropTypes
->any : PropTypes.Requireable<any>
+>any : Requireable<any>
+>PropTypes.any : Requireable<any>
+>PropTypes : typeof import("node_modules/prop-types/index")
+>any : Requireable<any>
 
     array: PropTypes.array.isRequired,
->array : PropTypes.Validator<any[]>
->PropTypes.array.isRequired : PropTypes.Validator<any[]>
->PropTypes.array : PropTypes.Requireable<any[]>
->PropTypes : typeof PropTypes
->array : PropTypes.Requireable<any[]>
->isRequired : PropTypes.Validator<any[]>
+>array : Validator<any[]>
+>PropTypes.array.isRequired : Validator<any[]>
+>PropTypes.array : Requireable<any[]>
+>PropTypes : typeof import("node_modules/prop-types/index")
+>array : Requireable<any[]>
+>isRequired : Validator<any[]>
 
     bool: PropTypes.bool.isRequired,
->bool : PropTypes.Validator<boolean>
->PropTypes.bool.isRequired : PropTypes.Validator<boolean>
->PropTypes.bool : PropTypes.Requireable<boolean>
->PropTypes : typeof PropTypes
->bool : PropTypes.Requireable<boolean>
->isRequired : PropTypes.Validator<boolean>
+>bool : Validator<boolean>
+>PropTypes.bool.isRequired : Validator<boolean>
+>PropTypes.bool : Requireable<boolean>
+>PropTypes : typeof import("node_modules/prop-types/index")
+>bool : Requireable<boolean>
+>isRequired : Validator<boolean>
 
     shape: PropTypes.shape(innerProps).isRequired,
->shape : PropTypes.Validator<NonNullable<PropTypes.InferProps<{ foo: PropTypes.Validator<string>; bar: PropTypes.Requireable<boolean>; baz: PropTypes.Requireable<any>; }>>>
->PropTypes.shape(innerProps).isRequired : PropTypes.Validator<NonNullable<PropTypes.InferProps<{ foo: PropTypes.Validator<string>; bar: PropTypes.Requireable<boolean>; baz: PropTypes.Requireable<any>; }>>>
->PropTypes.shape(innerProps) : PropTypes.Requireable<PropTypes.InferProps<{ foo: PropTypes.Validator<string>; bar: PropTypes.Requireable<boolean>; baz: PropTypes.Requireable<any>; }>>
->PropTypes.shape : <P extends PropTypes.ValidationMap<any>>(type: P) => PropTypes.Requireable<PropTypes.InferProps<P>>
->PropTypes : typeof PropTypes
->shape : <P extends PropTypes.ValidationMap<any>>(type: P) => PropTypes.Requireable<PropTypes.InferProps<P>>
->innerProps : { foo: PropTypes.Validator<string>; bar: PropTypes.Requireable<boolean>; baz: PropTypes.Requireable<any>; }
->isRequired : PropTypes.Validator<NonNullable<PropTypes.InferProps<{ foo: PropTypes.Validator<string>; bar: PropTypes.Requireable<boolean>; baz: PropTypes.Requireable<any>; }>>>
+>shape : Validator<NonNullable<InferProps<{ foo: Validator<string>; bar: Requireable<boolean>; baz: Requireable<any>; }>>>
+>PropTypes.shape(innerProps).isRequired : Validator<NonNullable<InferProps<{ foo: Validator<string>; bar: Requireable<boolean>; baz: Requireable<any>; }>>>
+>PropTypes.shape(innerProps) : Requireable<InferProps<{ foo: Validator<string>; bar: Requireable<boolean>; baz: Requireable<any>; }>>
+>PropTypes.shape : <P extends ValidationMap<any>>(type: P) => Requireable<InferProps<P>>
+>PropTypes : typeof import("node_modules/prop-types/index")
+>shape : <P extends ValidationMap<any>>(type: P) => Requireable<InferProps<P>>
+>innerProps : { foo: Validator<string>; bar: Requireable<boolean>; baz: Requireable<any>; }
+>isRequired : Validator<NonNullable<InferProps<{ foo: Validator<string>; bar: Requireable<boolean>; baz: Requireable<any>; }>>>
 
     oneOfType: PropTypes.oneOfType(arrayOfTypes).isRequired,
->oneOfType : PropTypes.Validator<NonNullable<NonNullable<string | boolean | PropTypes.InferProps<{ foo: PropTypes.Requireable<string>; bar: PropTypes.Validator<number>; }>>>>
->PropTypes.oneOfType(arrayOfTypes).isRequired : PropTypes.Validator<NonNullable<NonNullable<string | boolean | PropTypes.InferProps<{ foo: PropTypes.Requireable<string>; bar: PropTypes.Validator<number>; }>>>>
->PropTypes.oneOfType(arrayOfTypes) : PropTypes.Requireable<NonNullable<string | boolean | PropTypes.InferProps<{ foo: PropTypes.Requireable<string>; bar: PropTypes.Validator<number>; }>>>
->PropTypes.oneOfType : <T extends PropTypes.Validator<any>>(types: T[]) => PropTypes.Requireable<NonNullable<PropTypes.InferType<T>>>
->PropTypes : typeof PropTypes
->oneOfType : <T extends PropTypes.Validator<any>>(types: T[]) => PropTypes.Requireable<NonNullable<PropTypes.InferType<T>>>
->arrayOfTypes : (PropTypes.Requireable<boolean> | PropTypes.Requireable<string> | PropTypes.Requireable<PropTypes.InferProps<{ foo: PropTypes.Requireable<string>; bar: PropTypes.Validator<number>; }>>)[]
->isRequired : PropTypes.Validator<NonNullable<NonNullable<string | boolean | PropTypes.InferProps<{ foo: PropTypes.Requireable<string>; bar: PropTypes.Validator<number>; }>>>>
+>oneOfType : Validator<NonNullable<NonNullable<string | boolean | InferProps<{ foo: Requireable<string>; bar: Validator<number>; }>>>>
+>PropTypes.oneOfType(arrayOfTypes).isRequired : Validator<NonNullable<NonNullable<string | boolean | InferProps<{ foo: Requireable<string>; bar: Validator<number>; }>>>>
+>PropTypes.oneOfType(arrayOfTypes) : Requireable<NonNullable<string | boolean | InferProps<{ foo: Requireable<string>; bar: Validator<number>; }>>>
+>PropTypes.oneOfType : <T extends Validator<any>>(types: T[]) => Requireable<NonNullable<InferType<T>>>
+>PropTypes : typeof import("node_modules/prop-types/index")
+>oneOfType : <T extends Validator<any>>(types: T[]) => Requireable<NonNullable<InferType<T>>>
+>arrayOfTypes : (Requireable<string> | Requireable<boolean> | Requireable<InferProps<{ foo: Requireable<string>; bar: Validator<number>; }>>)[]
+>isRequired : Validator<NonNullable<NonNullable<string | boolean | InferProps<{ foo: Requireable<string>; bar: Validator<number>; }>>>>
 
 };
 
 type ExtractedProps = PropTypes.InferProps<typeof propTypes>;
 >ExtractedProps : ExtractedProps
 >PropTypes : any
->propTypes : PropTypes.ValidationMap<Props>
+>propTypes : ValidationMap<Props>
 
 type ExtractedPropsWithoutAnnotation = PropTypes.InferProps<typeof propTypesWithoutAnnotation>;
 >ExtractedPropsWithoutAnnotation : ExtractedPropsWithoutAnnotation
 >PropTypes : any
->propTypesWithoutAnnotation : { any: PropTypes.Requireable<any>; array: PropTypes.Validator<any[]>; bool: PropTypes.Validator<boolean>; shape: PropTypes.Validator<NonNullable<PropTypes.InferProps<{ foo: PropTypes.Validator<string>; bar: PropTypes.Requireable<boolean>; baz: PropTypes.Requireable<any>; }>>>; oneOfType: PropTypes.Validator<NonNullable<NonNullable<string | boolean | PropTypes.InferProps<{ foo: PropTypes.Requireable<string>; bar: PropTypes.Validator<number>; }>>>>; }
+>propTypesWithoutAnnotation : { any: Requireable<any>; array: Validator<any[]>; bool: Validator<boolean>; shape: Validator<NonNullable<InferProps<{ foo: Validator<string>; bar: Requireable<boolean>; baz: Requireable<any>; }>>>; oneOfType: Validator<NonNullable<NonNullable<string | boolean | InferProps<{ foo: Requireable<string>; bar: Validator<number>; }>>>>; }
 
 type ExtractPropsMatch = ExtractedProps extends ExtractedPropsWithoutAnnotation ? true : false;
 >ExtractPropsMatch : true
