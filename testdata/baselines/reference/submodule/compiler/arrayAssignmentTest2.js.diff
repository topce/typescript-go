--- old.arrayAssignmentTest2.js
+++ new.arrayAssignmentTest2.js
@@= skipped -61, +61 lines =@@
 
 
 //// [arrayAssignmentTest2.js]
-var __extends = (this && this.__extends) || (function () {
-    var extendStatics = function (d, b) {
-        extendStatics = Object.setPrototypeOf ||
-            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
-            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
-        return extendStatics(d, b);
-    };
-    return function (d, b) {
-        if (typeof b !== "function" && b !== null)
-            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
-        extendStatics(d, b);
-        function __() { this.constructor = d; }
-        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-    };
-})();
-var C1 = /** @class */ (function () {
-    function C1() {
-    }
-    C1.prototype.IM1 = function () { return null; };
-    C1.prototype.C1M1 = function () { return null; };
-    return C1;
-}());
-var C2 = /** @class */ (function (_super) {
-    __extends(C2, _super);
-    function C2() {
-        return _super !== null && _super.apply(this, arguments) || this;
-    }
-    C2.prototype.C2M1 = function () { return null; };
-    return C2;
-}(C1));
-var C3 = /** @class */ (function () {
-    function C3() {
-    }
-    C3.prototype.CM3M1 = function () { return 3; };
-    return C3;
-}());
-/*
-
-This behaves unexpectedly with the following types:
-
-Type 1 of any[]:
-
-* Type 2 of the following throws an error but shouldn't: () => void[], SomeClass[], and {one: 1}[].
-
-* Type 2 of the following doesn't throw an error but should: {one: 1}, new() => SomeClass, SomeClass.
-
-*/
+class C1 {
+    IM1() { return null; }
+    C1M1() { return null; }
+}
+class C2 extends C1 {
+    C2M1() { return null; }
+}
+class C3 {
+    CM3M1() { return 3; }
+}
 var a1 = null;
 var c1 = new C1();
 var i1 = c1;
@@= skipped -62, +25 lines =@@
 var arr_c1_2 = [];
 var arr_c2_2 = [];
 var arr_c3 = [];
-// "clean up error" occurs at this point
-arr_c3 = arr_c2_2; // should be an error - is
-arr_c3 = arr_c1_2; // should be an error - is
-arr_c3 = arr_i1_2; // should be an error - is
-arr_any = f1; // should be an error - is
-arr_any = function () { return null; }; // should be an error - is
-arr_any = o1; // should be an error - is
-arr_any = a1; // should be ok - is
-arr_any = c1; // should be an error - is
-arr_any = c2; // should be an error - is
-arr_any = c3; // should be an error - is
-arr_any = i1; // should be an error - is
+arr_c3 = arr_c2_2;
+arr_c3 = arr_c1_2;
+arr_c3 = arr_i1_2;
+arr_any = f1;
+arr_any = function () { return null; };
+arr_any = o1;
+arr_any = a1;
+arr_any = c1;
+arr_any = c2;
+arr_any = c3;
+arr_any = i1;
