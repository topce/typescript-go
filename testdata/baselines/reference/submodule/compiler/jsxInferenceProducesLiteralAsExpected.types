//// [tests/cases/compiler/jsxInferenceProducesLiteralAsExpected.tsx] ////

=== jsxInferenceProducesLiteralAsExpected.tsx ===
import React = require("react");
>React : any

type FunctionPropertyNames<T> = { [K in keyof T]: T[K] extends Function ? K : never }[keyof T];
>FunctionPropertyNames : FunctionPropertyNames<T>

class TestObject {
>TestObject : TestObject

    a: string = '';
>a : string
>'' : ""

    b: number = 1;
>b : number
>1 : 1

    c: () => void = () => { };
>c : () => void
>() => { } : () => void
}
interface TestProps<T> {
    model: T;
>model : T

    foo: FunctionPropertyNames<T>;
>foo : FunctionPropertyNames<T>
}
function Test<T>(props: TestProps<T>) { return <></>; }
>Test : <T>(props: TestProps<T>) => any
>props : TestProps<T>
><></> : any

const model = new TestObject();
>model : TestObject
>new TestObject() : TestObject
>TestObject : typeof TestObject

const el1 = <Test model={model} foo="c" />;
>el1 : any
><Test model={model} foo="c" /> : any
>Test : <T>(props: TestProps<T>) => any
>model : any
>model : TestObject
>foo : any

const el2 = <Test<TestObject> model={model} foo="c" />;
>el2 : any
><Test<TestObject> model={model} foo="c" /> : any
>Test : <T>(props: TestProps<T>) => any
>model : any
>model : TestObject
>foo : any

