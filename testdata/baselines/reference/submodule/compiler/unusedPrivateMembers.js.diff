--- old.unusedPrivateMembers.js
+++ new.unusedPrivateMembers.js
@@= skipped -65, +65 lines =@@
 
 
 //// [unusedPrivateMembers.js]
-var Test1 = /** @class */ (function () {
-    function Test1() {
+class Test1 {
+    initializeInternal() {
     }
-    Test1.prototype.initializeInternal = function () {
-    };
-    Test1.prototype.test = function () {
+    test() {
         var x = new Test1();
         x.initializeInternal();
-    };
-    return Test1;
-}());
-var Test2 = /** @class */ (function () {
-    function Test2() {
-        this.p = 0;
     }
-    Test2.prototype.test = function () {
+}
+class Test2 {
+    p = 0;
+    test() {
         var x = new Test2();
         x.p;
-    };
-    return Test2;
-}());
-var Test3 = /** @class */ (function () {
-    function Test3() {
     }
-    Object.defineProperty(Test3.prototype, "x", {
-        get: function () {
-            return 0;
-        },
-        enumerable: false,
-        configurable: true
-    });
-    Test3.prototype.test = function () {
+}
+class Test3 {
+    get x() {
+        return 0;
+    }
+    test() {
         var x = new Test3();
         x.x;
-    };
-    return Test3;
-}());
-var Test4 = /** @class */ (function () {
-    function Test4() {
     }
-    Object.defineProperty(Test4.prototype, "x", {
-        set: function (v) {
-            v;
-        },
-        enumerable: false,
-        configurable: true
-    });
-    Test4.prototype.test = function () {
+}
+class Test4 {
+    set x(v) {
+        v;
+    }
+    test() {
         var x = new Test4();
         x.x;
-    };
-    return Test4;
-}());
-var Test5 = /** @class */ (function () {
-    function Test5() {
     }
-    Test5.prototype.test = function () {
+}
+class Test5 {
+    p;
+    test() {
         var x = new Test5();
         x.p;
-    };
-    return Test5;
-}());
-var Test6 = /** @class */ (function () {
-    function Test6() {
-        this.b = 0;
     }
-    Object.defineProperty(Test6.prototype, "a", {
-        get: function () {
-            return 0;
-        },
-        set: function (v) {
-            v;
-        },
-        enumerable: false,
-        configurable: true
-    });
-    Test6.prototype.test = function () {
+}
+class Test6 {
+    get a() {
+        return 0;
+    }
+    set a(v) {
+        v;
+    }
+    b = 0;
+    test() {
         var x = new Test6();
         x.a++;
-    };
-    return Test6;
-}());
+    }
+}
