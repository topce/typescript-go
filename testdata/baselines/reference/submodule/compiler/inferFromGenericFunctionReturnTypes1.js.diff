--- old.inferFromGenericFunctionReturnTypes1.js
+++ new.inferFromGenericFunctionReturnTypes1.js
@@= skipped -73, +73 lines =@@
 
 
 //// [inferFromGenericFunctionReturnTypes1.js]
-// Repro from #15680
-// This is a contrived class. We could do the same thing with Observables, etc.
-var SetOf = /** @class */ (function () {
-    function SetOf() {
-    }
-    SetOf.prototype.add = function (a) {
+class SetOf {
+    _store;
+    add(a) {
         this._store.push(a);
-    };
-    SetOf.prototype.transform = function (transformer) {
+    }
+    transform(transformer) {
         return transformer(this);
-    };
-    SetOf.prototype.forEach = function (fn) {
-        this._store.forEach(function (a, i) { return fn(a, i); });
-    };
-    return SetOf;
-}());
-/* ... etc ... */
-function compose() {
-    var fns = [];
-    for (var _i = 0; _i < arguments.length; _i++) {
-        fns[_i] = arguments[_i];
     }
-    return function (x) { return fns.reduce(function (prev, fn) { return fn(prev); }, x); };
+    forEach(fn) {
+        this._store.forEach((a, i) => fn(a, i));
+    }
 }
+function compose(...fns) {
+    return (x) => fns.reduce((prev, fn) => fn(prev), x);
+}
 function map(fn) {
-    return function (a) {
-        var b = new SetOf();
-        a.forEach(function (x) { return b.add(fn(x)); });
+    return (a) => {
+        const b = new SetOf();
+        a.forEach(x => b.add(fn(x)));
         return b;
     };
 }
 function filter(predicate) {
-    return function (a) {
-        var result = new SetOf();
-        a.forEach(function (x) {
+    return (a) => {
+        const result = new SetOf();
+        a.forEach(x => {
             if (predicate(x))
                 result.add(x);
         });
         return result;
     };
 }
-var testSet = new SetOf();
+const testSet = new SetOf();
 testSet.add(1);
 testSet.add(2);
 testSet.add(3);
-testSet.transform(compose(filter(function (x) { return x % 1 === 0; }), map(function (x) { return x + x; }), map(function (x) { return x + '!!!'; }), map(function (x) { return x.toUpperCase(); })));
-testSet.transform(compose(filter(function (x) { return x % 1 === 0; }), map(function (x) { return x + x; }), map(function (x) { return 123; }), // Whoops a bug
-map(function (x) { return x.toUpperCase(); }) // causes an error!
-));
+testSet.transform(compose(filter(x => x % 1 === 0), map(x => x + x), map(x => x + '!!!'), map(x => x.toUpperCase())));
+testSet.transform(compose(filter(x => x % 1 === 0), map(x => x + x), map(x => 123), map(x => x.toUpperCase())));
