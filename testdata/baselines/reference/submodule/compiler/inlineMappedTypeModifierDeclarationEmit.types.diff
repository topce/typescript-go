--- old.inlineMappedTypeModifierDeclarationEmit.types
+++ new.inlineMappedTypeModifierDeclarationEmit.types
@@= skipped -1, +1 lines =@@
 
 === index.ts ===
 import { test1, test2 } from "./other";
->test1 : <T, K extends string>(obj: T, k: K) => Exclude<keyof T, K> extends infer T_1 extends keyof T ? { [P in T_1]: T[P]; } : never
->test2 : <T, K extends string>(obj: T, k: K) => { [P in Exclude<keyof T, K>]: T[P]; }
+>test1 : <T, K extends string>(obj: T, k: K) => OmitReal<T, K>
+>test2 : <T, K extends string>(obj: T, k: K) => OmitUnveiled<T, K>
 
 export function wrappedTest1<T, K extends string>(obj: T, k: K) {
->wrappedTest1 : <T, K extends string>(obj: T, k: K) => Exclude<keyof T, K> extends infer T_1 extends keyof T ? { [P in T_1]: T[P]; } : never
+>wrappedTest1 : <T, K extends string>(obj: T, k: K) => OmitReal<T, K>
 >obj : T
 >k : K
 
   return test1(obj, k);
->test1(obj, k) : Exclude<keyof T, K> extends infer T_1 extends keyof T ? { [P in T_1]: T[P]; } : never
->test1 : <T_1, K_1 extends string>(obj: T_1, k: K_1) => Exclude<keyof T_1, K_1> extends infer T_2 extends keyof T_1 ? { [P in T_2]: T_1[P]; } : never
+>test1(obj, k) : OmitReal<T, K>
+>test1 : <T, K extends string>(obj: T, k: K) => OmitReal<T, K>
 >obj : T
 >k : K
 }
 
 export function wrappedTest2<T, K extends string>(obj: T, k: K) {
->wrappedTest2 : <T, K extends string>(obj: T, k: K) => { [P in Exclude<keyof T, K>]: T[P]; }
+>wrappedTest2 : <T, K extends string>(obj: T, k: K) => OmitUnveiled<T, K>
 >obj : T
 >k : K
 
   return test2(obj, k);
->test2(obj, k) : { [P in Exclude<keyof T, K>]: T[P]; }
->test2 : <T_1, K_1 extends string>(obj: T_1, k: K_1) => { [P in Exclude<keyof T_1, K_1>]: T_1[P]; }
+>test2(obj, k) : OmitUnveiled<T, K>
+>test2 : <T, K extends string>(obj: T, k: K) => OmitUnveiled<T, K>
 >obj : T
 >k : K
 }
@@= skipped -39, +39 lines =@@
 };
 
 export const processedInternally1 = wrappedTest1({} as Obj, "a");
->processedInternally1 : { readonly foo: string; }
->wrappedTest1({} as Obj, "a") : { readonly foo: string; }
->wrappedTest1 : <T, K extends string>(obj: T, k: K) => Exclude<keyof T, K> extends infer T_1 extends keyof T ? { [P in T_1]: T[P]; } : never
+>processedInternally1 : OmitReal<Obj, "a">
+>wrappedTest1({} as Obj, "a") : OmitReal<Obj, "a">
+>wrappedTest1 : <T, K extends string>(obj: T, k: K) => OmitReal<T, K>
 >{} as Obj : Obj
 >{} : {}
 >"a" : "a"
 
 export const processedInternally2 = wrappedTest2({} as Obj, "a");
->processedInternally2 : { foo: string; }
->wrappedTest2({} as Obj, "a") : { foo: string; }
->wrappedTest2 : <T, K extends string>(obj: T, k: K) => { [P in Exclude<keyof T, K>]: T[P]; }
+>processedInternally2 : OmitUnveiled<Obj, "a">
+>wrappedTest2({} as Obj, "a") : OmitUnveiled<Obj, "a">
+>wrappedTest2 : <T, K extends string>(obj: T, k: K) => OmitUnveiled<T, K>
 >{} as Obj : Obj
 >{} : {}
 >"a" : "a"
