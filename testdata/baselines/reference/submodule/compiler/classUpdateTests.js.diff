--- old.classUpdateTests.js
+++ new.classUpdateTests.js
@@= skipped -115, +115 lines =@@
 }
 
 //// [classUpdateTests.js]
-var __extends = (this && this.__extends) || (function () {
-    var extendStatics = function (d, b) {
-        extendStatics = Object.setPrototypeOf ||
-            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
-            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
-        return extendStatics(d, b);
-    };
-    return function (d, b) {
-        if (typeof b !== "function" && b !== null)
-            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
-        extendStatics(d, b);
-        function __() { this.constructor = d; }
-        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-    };
-})();
-//
-// test codegen for instance properties
-//
-var A = /** @class */ (function () {
-    function A() {
-        this.p1 = 0;
-        this.p2 = 0;
-    }
-    return A;
-}());
-var B = /** @class */ (function () {
-    function B() {
-        this.p1 = 0;
-        this.p2 = 0;
-    }
-    return B;
-}());
-var C = /** @class */ (function () {
-    function C(p1, p2, p3) {
-        if (p1 === void 0) { p1 = 0; }
-        if (p2 === void 0) { p2 = 0; }
-        if (p3 === void 0) { p3 = 0; }
+class A {
+    p1 = 0;
+    p2 = 0;
+    p3;
+}
+class B {
+    p1 = 0;
+    p2 = 0;
+    p3;
+    constructor() { }
+}
+class C {
+    p1;
+    p2;
+    constructor(p1 = 0, p2 = 0, p3 = 0) {
         this.p1 = p1;
         this.p2 = p2;
     }
-    return C;
-}());
-//
-// test requirements for super calls
-//
-var D = /** @class */ (function () {
-    function D() {
+}
+class D {
+}
+class E extends D {
+    p1 = 0;
+}
+class F extends E {
+    constructor() { }
+}
+class G extends D {
+    p1 = 0;
+    constructor() { super(); }
+}
+class H {
+    constructor() { super(); }
+}
+class I extends Object {
+    constructor() { super(); }
+}
+class J extends G {
+    p1;
+    constructor(p1) {
+        this.p1 = p1;
+        super();
     }
-    return D;
-}());
-var E = /** @class */ (function (_super) {
-    __extends(E, _super);
-    function E() {
-        var _this = _super !== null && _super.apply(this, arguments) || this;
-        _this.p1 = 0;
-        return _this;
-    }
-    return E;
-}(D));
-var F = /** @class */ (function (_super) {
-    __extends(F, _super);
-    function F() {
-        var _this = this;
-        return _this;
-    } // ERROR - super call required
-    return F;
-}(E));
-var G = /** @class */ (function (_super) {
-    __extends(G, _super);
-    function G() {
-        var _this = _super.call(this) || this;
-        _this.p1 = 0;
-        return _this;
-    } // NO ERROR
-    return G;
-}(D));
-var H = /** @class */ (function () {
-    function H() {
-        return _super.call(this) || this;
-    } // ERROR - no super call allowed
-    return H;
-}());
-var I = /** @class */ (function (_super) {
-    __extends(I, _super);
-    function I() {
-        return _super.call(this) || this;
-    } // ERROR - no super call allowed
-    return I;
-}(Object));
-var J = /** @class */ (function (_super) {
-    __extends(J, _super);
-    function J(p1) {
-        var _this = _super.call(this) || this; // NO ERROR
-        _this.p1 = p1;
-        return _this;
-    }
-    return J;
-}(G));
-var K = /** @class */ (function (_super) {
-    __extends(K, _super);
-    function K(p1) {
-        var _this = this;
+}
+class K extends G {
+    p1;
+    constructor(p1) {
+        this.p1 = p1;
         var i = 0;
-        _this = _super.call(this) || this;
-        _this.p1 = p1;
-        return _this;
+        super();
     }
-    return K;
-}(G));
-var L = /** @class */ (function (_super) {
-    __extends(L, _super);
-    function L(p1) {
-        var _this = _super.call(this) || this; // NO ERROR
-        _this.p1 = p1;
-        return _this;
+}
+class L extends G {
+    p1;
+    constructor(p1) {
+        this.p1 = p1;
+        super();
     }
-    return L;
-}(G));
-var M = /** @class */ (function (_super) {
-    __extends(M, _super);
-    function M(p1) {
-        var _this = this;
+}
+class M extends G {
+    p1;
+    constructor(p1) {
+        this.p1 = p1;
         var i = 0;
-        _this = _super.call(this) || this;
-        _this.p1 = p1;
-        return _this;
+        super();
     }
-    return M;
-}(G));
-//
-// test this reference in field initializers
-//
-var N = /** @class */ (function () {
-    function N() {
-        this.p1 = 0;
-        this.p2 = this.p1;
+}
+class N {
+    p1 = 0;
+    p2 = this.p1;
+    constructor() {
         this.p2 = 0;
     }
-    return N;
-}());
-//
-// test error on property declarations within class constructors
-//
-var O = /** @class */ (function () {
-    function O() {
-        this.p1 = 0; // ERROR
+}
+class O {
+    constructor() {
     }
-    return O;
-}());
-var P = /** @class */ (function () {
-    function P() {
-        this.p1 = 0; // ERROR
+    p1 = 0;
+}
+class P {
+    constructor() {
     }
-    return P;
-}());
-var Q = /** @class */ (function () {
-    function Q() {
-        this.p1 = 0; // ERROR
+    p1 = 0;
+}
+class Q {
+    constructor() {
     }
-    return Q;
-}());
-var R = /** @class */ (function () {
-    function R() {
-        this.p1 = 0; // ERROR
+    this;
+    p1 = 0;
+}
+class R {
+    constructor() {
     }
-    return R;
-}());
+    this;
+    p1 = 0;
+}
