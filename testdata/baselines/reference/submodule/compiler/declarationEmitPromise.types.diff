--- old.declarationEmitPromise.types
+++ new.declarationEmitPromise.types
@@= skipped -8, +8 lines =@@
 }
 
 export async function runSampleWorks<A, B, C, D, E>(
->runSampleWorks : <A, B, C, D, E>(a: bluebird<A>, b?: bluebird<B>, c?: bluebird<C>, d?: bluebird<D>, e?: bluebird<E>) => Promise<(<T>(f: (a: A, b?: B, c?: C, d?: D, e?: E) => T) => T)>
+>runSampleWorks : <A, B, C, D, E>(a: bluebird<A>, b?: bluebird<B>, c?: bluebird<C>, d?: bluebird<D>, e?: bluebird<E>) => Promise<<T>(f: (a: A, b?: B, c?: C, d?: D, e?: E) => T) => T>
 
     a: bluebird<A>, b?: bluebird<B>, c?: bluebird<C>, d?: bluebird<D>, e?: bluebird<E>) {
 >a : bluebird<A>
@@= skipped -45, +45 lines =@@
 
         f.apply(this, result);
 >f.apply(this, result) : any
->f.apply : (this: Function, thisArg: any, argArray?: any) => any
+>f.apply : (thisArg: any, argArray?: any) => any
 >f : (a: A, b?: B, c?: C, d?: D, e?: E) => T
->apply : (this: Function, thisArg: any, argArray?: any) => any
+>apply : (thisArg: any, argArray?: any) => any
 >this : any
 >result : any
 
@@= skipped -17, +17 lines =@@
 }
 
 export async function runSampleBreaks<A, B, C, D, E>(
->runSampleBreaks : <A, B, C, D, E>(a: bluebird<A>, b?: bluebird<B>, c?: bluebird<C>, d?: bluebird<D>, e?: bluebird<E>) => Promise<(<T>(f: (a: A, b?: B, c?: C, d?: D, e?: E) => T) => T)>
+>runSampleBreaks : <A, B, C, D, E>(a: bluebird<A>, b?: bluebird<B>, c?: bluebird<C>, d?: bluebird<D>, e?: bluebird<E>) => Promise<<T>(f: (a: A, b?: B, c?: C, d?: D, e?: E) => T) => T>
 
     a: bluebird<A>, b?: bluebird<B>, c?: bluebird<C>, d?: bluebird<D>, e?: bluebird<E>) {
 >a : bluebird<A>
@@= skipped -45, +45 lines =@@
 
         f.apply(this, result);
 >f.apply(this, result) : any
->f.apply : (this: Function, thisArg: any, argArray?: any) => any
+>f.apply : (thisArg: any, argArray?: any) => any
 >f : (a: A, b?: B, c?: C, d?: D, e?: E) => T
->apply : (this: Function, thisArg: any, argArray?: any) => any
+>apply : (thisArg: any, argArray?: any) => any
 >this : any
 >result : any
 
