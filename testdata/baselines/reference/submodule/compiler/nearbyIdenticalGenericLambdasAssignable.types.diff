--- old.nearbyIdenticalGenericLambdasAssignable.types
+++ new.nearbyIdenticalGenericLambdasAssignable.types
@@= skipped -46, +46 lines =@@
 >v : T
 
 declare function accA(x: TA): void;
->accA : (x: TA) => void
+>accA : (x: <T>() => { v: T; }) => void
 >x : <T>() => { v: T; }
 
 declare function accB(x: TB): void;
->accB : (x: TB) => void
+>accB : (x: <T>() => { v: T; }) => void
 >x : <T>() => { v: T; }
 
 declare function accC(x: TC): void;
->accC : (x: TC) => void
+>accC : (x: <T>() => { v: T; }) => void
 >x : <T>() => { v: T; }
 
 declare function accL(x: TL): void;
@@= skipped -18, +18 lines =@@
 // These should all be OK, every type is identical
 accA(fA); accA(fB); accA(fC);
 >accA(fA) : void
->accA : (x: TA) => void
+>accA : (x: <T>() => { v: T; }) => void
 >fA : <T>() => { v: T; }
 >accA(fB) : void
->accA : (x: TA) => void
+>accA : (x: <T>() => { v: T; }) => void
 >fB : <T>() => { v: T; }
 >accA(fC) : void
->accA : (x: TA) => void
+>accA : (x: <T>() => { v: T; }) => void
 >fC : <T>() => { v: T; }
 
 //             ~~ previously an error
 accB(fA); accB(fB); accB(fC);
 >accB(fA) : void
->accB : (x: TB) => void
+>accB : (x: <T>() => { v: T; }) => void
 >fA : <T>() => { v: T; }
 >accB(fB) : void
->accB : (x: TB) => void
+>accB : (x: <T>() => { v: T; }) => void
 >fB : <T>() => { v: T; }
 >accB(fC) : void
->accB : (x: TB) => void
+>accB : (x: <T>() => { v: T; }) => void
 >fC : <T>() => { v: T; }
 
 //             OK
 accC(fA); accC(fB); accC(fC);
 >accC(fA) : void
->accC : (x: TC) => void
+>accC : (x: <T>() => { v: T; }) => void
 >fA : <T>() => { v: T; }
 >accC(fB) : void
->accC : (x: TC) => void
+>accC : (x: <T>() => { v: T; }) => void
 >fB : <T>() => { v: T; }
 >accC(fC) : void
->accC : (x: TC) => void
+>accC : (x: <T>() => { v: T; }) => void
 >fC : <T>() => { v: T; }
 
 //             ~~ previously an error
