--- old.importTypeGenericArrowTypeParenthesized.types
+++ new.importTypeGenericArrowTypeParenthesized.types
@@= skipped -11, +11 lines =@@
 }
 === index.ts ===
 import { fn } from "module";
->fn : <T>(x: T) => import("module").Modifier<T>
+>fn : <T>(x: T) => Modifier<T>
 
 export const fail1 = fn(<T>(x: T): T => x);
->fail1 : import("module").Modifier<(<T>(x: T) => T)>
->fn(<T>(x: T): T => x) : import("module").Modifier<(<T>(x: T) => T)>
->fn : <T>(x: T) => import("module").Modifier<T>
+>fail1 : Modifier<<T>(x: T) => T>
+>fn(<T>(x: T): T => x) : Modifier<<T>(x: T) => T>
+>fn : <T>(x: T) => Modifier<T>
 ><T>(x: T): T => x : <T>(x: T) => T
 >x : T
 >x : T
 
 export const fail2 = fn(function<T>(x: T): T {
->fail2 : import("module").Modifier<(<T>(x: T) => T)>
->fn(function<T>(x: T): T {  return x;}) : import("module").Modifier<(<T>(x: T) => T)>
->fn : <T>(x: T) => import("module").Modifier<T>
+>fail2 : Modifier<<T>(x: T) => T>
+>fn(function<T>(x: T): T {  return x;}) : Modifier<<T>(x: T) => T>
+>fn : <T>(x: T) => Modifier<T>
 >function<T>(x: T): T {  return x;} : <T>(x: T) => T
 >x : T
 
@@= skipped -23, +23 lines =@@
 });
 
 export const works1 = fn((x: number) => x);
->works1 : import("module").Modifier<(x: number) => number>
->fn((x: number) => x) : import("module").Modifier<(x: number) => number>
->fn : <T>(x: T) => import("module").Modifier<T>
+>works1 : Modifier<(x: number) => number>
+>fn((x: number) => x) : Modifier<(x: number) => number>
+>fn : <T>(x: T) => Modifier<T>
 >(x: number) => x : (x: number) => number
 >x : number
 >x : number
@@= skipped -12, +12 lines =@@
 >x : T
 
 export const works2 = fn<MakeItWork>(x => x);
->works2 : import("module").Modifier<MakeItWork>
->fn<MakeItWork>(x => x) : import("module").Modifier<MakeItWork>
->fn : <T>(x: T) => import("module").Modifier<T>
+>works2 : Modifier<MakeItWork>
+>fn<MakeItWork>(x => x) : Modifier<MakeItWork>
+>fn : <T>(x: T) => Modifier<T>
 >x => x : <T>(x: T) => T
 >x : T
 >x : T
