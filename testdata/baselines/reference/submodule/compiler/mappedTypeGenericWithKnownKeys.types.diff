--- old.mappedTypeGenericWithKnownKeys.types
+++ new.mappedTypeGenericWithKnownKeys.types
@@= skipped -8, +8 lines =@@
 >key : keyof Shape
 
     const obj = {} as Record<keyof Shape | "knownLiteralKey", number>;
->obj : Record<keyof Shape | "knownLiteralKey", number>
->{} as Record<keyof Shape | "knownLiteralKey", number> : Record<keyof Shape | "knownLiteralKey", number>
+>obj : Record<"knownLiteralKey" | keyof Shape, number>
+>{} as Record<keyof Shape | "knownLiteralKey", number> : Record<"knownLiteralKey" | keyof Shape, number>
 >{} : {}
 
     obj.knownLiteralKey = 1;
 >obj.knownLiteralKey = 1 : 1
 >obj.knownLiteralKey : number
->obj : Record<keyof Shape | "knownLiteralKey", number>
+>obj : Record<"knownLiteralKey" | keyof Shape, number>
 >knownLiteralKey : number
 >1 : 1
 
     obj[key] = 2;
 >obj[key] = 2 : 2
->obj[key] : Record<keyof Shape | "knownLiteralKey", number>[keyof Shape]
->obj : Record<keyof Shape | "knownLiteralKey", number>
+>obj[key] : Record<"knownLiteralKey" | keyof Shape, number>[keyof Shape]
+>obj : Record<"knownLiteralKey" | keyof Shape, number>
 >key : keyof Shape
 >2 : 2
 
     obj.unknownLiteralKey = 3; // error
 >obj.unknownLiteralKey = 3 : 3
 >obj.unknownLiteralKey : any
->obj : Record<keyof Shape | "knownLiteralKey", number>
+>obj : Record<"knownLiteralKey" | keyof Shape, number>
 >unknownLiteralKey : any
 >3 : 3
 
     obj['' as string] = 4; // error
 >obj['' as string] = 4 : 4
 >obj['' as string] : any
->obj : Record<keyof Shape | "knownLiteralKey", number>
+>obj : Record<"knownLiteralKey" | keyof Shape, number>
 >'' as string : string
 >'' : ""
 >4 : 4
