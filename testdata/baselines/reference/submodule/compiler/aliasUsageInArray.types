//// [tests/cases/compiler/aliasUsageInArray.ts] ////

=== aliasUsageInArray_main.ts ===
import Backbone = require("./aliasUsageInArray_backbone");
>Backbone : typeof import("aliasUsageInArray_backbone")

import moduleA = require("./aliasUsageInArray_moduleA");
>moduleA : typeof import("aliasUsageInArray_moduleA")

interface IHasVisualizationModel {
    VisualizationModel: typeof Backbone.Model;
>VisualizationModel : typeof Model
>Backbone.Model : typeof Model
>Backbone : typeof import("aliasUsageInArray_backbone")
>Model : typeof Model
}

var xs: IHasVisualizationModel[] = [moduleA];
>xs : IHasVisualizationModel[]
>[moduleA] : typeof import("aliasUsageInArray_moduleA")[]
>moduleA : typeof import("aliasUsageInArray_moduleA")

var xs2: typeof moduleA[] = [moduleA];
>xs2 : typeof import("aliasUsageInArray_moduleA")[]
>moduleA : typeof import("aliasUsageInArray_moduleA")
>[moduleA] : typeof import("aliasUsageInArray_moduleA")[]
>moduleA : typeof import("aliasUsageInArray_moduleA")

=== aliasUsageInArray_backbone.ts ===
export class Model {
>Model : Model

    public someData: string;
>someData : string
}

=== aliasUsageInArray_moduleA.ts ===
import Backbone = require("./aliasUsageInArray_backbone");
>Backbone : typeof import("aliasUsageInArray_backbone")

export class VisualizationModel extends Backbone.Model {
>VisualizationModel : VisualizationModel
>Backbone.Model : Model
>Backbone : typeof import("aliasUsageInArray_backbone")
>Model : typeof Model

    // interesting stuff here
}

