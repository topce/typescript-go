--- old.mappedTypeTupleConstraintAssignability.types
+++ new.mappedTypeTupleConstraintAssignability.types
@@= skipped -19, +19 lines =@@
 }
 
 declare function createZodEnum<U extends string, T extends Readonly<[U, ...U[]]>>(values: T): ZodEnum<Writeable<T>>;
->createZodEnum : <U extends string, T extends Readonly<[U, ...U[]]>>(values: T) => ZodEnum<Writeable<T>>
+>createZodEnum : <U extends string, T extends readonly [U, ...U[]]>(values: T) => ZodEnum<Writeable<T>>
 >values : T
 
 // https://github.com/microsoft/TypeScript/issues/53359#issuecomment-1475390607
@@= skipped -45, +45 lines =@@
 }
 
 export function create<T extends AnyTuple>(schemas: {
->create : <T extends AnyTuple>(schemas: { [K in keyof T]: ISchema<T[K]>; }) => TupleSchema<T | undefined, AnyObject, undefined, "">
->schemas : { [K in keyof T]: ISchema<T[K], any, any, any>; }
+>create : <T extends AnyTuple>(schemas: { [K in keyof T]: ISchema<T[K], any, any, any> }) => TupleSchema<T | undefined, AnyObject, undefined, "">
+>schemas : { [K in keyof T]: ISchema<T[K], any, any, any> }
 
   [K in keyof T]: ISchema<T[K]>;
 }) {
   return new TupleSchema<T | undefined>(schemas);
 >new TupleSchema<T | undefined>(schemas) : TupleSchema<T | undefined, AnyObject, undefined, "">
 >TupleSchema : typeof TupleSchema
->schemas : { [K in keyof T]: ISchema<T[K], any, any, any>; }
+>schemas : { [K in keyof T]: ISchema<T[K], any, any, any> }
 }
 
