--- old.functionCallOnConstrainedTypeVariable.types
+++ new.functionCallOnConstrainedTypeVariable.types
@@= skipped -25, +25 lines =@@
 
   p.a("s"); // Error
 >p.a("s") : string
->p.a : ((x: number) => string) | ((x: boolean) => string)
+>p.a : (x: number) => string | (x: boolean) => string
 >p : A | B
->a : ((x: number) => string) | ((x: boolean) => string)
+>a : (x: number) => string | (x: boolean) => string
 >"s" : "s"
 }
 
@@= skipped -12, +12 lines =@@
 
   p.a("s"); // Error
 >p.a("s") : string
->p.a : ((x: number) => string) | ((x: boolean) => string)
+>p.a : (x: number) => string | (x: boolean) => string
 >p : A | B
->a : ((x: number) => string) | ((x: boolean) => string)
+>a : (x: number) => string | (x: boolean) => string
 >"s" : "s"
   
   var a: T["a"] = p.a;
 >a : T["a"]
->p.a : ((x: number) => string) | ((x: boolean) => string)
+>p.a : (x: number) => string | (x: boolean) => string
 >p : A | B
->a : ((x: number) => string) | ((x: boolean) => string)
+>a : (x: number) => string | (x: boolean) => string
 
   a(""); // Error
 >a("") : string
->a : ((x: number) => string) | ((x: boolean) => string)
+>a : (x: number) => string | (x: boolean) => string
 >"" : ""
 
   a("", "", "", ""); // Error
 >a("", "", "", "") : string
->a : ((x: number) => string) | ((x: boolean) => string)
+>a : (x: number) => string | (x: boolean) => string
 >"" : ""
 >"" : ""
 >"" : ""
