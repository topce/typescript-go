--- old.declarationEmitBindingPatternsUnused.types
+++ new.declarationEmitBindingPatternsUnused.types
@@= skipped -8, +8 lines =@@
 
 // 1.Causes duplicate identifier if we remove alias
 function duplicateIndetifiers({ name: alias, name: alias2 }: Named) { }
->duplicateIndetifiers : ({ name: alias, name: alias2 }: Named) => void
+>duplicateIndetifiers : (__0: Named) => void
 >name : any
 >alias : string
 >name : any
 >alias2 : string
 
 function duplicateIndetifiers2(name: string, { name: alias }: Named) { }
->duplicateIndetifiers2 : (name: string, { name: alias }: Named) => void
+>duplicateIndetifiers2 : (name: string, __1: Named) => void
 >name : string
 >name : any
 >alias : string
 
 function duplicateIndetifiers3({ name: alias }: Named, { name: alias2 }: Named) { }
->duplicateIndetifiers3 : ({ name: alias }: Named, { name: alias2 }: Named) => void
+>duplicateIndetifiers3 : (__0: Named, __1: Named) => void
 >name : any
 >alias : string
 >name : any
@@= skipped -25, +25 lines =@@
 
 // 2.Can change in meaning for typeof value if we remove alias
 function shadowedVariable({ value: alias }: { value: string }): typeof value { return value }
->shadowedVariable : ({ value: alias }: { value: string; }) => typeof value
+>shadowedVariable : (__0: { value: string; }) => string
 >value : any
 >alias : string
 >value : string
@@= skipped -8, +8 lines =@@
 >value : string
 
 function notReferenced({ name: alias }: Named) {
->notReferenced : ({ name: alias }: Named) => void
+>notReferenced : (__0: Named) => void
 >name : any
 >alias : string
 
 }
 function notReferencedNestedAlias({ p: { name: alias } }: { p: Named }) {
->notReferencedNestedAlias : ({ p: { name: alias } }: { p: Named; }) => void
+>notReferencedNestedAlias : (__0: { p: Named; }) => void
 >p : any
 >name : any
 >alias : string
 >p : Named
 }
 function notReferencedArrayAlias([a, b, { name: alias }]: Named[]) {
->notReferencedArrayAlias : ([a, b, { name: alias }]: Named[]) => void
+>notReferencedArrayAlias : (__0: Named[]) => void
 >a : Named
 >b : Named
 >name : any
@@= skipped -21, +21 lines =@@
 }
 
 function referencedInCode({ name: alias }: Named) {
->referencedInCode : ({ name: alias }: Named) => string
+>referencedInCode : (__0: Named) => string
 >name : any
 >alias : string
 
@@= skipped -9, +9 lines =@@
 }
 
 function referencedInSignarture({ name: alias }: Named): typeof alias {
->referencedInSignarture : ({ name: alias }: Named) => typeof alias
+>referencedInSignarture : (__0: Named) => string
 >name : any
 >alias : string
 >alias : string
@@= skipped -10, +10 lines =@@
 }
 
 function referencedInSignartureKeyword({ function: alias }: { function: string }): typeof alias {
->referencedInSignartureKeyword : ({ function: alias }: { function: string; }) => typeof alias
+>referencedInSignartureKeyword : (__0: { function: string; }) => string
 >function : any
 >alias : string
 >function : string
@@= skipped -11, +11 lines =@@
 }
 
 function referencedInInferredType({ name: alias }: Named) {
->referencedInInferredType : ({ name: alias }: Named) => { name: typeof alias; }
+>referencedInInferredType : (__0: Named) => Named2
 >name : any
 >alias : string
 
     type Named2 = { name: typeof alias }
->Named2 : { name: typeof alias; }
+>Named2 : Named2
 >name : string
 >alias : string
 
     return null! as Named2
->null! as Named2 : { name: typeof alias; }
+>null! as Named2 : Named2
 >null! : null
 }
 
 function referencedInNestedFunction({ name: alias }: Named) {
->referencedInNestedFunction : ({ name: alias }: Named) => (p: typeof alias) => void
+>referencedInNestedFunction : (__0: Named) => (p: string) => void
 >name : any
 >alias : string
 
     return function(p: typeof alias) {
->function(p: typeof alias) {    } : (p: typeof alias) => void
+>function(p: typeof alias) {    } : (p: string) => void
 >p : string
 >alias : string
 
@@= skipped -28, +28 lines =@@
 }
 
 function referencedNestedAlias({ p: { name: alias } }: { p: Named }): typeof alias {
->referencedNestedAlias : ({ p: { name: alias } }: { p: Named; }) => typeof alias
+>referencedNestedAlias : (__0: { p: Named; }) => string
 >p : any
 >name : any
 >alias : string
@@= skipped -12, +12 lines =@@
 }
 
 function referencedArrayAlias([a, b, { name: alias }]: Named[]): typeof alias {
->referencedArrayAlias : ([a, b, { name: alias }]: Named[]) => typeof alias
+>referencedArrayAlias : (__0: Named[]) => string
 >a : Named
 >b : Named
 >name : any
@@= skipped -32, +32 lines =@@
 >alias : string
     }
 	m({ name: alias }: Named) {
->m : ({ name: alias }: Named) => void
+>m : (__0: Named) => void
 >name : any
 >alias : string
 
@@= skipped -40, +40 lines =@@
 >alias : string
     }
 	m({ name: alias }: Named) {
->m : ({ name: alias }: Named) => void
+>m : (__0: Named) => void
 >name : any
 >alias : string
 
@@= skipped -30, +30 lines =@@
 >alias : string
 	}
 	set x({ name: alias }: Named & { o: typeof alias }) {
->x : Named & { o: typeof alias; }
+>x : Named & { o: string; }
 >name : any
 >alias : string
 >o : string
@@= skipped -8, +8 lines =@@
         
     }
 	mReturnType({ name: alias }: Named): typeof alias {
->mReturnType : ({ name: alias }: Named) => typeof alias
+>mReturnType : (__0: Named) => string
 >name : any
 >alias : string
 >alias : string
@@= skipped -9, +9 lines =@@
 >null! : null
     }
 	mRerturnTypeNested({ name: alias }: Named): NonNullable<typeof alias> {
->mRerturnTypeNested : ({ name: alias }: Named) => NonNullable<typeof alias>
+>mRerturnTypeNested : (__0: Named) => string
 >name : any
 >alias : string
 >alias : string
@@= skipped -9, +9 lines =@@
 >null! : null
     }
     mParameter({ name: alias }: Named, p: typeof alias) {
->mParameter : ({ name: alias }: Named, p: typeof alias) => any
+>mParameter : (__0: Named, p: string) => any
 >name : any
 >alias : string
 >p : string
@@= skipped -12, +12 lines =@@
 }
 
 let notReferencedFnType: ({ name: alias }: Named) => void;
->notReferencedFnType : ({ name: alias }: Named) => void
+>notReferencedFnType : (__0: Named) => void
 >name : any
 >alias : string
 
 let referencedInSignartureReturnTypeFnType: ({ name: alias }: Named) => typeof alias;
->referencedInSignartureReturnTypeFnType : ({ name: alias }: Named) => typeof alias
+>referencedInSignartureReturnTypeFnType : (__0: Named) => string
 >name : any
 >alias : string
 >alias : string
 
 let referencedInSignartureParamTypeFnType: ({ name: alias }: Named, p: typeof alias) => void;
->referencedInSignartureParamTypeFnType : ({ name: alias }: Named, p: typeof alias) => void
+>referencedInSignartureParamTypeFnType : (__0: Named, p: string) => void
 >name : any
 >alias : string
 >p : string
 >alias : string
 
 let notReferencedCtorType: new ({ name: alias }: Named) => void;
->notReferencedCtorType : new ({ name: alias }: Named) => void
+>notReferencedCtorType : new (__0: Named) => void
 >name : any
 >alias : string
 
 let referencedInSignartureReturnTypeCtorType: new ({ name: alias }: Named) => typeof alias;
->referencedInSignartureReturnTypeCtorType : new ({ name: alias }: Named) => typeof alias
+>referencedInSignartureReturnTypeCtorType : new (__0: Named) => string
 >name : any
 >alias : string
 >alias : string
 
 let referencedInSignartureParamTypeCtorType: new  ({ name: alias }: Named, p: typeof alias) => void;
->referencedInSignartureParamTypeCtorType : new ({ name: alias }: Named, p: typeof alias) => void
+>referencedInSignartureParamTypeCtorType : new (__0: Named, p: string) => void
 >name : any
 >alias : string
 >p : string
@@= skipped -51, +51 lines =@@
 >alias : string
 
 	m({ name: alias }: Named);
->m : ({ name: alias }: Named) => any
+>m : (__0: Named) => any
 >name : any
 >alias : string
 }
@@= skipped -29, +29 lines =@@
 >alias : string
 
 	set x({ name: alias }: Named & { o: typeof alias })
->x : Named & { o: typeof alias; }
+>x : Named & { o: string; }
 >name : any
 >alias : string
 >o : string
 >alias : string
 
 	mReturnType({ name: alias }: Named): typeof alias;
->mReturnType : ({ name: alias }: Named) => typeof alias
+>mReturnType : (__0: Named) => string
 >name : any
 >alias : string
 >alias : string
 
 	mRerturnTypeNested({ name: alias }: Named): NonNullable<typeof alias>;
->mRerturnTypeNested : ({ name: alias }: Named) => NonNullable<typeof alias>
+>mRerturnTypeNested : (__0: Named) => string
 >name : any
 >alias : string
 >alias : string
 
     mParameter({ name: alias }: Named, p: typeof alias);
->mParameter : ({ name: alias }: Named, p: typeof alias) => any
+>mParameter : (__0: Named, p: string) => any
 >name : any
 >alias : string
 >p : string
