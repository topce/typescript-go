--- old.discriminantsAndPrimitives.types
+++ new.discriminantsAndPrimitives.types
@@= skipped -19, +19 lines =@@
 }
 
 function f1(x: Foo | Bar | string) {
->f1 : (x: Foo | Bar | string) => void
->x : string | Foo | Bar
+>f1 : (x: string | Bar | Foo) => void
+>x : string | Bar | Foo
 
     if (typeof x !== 'string') {
 >typeof x !== 'string' : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->x : string | Foo | Bar
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
+>x : string | Bar | Foo
 >'string' : "string"
 
         switch(x.kind) {
->x.kind : "foo" | "bar"
->x : Foo | Bar
->kind : "foo" | "bar"
+>x.kind : "bar" | "foo"
+>x : Bar | Foo
+>kind : "bar" | "foo"
 
             case 'foo':
 >'foo' : "foo"
@@= skipped -26, +26 lines =@@
 }
 
 function f2(x: Foo | Bar | string | undefined) {
->f2 : (x: Foo | Bar | string | undefined) => void
->x : string | Foo | Bar | undefined
+>f2 : (x: string | Bar | Foo | undefined) => void
+>x : string | Bar | Foo | undefined
 
     if (typeof x === "object") {
 >typeof x === "object" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->x : string | Foo | Bar | undefined
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
+>x : string | Bar | Foo | undefined
 >"object" : "object"
 
         switch(x.kind) {
->x.kind : "foo" | "bar"
->x : Foo | Bar
->kind : "foo" | "bar"
+>x.kind : "bar" | "foo"
+>x : Bar | Foo
+>kind : "bar" | "foo"
 
             case 'foo':
 >'foo' : "foo"
@@= skipped -26, +26 lines =@@
 }
 
 function f3(x: Foo | Bar | string | null) {
->f3 : (x: Foo | Bar | string | null) => void
->x : string | Foo | Bar | null
+>f3 : (x: string | Bar | Foo | null) => void
+>x : string | Bar | Foo | null
 
     if (x && typeof x !== "string") {
->x && typeof x !== "string" : boolean | "" | null
->x : string | Foo | Bar | null
+>x && typeof x !== "string" : "" | boolean | null
+>x : string | Bar | Foo | null
 >typeof x !== "string" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->x : string | Foo | Bar
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
+>x : string | Bar | Foo
 >"string" : "string"
 
         switch(x.kind) {
->x.kind : "foo" | "bar"
->x : Foo | Bar
->kind : "foo" | "bar"
+>x.kind : "bar" | "foo"
+>x : Bar | Foo
+>kind : "bar" | "foo"
 
             case 'foo':
 >'foo' : "foo"
@@= skipped -28, +28 lines =@@
 }
 
 function f4(x: Foo | Bar | string | number | null) {
->f4 : (x: Foo | Bar | string | number | null) => void
->x : string | number | Foo | Bar | null
+>f4 : (x: string | number | Bar | Foo | null) => void
+>x : string | number | Bar | Foo | null
 
     if (x && typeof x === "object") {
->x && typeof x === "object" : boolean | "" | 0 | null
->x : string | number | Foo | Bar | null
+>x && typeof x === "object" : "" | 0 | boolean | null
+>x : string | number | Bar | Foo | null
 >typeof x === "object" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->x : string | number | Foo | Bar
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
+>x : string | number | Bar | Foo
 >"object" : "object"
 
         switch(x.kind) {
->x.kind : "foo" | "bar"
->x : Foo | Bar
->kind : "foo" | "bar"
+>x.kind : "bar" | "foo"
+>x : Bar | Foo
+>kind : "bar" | "foo"
 
             case 'foo':
 >'foo' : "foo"
@@= skipped -79, +79 lines =@@
 
     n.alternatives.slice()
 >n.alternatives.slice() : string[]
->n.alternatives.slice : (start?: number, end?: number) => string[]
+>n.alternatives.slice : (start?: number | undefined, end?: number | undefined) => string[]
 >n.alternatives : string[]
 >n : Disjunction
 >alternatives : string[]
->slice : (start?: number, end?: number) => string[]
+>slice : (start?: number | undefined, end?: number | undefined) => string[]
 }
 else {
     n.elements.slice() // n should be narrowed to Pattern
 >n.elements.slice() : string[]
->n.elements.slice : (start?: number, end?: number) => string[]
+>n.elements.slice : (start?: number | undefined, end?: number | undefined) => string[]
 >n.elements : string[]
 >n : Pattern
 >elements : string[]
->slice : (start?: number, end?: number) => string[]
+>slice : (start?: number | undefined, end?: number | undefined) => string[]
 }
 
