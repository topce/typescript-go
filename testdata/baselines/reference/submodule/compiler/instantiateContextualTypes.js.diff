--- old.instantiateContextualTypes.js
+++ new.instantiateContextualTypes.js
@@= skipped -186, +186 lines =@@
 
 
 //// [instantiateContextualTypes.js]
-// #6611
 function fn(values, value) {
 }
 fn(handlers, value => alert(value));
@@= skipped -12, +11 lines =@@
 const NON_VOID_ACTION = 'NON_VOID_ACTION', VOID_ACTION = 'VOID_ACTION';
 createReducer(defaultState, handler(NON_VOID_ACTION, (state, _payload) => state), handler(VOID_ACTION, state => state));
 x.on('a', a => { });
-// #29775
 var N1;
 (function (N1) {
     class InferFunctionTypes extends Component {
@@= skipped -10, +9 lines =@@
 })(N1 || (N1 = {}));
 passContentsToFunc(outerBoxOfString, box => box.value);
 class Interesting {
-    constructor() {
-        this.compiles = () => {
-            return Promise.resolve().then(() => {
-                if (1 < 2) {
-                    return 'SOMETHING';
-                }
-                return 'ELSE';
-            });
-        };
-        this.doesnt = () => {
-            return Promise.resolve().then(() => {
-                return 'ELSE';
-            });
-        };
-        this.slightlyDifferentErrorMessage = () => {
-            return Promise.resolve().then(() => {
-                if (1 < 2) {
-                    return 'SOMETHING';
-                }
+    compiles = () => {
+        return Promise.resolve().then(() => {
+            if (1 < 2) {
                 return 'SOMETHING';
-            });
-        };
-    }
+            }
+            return 'ELSE';
+        });
+    };
+    doesnt = () => {
+        return Promise.resolve().then(() => {
+            return 'ELSE';
+        });
+    };
+    slightlyDifferentErrorMessage = () => {
+        return Promise.resolve().then(() => {
+            if (1 < 2) {
+                return 'SOMETHING';
+            }
+            return 'SOMETHING';
+        });
+    };
 }
 let xx = invoke(() => 1);
 let obj = {
     foo(bar) { }
 };
-assignPartial(obj, { foo(...args) { } }); // args has type [string]
+assignPartial(obj, { foo(...args) { } });
 export {};
