--- old.intersectionPropertyCheck.types
+++ new.intersectionPropertyCheck.types
@@= skipped -21, +21 lines =@@
 >y : string
 
 let weak: { a?: { x?: number } } & { c?: string } = wrong;  // Nested weak object type
->weak : { a?: { x?: number; }; } & { c?: string; }
->a : { x?: number; } | undefined
+>weak : { a?: { x?: number | undefined; } | undefined; } & { c?: string | undefined; }
+>a : { x?: number | undefined; } | undefined
 >x : number | undefined
 >c : string | undefined
 >wrong : { a: { y: string; }; }
 
 function foo<T extends object>(x: { a?: string }, y: T & { a: boolean }) {
->foo : <T extends object>(x: { a?: string; }, y: T & { a: boolean; }) => void
->x : { a?: string; }
+>foo : <T extends object>(x: { a?: string | undefined; }, y: T & { a: boolean; }) => void
+>x : { a?: string | undefined; }
 >a : string | undefined
 >y : T & { a: boolean; }
 >a : boolean
 
   x = y;  // Mismatched property in source intersection
 >x = y : T & { a: boolean; }
->x : { a?: string; }
+>x : { a?: string | undefined; }
 >y : T & { a: boolean; }
 }
 
