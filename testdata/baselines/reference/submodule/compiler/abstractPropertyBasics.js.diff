--- old.abstractPropertyBasics.js
+++ new.abstractPropertyBasics.js
@@= skipped -23, +23 lines =@@
 }
 
 //// [abstractPropertyBasics.js]
-var __extends = (this && this.__extends) || (function () {
-    var extendStatics = function (d, b) {
-        extendStatics = Object.setPrototypeOf ||
-            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
-            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
-        return extendStatics(d, b);
-    };
-    return function (d, b) {
-        if (typeof b !== "function" && b !== null)
-            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
-        extendStatics(d, b);
-        function __() { this.constructor = d; }
-        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-    };
-})();
-var B = /** @class */ (function () {
-    function B() {
-    }
-    return B;
-}());
-var C = /** @class */ (function (_super) {
-    __extends(C, _super);
-    function C() {
-        var _this = _super !== null && _super.apply(this, arguments) || this;
-        _this.raw = "edge";
-        _this.ro = "readonly please";
-        return _this;
-    }
-    Object.defineProperty(C.prototype, "prop", {
-        get: function () { return "foo"; },
-        set: function (v) { },
-        enumerable: false,
-        configurable: true
-    });
-    C.prototype.m = function () { };
-    return C;
-}(B));
+class B {
+    prop;
+    raw;
+    ro;
+}
+class C extends B {
+    get prop() { return "foo"; }
+    set prop(v) { }
+    raw = "edge";
+    ro = "readonly please";
+    readonlyProp;
+    m() { }
+}
