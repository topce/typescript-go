--- old.underscoreMapFirst.types
+++ new.underscoreMapFirst.types
@@= skipped -89, +89 lines =@@
         var allSeries: ISeries[][] = _.pluck(data, "series");
 >allSeries : ISeries[][]
 >_.pluck(data, "series") : any[]
->_.pluck : <T extends {}>(list: _.Collection<T>, propertyName: string) => any[]
+>_.pluck : <T extends {}>(list: Collection<T>, propertyName: string) => any[]
 >_ : typeof _
->pluck : <T extends {}>(list: _.Collection<T>, propertyName: string) => any[]
+>pluck : <T extends {}>(list: Collection<T>, propertyName: string) => any[]
 >data : IData[]
 >"series" : "series"
 
         return _.map(allSeries, _.first);
 >_.map(allSeries, _.first) : ISeries[]
->_.map : <T, TResult>(list: _.List<T>, iterator: _.ListIterator<T, TResult>, context?: any) => TResult[]
+>_.map : <T, TResult>(list: List<T>, iterator: ListIterator<T, TResult>, context?: any) => TResult[]
 >_ : typeof _
->map : <T, TResult>(list: _.List<T>, iterator: _.ListIterator<T, TResult>, context?: any) => TResult[]
+>map : <T, TResult>(list: List<T>, iterator: ListIterator<T, TResult>, context?: any) => TResult[]
 >allSeries : ISeries[][]
->_.first : <T>(array: _.List<T>) => T
+>_.first : <T>(array: List<T>) => T
 >_ : typeof _
->first : <T>(array: _.List<T>) => T
+>first : <T>(array: List<T>) => T
     }
 }
 
