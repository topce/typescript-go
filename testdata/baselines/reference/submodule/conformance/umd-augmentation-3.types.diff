--- old.umd-augmentation-3.types
+++ new.umd-augmentation-3.types
@@= skipped -2, +2 lines =@@
 === b.ts ===
 /// <reference path="math2d-augment.d.ts" />
 import * as m from 'math2d';
->m : typeof m
+>m : typeof M2D
 
 let v = new m.Vector(3, 2);
->v : m.Vector
->new m.Vector(3, 2) : m.Vector
->m.Vector : typeof m.Vector
->m : typeof m
->Vector : typeof m.Vector
+>v : Vector
+>new m.Vector(3, 2) : Vector
+>m.Vector : typeof Vector
+>m : typeof M2D
+>Vector : typeof Vector
 >3 : 3
 >2 : 2
 
 let magnitude = m.getLength(v);
 >magnitude : number
 >m.getLength(v) : number
->m.getLength : (p: m.Vector) => number
->m : typeof m
->getLength : (p: m.Vector) => number
->v : m.Vector
+>m.getLength : (p: Vector) => number
+>m : typeof M2D
+>getLength : (p: Vector) => number
+>v : Vector
 
 let p: m.Point = v.translate(5, 5);
->p : m.Point
+>p : Point
 >m : any
->v.translate(5, 5) : m.Vector
->v.translate : (dx: number, dy: number) => m.Vector
->v : m.Vector
->translate : (dx: number, dy: number) => m.Vector
+>v.translate(5, 5) : Vector
+>v.translate : (dx: number, dy: number) => Vector
+>v : Vector
+>translate : (dx: number, dy: number) => Vector
 >5 : 5
 >5 : 5
 
 p = v.reverse();
->p = v.reverse() : m.Point
->p : m.Point
->v.reverse() : m.Point
->v.reverse : () => Math2d.Point
->v : m.Vector
->reverse : () => Math2d.Point
+>p = v.reverse() : Point
+>p : Point
+>v.reverse() : Point
+>v.reverse : () => Point
+>v : Vector
+>reverse : () => Point
 
 var t = p.x;
 >t : number
 >p.x : number
->p : m.Point
+>p : Point
 >x : number
 
 === node_modules/math2d/index.d.ts ===
 export as namespace Math2d;
->Math2d : typeof import("node_modules/math2d/index.d.ts")
+>Math2d : typeof M2D
 
 export = M2D;
->M2D : typeof import("node_modules/math2d/index.d.ts")
+>M2D : typeof M2D
 
 declare namespace M2D {
->M2D : typeof import("node_modules/math2d/index.d.ts")
+>M2D : typeof M2D
 
 	interface Point {
 		x: number;
@@= skipped -89, +89 lines =@@
 
 === math2d-augment.d.ts ===
 import * as Math2d from 'math2d';
->Math2d : typeof Math2d
+>Math2d : typeof M2D
 
 // Augment the module
 declare module 'math2d' {
->'math2d' : typeof Math2d
+>'math2d' : typeof M2D
 
 	// Add a method to the class
 	interface Vector {
 		reverse(): Math2d.Point;
->reverse : () => Math2d.Point
+>reverse : () => Point
 >Math2d : any
 	}
 }
