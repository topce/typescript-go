//// [tests/cases/conformance/classes/mixinAbstractClassesReturnTypeInference.ts] ////

=== mixinAbstractClassesReturnTypeInference.ts ===
interface Mixin1 {
    mixinMethod(): void;
>mixinMethod : () => void
}

abstract class AbstractBase {
>AbstractBase : AbstractBase

    abstract abstractBaseMethod(): void;
>abstractBaseMethod : () => void
}

function Mixin2<TBase extends abstract new (...args: any[]) => any>(baseClass: TBase) {
>Mixin2 : <TBase extends new (...args: any[]) => any>(baseClass: TBase) => { new (...args: any[]): MixinClass<TBase>; staticMixinMethod: () => void; prototype: MixinClass<any>; } & TBase
>args : any[]
>baseClass : TBase

    // must be `abstract` because we cannot know *all* of the possible abstract members that need to be
    // implemented for this to be concrete.
    abstract class MixinClass extends baseClass implements Mixin1 {
>MixinClass : MixinClass<TBase>
>baseClass : TBase

        mixinMethod(): void {}
>mixinMethod : () => void

        static staticMixinMethod(): void {}
>staticMixinMethod : () => void
    }
    return MixinClass;
>MixinClass : { new (...args: any[]): MixinClass<TBase>; staticMixinMethod: () => void; prototype: MixinClass<any>; } & TBase
}

class DerivedFromAbstract2 extends Mixin2(AbstractBase) {
>DerivedFromAbstract2 : DerivedFromAbstract2
>Mixin2(AbstractBase) : MixinClass<typeof AbstractBase> & AbstractBase
>Mixin2 : <TBase extends new (...args: any[]) => any>(baseClass: TBase) => { new (...args: any[]): MixinClass<TBase>; staticMixinMethod: () => void; prototype: MixinClass<any>; } & TBase
>AbstractBase : typeof AbstractBase

    abstractBaseMethod() {}
>abstractBaseMethod : () => void
}

