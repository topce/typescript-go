--- old.typeGuardsInFunctionAndModuleBlock.js
+++ new.typeGuardsInFunctionAndModuleBlock.js
@@= skipped -81, +81 lines =@@
 }
 
 //// [typeGuardsInFunctionAndModuleBlock.js]
-// typeguards are scoped in function/module block
 function foo(x) {
     return typeof x === "string"
         ? x
         : function f() {
-            var b = x; // number | boolean
+            var b = x;
             return typeof x === "boolean"
-                ? x.toString() // boolean
-                : x.toString(); // number
+                ? x.toString()
+                : x.toString();
         }();
 }
 function foo2(x) {
     return typeof x === "string"
         ? x
         : function f(a) {
-            var b = x; // new scope - number | boolean
+            var b = x;
             return typeof x === "boolean"
-                ? x.toString() // boolean
-                : x.toString(); // number
-        }(x); // x here is narrowed to number | boolean
+                ? x.toString()
+                : x.toString();
+        }(x);
 }
 function foo3(x) {
     return typeof x === "string"
         ? x
-        : (function () {
-            var b = x; // new scope - number | boolean
+        : (() => {
+            var b = x;
             return typeof x === "boolean"
-                ? x.toString() // boolean
-                : x.toString(); // number
+                ? x.toString()
+                : x.toString();
         })();
 }
 function foo4(x) {
     return typeof x === "string"
         ? x
-        : (function (a) {
-            var b = x; // new scope - number | boolean
+        : ((a) => {
+            var b = x;
             return typeof x === "boolean"
-                ? x.toString() // boolean
-                : x.toString(); // number
-        })(x); // x here is narrowed to number | boolean
+                ? x.toString()
+                : x.toString();
+        })(x);
 }
-// Type guards do not affect nested function declarations
 function foo5(x) {
     if (typeof x === "string") {
-        var y = x; // string;
+        var y = x;
         function foo() {
-            var z = x; // string
+            var z = x;
         }
     }
 }
 var m;
 (function (m) {
     var x;
-    var m2;
+    let m2;
     (function (m2) {
-        var b = x; // new scope - number | boolean | string
+        var b = x;
         var y;
         if (typeof x === "string") {
-            y = x; // string;
+            y = x;
         }
         else {
             y = typeof x === "boolean"
-                ? x.toString() // boolean
-                : x.toString(); // number
+                ? x.toString()
+                : x.toString();
         }
     })(m2 || (m2 = {}));
 })(m || (m = {}));
 var m1;
 (function (m1) {
     var x;
-    var m2;
+    let m2;
     (function (m2) {
-        var m3;
+        let m3;
         (function (m3) {
-            var b = x; // new scope - number | boolean | string
+            var b = x;
             var y;
             if (typeof x === "string") {
-                y = x; // string;
+                y = x;
             }
             else {
                 y = typeof x === "boolean"
-                    ? x.toString() // boolean
-                    : x.toString(); // number
+                    ? x.toString()
+                    : x.toString();
             }
         })(m3 = m2.m3 || (m2.m3 = {}));
     })(m2 || (m2 = {}));
