//// [tests/cases/conformance/jsx/tsxStatelessFunctionComponentOverload6.tsx] ////

=== file.tsx ===
import React = require('react')
>React : any

export interface ClickableProps {
    children?: string;
>children : string

    className?: string;
>className : string
}

export interface ButtonProps extends ClickableProps {
    onClick: React.MouseEventHandler<any>;
>onClick : MouseEventHandler<any>
>React : any
}

export interface LinkProps extends ClickableProps {
    to: string;
>to : string
}

export interface HyphenProps extends ClickableProps {
    "data-format": string;
>"data-format" : string
}

let obj = {
>obj : { children: string; to: string; }
>{    children: "hi",    to: "boo"} : { children: string; to: string; }

    children: "hi",
>children : string
>"hi" : "hi"

    to: "boo"
>to : string
>"boo" : "boo"
}
let obj1: any;
>obj1 : any

let obj2 = {
>obj2 : { onClick: () => void; }
>{    onClick: () => {}} : { onClick: () => void; }

    onClick: () => {}
>onClick : () => void
>() => {} : () => void
}

export function MainButton(buttonProps: ButtonProps): JSX.Element;
>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
>buttonProps : ButtonProps
>JSX : any

export function MainButton(linkProps: LinkProps): JSX.Element;
>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
>linkProps : LinkProps
>JSX : any

export function MainButton(hyphenProps: HyphenProps): JSX.Element;
>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
>hyphenProps : HyphenProps
>JSX : any

export function MainButton(props: ButtonProps | LinkProps | HyphenProps): JSX.Element {
>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
>props : ButtonProps | HyphenProps | LinkProps
>JSX : any

    const linkProps = props as LinkProps;
>linkProps : LinkProps
>props as LinkProps : LinkProps
>props : ButtonProps | HyphenProps | LinkProps

    if(linkProps.to) {
>linkProps.to : string
>linkProps : LinkProps
>to : string

        return this._buildMainLink(props);
>this._buildMainLink(props) : any
>this._buildMainLink : any
>this : any
>_buildMainLink : any
>props : ButtonProps | HyphenProps | LinkProps
    }

    return this._buildMainButton(props);
>this._buildMainButton(props) : any
>this._buildMainButton : any
>this : any
>_buildMainButton : any
>props : ButtonProps | HyphenProps | LinkProps
}

// OK
const b0 = <MainButton to='/some/path'>GO</MainButton>;
>b0 : any
><MainButton to='/some/path'>GO</MainButton> : any
>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
>to : any
>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }

const b1 = <MainButton onClick={(e) => {}}>Hello world</MainButton>;
>b1 : any
><MainButton onClick={(e) => {}}>Hello world</MainButton> : any
>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
>onClick : any
>(e) => {} : (e: any) => void
>e : any
>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }

const b2 = <MainButton {...obj} />;
>b2 : any
><MainButton {...obj} /> : any
>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
>obj : { children: string; to: string; }

const b3 = <MainButton {...{to: 10000}} {...obj} />;
>b3 : any
><MainButton {...{to: 10000}} {...obj} /> : any
>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
>{to: 10000} : { to: number; }
>to : number
>10000 : 10000
>obj : { children: string; to: string; }

const b4 = <MainButton {...obj1} />;  // any; just pick the first overload
>b4 : any
><MainButton {...obj1} /> : any
>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
>obj1 : any

const b5 = <MainButton {...obj1} to="/to/somewhere" />;  // should pick the second overload
>b5 : any
><MainButton {...obj1} to="/to/somewhere" /> : any
>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
>obj1 : any
>to : any

const b6 = <MainButton {...obj2} />;
>b6 : any
><MainButton {...obj2} /> : any
>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
>obj2 : { onClick: () => void; }

const b7 = <MainButton {...{onClick: () => { console.log("hi") }}} />;
>b7 : any
><MainButton {...{onClick: () => { console.log("hi") }}} /> : any
>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
>{onClick: () => { console.log("hi") }} : { onClick: () => void; }
>onClick : () => void
>() => { console.log("hi") } : () => void
>console.log("hi") : any
>console.log : any
>console : any
>log : any
>"hi" : "hi"

const b8 = <MainButton {...{onClick() {}}} />;  // OK; method declaration get retained (See GitHub #13365)
>b8 : any
><MainButton {...{onClick() {}}} /> : any
>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
>{onClick() {}} : { onClick: () => void; }
>onClick : () => void

const b9 = <MainButton to='/some/path' extra-prop>GO</MainButton>;
>b9 : any
><MainButton to='/some/path' extra-prop>GO</MainButton> : any
>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
>to : any
>extra-prop : any
>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }

const b10 = <MainButton to='/some/path' children="hi" ></MainButton>;
>b10 : any
><MainButton to='/some/path' children="hi" ></MainButton> : any
>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
>to : any
>children : any
>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }

const b11 = <MainButton onClick={(e) => {}} className="hello" data-format>Hello world</MainButton>;
>b11 : any
><MainButton onClick={(e) => {}} className="hello" data-format>Hello world</MainButton> : any
>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
>onClick : any
>(e) => {} : (e: any) => void
>e : any
>className : any
>data-format : any
>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }

const b12 = <MainButton data-format="Hello world" />
>b12 : any
><MainButton data-format="Hello world" /> : any
>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
>data-format : any



