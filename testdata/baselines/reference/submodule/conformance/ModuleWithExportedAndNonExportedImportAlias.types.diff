--- old.ModuleWithExportedAndNonExportedImportAlias.types
+++ new.ModuleWithExportedAndNonExportedImportAlias.types
@@= skipped -22, +22 lines =@@
 >Line : Line
 
         constructor(public start: A.Point, public end: A.Point) { }
->start : A.Point
+>start : Point
 >A : any
->end : A.Point
+>end : Point
 >A : any
     }
 }
@@= skipped -15, +15 lines =@@
 >A : any
 
     import Lines = B;
->Lines : typeof Lines
->B : typeof Lines
+>Lines : typeof B
+>B : typeof B
 
     export var Origin: Points.Point = { x: 0, y: 0 };
->Origin : Points.Point
+>Origin : Point
 >Points : any
 >{ x: 0, y: 0 } : { x: number; y: number; }
 >x : number
@@= skipped -14, +14 lines =@@
 
     // this is valid since B.Line _is_ visible outside Geometry
     export var Unit: Lines.Line = new Lines.Line(Origin, { x: 1, y: 0 });
->Unit : Lines.Line
+>Unit : Line
 >Lines : any
->new Lines.Line(Origin, { x: 1, y: 0 }) : Lines.Line
->Lines.Line : typeof Lines.Line
->Lines : typeof Lines
->Line : typeof Lines.Line
->Origin : Points.Point
+>new Lines.Line(Origin, { x: 1, y: 0 }) : Line
+>Lines.Line : typeof Line
+>Lines : typeof B
+>Line : typeof Line
+>Origin : Point
 >{ x: 1, y: 0 } : { x: number; y: number; }
 >x : number
 >1 : 1
@@= skipped -27, +27 lines =@@
 
 var p = Geometry.Origin;
 >p : { x: number; y: number; }
->Geometry.Origin : A.Point
+>Geometry.Origin : Point
 >Geometry : typeof Geometry
->Origin : A.Point
+>Origin : Point
 
 var line: { start: { x: number; y: number }; end: { x: number; y: number; } };
 >line : { start: { x: number; y: number; }; end: { x: number; y: number; }; }
@@= skipped -15, +15 lines =@@
 
 var line = Geometry.Unit;
 >line : { start: { x: number; y: number; }; end: { x: number; y: number; }; }
->Geometry.Unit : B.Line
+>Geometry.Unit : Line
 >Geometry : typeof Geometry
->Unit : B.Line
+>Unit : Line
 
 // not expected to work since non are exported
 var line = Geometry.Lines.Line;
