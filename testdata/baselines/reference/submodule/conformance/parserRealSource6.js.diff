--- old.parserRealSource6.js
+++ new.parserRealSource6.js
@@= skipped -222, +222 lines =@@
     }
 }
 
+//// [typescript.js]
 //// [parserRealSource6.js]
 // Copyright (c) Microsoft. All rights reserved. Licensed under the Apache License, Version 2.0. 
 // See LICENSE.txt in the project root for complete license information.
 ///<reference path='typescript.ts' />
 var TypeScript;
 (function (TypeScript) {
-    var TypeCollectionContext = /** @class */ (function () {
-        function TypeCollectionContext(scopeChain, checker) {
+    class TypeCollectionContext {
+        scopeChain;
+        checker;
+        script = null;
+        constructor(scopeChain, checker) {
             this.scopeChain = scopeChain;
             this.checker = checker;
-            this.script = null;
         }
-        return TypeCollectionContext;
-    }());
+    }
     TypeScript.TypeCollectionContext = TypeCollectionContext;
-    var MemberScopeContext = /** @class */ (function () {
-        function MemberScopeContext(flow, pos, matchFlag) {
+    class MemberScopeContext {
+        flow;
+        pos;
+        matchFlag;
+        type = null;
+        ast = null;
+        scope;
+        options = new AstWalkOptions();
+        constructor(flow, pos, matchFlag) {
             this.flow = flow;
             this.pos = pos;
             this.matchFlag = matchFlag;
-            this.type = null;
-            this.ast = null;
-            this.options = new AstWalkOptions();
         }
-        return MemberScopeContext;
-    }());
+    }
     TypeScript.MemberScopeContext = MemberScopeContext;
-    var EnclosingScopeContext = /** @class */ (function () {
-        function EnclosingScopeContext(logger, script, text, pos, isMemberCompletion) {
+    class EnclosingScopeContext {
+        logger;
+        script;
+        text;
+        pos;
+        isMemberCompletion;
+        scopeGetter = null;
+        objectLiteralScopeGetter = null;
+        scopeStartAST = null;
+        skipNextFuncDeclForClass = false;
+        deepestModuleDecl = null;
+        enclosingClassDecl = null;
+        enclosingObjectLit = null;
+        publicsOnly = true;
+        useFullAst = false;
+        scriptFragment;
+        constructor(logger, script, text, pos, isMemberCompletion) {
             this.logger = logger;
             this.script = script;
             this.text = text;
             this.pos = pos;
             this.isMemberCompletion = isMemberCompletion;
-            this.scopeGetter = null;
-            this.objectLiteralScopeGetter = null;
-            this.scopeStartAST = null;
-            this.skipNextFuncDeclForClass = false;
-            this.deepestModuleDecl = null;
-            this.enclosingClassDecl = null;
-            this.enclosingObjectLit = null;
-            this.publicsOnly = true;
-            this.useFullAst = false;
         }
-        EnclosingScopeContext.prototype.getScope = function () {
+        getScope() {
             return this.scopeGetter();
-        };
-        EnclosingScopeContext.prototype.getObjectLiteralScope = function () {
+        }
+        getObjectLiteralScope() {
             return this.objectLiteralScopeGetter();
-        };
-        EnclosingScopeContext.prototype.getScopeAST = function () {
+        }
+        getScopeAST() {
             return this.scopeStartAST;
-        };
-        EnclosingScopeContext.prototype.getScopePosition = function () {
+        }
+        getScopePosition() {
             return this.scopeStartAST.minChar;
-        };
-        EnclosingScopeContext.prototype.getScriptFragmentStartAST = function () {
+        }
+        getScriptFragmentStartAST() {
             return this.scopeStartAST;
-        };
-        EnclosingScopeContext.prototype.getScriptFragmentPosition = function () {
+        }
+        getScriptFragmentPosition() {
             return this.getScriptFragmentStartAST().minChar;
-        };
-        EnclosingScopeContext.prototype.getScriptFragment = function () {
+        }
+        getScriptFragment() {
             if (this.scriptFragment == null) {
                 var ast = this.getScriptFragmentStartAST();
                 var minChar = ast.minChar;
@@= skipped -70, +81 lines =@@
                 this.scriptFragment = TypeScript.quickParse(this.logger, ast, this.text, minChar, limChar, null /*errorCapture*/).Script;
             }
             return this.scriptFragment;
-        };
-        return EnclosingScopeContext;
-    }());
+        }
+    }
     TypeScript.EnclosingScopeContext = EnclosingScopeContext;
     function preFindMemberScope(ast, parent, walker) {
         var memScope = walker.state;
