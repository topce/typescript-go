--- old.contextualSignatureInstantiation.js
+++ new.contextualSignatureInstantiation.js
@@= skipped -31, +31 lines =@@
 
 
 //// [contextualSignatureInstantiation.js]
-// TypeScript Spec, section 4.12.2:
-// If e is an expression of a function type that contains exactly one generic call signature and no other members,
-// and T is a function type with exactly one non - generic call signature and no other members, then any inferences
-// made for type parameters referenced by the parameters of T's call signature are fixed, and e's type is changed
-// to a function type with e's call signature instantiated in the context of T's call signature (section 3.8.5).
 var a;
-var a = bar(1, 1, g); // Should be number
-var a = baz(1, 1, g); // Should be number
+var a = bar(1, 1, g);
+var a = baz(1, 1, g);
 var b;
-var b = foo(g); // Error, number and string are disjoint types
-var b = bar(1, "one", g); // Error, number and string are disjoint types
-var b = bar("one", 1, g); // Error, number and string are disjoint types
-var b = baz(b, b, g); // Should be number | string
+var b = foo(g);
+var b = bar(1, "one", g);
+var b = bar("one", 1, g);
+var b = baz(b, b, g);
 var d;
-var d = foo(h); // Should be number[] | string[]
-var d = bar(1, "one", h); // Should be number[] | string[]
-var d = bar("one", 1, h); // Should be number[] | string[]
-var d = baz(d, d, g); // Should be number[] | string[]
+var d = foo(h);
+var d = bar(1, "one", h);
+var d = bar("one", 1, h);
+var d = baz(d, d, g);
