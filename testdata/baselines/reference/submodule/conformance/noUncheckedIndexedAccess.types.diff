--- old.noUncheckedIndexedAccess.types
+++ new.noUncheckedIndexedAccess.types
@@= skipped -77, +77 lines =@@
 >e7 : boolean
 >strMap["foo" as "foo" | "baz"] : boolean | undefined
 >strMap : { [s: string]: boolean; }
->"foo" as "foo" | "baz" : "foo" | "baz"
+>"foo" as "foo" | "baz" : "baz" | "foo"
 >"foo" : "foo"
 
 const e8: boolean = strMap[NumericEnum1.A];
@@= skipped -302, +302 lines =@@
 >key : string
 
 const fn1 = <Key extends keyof typeof myRecord1>(key: Key): string => myRecord1[key]; // Should OK
->fn1 : <Key extends keyof typeof myRecord1>(key: Key) => string
-><Key extends keyof typeof myRecord1>(key: Key): string => myRecord1[key] : <Key extends keyof typeof myRecord1>(key: Key) => string
+>fn1 : <Key extends "a" | "b">(key: Key) => string
+><Key extends keyof typeof myRecord1>(key: Key): string => myRecord1[key] : <Key extends "a" | "b">(key: Key) => string
 >myRecord1 : { a: string; b: string; }
 >key : Key
 >myRecord1[key] : { a: string; b: string; }[Key]
@@= skipped -9, +9 lines =@@
 >key : Key
 
 const fn2 = <Key extends keyof typeof myRecord1>(key: Key): string => myRecord2[key]; // Should OK
->fn2 : <Key extends keyof typeof myRecord1>(key: Key) => string
-><Key extends keyof typeof myRecord1>(key: Key): string => myRecord2[key] : <Key extends keyof typeof myRecord1>(key: Key) => string
+>fn2 : <Key extends "a" | "b">(key: Key) => string
+><Key extends keyof typeof myRecord1>(key: Key): string => myRecord2[key] : <Key extends "a" | "b">(key: Key) => string
 >myRecord1 : { a: string; b: string; }
 >key : Key
 >myRecord2[key] : { [key: string]: string; a: string; b: string; }[Key]
@@= skipped -9, +9 lines =@@
 >key : Key
 
 const fn3 = <Key extends keyof typeof myRecord2>(key: Key) => {
->fn3 : <Key extends keyof typeof myRecord2>(key: Key) => void
-><Key extends keyof typeof myRecord2>(key: Key) => {    myRecord2[key] = undefined; // Should error    const v: string = myRecord2[key]; // Should error} : <Key extends keyof typeof myRecord2>(key: Key) => void
+>fn3 : <Key extends string | number>(key: Key) => void
+><Key extends keyof typeof myRecord2>(key: Key) => {    myRecord2[key] = undefined; // Should error    const v: string = myRecord2[key]; // Should error} : <Key extends string | number>(key: Key) => void
 >myRecord2 : { [key: string]: string; a: string; b: string; }
 >key : Key
 
