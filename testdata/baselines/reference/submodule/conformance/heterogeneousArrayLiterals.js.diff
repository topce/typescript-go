--- old.heterogeneousArrayLiterals.js
+++ new.heterogeneousArrayLiterals.js
@@= skipped -133, +133 lines =@@
 //}
 
 //// [heterogeneousArrayLiterals.js]
-// type of an array is the best common type of its elements (plus its contextual type if it exists)
-var __extends = (this && this.__extends) || (function () {
-    var extendStatics = function (d, b) {
-        extendStatics = Object.setPrototypeOf ||
-            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
-            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
-        return extendStatics(d, b);
-    };
-    return function (d, b) {
-        if (typeof b !== "function" && b !== null)
-            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
-        extendStatics(d, b);
-        function __() { this.constructor = d; }
-        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-    };
-})();
-var a = [1, '']; // {}[]
-var b = [1, null]; // number[]
-var c = [1, '', null]; // {}[]
-var d = [{}, 1]; // {}[]
-var e = [{}, Object]; // {}[]
-var f = [[], [1]]; // number[][]
-var g = [[1], ['']]; // {}[]
-var h = [{ foo: 1, bar: '' }, { foo: 2 }]; // {foo: number}[]
-var i = [{ foo: 1, bar: '' }, { foo: '' }]; // {}[]
-var j = [function () { return 1; }, function () { return ''; }]; // {}[]
-var k = [function () { return 1; }, function () { return 1; }]; // { (): number }[]
-var l = [function () { return 1; }, function () { return null; }]; // { (): any }[]
-var m = [function () { return 1; }, function () { return ''; }, function () { return null; }]; // { (): any }[]
-var n = [[function () { return 1; }], [function () { return ''; }]]; // {}[]
-var Base = /** @class */ (function () {
-    function Base() {
-    }
-    return Base;
-}());
-var Derived = /** @class */ (function (_super) {
-    __extends(Derived, _super);
-    function Derived() {
-        return _super !== null && _super.apply(this, arguments) || this;
-    }
-    return Derived;
-}(Base));
-var Derived2 = /** @class */ (function (_super) {
-    __extends(Derived2, _super);
-    function Derived2() {
-        return _super !== null && _super.apply(this, arguments) || this;
-    }
-    return Derived2;
-}(Base));
+var a = [1, ''];
+var b = [1, null];
+var c = [1, '', null];
+var d = [{}, 1];
+var e = [{}, Object];
+var f = [[], [1]];
+var g = [[1], ['']];
+var h = [{ foo: 1, bar: '' }, { foo: 2 }];
+var i = [{ foo: 1, bar: '' }, { foo: '' }];
+var j = [() => 1, () => ''];
+var k = [() => 1, () => 1];
+var l = [() => 1, () => null];
+var m = [() => 1, () => '', () => null];
+var n = [[() => 1], [() => '']];
+class Base {
+    foo;
+}
+class Derived extends Base {
+    bar;
+}
+class Derived2 extends Base {
+    baz;
+}
 var base;
 var derived;
 var derived2;
 (function (Derived) {
-    var h = [{ foo: base, basear: derived }, { foo: base }]; // {foo: Base}[]
-    var i = [{ foo: base, basear: derived }, { foo: derived }]; // {foo: Derived}[]
-    var j = [function () { return base; }, function () { return derived; }]; // { {}: Base }
-    var k = [function () { return base; }, function () { return 1; }]; // {}[]~
-    var l = [function () { return base; }, function () { return null; }]; // { (): any }[]
-    var m = [function () { return base; }, function () { return derived; }, function () { return null; }]; // { (): any }[]
-    var n = [[function () { return base; }], [function () { return derived; }]]; // { (): Base }[]
-    var o = [derived, derived2]; // {}[]
-    var p = [derived, derived2, base]; // Base[]
-    var q = [[function () { return derived2; }], [function () { return derived; }]]; // {}[]
+    var h = [{ foo: base, basear: derived }, { foo: base }];
+    var i = [{ foo: base, basear: derived }, { foo: derived }];
+    var j = [() => base, () => derived];
+    var k = [() => base, () => 1];
+    var l = [() => base, () => null];
+    var m = [() => base, () => derived, () => null];
+    var n = [[() => base], [() => derived]];
+    var o = [derived, derived2];
+    var p = [derived, derived2, base];
+    var q = [[() => derived2], [() => derived]];
 })(Derived || (Derived = {}));
 var WithContextualType;
 (function (WithContextualType) {
-    // no errors
     var a = [derived, derived2];
     var b = [null];
     var c = [];
-    var d = [function () { return derived; }, function () { return derived2; }];
+    var d = [() => derived, () => derived2];
 })(WithContextualType || (WithContextualType = {}));
 function foo(t, u) {
-    var a = [t, t]; // T[]
-    var b = [t, null]; // T[]
-    var c = [t, u]; // {}[]
-    var d = [t, 1]; // {}[]
-    var e = [function () { return t; }, function () { return u; }]; // {}[]
-    var f = [function () { return t; }, function () { return u; }, function () { return null; }]; // { (): any }[]
+    var a = [t, t];
+    var b = [t, null];
+    var c = [t, u];
+    var d = [t, 1];
+    var e = [() => t, () => u];
+    var f = [() => t, () => u, () => null];
 }
 function foo2(t, u) {
-    var a = [t, t]; // T[]
-    var b = [t, null]; // T[]
-    var c = [t, u]; // {}[]
-    var d = [t, 1]; // {}[]
-    var e = [function () { return t; }, function () { return u; }]; // {}[]
-    var f = [function () { return t; }, function () { return u; }, function () { return null; }]; // { (): any }[]
-    var g = [t, base]; // Base[]
-    var h = [t, derived]; // Derived[]
-    var i = [u, base]; // Base[]
-    var j = [u, derived]; // Derived[]
+    var a = [t, t];
+    var b = [t, null];
+    var c = [t, u];
+    var d = [t, 1];
+    var e = [() => t, () => u];
+    var f = [() => t, () => u, () => null];
+    var g = [t, base];
+    var h = [t, derived];
+    var i = [u, base];
+    var j = [u, derived];
 }
 function foo3(t, u) {
-    var a = [t, t]; // T[]
-    var b = [t, null]; // T[]
-    var c = [t, u]; // {}[]
-    var d = [t, 1]; // {}[]
-    var e = [function () { return t; }, function () { return u; }]; // {}[]
-    var f = [function () { return t; }, function () { return u; }, function () { return null; }]; // { (): any }[]
-    var g = [t, base]; // Base[]
-    var h = [t, derived]; // Derived[]
-    var i = [u, base]; // Base[]
-    var j = [u, derived]; // Derived[]
+    var a = [t, t];
+    var b = [t, null];
+    var c = [t, u];
+    var d = [t, 1];
+    var e = [() => t, () => u];
+    var f = [() => t, () => u, () => null];
+    var g = [t, base];
+    var h = [t, derived];
+    var i = [u, base];
+    var j = [u, derived];
 }
 function foo4(t, u) {
-    var a = [t, t]; // T[]
-    var b = [t, null]; // T[]
-    var c = [t, u]; // BUG 821629
-    var d = [t, 1]; // {}[]
-    var e = [function () { return t; }, function () { return u; }]; // {}[]
-    var f = [function () { return t; }, function () { return u; }, function () { return null; }]; // { (): any }[]
-    var g = [t, base]; // Base[]
-    var h = [t, derived]; // Derived[]
-    var i = [u, base]; // Base[]
-    var j = [u, derived]; // Derived[]
+    var a = [t, t];
+    var b = [t, null];
+    var c = [t, u];
+    var d = [t, 1];
+    var e = [() => t, () => u];
+    var f = [() => t, () => u, () => null];
+    var g = [t, base];
+    var h = [t, derived];
+    var i = [u, base];
+    var j = [u, derived];
     var k = [t, u];
 }
-//function foo3<T extends U, U extends Derived>(t: T, u: U) {
-//    var a = [t, t]; // T[]
-//    var b = [t, null]; // T[]
-//    var c = [t, u]; // {}[]
-//    var d = [t, 1]; // {}[]
-//    var e = [() => t, () => u]; // {}[]
-//    var f = [() => t, () => u, () => null]; // { (): any }[]
-//    var g = [t, base]; // Base[]
-//    var h = [t, derived]; // Derived[]
-//    var i = [u, base]; // Base[]
-//    var j = [u, derived]; // Derived[]
-//}
-//function foo4<T extends U, U extends Base>(t: T, u: U) {
-//    var a = [t, t]; // T[]
-//    var b = [t, null]; // T[]
-//    var c = [t, u]; // BUG 821629
-//    var d = [t, 1]; // {}[]
-//    var e = [() => t, () => u]; // {}[]
-//    var f = [() => t, () => u, () => null]; // { (): any }[]
-//    var g = [t, base]; // Base[]
-//    var h = [t, derived]; // Derived[]
-//    var i = [u, base]; // Base[]
-//    var j = [u, derived]; // Derived[]
-//    var k: Base[] = [t, u];
-//}
