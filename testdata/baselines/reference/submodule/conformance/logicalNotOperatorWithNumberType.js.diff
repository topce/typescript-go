--- old.logicalNotOperatorWithNumberType.js
+++ new.logicalNotOperatorWithNumberType.js
@@= skipped -47, +47 lines =@@
 !objA.a, M.n;
 
 //// [logicalNotOperatorWithNumberType.js]
-// ! operator on number type
 var NUMBER;
 var NUMBER1 = [1, 2];
 function foo() { return 1; }
-var A = /** @class */ (function () {
-    function A() {
-    }
-    A.foo = function () { return 1; };
-    return A;
-}());
+class A {
+    a;
+    static foo() { return 1; }
+}
 var M;
 (function (M) {
 })(M || (M = {}));
 var objA = new A();
-// number type var
 var ResultIsBoolean1 = !NUMBER;
 var ResultIsBoolean2 = !NUMBER1;
-// number type literal
 var ResultIsBoolean3 = !1;
 var ResultIsBoolean4 = !{ x: 1, y: 2 };
-var ResultIsBoolean5 = !{ x: 1, y: function (n) { return n; } };
-// number type expressions
+var ResultIsBoolean5 = !{ x: 1, y: (n) => { return n; } };
 var ResultIsBoolean6 = !objA.a;
 var ResultIsBoolean7 = !M.n;
 var ResultIsBoolean8 = !NUMBER1[0];
 var ResultIsBoolean9 = !foo();
 var ResultIsBoolean10 = !A.foo();
 var ResultIsBoolean11 = !(NUMBER + NUMBER);
-// multiple ! operator
 var ResultIsBoolean12 = !!NUMBER;
 var ResultIsBoolean13 = !!!(NUMBER + NUMBER);
-// miss assignment operators
 !1;
 !NUMBER;
 !NUMBER1;
