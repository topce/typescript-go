--- old.enumErrors.js
+++ new.enumErrors.js
@@= skipped -56, +56 lines =@@
 
 
 //// [enumErrors.js]
-// Enum named with PredefinedTypes
 var any;
 (function (any) {
 })(any || (any = {}));
@@= skipped -13, +12 lines =@@
 var boolean;
 (function (boolean) {
 })(boolean || (boolean = {}));
-// Enum with computed member initializer of type Number
 var E5;
 (function (E5) {
-    E5[E5["C"] = new Number(30)] = "C";
+    E5["C"] = new Number(30);
+    if (typeof E5.C !== "string") E5[E5.C] = "C";
 })(E5 || (E5 = {}));
 var E9;
 (function (E9) {
     E9[E9["A"] = 0] = "A";
     E9[E9["B"] = 0] = "B";
 })(E9 || (E9 = {}));
-//Enum with computed member intializer of different enum type
-// Bug 707850: This should be allowed
 var E10;
 (function (E10) {
-    E10[E10["A"] = 0] = "A";
-    E10[E10["B"] = 0] = "B";
+    E10["A"] = E9.A;
+    if (typeof E10.A !== "string") E10[E10.A] = "A";
+    E10["B"] = E9.B;
+    if (typeof E10.B !== "string") E10[E10.B] = "B";
 })(E10 || (E10 = {}));
-// Enum with computed member intializer of other types
 var E11;
 (function (E11) {
-    E11[E11["A"] = true] = "A";
-    E11[E11["B"] = new Date()] = "B";
-    E11[E11["C"] = window] = "C";
-    E11[E11["D"] = {}] = "D";
-    E11[E11["E"] = (function () { return 'foo'; })()] = "E";
+    E11["A"] = true;
+    if (typeof E11.A !== "string") E11[E11.A] = "A";
+    E11["B"] = new Date();
+    if (typeof E11.B !== "string") E11[E11.B] = "B";
+    E11["C"] = window;
+    if (typeof E11.C !== "string") E11[E11.C] = "C";
+    E11["D"] = {};
+    if (typeof E11.D !== "string") E11[E11.D] = "D";
+    E11["E"] = (() => 'foo')();
+    if (typeof E11.E !== "string") E11[E11.E] = "E";
 })(E11 || (E11 = {}));
-// Enum with string valued member and computed member initializers
 var E12;
 (function (E12) {
     E12["A"] = "";
-    E12[E12["B"] = new Date()] = "B";
-    E12[E12["C"] = window] = "C";
-    E12[E12["D"] = {}] = "D";
+    E12["B"] = new Date();
+    if (typeof E12.B !== "string") E12[E12.B] = "B";
+    E12["C"] = window;
+    if (typeof E12.C !== "string") E12[E12.C] = "C";
+    E12["D"] = {};
+    if (typeof E12.D !== "string") E12[E12.D] = "D";
     E12[E12["E"] = 2] = "E";
-    E12[E12["F"] = (function () { return 'foo'; })()] = "F";
+    E12["F"] = (() => 'foo')();
+    if (typeof E12.F !== "string") E12[E12.F] = "F";
 })(E12 || (E12 = {}));
-// Enum with incorrect syntax
 var E13;
 (function (E13) {
     E13[E13["postComma"] = 0] = "postComma";
