--- old.unionAndIntersectionInference1.js
+++ new.unionAndIntersectionInference1.js
@@= skipped -99, +99 lines =@@
 
 
 //// [unionAndIntersectionInference1.js]
-// Repro from #2264
 var y = undefined;
 function destructure(something, haveValue, haveY) {
     return something === y ? haveY(y) : haveValue(something);
 }
 var value = Math.random() > 0.5 ? 'hey!' : undefined;
-var result = destructure(value, text => 'string', y => 'other one'); // text: string, y: Y
-// Repro from #4212
+var result = destructure(value, text => 'string', y => 'other one');
 function isVoid(value) {
     return undefined;
 }
@@= skipped -16, +14 lines =@@
 }
 function foo1(value) {
     if (isVoid(value)) {
-        value; // value is void
+        value;
     }
     else {
-        value; // value is a
+        value;
     }
 }
 function baz1(value) {
     if (isNonVoid(value)) {
-        value; // value is a
+        value;
     }
     else {
-        value; // value is void
+        value;
     }
 }
 function get(x) {
-    return null; // just an example
+    return null;
 }
 let foo;
-get(foo).toUpperCase(); // Ok
-pigify(mbp).oinks; // OK, mbp is treated as Pig
-pigify(mbp).walks; // Ok, mbp is treated as Man
+get(foo).toUpperCase();
+pigify(mbp).oinks;
+pigify(mbp).walks;
 const createTestAsync = () => Promise.resolve().then(() => ({ name: 'test' }));
 const createTest = () => {
     return { name: 'test' };
 };
 let x1 = f1('a');
 let x2 = f2('a', 'b');
-// Repro from #30442
 const func = () => { };
 const assign = (a, b) => Object.assign(a, b);
 const res = assign(() => { }, { func });
