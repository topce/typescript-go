--- old.importCallExpressionAsyncES6UMD.js
+++ new.importCallExpressionAsyncES6UMD.js
@@= skipped -30, +30 lines =@@
 
 
 //// [test.js]
-var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
-    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
-    return new (P || (P = Promise))(function (resolve, reject) {
-        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
-        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
-        step((generator = generator.apply(thisArg, _arguments || [])).next());
-    });
-};
-(function (factory) {
-    if (typeof module === "object" && typeof module.exports === "object") {
-        var v = factory(require, exports);
-        if (v !== undefined) module.exports = v;
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.l = exports.cl2 = exports.obj = exports.cl1 = void 0;
+exports.fn = fn;
+async function fn() {
+    const req = await Promise.resolve().then(() => require('./test'));
+}
+class cl1 {
+    async m() {
+        const req = await Promise.resolve().then(() => require('./test'));
     }
-    else if (typeof define === "function" && define.amd) {
-        define(["require", "exports"], factory);
+}
+exports.cl1 = cl1;
+exports.obj = {
+    m: async () => {
+        const req = await Promise.resolve().then(() => require('./test'));
     }
-})(function (require, exports) {
-    "use strict";
-    var __syncRequire = typeof module === "object" && typeof module.exports === "object";
-    Object.defineProperty(exports, "__esModule", { value: true });
-    exports.l = exports.cl2 = exports.obj = exports.cl1 = void 0;
-    exports.fn = fn;
-    function fn() {
-        return __awaiter(this, void 0, void 0, function* () {
-            const req = yield __syncRequire ? Promise.resolve().then(() => require('./test')) : new Promise((resolve_1, reject_1) => { require(['./test'], resolve_1, reject_1); }); // ONE
-        });
-    }
-    class cl1 {
-        m() {
-            return __awaiter(this, void 0, void 0, function* () {
-                const req = yield __syncRequire ? Promise.resolve().then(() => require('./test')) : new Promise((resolve_2, reject_2) => { require(['./test'], resolve_2, reject_2); }); // TWO
-            });
+};
+class cl2 {
+    p = {
+        m: async () => {
+            const req = await Promise.resolve().then(() => require('./test'));
         }
-    }
-    exports.cl1 = cl1;
-    exports.obj = {
-        m: () => __awaiter(void 0, void 0, void 0, function* () {
-            const req = yield __syncRequire ? Promise.resolve().then(() => require('./test')) : new Promise((resolve_3, reject_3) => { require(['./test'], resolve_3, reject_3); }); // THREE
-        })
     };
-    class cl2 {
-        constructor() {
-            this.p = {
-                m: () => __awaiter(this, void 0, void 0, function* () {
-                    const req = yield __syncRequire ? Promise.resolve().then(() => require('./test')) : new Promise((resolve_4, reject_4) => { require(['./test'], resolve_4, reject_4); }); // FOUR
-                })
-            };
-        }
-    }
-    exports.cl2 = cl2;
-    const l = () => __awaiter(void 0, void 0, void 0, function* () {
-        const req = yield __syncRequire ? Promise.resolve().then(() => require('./test')) : new Promise((resolve_5, reject_5) => { require(['./test'], resolve_5, reject_5); }); // FIVE
-    });
-    exports.l = l;
-});
+}
+exports.cl2 = cl2;
+const l = async () => {
+    const req = await Promise.resolve().then(() => require('./test'));
+};
+exports.l = l;
