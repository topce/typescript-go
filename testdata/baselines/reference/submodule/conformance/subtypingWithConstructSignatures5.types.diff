--- old.subtypingWithConstructSignatures5.types
+++ new.subtypingWithConstructSignatures5.types
@@= skipped -86, +86 lines =@@
 >bar : string
 
     a12: new (x: Array<Base>, y: Array<Derived2>) => Array<Derived>;
->a12 : new (x: Array<Base>, y: Array<Derived2>) => Array<Derived>
+>a12 : new (x: Base[], y: Derived2[]) => Derived[]
 >x : Base[]
 >y : Derived2[]
 
     a13: new (x: Array<Base>, y: Array<Derived>) => Array<Derived>;
->a13 : new (x: Array<Base>, y: Array<Derived>) => Array<Derived>
+>a13 : new (x: Base[], y: Derived[]) => Derived[]
 >x : Base[]
 >y : Derived[]
 
@@= skipped -86, +86 lines =@@
 >y : T
 
     a12: new <T extends Array<Base>>(x: Array<Base>, y: T) => Array<Derived>; // ok, less specific parameter type
->a12 : new <T extends Array<Base>>(x: Array<Base>, y: T) => Array<Derived>
+>a12 : new <T extends Base[]>(x: Base[], y: T) => Derived[]
 >x : Base[]
 >y : T
 
     a13: new <T extends Array<Derived>>(x: Array<Base>, y: T) => T; // ok, T = Array<Derived>, satisfies constraint, contextual signature instantiation succeeds
->a13 : new <T extends Array<Derived>>(x: Array<Base>, y: T) => T
+>a13 : new <T extends Derived[]>(x: Base[], y: T) => T
 >x : Base[]
 >y : T
 
