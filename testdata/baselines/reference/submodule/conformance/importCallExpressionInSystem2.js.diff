--- old.importCallExpressionInSystem2.js
+++ new.importCallExpressionInSystem2.js
@@= skipped -16, +16 lines =@@
 foo(import("./0"));
 
 //// [0.js]
-System.register([], function (exports_1, context_1) {
-    "use strict";
-    var B;
-    var __moduleName = context_1 && context_1.id;
-    return {
-        setters: [],
-        execute: function () {
-            B = class B {
-                print() { return "I am B"; }
-            };
-            exports_1("B", B);
-        }
-    };
-});
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.B = void 0;
+class B {
+    print() { return "I am B"; }
+}
+exports.B = B;
 //// [2.js]
-System.register([], function (exports_1, context_1) {
-    var __moduleName = context_1 && context_1.id;
-    // We use Promise<any> for now as there is no way to specify shape of module object
-    function foo(x) {
-        x.then(value => {
-            let b = new value.B();
-            b.print();
-        });
-    }
-    return {
-        setters: [],
-        execute: function () {
-            foo(context_1.import("./0"));
-        }
-    };
-});
+// We use Promise<any> for now as there is no way to specify shape of module object
+function foo(x) {
+    x.then(value => {
+        let b = new value.B();
+        b.print();
+    });
+}
+foo(Promise.resolve().then(() => require("./0")));
