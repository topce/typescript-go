--- old.typeGuardFunctionErrors.js
+++ new.typeGuardFunctionErrors.js
@@= skipped -169, +169 lines =@@
 
 
 //// [typeGuardFunctionErrors.js]
-var __extends = (this && this.__extends) || (function () {
-    var extendStatics = function (d, b) {
-        extendStatics = Object.setPrototypeOf ||
-            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
-            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
-        return extendStatics(d, b);
-    };
-    return function (d, b) {
-        if (typeof b !== "function" && b !== null)
-            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
-        extendStatics(d, b);
-        function __() { this.constructor = d; }
-        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-    };
-})();
-var A = /** @class */ (function () {
-    function A() {
-    }
-    return A;
-}());
-var B = /** @class */ (function () {
-    function B() {
-    }
-    return B;
-}());
-var C = /** @class */ (function (_super) {
-    __extends(C, _super);
-    function C() {
-        return _super !== null && _super.apply(this, arguments) || this;
-    }
-    return C;
-}(A));
+class A {
+    propA;
+}
+class B {
+    propB;
+}
+class C extends A {
+    propC;
+}
 function hasANonBooleanReturnStatement(x) {
     return '';
 }
+function hasTypeGuardTypeInsideTypeGuardType(x) { }
 is;
 A;
 {
@@= skipped -59, +37 lines =@@
 function hasNonMathcingGenericType(a) {
     return true;
 }
-var a;
-var b;
-// Passed argument is not the same as the one being guarded.
+let a;
+let b;
 if (isB(b)) {
     a.propB;
 }
-// Parameter index and argument index for the type guard target is not matching.
 if (funA(0, a)) {
-    a.propB; // Error
+    a.propB;
 }
-// No type guard in if statement
 if (hasNoTypeGuard(a)) {
     a.propB;
 }
 acceptingDifferentSignatureTypeGuardFunction(isC);
-// Boolean not assignable to type guard
 var assign1;
 assign1 = function (p1, p2) {
     return true;
 };
-// Must have matching parameter index
 var assign2;
 assign2 = function (p1, p2) {
     return true;
 };
-// No matching signature
 var assign3;
 assign3 = function (p1, p2, p3) {
     return true;
 };
-// Type predicates in non-return type positions
 var b1, is, A;
 function b2(a, is, A) { }
 ;
+function b3() { }
 is;
 A;
 {
     return true;
 }
 ;
-// Non-compatiable type predicate positions for signature declarations
-var D = /** @class */ (function () {
-    function D(p1) {
+class D {
+    constructor(p1) {
         return true;
     }
-    Object.defineProperty(D.prototype, "m1", {
-        get: function (p1) {
-            return true;
-        },
-        enumerable: false,
-        configurable: true
-    });
-    Object.defineProperty(D.prototype, "m2", {
-        set: function (p1) {
-            return true;
-        },
-        enumerable: false,
-        configurable: true
-    });
-    return D;
-}());
+    get m1(p1) {
+        return true;
+    }
+    set m2(p1) {
+        return true;
+    }
+}
 is;
 C;
-// Reference to rest parameter
-function b4() {
-    var a = [];
-    for (var _i = 0; _i < arguments.length; _i++) {
-        a[_i] = arguments[_i];
-    }
+function b4(...a) {
     return true;
 }
-// Reference to binding pattern
-function b5(_a, p2, p3) {
-    var a = _a.a, b = _a.b, p1 = _a.p1;
+function b5({ a, b, p1 }, p2, p3) {
     return true;
 }
-function b6(_a, p2, p3) {
-    var a = _a[0], b = _a[1], p1 = _a[2];
+function b6([a, b, p1], p2, p3) {
     return true;
 }
-function b7(_a, p2, p3) {
-    var a = _a.a, b = _a.b, p1 = _a.c.p1;
+function b7({ a, b, c: { p1 } }, p2, p3) {
     return true;
 }
-// Should not crash the compiler
 var x;
 if (hasMissingParameter()) {
     x.propA;
