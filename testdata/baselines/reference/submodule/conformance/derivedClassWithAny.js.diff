--- old.derivedClassWithAny.js
+++ new.derivedClassWithAny.js
@@= skipped -61, +61 lines =@@
 
 
 //// [derivedClassWithAny.js]
-var __extends = (this && this.__extends) || (function () {
-    var extendStatics = function (d, b) {
-        extendStatics = Object.setPrototypeOf ||
-            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
-            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
-        return extendStatics(d, b);
-    };
-    return function (d, b) {
-        if (typeof b !== "function" && b !== null)
-            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
-        extendStatics(d, b);
-        function __() { this.constructor = d; }
-        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-    };
-})();
-var C = /** @class */ (function () {
-    function C() {
+class C {
+    x;
+    get X() { return 1; }
+    foo() {
+        return 1;
     }
-    Object.defineProperty(C.prototype, "X", {
-        get: function () { return 1; },
-        enumerable: false,
-        configurable: true
-    });
-    C.prototype.foo = function () {
+    static y;
+    static get Y() {
         return 1;
-    };
-    Object.defineProperty(C, "Y", {
-        get: function () {
-            return 1;
-        },
-        enumerable: false,
-        configurable: true
-    });
-    C.bar = function () {
+    }
+    static bar() {
         return 1;
-    };
-    return C;
-}());
-var D = /** @class */ (function (_super) {
-    __extends(D, _super);
-    function D() {
-        return _super !== null && _super.apply(this, arguments) || this;
     }
-    Object.defineProperty(D.prototype, "X", {
-        get: function () {
-            return null;
-        },
-        enumerable: false,
-        configurable: true
-    });
-    D.prototype.foo = function () {
+}
+class D extends C {
+    x;
+    get X() {
+        return null;
+    }
+    foo() {
         return 1;
-    };
-    Object.defineProperty(D, "Y", {
-        get: function () {
-            return null;
-        },
-        enumerable: false,
-        configurable: true
-    });
-    D.bar = function () {
+    }
+    static y;
+    static get Y() {
         return null;
-    };
-    return D;
-}(C));
+    }
+    static bar() {
+        return null;
+    }
+}
 // if D is a valid class definition than E is now not safe tranisitively through C
-var E = /** @class */ (function (_super) {
-    __extends(E, _super);
-    function E() {
-        return _super !== null && _super.apply(this, arguments) || this;
+class E extends D {
+    x;
+    get X() { return ''; }
+    foo() {
+        return '';
     }
-    Object.defineProperty(E.prototype, "X", {
-        get: function () { return ''; },
-        enumerable: false,
-        configurable: true
-    });
-    E.prototype.foo = function () {
+    static y;
+    static get Y() {
         return '';
-    };
-    Object.defineProperty(E, "Y", {
-        get: function () {
-            return '';
-        },
-        enumerable: false,
-        configurable: true
-    });
-    E.bar = function () {
+    }
+    static bar() {
         return '';
-    };
-    return E;
-}(D));
+    }
+}
 var c;
 var d;
 var e;
