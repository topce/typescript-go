--- old.castingTuple.js
+++ new.castingTuple.js
@@= skipped -36, +36 lines =@@
 
 
 //// [castingTuple.js]
-var __extends = (this && this.__extends) || (function () {
-    var extendStatics = function (d, b) {
-        extendStatics = Object.setPrototypeOf ||
-            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
-            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
-        return extendStatics(d, b);
-    };
-    return function (d, b) {
-        if (typeof b !== "function" && b !== null)
-            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
-        extendStatics(d, b);
-        function __() { this.constructor = d; }
-        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-    };
-})();
-var A = /** @class */ (function () {
-    function A() {
-        this.a = 10;
-    }
-    return A;
-}());
-var C = /** @class */ (function () {
-    function C() {
-    }
-    return C;
-}());
+class A {
+    a = 10;
+}
+class C {
+    c;
+}
 ;
-var D = /** @class */ (function () {
-    function D() {
-    }
-    return D;
-}());
+class D {
+    d;
+}
 ;
-var E = /** @class */ (function (_super) {
-    __extends(E, _super);
-    function E() {
-        return _super !== null && _super.apply(this, arguments) || this;
-    }
-    return E;
-}(A));
+class E extends A {
+    e;
+}
 ;
-var F = /** @class */ (function (_super) {
-    __extends(F, _super);
-    function F() {
-        return _super !== null && _super.apply(this, arguments) || this;
-    }
-    return F;
-}(A));
+class F extends A {
+    f;
+}
 ;
 var E1;
 (function (E1) {
@@= skipped -57, +27 lines =@@
 (function (E2) {
     E2[E2["one"] = 0] = "one";
 })(E2 || (E2 = {}));
-// no error
 var numStrTuple = [5, "foo"];
 var emptyObjTuple = numStrTuple;
 var numStrBoolTuple = numStrTuple;
@@= skipped -9, +8 lines =@@
 var classCDTuple = [new C(), new D()];
 var interfaceIITuple = classCDTuple;
 var classCDATuple = classCDTuple;
-var eleFromCDA1 = classCDATuple[2]; // A
-var eleFromCDA2 = classCDATuple[5]; // C | D | A
+var eleFromCDA1 = classCDATuple[2];
+var eleFromCDA2 = classCDATuple[5];
 var t10 = [E1.one, E2.one];
 var t11 = t10;
 var array1 = emptyObjTuple;
@@= skipped -9, +9 lines =@@
 var unionTuple2 = [new C(), "foo", new D()];
 var unionTuple3 = [10, "foo"];
 var unionTuple4 = unionTuple3;
-// error
 var t3 = numStrTuple;
 var t9 = classCDTuple;
 var array1 = numStrTuple;
