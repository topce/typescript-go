--- old.assignmentCompatWithNumericIndexer.js
+++ new.assignmentCompatWithNumericIndexer.js
@@= skipped -45, +45 lines =@@
 }
 
 //// [assignmentCompatWithNumericIndexer.js]
-// Derived type indexer must be subtype of base type indexer
-var __extends = (this && this.__extends) || (function () {
-    var extendStatics = function (d, b) {
-        extendStatics = Object.setPrototypeOf ||
-            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
-            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
-        return extendStatics(d, b);
-    };
-    return function (d, b) {
-        if (typeof b !== "function" && b !== null)
-            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
-        extendStatics(d, b);
-        function __() { this.constructor = d; }
-        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-    };
-})();
-var A = /** @class */ (function () {
-    function A() {
-    }
-    return A;
-}());
+class A {
+}
 var a;
 var b;
 a = b;
@@= skipped -30, +11 lines =@@
 b2 = a; // error
 var Generics;
 (function (Generics) {
-    var A = /** @class */ (function () {
-        function A() {
-        }
-        return A;
-    }());
-    var B = /** @class */ (function (_super) {
-        __extends(B, _super);
-        function B() {
-            return _super !== null && _super.apply(this, arguments) || this;
-        }
-        return B;
-    }(A));
+    class A {
+    }
+    class B extends A {
+    }
     function foo() {
         var a;
         var b;
