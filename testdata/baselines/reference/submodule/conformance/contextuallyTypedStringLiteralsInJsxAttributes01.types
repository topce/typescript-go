//// [tests/cases/conformance/types/contextualTypes/jsxAttributes/contextuallyTypedStringLiteralsInJsxAttributes01.tsx] ////

=== contextuallyTypedStringLiteralsInJsxAttributes01.tsx ===
namespace JSX {
    export interface IntrinsicElements {
        span: {};
>span : {}
    }
    export interface Element {
		something?: any;
>something : any
    }
}

const FooComponent = (props: { foo: "A" | "B" | "C" }) => <span>{props.foo}</span>;
>FooComponent : (props: { foo: "A" | "B" | "C"; }) => any
>(props: { foo: "A" | "B" | "C" }) => <span>{props.foo}</span> : (props: { foo: "A" | "B" | "C"; }) => any
>props : { foo: "A" | "B" | "C"; }
>foo : "A" | "B" | "C"
><span>{props.foo}</span> : any
>span : any
>props.foo : "A" | "B" | "C"
>props : { foo: "A" | "B" | "C"; }
>foo : "A" | "B" | "C"
>span : any

<FooComponent foo={"A"} />;
><FooComponent foo={"A"} /> : any
>FooComponent : (props: { foo: "A" | "B" | "C"; }) => any
>foo : any
>"A" : "A"

<FooComponent foo="A"   />;
><FooComponent foo="A"   /> : any
>FooComponent : (props: { foo: "A" | "B" | "C"; }) => any
>foo : any

<FooComponent foo={"f"} />;
><FooComponent foo={"f"} /> : any
>FooComponent : (props: { foo: "A" | "B" | "C"; }) => any
>foo : any
>"f" : "f"

<FooComponent foo="f"   />;
><FooComponent foo="f"   /> : any
>FooComponent : (props: { foo: "A" | "B" | "C"; }) => any
>foo : any

