--- old.genericCallWithGenericSignatureArguments2.js
+++ new.genericCallWithGenericSignatureArguments2.js
@@= skipped -75, +75 lines =@@
 }
 
 //// [genericCallWithGenericSignatureArguments2.js]
-// When a function expression is inferentially typed (section 4.9.3) and a type assigned to a parameter in that expression references type parameters for which inferences are being made, 
-// the corresponding inferred type arguments to become fixed and no further candidate inferences are made for them.
 var onlyT;
 (function (onlyT) {
     function foo(a, b) {
         var r;
         return r;
     }
-    var r1 = foo(function (x) { return 1; }, function (x) { return ''; });
+    var r1 = foo((x) => 1, (x) => '');
     function other2(x) {
-        var r7 = foo(function (a) { return a; }, function (b) { return b; }); // T => T
-        // BUG 835518
-        var r9 = r7(new Date()); // should be ok
-        var r10 = r7(1); // error
+        var r7 = foo((a) => a, (b) => b);
+        var r9 = r7(new Date());
+        var r10 = r7(1);
     }
     function foo2(a, b) {
         var r;
         return r;
     }
     function other3(x) {
-        var r7 = foo2(function (a) { return a; }, function (b) { return b; }); // error
-        var r7b = foo2(function (a) { return a; }, function (b) { return b; }); // valid, T is inferred to be Date
+        var r7 = foo2((a) => a, (b) => b);
+        var r7b = foo2((a) => a, (b) => b);
     }
-    var E;
+    let E;
     (function (E) {
         E[E["A"] = 0] = "A";
     })(E || (E = {}));
-    var F;
+    let F;
     (function (F) {
         F[F["A"] = 0] = "A";
     })(F || (F = {}));
@@= skipped -35, +32 lines =@@
         var r;
         return r;
     }
-    var r7 = foo3(E.A, function (x) { return E.A; }, function (x) { return F.A; }); // error
+    var r7 = foo3(E.A, (x) => E.A, (x) => F.A);
 })(onlyT || (onlyT = {}));
 var TU;
 (function (TU) {
@@= skipped -8, +8 lines =@@
         var r;
         return r;
     }
-    var r1 = foo(function (x) { return 1; }, function (x) { return ''; });
+    var r1 = foo((x) => 1, (x) => '');
     function other2(x) {
-        var r7 = foo(function (a) { return a; }, function (b) { return b; });
+        var r7 = foo((a) => a, (b) => b);
         var r9 = r7(new Date());
         var r10 = r7(1);
     }
@@= skipped -11, +11 lines =@@
         return r;
     }
     function other3(x) {
-        var r7 = foo2(function (a) { return a; }, function (b) { return b; });
-        var r7b = foo2(function (a) { return a; }, function (b) { return b; });
+        var r7 = foo2((a) => a, (b) => b);
+        var r7b = foo2((a) => a, (b) => b);
     }
-    var E;
+    let E;
     (function (E) {
         E[E["A"] = 0] = "A";
     })(E || (E = {}));
-    var F;
+    let F;
     (function (F) {
         F[F["A"] = 0] = "A";
     })(F || (F = {}));
@@= skipped -15, +15 lines =@@
         var r;
         return r;
     }
-    var r7 = foo3(E.A, function (x) { return E.A; }, function (x) { return F.A; });
+    var r7 = foo3(E.A, (x) => E.A, (x) => F.A);
 })(TU || (TU = {}));
