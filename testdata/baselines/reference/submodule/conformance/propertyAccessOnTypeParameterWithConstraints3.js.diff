--- old.propertyAccessOnTypeParameterWithConstraints3.js
+++ new.propertyAccessOnTypeParameterWithConstraints3.js
@@= skipped -59, +59 lines =@@
 
 //// [propertyAccessOnTypeParameterWithConstraints3.js]
 // generic types should behave as if they have properties of their constraint type
-var __extends = (this && this.__extends) || (function () {
-    var extendStatics = function (d, b) {
-        extendStatics = Object.setPrototypeOf ||
-            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
-            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
-        return extendStatics(d, b);
-    };
-    return function (d, b) {
-        if (typeof b !== "function" && b !== null)
-            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
-        extendStatics(d, b);
-        function __() { this.constructor = d; }
-        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-    };
-})();
-var A = /** @class */ (function () {
-    function A() {
-    }
-    A.prototype.foo = function () { return ''; };
-    return A;
-}());
-var B = /** @class */ (function (_super) {
-    __extends(B, _super);
-    function B() {
-        return _super !== null && _super.apply(this, arguments) || this;
-    }
-    B.prototype.bar = function () {
+class A {
+    foo() { return ''; }
+}
+class B extends A {
+    bar() {
         return '';
-    };
-    return B;
-}(A));
-var C = /** @class */ (function () {
-    function C() {
     }
-    C.prototype.f = function () {
+}
+class C {
+    f() {
         var x;
         // BUG 823818
         var a = x['foo'](); // should be string
         return a + x.foo();
-    };
-    C.prototype.g = function (x) {
+    }
+    g(x) {
         // BUG 823818
         var a = x['foo'](); // should be string
         return a + x.foo();
-    };
-    return C;
-}());
+    }
+}
 var r1a = (new C()).f();
 var r1b = (new C()).g(new B());
 var i;
@@= skipped -59, +33 lines =@@
 var r3c = a(new B()).foo(); // valid call to an invalid function, U is inferred as B, which has a foo
 var r3d = a(new B())['foo'](); // valid call to an invalid function, U is inferred as B, which has a foo
 var b = {
-    foo: function (x) {
+    foo: (x) => {
         // BUG 823818
         var a = x['foo'](); // should be string
         return a + x.foo();
