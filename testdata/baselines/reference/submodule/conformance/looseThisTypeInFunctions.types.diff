--- old.looseThisTypeInFunctions.types
+++ new.looseThisTypeInFunctions.types
@@= skipped -69, +69 lines =@@
 >explicitThis : (this: C, m: number) => number
 
 let o = {
->o : { n: number; explicitThis: (m: number) => any; implicitThis(m: number): number; }
->{    n: 101,    explicitThis: function (m: number) {        return m + this.n.length; // error, 'length' does not exist on 'number'    },    implicitThis(m: number): number { return m; }} : { n: number; explicitThis: (m: number) => any; implicitThis(m: number): number; }
+>o : { n: number; explicitThis: (m: number) => any; implicitThis: (m: number) => number; }
+>{    n: 101,    explicitThis: function (m: number) {        return m + this.n.length; // error, 'length' does not exist on 'number'    },    implicitThis(m: number): number { return m; }} : { n: number; explicitThis: (m: number) => any; implicitThis: (m: number) => number; }
 
     n: 101,
 >n : number
@@= skipped -17, +17 lines =@@
 >m : number
 >this.n.length : any
 >this.n : number
->this : { n: number; explicitThis: (m: number) => any; implicitThis(m: number): number; }
+>this : { n: number; explicitThis: (m: number) => any; implicitThis: (m: number) => number; }
 >n : number
 >length : any
 
@@= skipped -13, +13 lines =@@
 };
 let i: I = o;
 >i : I
->o : { n: number; explicitThis: (m: number) => any; implicitThis(m: number): number; }
+>o : { n: number; explicitThis: (m: number) => any; implicitThis: (m: number) => number; }
 
 let o2: I = {
 >o2 : I
@@= skipped -66, +66 lines =@@
 o.implicitThis = c.implicitThis; // ok, implicitThis(this:any)
 >o.implicitThis = c.implicitThis : (m: number) => number
 >o.implicitThis : (m: number) => number
->o : { n: number; explicitThis: (m: number) => any; implicitThis(m: number): number; }
+>o : { n: number; explicitThis: (m: number) => any; implicitThis: (m: number) => number; }
 >implicitThis : (m: number) => number
 >c.implicitThis : (m: number) => number
 >c : C
@@= skipped -9, +9 lines =@@
 o.implicitThis = c.explicitThis; // ok, implicitThis(this:any) is assignable to explicitThis(this: this)
 >o.implicitThis = c.explicitThis : (this: C, m: number) => number
 >o.implicitThis : (m: number) => number
->o : { n: number; explicitThis: (m: number) => any; implicitThis(m: number): number; }
+>o : { n: number; explicitThis: (m: number) => any; implicitThis: (m: number) => number; }
 >implicitThis : (m: number) => number
 >c.explicitThis : (this: C, m: number) => number
 >c : C
@@= skipped -9, +9 lines =@@
 o.implicitThis = i.explicitThis;
 >o.implicitThis = i.explicitThis : (this: I, m: number) => number
 >o.implicitThis : (m: number) => number
->o : { n: number; explicitThis: (m: number) => any; implicitThis(m: number): number; }
+>o : { n: number; explicitThis: (m: number) => any; implicitThis: (m: number) => number; }
 >implicitThis : (m: number) => number
 >i.explicitThis : (this: I, m: number) => number
 >i : I
