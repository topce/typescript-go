--- old.optionalMethods.types
+++ new.optionalMethods.types
@@= skipped -11, +11 lines =@@
 >f : () => number
 
     g?(): number;
->g : (() => number) | undefined
+>g : () => number | undefined
 }
 
 function test1(x: Foo) {
@@= skipped -23, +23 lines =@@
 >f : () => number
 
     x.g;
->x.g : (() => number) | undefined
+>x.g : () => number | undefined
 >x : Foo
->g : (() => number) | undefined
+>g : () => number | undefined
 
     let f1 = x.f();
 >f1 : number
@@= skipped -14, +14 lines =@@
     let g1 = x.g && x.g();
 >g1 : number | undefined
 >x.g && x.g() : number | undefined
->x.g : (() => number) | undefined
+>x.g : () => number | undefined
 >x : Foo
->g : (() => number) | undefined
+>g : () => number | undefined
 >x.g() : number
 >x.g : () => number
 >x : Foo
@@= skipped -11, +11 lines =@@
     let g2 = x.g ? x.g() : 0;
 >g2 : number
 >x.g ? x.g() : 0 : number
->x.g : (() => number) | undefined
+>x.g : () => number | undefined
 >x : Foo
->g : (() => number) | undefined
+>g : () => number | undefined
 >x.g() : number
 >x.g : () => number
 >x : Foo
@@= skipped -35, +35 lines =@@
 >1 : 1
     }
     g?(): number;  // Body of optional method can be omitted
->g : (() => number) | undefined
+>g : () => number | undefined
 
     h?() {
->h : (() => number) | undefined
+>h : () => number | undefined
 
         return 2;
 >2 : 2
@@= skipped -45, +45 lines =@@
 >f : () => number
 
     x.g;
->x.g : (() => number) | undefined
+>x.g : () => number | undefined
 >x : Bar
->g : (() => number) | undefined
+>g : () => number | undefined
 
     let f1 = x.f();
 >f1 : number
@@= skipped -14, +14 lines =@@
     let g1 = x.g && x.g();
 >g1 : number | undefined
 >x.g && x.g() : number | undefined
->x.g : (() => number) | undefined
+>x.g : () => number | undefined
 >x : Bar
->g : (() => number) | undefined
+>g : () => number | undefined
 >x.g() : number
 >x.g : () => number
 >x : Bar
@@= skipped -11, +11 lines =@@
     let g2 = x.g ? x.g() : 0;
 >g2 : number
 >x.g ? x.g() : 0 : number
->x.g : (() => number) | undefined
+>x.g : () => number | undefined
 >x : Bar
->g : (() => number) | undefined
+>g : () => number | undefined
 >x.g() : number
 >x.g : () => number
 >x : Bar
@@= skipped -12, +12 lines =@@
     let h1 = x.h && x.h();
 >h1 : number | undefined
 >x.h && x.h() : number | undefined
->x.h : (() => number) | undefined
+>x.h : () => number | undefined
 >x : Bar
->h : (() => number) | undefined
+>h : () => number | undefined
 >x.h() : number
 >x.h : () => number
 >x : Bar
@@= skipped -11, +11 lines =@@
     let h2 = x.h ? x.h() : 0;
 >h2 : number
 >x.h ? x.h() : 0 : number
->x.h : (() => number) | undefined
+>x.h : () => number | undefined
 >x : Bar
->h : (() => number) | undefined
+>h : () => number | undefined
 >x.h() : number
 >x.h : () => number
 >x : Bar
@@= skipped -17, +17 lines =@@
 >a : number | undefined
 
     f?(): number;
->f : (() => number) | undefined
+>f : () => number | undefined
 }
 
 class Derived extends Base {
