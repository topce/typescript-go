--- old.typeGuardsInClassMethods.js
+++ new.typeGuardsInClassMethods.js
@@= skipped -70, +70 lines =@@
 
 
 //// [typeGuardsInClassMethods.js]
-// Note that type guards affect types of variables and parameters only and 
-// have no effect on members of objects such as properties. 
-// variables in global
 var num;
 var var1;
-var C1 = /** @class */ (function () {
-    function C1(param) {
-        // global vars in function declaration
-        num = typeof var1 === "string" && var1.length; // string
-        // variables in function declaration
+class C1 {
+    constructor(param) {
+        num = typeof var1 === "string" && var1.length;
         var var2;
-        num = typeof var2 === "string" && var2.length; // string
-        // parameters in function declaration
-        num = typeof param === "string" && param.length; // string
+        num = typeof var2 === "string" && var2.length;
+        num = typeof param === "string" && param.length;
     }
-    // Inside function declaration
-    C1.prototype.p1 = function (param) {
-        // global vars in function declaration
-        num = typeof var1 === "string" && var1.length; // string
-        // variables in function declaration
+    p1(param) {
+        num = typeof var1 === "string" && var1.length;
         var var2;
-        num = typeof var2 === "string" && var2.length; // string
-        // parameters in function declaration
-        num = typeof param === "string" && param.length; // string
-    };
-    // Inside function declaration
-    C1.prototype.p2 = function (param) {
-        // global vars in function declaration
-        num = typeof var1 === "string" && var1.length; // string
-        // variables in function declaration
+        num = typeof var2 === "string" && var2.length;
+        num = typeof param === "string" && param.length;
+    }
+    p2(param) {
+        num = typeof var1 === "string" && var1.length;
         var var2;
-        num = typeof var2 === "string" && var2.length; // string
-        // parameters in function declaration
-        num = typeof param === "string" && param.length; // string
-    };
-    // Inside function declaration
-    C1.s1 = function (param) {
-        // global vars in function declaration
-        num = typeof var1 === "string" && var1.length; // string
-        // variables in function declaration
+        num = typeof var2 === "string" && var2.length;
+        num = typeof param === "string" && param.length;
+    }
+    static s1(param) {
+        num = typeof var1 === "string" && var1.length;
         var var2;
-        num = typeof var2 === "string" && var2.length; // string
-        // parameters in function declaration
-        num = typeof param === "string" && param.length; // string
-    };
-    // Inside function declaration
-    C1.s2 = function (param) {
-        // global vars in function declaration
-        num = typeof var1 === "string" && var1.length; // string
-        // variables in function declaration
+        num = typeof var2 === "string" && var2.length;
+        num = typeof param === "string" && param.length;
+    }
+    static s2(param) {
+        num = typeof var1 === "string" && var1.length;
         var var2;
-        num = typeof var2 === "string" && var2.length; // string
-        // parameters in function declaration
-        num = typeof param === "string" && param.length; // string
-    };
-    return C1;
-}());
+        num = typeof var2 === "string" && var2.length;
+        num = typeof param === "string" && param.length;
+    }
+}
