--- old.typeGuardOfFormTypeOfOther.js
+++ new.typeGuardOfFormTypeOfOther.js
@@= skipped -83, +83 lines =@@
 
 
 //// [typeGuardOfFormTypeOfOther.js]
-var C = /** @class */ (function () {
-    function C() {
-    }
-    return C;
-}());
+class C {
+    p;
+}
 ;
 var str;
 var bool;
@@= skipped -18, +16 lines =@@
 var boolOrC;
 var emptyObj;
 var c;
-// A type guard of the form typeof x === s, 
-// where s is a string literal with any value but 'string', 'number' or 'boolean',
-//  - when true, removes the primitive types string, number, and boolean from the type of x, or
-//  - when false, has no effect on the type of x.
 if (typeof strOrC === "Object") {
-    c = strOrC; // C
+    c = strOrC;
 }
 else {
-    var r2 = strOrC; // string
+    var r2 = strOrC;
 }
 if (typeof numOrC === "Object") {
-    c = numOrC; // C
+    c = numOrC;
 }
 else {
-    var r3 = numOrC; // number
+    var r3 = numOrC;
 }
 if (typeof boolOrC === "Object") {
-    c = boolOrC; // C
+    c = boolOrC;
 }
 else {
-    var r4 = boolOrC; // boolean
+    var r4 = boolOrC;
 }
-if (typeof strOrC === "Object") { // comparison is OK with cast
-    c = strOrC; // error: but no narrowing to C
+if (typeof strOrC === "Object") {
+    c = strOrC;
 }
 else {
-    var r5 = strOrC; // error: no narrowing to string
+    var r5 = strOrC;
 }
 if (typeof strOrNumOrBool === "Object") {
-    var q1 = strOrNumOrBool; // {}
+    let q1 = strOrNumOrBool;
 }
 else {
-    var q2 = strOrNumOrBool; // string | number | boolean
+    let q2 = strOrNumOrBool;
 }
-// A type guard of the form typeof x !== s, where s is a string literal,
-//  - when true, narrows the type of x by typeof x === s when false, or
-//  - when false, narrows the type of x by typeof x === s when true.
 if (typeof strOrC !== "Object") {
-    var r2 = strOrC; // string
+    var r2 = strOrC;
 }
 else {
-    c = strOrC; // C
+    c = strOrC;
 }
 if (typeof numOrC !== "Object") {
-    var r3 = numOrC; // number
+    var r3 = numOrC;
 }
 else {
-    c = numOrC; // C
+    c = numOrC;
 }
 if (typeof boolOrC !== "Object") {
-    var r4 = boolOrC; // boolean
+    var r4 = boolOrC;
 }
 else {
-    c = boolOrC; // C
+    c = boolOrC;
 }
 if (typeof strOrNumOrBool !== "Object") {
-    var q1 = strOrNumOrBool; // string | number | boolean
+    let q1 = strOrNumOrBool;
 }
 else {
-    var q2 = strOrNumOrBool; // {}
+    let q2 = strOrNumOrBool;
 }
