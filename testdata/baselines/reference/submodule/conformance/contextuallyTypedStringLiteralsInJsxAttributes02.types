//// [tests/cases/conformance/types/contextualTypes/jsxAttributes/contextuallyTypedStringLiteralsInJsxAttributes02.tsx] ////

=== file.tsx ===
import React = require('react')
>React : any

export interface ClickableProps {
    children?: string;
>children : string

    className?: string;
>className : string
}

export interface ButtonProps extends ClickableProps {
    onClick: (k: "left" | "right") => void;
>onClick : (k: "left" | "right") => void
>k : "left" | "right"
}

export interface LinkProps extends ClickableProps {
    goTo: "home" | "contact";
>goTo : "contact" | "home"
}

export function MainButton(buttonProps: ButtonProps): JSX.Element;
>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; }
>buttonProps : ButtonProps
>JSX : any

export function MainButton(linkProps: LinkProps): JSX.Element;
>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; }
>linkProps : LinkProps
>JSX : any

export function MainButton(props: ButtonProps | LinkProps): JSX.Element {
>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; }
>props : ButtonProps | LinkProps
>JSX : any

    const linkProps = props as LinkProps;
>linkProps : LinkProps
>props as LinkProps : LinkProps
>props : ButtonProps | LinkProps

    if(linkProps.goTo) {
>linkProps.goTo : "contact" | "home"
>linkProps : LinkProps
>goTo : "contact" | "home"

        return this._buildMainLink(props);
>this._buildMainLink(props) : any
>this._buildMainLink : any
>this : any
>_buildMainLink : any
>props : ButtonProps | LinkProps
    }

    return this._buildMainButton(props);
>this._buildMainButton(props) : any
>this._buildMainButton : any
>this : any
>_buildMainButton : any
>props : ButtonProps | LinkProps
}

const b0 = <MainButton {...{onClick: (k) => {console.log(k)}}} extra />;  // k has type "left" | "right"
>b0 : any
><MainButton {...{onClick: (k) => {console.log(k)}}} extra /> : any
>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; }
>{onClick: (k) => {console.log(k)}} : { onClick: (k: any) => void; }
>onClick : (k: any) => void
>(k) => {console.log(k)} : (k: any) => void
>k : any
>console.log(k) : any
>console.log : any
>console : any
>log : any
>k : any
>extra : any

const b2 = <MainButton onClick={(k)=>{console.log(k)}} extra />;  // k has type "left" | "right"
>b2 : any
><MainButton onClick={(k)=>{console.log(k)}} extra /> : any
>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; }
>onClick : any
>(k)=>{console.log(k)} : (k: any) => void
>k : any
>console.log(k) : any
>console.log : any
>console : any
>log : any
>k : any
>extra : any

const b3 = <MainButton {...{goTo:"home"}} extra />;  // goTo has type"home" | "contact"
>b3 : any
><MainButton {...{goTo:"home"}} extra /> : any
>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; }
>{goTo:"home"} : { goTo: string; }
>goTo : string
>"home" : "home"
>extra : any

const b4 = <MainButton goTo="home" extra />;  // goTo has type "home" | "contact"
>b4 : any
><MainButton goTo="home" extra /> : any
>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; }
>goTo : any
>extra : any

export function NoOverload(buttonProps: ButtonProps): JSX.Element { return undefined }
>NoOverload : (buttonProps: ButtonProps) => Element
>buttonProps : ButtonProps
>JSX : any
>undefined : undefined

const c1 = <NoOverload  {...{onClick: (k) => {console.log(k)}}} extra />;  // k has type any
>c1 : any
><NoOverload  {...{onClick: (k) => {console.log(k)}}} extra /> : any
>NoOverload : (buttonProps: ButtonProps) => Element
>{onClick: (k) => {console.log(k)}} : { onClick: (k: any) => void; }
>onClick : (k: any) => void
>(k) => {console.log(k)} : (k: any) => void
>k : any
>console.log(k) : any
>console.log : any
>console : any
>log : any
>k : any
>extra : any

export function NoOverload1(linkProps: LinkProps): JSX.Element { return undefined }
>NoOverload1 : (linkProps: LinkProps) => Element
>linkProps : LinkProps
>JSX : any
>undefined : undefined

const d1 = <NoOverload1 {...{goTo:"home"}} extra  />;  // goTo has type "home" | "contact"
>d1 : any
><NoOverload1 {...{goTo:"home"}} extra  /> : any
>NoOverload1 : (linkProps: LinkProps) => Element
>{goTo:"home"} : { goTo: string; }
>goTo : string
>"home" : "home"
>extra : any

