--- old.thisTypeInFunctions.js
+++ new.thisTypeInFunctions.js
@@= skipped -196, +196 lines =@@
 
 
 //// [thisTypeInFunctions.js]
-var __extends = (this && this.__extends) || (function () {
-    var extendStatics = function (d, b) {
-        extendStatics = Object.setPrototypeOf ||
-            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
-            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
-        return extendStatics(d, b);
-    };
-    return function (d, b) {
-        if (typeof b !== "function" && b !== null)
-            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
-        extendStatics(d, b);
-        function __() { this.constructor = d; }
-        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-    };
-})();
-var _this = this;
 // body checking
-var B = /** @class */ (function () {
-    function B() {
+class B {
+    n;
+}
+class C {
+    n;
+    explicitThis(m) {
+        return this.n + m;
     }
-    return B;
-}());
-var C = /** @class */ (function () {
-    function C() {
+    explicitC(m) {
+        return this.n + m;
     }
-    C.prototype.explicitThis = function (m) {
+    explicitProperty(m) {
         return this.n + m;
-    };
-    C.prototype.explicitC = function (m) {
-        return this.n + m;
-    };
-    C.prototype.explicitProperty = function (m) {
-        return this.n + m;
-    };
-    C.prototype.explicitVoid = function (m) {
+    }
+    explicitVoid(m) {
         return m + 1;
-    };
-    return C;
-}());
-var D = /** @class */ (function (_super) {
-    __extends(D, _super);
-    function D() {
-        return _super !== null && _super.apply(this, arguments) || this;
     }
-    return D;
-}(C));
+}
+class D extends C {
+}
 function explicitStructural(x) {
     return x + this.y;
 }
@@= skipped -55, +30 lines =@@
 function implicitThis(n) {
     return this.m + n + 12;
 }
-var impl = {
+let impl = {
     a: 12,
-    explicitVoid2: function () { return _this.a; }, // ok, this: any because it refers to some outer object (window?)
-    explicitVoid1: function () { return 12; },
-    explicitStructural: function () {
+    explicitVoid2: () => this.a, // ok, this: any because it refers to some outer object (window?)
+    explicitVoid1() { return 12; },
+    explicitStructural() {
         return this.a;
     },
-    explicitInterface: function () {
+    explicitInterface() {
         return this.a;
     },
-    explicitThis: function () {
+    explicitThis() {
         return this.a;
     },
 };
 impl.explicitVoid1 = function () { return 12; };
-impl.explicitVoid2 = function () { return 12; };
+impl.explicitVoid2 = () => 12;
 impl.explicitStructural = function () { return this.a; };
 impl.explicitInterface = function () { return this.a; };
-impl.explicitStructural = function () { return 12; };
-impl.explicitInterface = function () { return 12; };
+impl.explicitStructural = () => 12;
+impl.explicitInterface = () => 12;
 impl.explicitThis = function () { return this.a; };
 // parameter checking
-var ok = { y: 12, f: explicitStructural };
-var implicitAnyOk = { notSpecified: 12, f: implicitThis };
+let ok = { y: 12, f: explicitStructural };
+let implicitAnyOk = { notSpecified: 12, f: implicitThis };
 ok.f(13);
 implicitThis(12);
 implicitAnyOk.f(12);
-var c = new C();
-var d = new D();
-var ripped = c.explicitC;
+let c = new C();
+let d = new D();
+let ripped = c.explicitC;
 c.explicitC(12);
 c.explicitProperty(12);
 c.explicitThis(12);
 d.explicitC(12);
 d.explicitProperty(12);
 d.explicitThis(12);
-var reconstructed = {
+let reconstructed = {
     n: 12,
     explicitThis: c.explicitThis,
     explicitC: c.explicitC,
@@= skipped -45, +45 lines =@@
 };
 reconstructed.explicitThis(10);
 reconstructed.explicitProperty(11);
-var explicitVoid = reconstructed.explicitVoid;
+let explicitVoid = reconstructed.explicitVoid;
 explicitVoid(12);
 // assignment checking
-var unboundToSpecified = function (x) { return x + _this.y; }; // ok, this:any
-var specifiedToSpecified = explicitStructural;
-var anyToSpecified = function (x) { return x + 12; };
-var unspecifiedLambda = function (x) { return x + 12; };
-var specifiedLambda = function (x) { return x + 12; };
-var unspecifiedLambdaToSpecified = unspecifiedLambda;
-var specifiedLambdaToSpecified = specifiedLambda;
-var explicitCFunction;
-var explicitPropertyFunction;
+let unboundToSpecified = x => x + this.y; // ok, this:any
+let specifiedToSpecified = explicitStructural;
+let anyToSpecified = function (x) { return x + 12; };
+let unspecifiedLambda = x => x + 12;
+let specifiedLambda = x => x + 12;
+let unspecifiedLambdaToSpecified = unspecifiedLambda;
+let specifiedLambdaToSpecified = specifiedLambda;
+let explicitCFunction;
+let explicitPropertyFunction;
 c.explicitC = explicitCFunction;
 c.explicitC = function (m) { return this.n + m; };
 c.explicitProperty = explicitPropertyFunction;
 c.explicitProperty = function (m) { return this.n + m; };
 c.explicitProperty = reconstructed.explicitProperty;
 // lambdas are assignable to anything
-c.explicitC = function (m) { return m; };
-c.explicitThis = function (m) { return m; };
-c.explicitProperty = function (m) { return m; };
+c.explicitC = m => m;
+c.explicitThis = m => m;
+c.explicitProperty = m => m;
 // this inside lambdas refer to outer scope
 // the outer-scoped lambda at top-level is still just `any`
-c.explicitC = function (m) { return m + _this.n; };
-c.explicitThis = function (m) { return m + _this.n; };
-c.explicitProperty = function (m) { return m + _this.n; };
+c.explicitC = m => m + this.n;
+c.explicitThis = m => m + this.n;
+c.explicitProperty = m => m + this.n;
 //NOTE: this=C here, I guess?
 c.explicitThis = explicitCFunction;
 c.explicitThis = function (m) { return this.n + m; };
@@= skipped -38, +38 lines =@@
 // this: superclass compatibility
 c.explicitC = function (m) { return this.n + m; };
 // this:void compatibility
-c.explicitVoid = function (n) { return n; };
+c.explicitVoid = n => n;
 // class-based assignability
-var Base1 = /** @class */ (function () {
-    function Base1() {
-    }
-    Base1.prototype.polymorphic = function () { return this.x; };
-    Base1.prototype.explicit = function () { return this.x; };
-    Base1.explicitStatic = function () { return this.y; };
-    return Base1;
-}());
-var Derived1 = /** @class */ (function (_super) {
-    __extends(Derived1, _super);
-    function Derived1() {
-        return _super !== null && _super.apply(this, arguments) || this;
-    }
-    return Derived1;
-}(Base1));
-var Base2 = /** @class */ (function () {
-    function Base2() {
-    }
-    Base2.prototype.polymorphic = function () { return this.y; };
-    Base2.prototype.explicit = function () { return this.x; };
-    return Base2;
-}());
-var Derived2 = /** @class */ (function (_super) {
-    __extends(Derived2, _super);
-    function Derived2() {
-        return _super !== null && _super.apply(this, arguments) || this;
-    }
-    return Derived2;
-}(Base2));
-var b1 = new Base1();
-var b2 = new Base2();
-var d1 = new Derived1();
-var d2 = new Derived2();
+class Base1 {
+    x;
+    polymorphic() { return this.x; }
+    explicit() { return this.x; }
+    static explicitStatic() { return this.y; }
+    static y;
+}
+class Derived1 extends Base1 {
+    y;
+}
+class Base2 {
+    y;
+    polymorphic() { return this.y; }
+    explicit() { return this.x; }
+}
+class Derived2 extends Base2 {
+    x;
+}
+let b1 = new Base1();
+let b2 = new Base2();
+let d1 = new Derived1();
+let d2 = new Derived2();
 d2.polymorphic = d1.polymorphic; // ok, 'x' and 'y' in { x, y }
 d1.polymorphic = d2.polymorphic; // ok, 'x' and 'y' in { x, y }
 // bivariance-allowed cases
@@= skipped -52, +41 lines =@@
 function AnyThis() {
     this.x = "ok";
 }
-var interfaceThis = new InterfaceThis();
-var literalTypeThis = new LiteralTypeThis();
-var anyThis = new AnyThis();
-var n = f.call(12);
+let interfaceThis = new InterfaceThis();
+let literalTypeThis = new LiteralTypeThis();
+let anyThis = new AnyThis();
+let n = f.call(12);
 function missingTypeIsImplicitAny(a) { return this.anything + a; }
