--- old.mappedTypeModifiers.types
+++ new.mappedTypeModifiers.types
@@= skipped -230, +230 lines =@@
 
     (x["other"] || 0).toFixed();
 >(x["other"] || 0).toFixed() : string
->(x["other"] || 0).toFixed : (fractionDigits?: number) => string
+>(x["other"] || 0).toFixed : (fractionDigits?: number | undefined) => string
 >(x["other"] || 0) : number
 >x["other"] || 0 : number
 >x["other"] : number | undefined
 >x : Partial<Foo>
 >"other" : "other"
 >0 : 0
->toFixed : (fractionDigits?: number) => string
+>toFixed : (fractionDigits?: number | undefined) => string
 }
 
 function f2(x: Readonly<Foo>) {
@@= skipped -21, +21 lines =@@
 
     x["other"].toFixed();
 >x["other"].toFixed() : string
->x["other"].toFixed : (fractionDigits?: number) => string
+>x["other"].toFixed : (fractionDigits?: number | undefined) => string
 >x["other"] : number
 >x : Readonly<Foo>
 >"other" : "other"
->toFixed : (fractionDigits?: number) => string
+>toFixed : (fractionDigits?: number | undefined) => string
 }
 
 function f3(x: Boxified<Foo>) {
@@= skipped -18, +18 lines =@@
 
     x["other"].x.toFixed();
 >x["other"].x.toFixed() : string
->x["other"].x.toFixed : (fractionDigits?: number) => string
+>x["other"].x.toFixed : (fractionDigits?: number | undefined) => string
 >x["other"].x : number
 >x["other"] : { x: number; }
 >x : Boxified<Foo>
 >"other" : "other"
 >x : number
->toFixed : (fractionDigits?: number) => string
+>toFixed : (fractionDigits?: number | undefined) => string
 }
 
 function f4(x: { [P in keyof Foo]: Foo[P] }) {
->f4 : (x: { [P in keyof Foo]: Foo[P]; }) => void
+>f4 : (x: { [x: string]: number; prop: number; }) => void
 >x : { [x: string]: number; prop: number; }
 
     x.prop; // ok
@@= skipped -20, +20 lines =@@
 
     x["other"].toFixed();
 >x["other"].toFixed() : string
->x["other"].toFixed : (fractionDigits?: number) => string
+>x["other"].toFixed : (fractionDigits?: number | undefined) => string
 >x["other"] : number
 >x : { [x: string]: number; prop: number; }
 >"other" : "other"
->toFixed : (fractionDigits?: number) => string
+>toFixed : (fractionDigits?: number | undefined) => string
 }
 
