--- old.arbitraryModuleNamespaceIdentifiers_module(module=system).js
+++ new.arbitraryModuleNamespaceIdentifiers_module(module=system).js
@@= skipped -32, +32 lines =@@
 
 
 //// [arbitraryModuleNamespaceIdentifiers_module.js]
-System.register(["./arbitraryModuleNamespaceIdentifiers_module"], function (exports_1, context_1) {
-    "use strict";
-    var someValue, arbitraryModuleNamespaceIdentifiers_module_1, arbitraryModuleNamespaceIdentifiers_module_2, arbitraryModuleNamespaceIdentifiers_module_3, importTest, reimportTest, importStarTestA;
-    var __moduleName = context_1 && context_1.id;
-    return {
-        setters: [
-            function (arbitraryModuleNamespaceIdentifiers_module_1_1) {
-                arbitraryModuleNamespaceIdentifiers_module_1 = arbitraryModuleNamespaceIdentifiers_module_1_1;
-                exports_1({
-                    "<Y>": arbitraryModuleNamespaceIdentifiers_module_1_1["<X>"]
-                });
-                arbitraryModuleNamespaceIdentifiers_module_2 = arbitraryModuleNamespaceIdentifiers_module_1_1;
-                exports_1("<Z>", arbitraryModuleNamespaceIdentifiers_module_1_1);
-                arbitraryModuleNamespaceIdentifiers_module_3 = arbitraryModuleNamespaceIdentifiers_module_1_1;
-            }
-        ],
-        execute: function () {
-            someValue = "someValue";
-            exports_1("<X>", someValue);
-            if (arbitraryModuleNamespaceIdentifiers_module_1["<X>"] !== "someValue")
-                throw "should be someValue";
-            if (arbitraryModuleNamespaceIdentifiers_module_2["<Y>"] !== "someValue")
-                throw "should be someValue";
-            if (arbitraryModuleNamespaceIdentifiers_module_3["<Z>"]["<X>"] !== "someValue")
-                throw "should be someValue";
-            if (arbitraryModuleNamespaceIdentifiers_module_3["<Z>"]["<Y>"] !== "someValue")
-                throw "should be someValue";
-            if (arbitraryModuleNamespaceIdentifiers_module_3["<Z>"]["<Z>"] !== arbitraryModuleNamespaceIdentifiers_module_3["<Z>"])
-                throw "should be export namespace";
-            importTest = "expect error about someType";
-            reimportTest = "expect error about someType";
-            importStarTestA = "expect error about otherType";
-        }
-    };
-});
-
-
-//// [arbitraryModuleNamespaceIdentifiers_module.d.ts]
-declare const someValue = "someValue";
-type someType = "someType";
-export { someValue as "<X>" };
-export { "<X>" as "<Y>" } from "./arbitraryModuleNamespaceIdentifiers_module";
-export * as "<Z>" from "./arbitraryModuleNamespaceIdentifiers_module";
-export { type someType as "<A>" };
-export { type "<A>" as "<B>" } from "./arbitraryModuleNamespaceIdentifiers_module";
-export type * as "<C>" from "./arbitraryModuleNamespaceIdentifiers_module";
-export type otherType = "otherType";
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports["<Z>"] = exports["<Y>"] = exports["<X>"] = void 0;
+const someValue = "someValue";
+exports["<X>"] = someValue;
+const arbitraryModuleNamespaceIdentifiers_module_1 = require("./arbitraryModuleNamespaceIdentifiers_module");
+if (arbitraryModuleNamespaceIdentifiers_module_1["<X>"] !== "someValue")
+    throw "should be someValue";
+const arbitraryModuleNamespaceIdentifiers_module_2 = require("./arbitraryModuleNamespaceIdentifiers_module");
+Object.defineProperty(exports, "<Y>", { enumerable: true, get: function () { return arbitraryModuleNamespaceIdentifiers_module_2["<X>"]; } });
+const arbitraryModuleNamespaceIdentifiers_module_3 = require("./arbitraryModuleNamespaceIdentifiers_module");
+if (arbitraryModuleNamespaceIdentifiers_module_3["<Y>"] !== "someValue")
+    throw "should be someValue";
+exports["<Z>"] = require("./arbitraryModuleNamespaceIdentifiers_module");
+const arbitraryModuleNamespaceIdentifiers_module_4 = require("./arbitraryModuleNamespaceIdentifiers_module");
+if (arbitraryModuleNamespaceIdentifiers_module_4["<Z>"]["<X>"] !== "someValue")
+    throw "should be someValue";
+if (arbitraryModuleNamespaceIdentifiers_module_4["<Z>"]["<Y>"] !== "someValue")
+    throw "should be someValue";
+if (arbitraryModuleNamespaceIdentifiers_module_4["<Z>"]["<Z>"] !== arbitraryModuleNamespaceIdentifiers_module_4["<Z>"])
+    throw "should be export namespace";
+const importTest = "expect error about someType";
+const reimportTest = "expect error about someType";
+const importStarTestA = "expect error about otherType";
