--- old.stringLiteralTypeIsSubtypeOfString.js
+++ new.stringLiteralTypeIsSubtypeOfString.js
@@= skipped -103, +103 lines =@@
 
 
 //// [stringLiteralTypeIsSubtypeOfString.js]
-// string literal types are subtypes of string, any
 function f1(x) { }
 function f2(x) { }
 function f3(x) { }
@@= skipped -10, +9 lines =@@
 function f7(x) { }
 function f8(x) { }
 function f9(x) { }
-var C = /** @class */ (function () {
-    function C() {
-    }
-    C.prototype.toString = function () { return null; };
-    C.prototype.charAt = function (pos) { return null; };
-    C.prototype.charCodeAt = function (index) { return null; };
-    C.prototype.concat = function () {
-        var strings = [];
-        for (var _i = 0; _i < arguments.length; _i++) {
-            strings[_i] = arguments[_i];
-        }
-        return null;
-    };
-    C.prototype.indexOf = function (searchString, position) { return null; };
-    C.prototype.lastIndexOf = function (searchString, position) { return null; };
-    C.prototype.localeCompare = function (that) { return null; };
-    C.prototype.match = function (regexp) { return null; };
-    C.prototype.replace = function (searchValue, replaceValue) { return null; };
-    C.prototype.search = function (regexp) { return null; };
-    C.prototype.slice = function (start, end) { return null; };
-    C.prototype.split = function (separator, limit) { return null; };
-    C.prototype.substring = function (start, end) { return null; };
-    C.prototype.toLowerCase = function () { return null; };
-    C.prototype.toLocaleLowerCase = function () { return null; };
-    C.prototype.toUpperCase = function () { return null; };
-    C.prototype.toLocaleUpperCase = function () { return null; };
-    C.prototype.trim = function () { return null; };
-    C.prototype.substr = function (from, length) { return null; };
-    C.prototype.valueOf = function () { return null; };
-    return C;
-}());
+class C {
+    toString() { return null; }
+    charAt(pos) { return null; }
+    charCodeAt(index) { return null; }
+    concat(...strings) { return null; }
+    indexOf(searchString, position) { return null; }
+    lastIndexOf(searchString, position) { return null; }
+    localeCompare(that) { return null; }
+    match(regexp) { return null; }
+    replace(searchValue, replaceValue) { return null; }
+    search(regexp) { return null; }
+    slice(start, end) { return null; }
+    split(separator, limit) { return null; }
+    substring(start, end) { return null; }
+    toLowerCase() { return null; }
+    toLocaleLowerCase() { return null; }
+    toUpperCase() { return null; }
+    toLocaleUpperCase() { return null; }
+    trim() { return null; }
+    length;
+    substr(from, length) { return null; }
+    valueOf() { return null; }
+}
 function f10(x) { }
 function f11(x) { }
 function f12(x) { }
