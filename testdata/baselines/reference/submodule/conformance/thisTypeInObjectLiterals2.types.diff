--- old.thisTypeInObjectLiterals2.types
+++ new.thisTypeInObjectLiterals2.types
@@= skipped -4, +4 lines =@@
 // of the object literal.
 
 let obj1 = {
->obj1 : { a: number; f(): number; b: string; c: { g(): void; }; readonly d: number; e: string; }
->{    a: 1,    f() {        return this.a;    },    b: "hello",    c: {        g() {            this.g();        }    },    get d() {        return this.a;    },    get e() {        return this.b;    },    set e(value) {        this.b = value;    }} : { a: number; f(): number; b: string; c: { g(): void; }; readonly d: number; e: string; }
+>obj1 : { a: number; f: () => number; b: string; c: { g: () => void; }; readonly d: number; e: string; }
+>{    a: 1,    f() {        return this.a;    },    b: "hello",    c: {        g() {            this.g();        }    },    get d() {        return this.a;    },    get e() {        return this.b;    },    set e(value) {        this.b = value;    }} : { a: number; f: () => number; b: string; c: { g: () => void; }; readonly d: number; e: string; }
 
     a: 1,
 >a : number
@@= skipped -12, +12 lines =@@
 
         return this.a;
 >this.a : number
->this : { a: number; f(): number; b: string; c: { g(): void; }; readonly d: number; e: string; }
+>this : { a: number; f: () => number; b: string; c: { g: () => void; }; readonly d: number; e: string; }
 >a : number
 
     },
@@= skipped -9, +9 lines =@@
 >"hello" : "hello"
 
     c: {
->c : { g(): void; }
->{        g() {            this.g();        }    } : { g(): void; }
+>c : { g: () => void; }
+>{        g() {            this.g();        }    } : { g: () => void; }
 
         g() {
 >g : () => void
@@= skipped -9, +9 lines =@@
             this.g();
 >this.g() : void
 >this.g : () => void
->this : { g(): void; }
+>this : { g: () => void; }
 >g : () => void
         }
     },
@@= skipped -9, +9 lines =@@
 
         return this.a;
 >this.a : number
->this : { a: number; f(): number; b: string; c: { g(): void; }; readonly d: number; e: string; }
+>this : { a: number; f: () => number; b: string; c: { g: () => void; }; readonly d: number; e: string; }
 >a : number
 
     },
@@= skipped -9, +9 lines =@@
 
         return this.b;
 >this.b : string
->this : { a: number; f(): number; b: string; c: { g(): void; }; readonly d: number; e: string; }
+>this : { a: number; f: () => number; b: string; c: { g: () => void; }; readonly d: number; e: string; }
 >b : string
 
     },
@@= skipped -11, +11 lines =@@
         this.b = value;
 >this.b = value : string
 >this.b : string
->this : { a: number; f(): number; b: string; c: { g(): void; }; readonly d: number; e: string; }
+>this : { a: number; f: () => number; b: string; c: { g: () => void; }; readonly d: number; e: string; }
 >b : string
 >value : string
     }
@@= skipped -22, +22 lines =@@
 >z : number | undefined
 
     moveBy(dx: number, dy: number, dz?: number): void;
->moveBy : (dx: number, dy: number, dz?: number) => void
+>moveBy : (dx: number, dy: number, dz?: number | undefined) => void
 >dx : number
 >dy : number
 >dz : number | undefined
@@= skipped -8, +8 lines =@@
 
 let p1: Point = {
 >p1 : Point
->{    x: 10,    y: 20,    moveBy(dx, dy, dz) {        this.x += dx;        this.y += dy;        if (this.z && dz) {            this.z += dz;        }    }} : { x: number; y: number; moveBy(dx: number, dy: number, dz: number | undefined): void; }
+>{    x: 10,    y: 20,    moveBy(dx, dy, dz) {        this.x += dx;        this.y += dy;        if (this.z && dz) {            this.z += dz;        }    }} : { x: number; y: number; moveBy: (dx: number, dy: number, dz: number | undefined) => void; }
 
     x: 10,
 >x : number
@@= skipped -49, +49 lines =@@
 
 let p2: Point | null = {
 >p2 : Point | null
->{    x: 10,    y: 20,    moveBy(dx, dy, dz) {        this.x += dx;        this.y += dy;        if (this.z && dz) {            this.z += dz;        }    }} : { x: number; y: number; moveBy(dx: number, dy: number, dz: number | undefined): void; }
+>{    x: 10,    y: 20,    moveBy(dx, dy, dz) {        this.x += dx;        this.y += dy;        if (this.z && dz) {            this.z += dz;        }    }} : { x: number; y: number; moveBy: (dx: number, dy: number, dz: number | undefined) => void; }
 
     x: 10,
 >x : number
@@= skipped -49, +49 lines =@@
 
 let p3: Point | undefined = {
 >p3 : Point | undefined
->{    x: 10,    y: 20,    moveBy(dx, dy, dz) {        this.x += dx;        this.y += dy;        if (this.z && dz) {            this.z += dz;        }    }} : { x: number; y: number; moveBy(dx: number, dy: number, dz: number | undefined): void; }
+>{    x: 10,    y: 20,    moveBy(dx, dy, dz) {        this.x += dx;        this.y += dy;        if (this.z && dz) {            this.z += dz;        }    }} : { x: number; y: number; moveBy: (dx: number, dy: number, dz: number | undefined) => void; }
 
     x: 10,
 >x : number
@@= skipped -49, +49 lines =@@
 
 let p4: Point | null | undefined = {
 >p4 : Point | null | undefined
->{    x: 10,    y: 20,    moveBy(dx, dy, dz) {        this.x += dx;        this.y += dy;        if (this.z && dz) {            this.z += dz;        }    }} : { x: number; y: number; moveBy(dx: number, dy: number, dz: number | undefined): void; }
+>{    x: 10,    y: 20,    moveBy(dx, dy, dz) {        this.x += dx;        this.y += dy;        if (this.z && dz) {            this.z += dz;        }    }} : { x: number; y: number; moveBy: (dx: number, dy: number, dz: number | undefined) => void; }
 
     x: 10,
 >x : number
@@= skipped -54, +54 lines =@@
 f1({
 >f1({    x: 10,    y: 20,    moveBy(dx, dy, dz) {        this.x += dx;        this.y += dy;        if (this.z && dz) {            this.z += dz;        }    }}) : void
 >f1 : (p: Point) => void
->{    x: 10,    y: 20,    moveBy(dx, dy, dz) {        this.x += dx;        this.y += dy;        if (this.z && dz) {            this.z += dz;        }    }} : { x: number; y: number; moveBy(dx: number, dy: number, dz: number | undefined): void; }
+>{    x: 10,    y: 20,    moveBy(dx, dy, dz) {        this.x += dx;        this.y += dy;        if (this.z && dz) {            this.z += dz;        }    }} : { x: number; y: number; moveBy: (dx: number, dy: number, dz: number | undefined) => void; }
 
     x: 10,
 >x : number
@@= skipped -54, +54 lines =@@
 f2({
 >f2({    x: 10,    y: 20,    moveBy(dx, dy, dz) {        this.x += dx;        this.y += dy;        if (this.z && dz) {            this.z += dz;        }    }}) : void
 >f2 : (p: Point | null | undefined) => void
->{    x: 10,    y: 20,    moveBy(dx, dy, dz) {        this.x += dx;        this.y += dy;        if (this.z && dz) {            this.z += dz;        }    }} : { x: number; y: number; moveBy(dx: number, dy: number, dz: number | undefined): void; }
+>{    x: 10,    y: 20,    moveBy(dx, dy, dz) {        this.x += dx;        this.y += dy;        if (this.z && dz) {            this.z += dz;        }    }} : { x: number; y: number; moveBy: (dx: number, dy: number, dz: number | undefined) => void; }
 
     x: 10,
 >x : number
@@= skipped -57, +57 lines =@@
 >data : D | undefined
 
     methods?: M & ThisType<D & M>;  // Type of 'this' in methods is D & M
->methods : (M & ThisType<D & M>) | undefined
+>methods : M & ThisType<D & M> | undefined
 }
 
 declare function makeObject<D, M>(desc: ObjectDescriptor<D, M>): D & M;
@@= skipped -8, +8 lines =@@
 >desc : ObjectDescriptor<D, M>
 
 let x1 = makeObject({
->x1 : { x: number; y: number; } & { moveBy(dx: number, dy: number): void; }
->makeObject({    data: { x: 0, y: 0 },    methods: {        moveBy(dx: number, dy: number) {            this.x += dx;  // Strongly typed this            this.y += dy;  // Strongly typed this        }    }}) : { x: number; y: number; } & { moveBy(dx: number, dy: number): void; }
+>x1 : { x: number; y: number; } & { moveBy: (dx: number, dy: number) => void; }
+>makeObject({    data: { x: 0, y: 0 },    methods: {        moveBy(dx: number, dy: number) {            this.x += dx;  // Strongly typed this            this.y += dy;  // Strongly typed this        }    }}) : { x: number; y: number; } & { moveBy: (dx: number, dy: number) => void; }
 >makeObject : <D, M>(desc: ObjectDescriptor<D, M>) => D & M
->{    data: { x: 0, y: 0 },    methods: {        moveBy(dx: number, dy: number) {            this.x += dx;  // Strongly typed this            this.y += dy;  // Strongly typed this        }    }} : { data: { x: number; y: number; }; methods: { moveBy(dx: number, dy: number): void; }; }
+>{    data: { x: 0, y: 0 },    methods: {        moveBy(dx: number, dy: number) {            this.x += dx;  // Strongly typed this            this.y += dy;  // Strongly typed this        }    }} : { data: { x: number; y: number; }; methods: { moveBy: (dx: number, dy: number) => void; }; }
 
     data: { x: 0, y: 0 },
 >data : { x: number; y: number; }
@@= skipped -14, +14 lines =@@
 >0 : 0
 
     methods: {
->methods : { moveBy(dx: number, dy: number): void; }
->{        moveBy(dx: number, dy: number) {            this.x += dx;  // Strongly typed this            this.y += dy;  // Strongly typed this        }    } : { moveBy(dx: number, dy: number): void; }
+>methods : { moveBy: (dx: number, dy: number) => void; }
+>{        moveBy(dx: number, dy: number) {            this.x += dx;  // Strongly typed this            this.y += dy;  // Strongly typed this        }    } : { moveBy: (dx: number, dy: number) => void; }
 
         moveBy(dx: number, dy: number) {
 >moveBy : (dx: number, dy: number) => void
@@= skipped -11, +11 lines =@@
             this.x += dx;  // Strongly typed this
 >this.x += dx : number
 >this.x : number
->this : { x: number; y: number; } & { moveBy(dx: number, dy: number): void; }
+>this : { x: number; y: number; } & { moveBy: (dx: number, dy: number) => void; }
 >x : number
 >dx : number
 
             this.y += dy;  // Strongly typed this
 >this.y += dy : number
 >this.y : number
->this : { x: number; y: number; } & { moveBy(dx: number, dy: number): void; }
+>this : { x: number; y: number; } & { moveBy: (dx: number, dy: number) => void; }
 >y : number
 >dy : number
         }
@@= skipped -32, +32 lines =@@
 >desc : ObjectDescriptor<D, M>
 
 let x2 = makeObject2({
->x2 : { x: number; y: number; } & { moveBy(dx: number, dy: number): void; }
->makeObject2({    data: { x: 0, y: 0 },    methods: {        moveBy(dx: number, dy: number) {            this.x += dx;  // Strongly typed this            this.y += dy;  // Strongly typed this        }    }}) : { x: number; y: number; } & { moveBy(dx: number, dy: number): void; }
+>x2 : { x: number; y: number; } & { moveBy: (dx: number, dy: number) => void; }
+>makeObject2({    data: { x: 0, y: 0 },    methods: {        moveBy(dx: number, dy: number) {            this.x += dx;  // Strongly typed this            this.y += dy;  // Strongly typed this        }    }}) : { x: number; y: number; } & { moveBy: (dx: number, dy: number) => void; }
 >makeObject2 : <D, M>(desc: ObjectDescriptor<D, M>) => D & M
->{    data: { x: 0, y: 0 },    methods: {        moveBy(dx: number, dy: number) {            this.x += dx;  // Strongly typed this            this.y += dy;  // Strongly typed this        }    }} : { data: { x: number; y: number; }; methods: { moveBy(dx: number, dy: number): void; }; }
+>{    data: { x: 0, y: 0 },    methods: {        moveBy(dx: number, dy: number) {            this.x += dx;  // Strongly typed this            this.y += dy;  // Strongly typed this        }    }} : { data: { x: number; y: number; }; methods: { moveBy: (dx: number, dy: number) => void; }; }
 
     data: { x: 0, y: 0 },
 >data : { x: number; y: number; }
@@= skipped -14, +14 lines =@@
 >0 : 0
 
     methods: {
->methods : { moveBy(dx: number, dy: number): void; }
->{        moveBy(dx: number, dy: number) {            this.x += dx;  // Strongly typed this            this.y += dy;  // Strongly typed this        }    } : { moveBy(dx: number, dy: number): void; }
+>methods : { moveBy: (dx: number, dy: number) => void; }
+>{        moveBy(dx: number, dy: number) {            this.x += dx;  // Strongly typed this            this.y += dy;  // Strongly typed this        }    } : { moveBy: (dx: number, dy: number) => void; }
 
         moveBy(dx: number, dy: number) {
 >moveBy : (dx: number, dy: number) => void
@@= skipped -11, +11 lines =@@
             this.x += dx;  // Strongly typed this
 >this.x += dx : number
 >this.x : number
->this : { x: number; y: number; } & { moveBy(dx: number, dy: number): void; }
+>this : { x: number; y: number; } & { moveBy: (dx: number, dy: number) => void; }
 >x : number
 >dx : number
 
             this.y += dy;  // Strongly typed this
 >this.y += dy : number
 >this.y : number
->this : { x: number; y: number; } & { moveBy(dx: number, dy: number): void; }
+>this : { x: number; y: number; } & { moveBy: (dx: number, dy: number) => void; }
 >y : number
 >dy : number
         }
@@= skipped -74, +74 lines =@@
 >defineProp : <T, K extends string, U>(obj: T, name: K, desc: PropDesc<U> & ThisType<T>) => T & Record<K, U>
 >p1 : Point
 >"bar" : "bar"
->{    get() {        return this.x;    },    set(value: number) {        this.x = value;    }} : { get(): number; set(value: number): void; }
+>{    get() {        return this.x;    },    set(value: number) {        this.x = value;    }} : { get: () => number; set: (value: number) => void; }
 
     get() {
 >get : () => number
@@= skipped -39, +39 lines =@@
 >defineProps(p1, {    foo: {        value: 42    },    bar: {        get(): number {            return this.x;        },        set(value: number) {            this.x = value;        }    }}) : Point & { foo: number; bar: number; }
 >defineProps : <T, U>(obj: T, descs: PropDescMap<U> & ThisType<T>) => T & U
 >p1 : Point
->{    foo: {        value: 42    },    bar: {        get(): number {            return this.x;        },        set(value: number) {            this.x = value;        }    }} : { foo: { value: number; }; bar: { get(): number; set(value: number): void; }; }
+>{    foo: {        value: 42    },    bar: {        get(): number {            return this.x;        },        set(value: number) {            this.x = value;        }    }} : { foo: { value: number; }; bar: { get: () => number; set: (value: number) => void; }; }
 
     foo: {
 >foo : { value: number; }
@@= skipped -12, +12 lines =@@
 
     },
     bar: {
->bar : { get(): number; set(value: number): void; }
->{        get(): number {            return this.x;        },        set(value: number) {            this.x = value;        }    } : { get(): number; set(value: number): void; }
+>bar : { get: () => number; set: (value: number) => void; }
+>{        get(): number {            return this.x;        },        set(value: number) {            this.x = value;        }    } : { get: () => number; set: (value: number) => void; }
 
         get(): number {
 >get : () => number
@@= skipped -85, +85 lines =@@
 >options : VueOptions<D, M, P>
 
 let vue = new Vue({
->vue : { x: number; y: number; } & { f(x: string): number; } & { test: number; hello: string; }
->new Vue({    data: () => ({ x: 1, y: 2 }),    methods: {        f(x: string) {            return this.x;        }    },    computed: {        test(): number {            return this.x;        },        hello: {            get() {                return "hi";            },            set(value: string) {            }        }    }}) : { x: number; y: number; } & { f(x: string): number; } & { test: number; hello: string; }
+>vue : { x: number; y: number; } & { f: (x: string) => number; } & { test: number; hello: string; }
+>new Vue({    data: () => ({ x: 1, y: 2 }),    methods: {        f(x: string) {            return this.x;        }    },    computed: {        test(): number {            return this.x;        },        hello: {            get() {                return "hi";            },            set(value: string) {            }        }    }}) : { x: number; y: number; } & { f: (x: string) => number; } & { test: number; hello: string; }
 >Vue : new <D, M, P>(options: VueOptions<D, M, P>) => D & M & P
->{    data: () => ({ x: 1, y: 2 }),    methods: {        f(x: string) {            return this.x;        }    },    computed: {        test(): number {            return this.x;        },        hello: {            get() {                return "hi";            },            set(value: string) {            }        }    }} : { data: () => { x: number; y: number; }; methods: { f(x: string): number; }; computed: { test(): number; hello: { get(): string; set(value: string): void; }; }; }
+>{    data: () => ({ x: 1, y: 2 }),    methods: {        f(x: string) {            return this.x;        }    },    computed: {        test(): number {            return this.x;        },        hello: {            get() {                return "hi";            },            set(value: string) {            }        }    }} : { data: () => { x: number; y: number; }; methods: { f: (x: string) => number; }; computed: { test: () => number; hello: { get: () => string; set: (value: string) => void; }; }; }
 
     data: () => ({ x: 1, y: 2 }),
 >data : () => { x: number; y: number; }
@@= skipped -16, +16 lines =@@
 >2 : 2
 
     methods: {
->methods : { f(x: string): number; }
->{        f(x: string) {            return this.x;        }    } : { f(x: string): number; }
+>methods : { f: (x: string) => number; }
+>{        f(x: string) {            return this.x;        }    } : { f: (x: string) => number; }
 
         f(x: string) {
 >f : (x: string) => number
@@= skipped -9, +9 lines =@@
 
             return this.x;
 >this.x : number
->this : { x: number; y: number; } & { f(x: string): number; } & { test: number; hello: string; }
+>this : { x: number; y: number; } & { f: (x: string) => number; } & { test: number; hello: string; }
 >x : number
         }
     },
     computed: {
->computed : { test(): number; hello: { get(): string; set(value: string): void; }; }
->{        test(): number {            return this.x;        },        hello: {            get() {                return "hi";            },            set(value: string) {            }        }    } : { test(): number; hello: { get(): string; set(value: string): void; }; }
+>computed : { test: () => number; hello: { get: () => string; set: (value: string) => void; }; }
+>{        test(): number {            return this.x;        },        hello: {            get() {                return "hi";            },            set(value: string) {            }        }    } : { test: () => number; hello: { get: () => string; set: (value: string) => void; }; }
 
         test(): number {
 >test : () => number
 
             return this.x;
 >this.x : number
->this : { x: number; y: number; } & { f(x: string): number; } & { test: number; hello: string; }
+>this : { x: number; y: number; } & { f: (x: string) => number; } & { test: number; hello: string; }
 >x : number
 
         },
         hello: {
->hello : { get(): string; set(value: string): void; }
->{            get() {                return "hi";            },            set(value: string) {            }        } : { get(): string; set(value: string): void; }
+>hello : { get: () => string; set: (value: string) => void; }
+>{            get() {                return "hi";            },            set(value: string) {            }        } : { get: () => string; set: (value: string) => void; }
 
             get() {
 >get : () => string
@@= skipped -37, +37 lines =@@
 });
 
 vue;
->vue : { x: number; y: number; } & { f(x: string): number; } & { test: number; hello: string; }
+>vue : { x: number; y: number; } & { f: (x: string) => number; } & { test: number; hello: string; }
 
 vue.x;
 >vue.x : number
->vue : { x: number; y: number; } & { f(x: string): number; } & { test: number; hello: string; }
+>vue : { x: number; y: number; } & { f: (x: string) => number; } & { test: number; hello: string; }
 >x : number
 
 vue.f("abc");
 >vue.f("abc") : number
 >vue.f : (x: string) => number
->vue : { x: number; y: number; } & { f(x: string): number; } & { test: number; hello: string; }
+>vue : { x: number; y: number; } & { f: (x: string) => number; } & { test: number; hello: string; }
 >f : (x: string) => number
 >"abc" : "abc"
 
 vue.test;
 >vue.test : number
->vue : { x: number; y: number; } & { f(x: string): number; } & { test: number; hello: string; }
+>vue : { x: number; y: number; } & { f: (x: string) => number; } & { test: number; hello: string; }
 >test : number
 
 vue.hello;
 >vue.hello : string
->vue : { x: number; y: number; } & { f(x: string): number; } & { test: number; hello: string; }
+>vue : { x: number; y: number; } & { f: (x: string) => number; } & { test: number; hello: string; }
 >hello : string
 
