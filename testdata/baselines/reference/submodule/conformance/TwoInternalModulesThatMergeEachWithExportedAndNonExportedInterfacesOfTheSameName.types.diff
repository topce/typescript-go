--- old.TwoInternalModulesThatMergeEachWithExportedAndNonExportedInterfacesOfTheSameName.types
+++ new.TwoInternalModulesThatMergeEachWithExportedAndNonExportedInterfacesOfTheSameName.types
@@= skipped -22, +22 lines =@@
 
 // ensure merges as expected
 var p: { x: number; y: number; toCarth(): A.Point; };
->p : { x: number; y: number; toCarth(): A.Point; }
+>p : { x: number; y: number; toCarth: () => Point; }
 >x : number
 >y : number
->toCarth : () => A.Point
+>toCarth : () => Point
 >A : any
 
 var p: A.Point;
->p : { x: number; y: number; toCarth(): A.Point; }
+>p : { x: number; y: number; toCarth: () => Point; }
 >A : any
 
 module X.Y.Z {
     export interface Line {
         new (start: A.Point, end: A.Point);
->start : A.Point
+>start : Point
 >A : any
->end : A.Point
+>end : Point
 >A : any
     }
 }
@@= skipped -24, +24 lines =@@
     export module Y.Z {
         interface Line {
             start: A.Point;
->start : A.Point
+>start : Point
 >A : any
 
             end: A.Point;
->end : A.Point
+>end : Point
 >A : any
         }
     }
@@= skipped -12, +12 lines =@@
 
 // ensure merges as expected
 var l: { new (s: A.Point, e: A.Point); }
->l : new (s: A.Point, e: A.Point) => any
->s : A.Point
+>l : new (s: Point, e: Point) => any
+>s : Point
 >A : any
->e : A.Point
+>e : Point
 >A : any
 
 var l: X.Y.Z.Line;
->l : new (s: A.Point, e: A.Point) => any
+>l : new (s: Point, e: Point) => any
 >X : any
 >Y : any
 >Z : any
