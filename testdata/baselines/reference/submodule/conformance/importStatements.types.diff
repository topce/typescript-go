--- old.importStatements.types
+++ new.importStatements.types
@@= skipped -22, +22 lines =@@
 // no code gen expected
 module B {
     import a = A; //Error generates 'var <Alias> = <EntityName>;'
->a : typeof a
->A : typeof a
+>a : typeof A
+>A : typeof A
 }
 
 // no code gen expected
@@= skipped -9, +9 lines =@@
 >C : typeof C
 
     import a = A; //Error generates 'var <Alias> = <EntityName>;'
->a : typeof a
->A : typeof a
+>a : typeof A
+>A : typeof A
 
     var m: typeof a;
->m : typeof a
->a : typeof a
+>m : typeof A
+>a : typeof A
 
     var p: a.Point;
->p : a.Point
+>p : Point
 >a : any
 
     var p = {x:0, y:0 };
->p : a.Point
+>p : Point
 >{x:0, y:0 } : { x: number; y: number; }
 >x : number
 >0 : 0
@@= skipped -25, +25 lines =@@
 >D : typeof D
 
     import a = A;
->a : typeof a
->A : typeof a
+>a : typeof A
+>A : typeof A
 
     var p = new a.Point(1, 1);
->p : a.Point
->new a.Point(1, 1) : a.Point
->a.Point : typeof a.Point
->a : typeof a
->Point : typeof a.Point
+>p : Point
+>new a.Point(1, 1) : Point
+>a.Point : typeof Point
+>a : typeof A
+>Point : typeof Point
 >1 : 1
 >1 : 1
 }
@@= skipped -17, +17 lines =@@
 >E : typeof E
 
     import a = A;
->a : typeof a
->A : typeof a
+>a : typeof A
+>A : typeof A
 
     export function xDist(x: a.Point) {
->xDist : (x: a.Point) => number
->x : a.Point
+>xDist : (x: Point) => number
+>x : Point
 >a : any
 
         return (a.Origin.x - x.x);
 >(a.Origin.x - x.x) : number
 >a.Origin.x - x.x : number
 >a.Origin.x : number
->a.Origin : a.Point
->a : typeof a
->Origin : a.Point
+>a.Origin : Point
+>a : typeof A
+>Origin : Point
 >x : number
 >x.x : number
->x : a.Point
+>x : Point
 >x : number
     }
 }
