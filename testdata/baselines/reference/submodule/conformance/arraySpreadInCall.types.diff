--- old.arraySpreadInCall.types
+++ new.arraySpreadInCall.types
@@= skipped -187, +187 lines =@@
 >'foo' : "foo"
 
 declare function f4<const T extends readonly unknown[]>(...args: T): T;
->f4 : <const T extends readonly unknown[]>(...args: T) => T
+>f4 : <T extends readonly unknown[]>(...args: T) => T
 >args : T
 
 const x41 = f4(...[1, 'foo'])
 >x41 : readonly [number, string]
 >f4(...[1, 'foo']) : readonly [number, string]
->f4 : <const T extends readonly unknown[]>(...args: T) => T
+>f4 : <T extends readonly unknown[]>(...args: T) => T
 >...[1, 'foo'] : string | number
 >[1, 'foo'] : [number, string]
 >1 : 1
@@= skipped -15, +15 lines =@@
 const x42 = f4(true, ...[1, 'foo'])
 >x42 : readonly [true, number, string]
 >f4(true, ...[1, 'foo']) : readonly [true, number, string]
->f4 : <const T extends readonly unknown[]>(...args: T) => T
+>f4 : <T extends readonly unknown[]>(...args: T) => T
 >true : true
 >...[1, 'foo'] : string | number
 >[1, 'foo'] : [number, string]
@@= skipped -10, +10 lines =@@
 const x43 = f4(...([1, 'foo']))
 >x43 : readonly [number, string]
 >f4(...([1, 'foo'])) : readonly [number, string]
->f4 : <const T extends readonly unknown[]>(...args: T) => T
+>f4 : <T extends readonly unknown[]>(...args: T) => T
 >...([1, 'foo']) : string | number
 >([1, 'foo']) : [number, string]
 >[1, 'foo'] : [number, string]
@@= skipped -10, +10 lines =@@
 const x44 = f4(true, ...([1, 'foo']))
 >x44 : readonly [true, number, string]
 >f4(true, ...([1, 'foo'])) : readonly [true, number, string]
->f4 : <const T extends readonly unknown[]>(...args: T) => T
+>f4 : <T extends readonly unknown[]>(...args: T) => T
 >true : true
 >...([1, 'foo']) : string | number
 >([1, 'foo']) : [number, string]
