--- old.mappedTypes4.js
+++ new.mappedTypes4.js
@@= skipped -75, +75 lines =@@
 //// [mappedTypes4.js]
 function boxify(obj) {
     if (typeof obj === "object") {
-        var result = {};
-        for (var k in obj) {
+        let result = {};
+        for (let k in obj) {
             result[k] = { value: obj[k] };
         }
         return result;
@@= skipped -15, +15 lines =@@
 var x1;
 var z1;
 var z1;
-
-
-//// [mappedTypes4.d.ts]
-type Box<T> = {};
-type Boxified<T> = {
-    [P in keyof T]: Box<T[P]>;
-};
-declare function boxify<T>(obj: T): Boxified<T>;
-type A = {
-    a: string;
-};
-type B = {
-    b: string;
-};
-type C = {
-    c: string;
-};
-declare function f1(x: A | B | C | undefined): Boxified<A | B | C | undefined>;
-type T00 = Partial<A | B | C>;
-type T01 = Readonly<A | B | C | null | undefined>;
-type T02 = Boxified<A | B[] | C | string>;
-type T03 = Readonly<string | number | boolean | null | undefined | void>;
-type T04 = Boxified<string | number | boolean | null | undefined | void>;
-type T05 = Partial<"hello" | "world" | 42>;
-type BoxifiedWithSentinel<T, U> = {
-    [P in keyof T]: Box<T[P]> | U;
-};
-type T10 = BoxifiedWithSentinel<A | B | C, null>;
-type T11 = BoxifiedWithSentinel<A | B | C, undefined>;
-type T12 = BoxifiedWithSentinel<string, undefined>;
-type DeepReadonly<T> = {
-    readonly [P in keyof T]: DeepReadonly<T[P]>;
-};
-type Foo = {
-    x: number;
-    y: {
-        a: string;
-        b: number;
-    };
-    z: boolean;
-};
-type DeepReadonlyFoo = {
-    readonly x: number;
-    readonly y: {
-        readonly a: string;
-        readonly b: number;
-    };
-    readonly z: boolean;
-};
-declare var x1: DeepReadonly<Foo>;
-declare var x1: DeepReadonlyFoo;
-type Z = {
-    a: number;
-};
-type Clone<T> = {
-    [P in keyof (T & {})]: (T & {})[P];
-};
-type M = Clone<Z>;
-declare var z1: Z;
-declare var z1: Clone<Z>;
