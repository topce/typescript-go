--- old.genericCallWithGenericSignatureArguments2.types
+++ new.genericCallWithGenericSignatureArguments2.types
@@= skipped -40, +40 lines =@@
         var r7 = foo((a: T) => a, (b: T) => b); // T => T
 >r7 : (x: T) => T
 >foo((a: T) => a, (b: T) => b) : (x: T) => T
->foo : <T_1>(a: (x: T_1) => T_1, b: (x: T_1) => T_1) => (x: T_1) => T_1
+>foo : <T>(a: (x: T) => T, b: (x: T) => T) => (x: T) => T
 >(a: T) => a : (a: T) => T
 >a : T
 >a : T
@@= skipped -45, +45 lines =@@
         var r7 = foo2((a: T) => a, (b: T) => b); // error
 >r7 : (x: Date) => Date
 >foo2((a: T) => a, (b: T) => b) : (x: Date) => Date
->foo2 : <T_1 extends Date>(a: (x: T_1) => T_1, b: (x: T_1) => T_1) => (x: T_1) => T_1
+>foo2 : <T extends Date>(a: (x: T) => T, b: (x: T) => T) => (x: T) => T
 >(a: T) => a : (a: T) => T
 >a : T
 >a : T
@@= skipped -11, +11 lines =@@
         var r7b = foo2((a) => a, (b) => b); // valid, T is inferred to be Date
 >r7b : (x: Date) => Date
 >foo2((a) => a, (b) => b) : (x: Date) => Date
->foo2 : <T_1 extends Date>(a: (x: T_1) => T_1, b: (x: T_1) => T_1) => (x: T_1) => T_1
+>foo2 : <T extends Date>(a: (x: T) => T, b: (x: T) => T) => (x: T) => T
 >(a) => a : (a: Date) => Date
 >a : Date
 >a : Date
@@= skipped -89, +89 lines =@@
         var r7 = foo((a: T) => a, (b: T) => b); 
 >r7 : (x: T) => T
 >foo((a: T) => a, (b: T) => b) : (x: T) => T
->foo : <T_1, U>(a: (x: T_1) => T_1, b: (x: U) => U) => (x: T_1) => T_1
+>foo : <T, U>(a: (x: T) => T, b: (x: U) => U) => (x: T) => T
 >(a: T) => a : (a: T) => T
 >a : T
 >a : T
@@= skipped -44, +44 lines =@@
         var r7 = foo2((a: T) => a, (b: T) => b); 
 >r7 : (x: Date) => Date
 >foo2((a: T) => a, (b: T) => b) : (x: Date) => Date
->foo2 : <T_1 extends Date, U extends Date>(a: (x: T_1) => T_1, b: (x: U) => U) => (x: T_1) => T_1
+>foo2 : <T extends Date, U extends Date>(a: (x: T) => T, b: (x: U) => U) => (x: T) => T
 >(a: T) => a : (a: T) => T
 >a : T
 >a : T
@@= skipped -11, +11 lines =@@
         var r7b = foo2((a) => a, (b) => b); 
 >r7b : (x: Date) => Date
 >foo2((a) => a, (b) => b) : (x: Date) => Date
->foo2 : <T_1 extends Date, U extends Date>(a: (x: T_1) => T_1, b: (x: U) => U) => (x: T_1) => T_1
+>foo2 : <T extends Date, U extends Date>(a: (x: T) => T, b: (x: U) => U) => (x: T) => T
 >(a) => a : (a: Date) => Date
 >a : Date
 >a : Date
