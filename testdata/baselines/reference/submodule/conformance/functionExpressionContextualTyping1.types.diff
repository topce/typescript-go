--- old.functionExpressionContextualTyping1.types
+++ new.functionExpressionContextualTyping1.types
@@= skipped -58, +58 lines =@@
 //        and if all of the signatures are identical ignoring return types,
 //        then S is a signature with the same parameters and a union of the return types.
 var b1: ((s: string, w: boolean) => void) | ((s: string, w: boolean) => string);
->b1 : ((s: string, w: boolean) => void) | ((s: string, w: boolean) => string)
+>b1 : (s: string, w: boolean) => void | (s: string, w: boolean) => string
 >s : string
 >w : boolean
 >s : string
@@= skipped -8, +8 lines =@@
 
 b1 = (k, h) => { };
 >b1 = (k, h) => { } : (k: string, h: boolean) => void
->b1 : ((s: string, w: boolean) => void) | ((s: string, w: boolean) => string)
+>b1 : (s: string, w: boolean) => void | (s: string, w: boolean) => string
 >(k, h) => { } : (k: string, h: boolean) => void
 >k : string
 >h : boolean
 
 var b2: typeof a0 | ((n: number, s: string) => string);
->b2 : ((n: number, s: string) => number) | ((n: number, s: string) => string)
+>b2 : (n: number, s: string) => number | (n: number, s: string) => string
 >a0 : (n: number, s: string) => number
 >n : number
 >s : string
 
 b2 = (foo, bar) => { return foo + 1; }
 >b2 = (foo, bar) => { return foo + 1; } : (foo: number, bar: string) => number
->b2 : ((n: number, s: string) => number) | ((n: number, s: string) => string)
+>b2 : (n: number, s: string) => number | (n: number, s: string) => string
 >(foo, bar) => { return foo + 1; } : (foo: number, bar: string) => number
 >foo : number
 >bar : string
@@= skipped -23, +23 lines =@@
 
 b2 = (foo, bar) => { return "hello"; }
 >b2 = (foo, bar) => { return "hello"; } : (foo: number, bar: string) => string
->b2 : ((n: number, s: string) => number) | ((n: number, s: string) => string)
+>b2 : (n: number, s: string) => number | (n: number, s: string) => string
 >(foo, bar) => { return "hello"; } : (foo: number, bar: string) => string
 >foo : number
 >bar : string
@@= skipped -38, +38 lines =@@
 // A contextual signature S is extracted from a function type T as follows:
 //      Otherwise, no contextual signature can be extracted from T and S is undefined.
 var b6: ((s: string, w: boolean) => void) | ((n: number) => number);
->b6 : ((s: string, w: boolean) => void) | ((n: number) => number)
+>b6 : (s: string, w: boolean) => void | (n: number) => number
 >s : string
 >w : boolean
 >n : number
 
 var b7: ((s: string, w: boolean) => void) | ((s: string, w: number) => string);
->b7 : ((s: string, w: boolean) => void) | ((s: string, w: number) => string)
+>b7 : (s: string, w: boolean) => void | (s: string, w: number) => string
 >s : string
 >w : boolean
 >s : string
@@= skipped -14, +14 lines =@@
 
 b6 = (k) => { k.toLowerCase() };
 >b6 = (k) => { k.toLowerCase() } : (k: any) => void
->b6 : ((s: string, w: boolean) => void) | ((n: number) => number)
+>b6 : (s: string, w: boolean) => void | (n: number) => number
 >(k) => { k.toLowerCase() } : (k: any) => void
 >k : any
 >k.toLowerCase() : any
@@= skipped -10, +10 lines =@@
 
 b6 = (i) => {
 >b6 = (i) => {    i.toExponential();    return i;} : (i: any) => any
->b6 : ((s: string, w: boolean) => void) | ((n: number) => number)
+>b6 : (s: string, w: boolean) => void | (n: number) => number
 >(i) => {    i.toExponential();    return i;} : (i: any) => any
 >i : any
 
@@= skipped -16, +16 lines =@@
 };                   // Per spec, no contextual signature can be extracted in this case. (Otherwise clause)
 b7 = (j, m) => { };  // Per spec, no contextual signature can be extracted in this case. (Otherwise clause)
 >b7 = (j, m) => { } : (j: any, m: any) => void
->b7 : ((s: string, w: boolean) => void) | ((s: string, w: number) => string)
+>b7 : (s: string, w: boolean) => void | (s: string, w: number) => string
 >(j, m) => { } : (j: any, m: any) => void
 >j : any
 >m : any
@@= skipped -10, +10 lines =@@
 
     constructor() {
         var k: ((j: T, k: U) => (T|U)[]) | ((j: number,k :U) => number[]) = (j, k) => {
->k : ((j: T, k: U) => (T | U)[]) | ((j: number, k: U) => number[])
+>k : (j: T, k: U) => (T | U)[] | (j: number, k: U) => number[]
 >j : T
 >k : U
 >j : number
