--- old.mappedTypeErrors.types
+++ new.mappedTypeErrors.types
@@= skipped -87, +87 lines =@@
 }
 
 function f4<T extends keyof Named>(x: T) {
->f4 : <T extends keyof Named>(x: T) => void
+>f4 : <T extends "name">(x: T) => void
 >x : T
 
     let y: Pick<Shape, T>;
@@= skipped -16, +16 lines =@@
 >K : keyof T
 
     var x: { [P in keyof T]: T[P] };
->x : { [P in keyof T]: T[P]; }
+>x : { [P in keyof T]: T[P] }
 
     var x: { [Q in keyof T]: T[Q] };
->x : { [P in keyof T]: T[P]; }
+>x : { [P in keyof T]: T[P] }
 
     var x: { [R in K]: T[R] };
->x : { [P in keyof T]: T[P]; }
+>x : { [P in keyof T]: T[P] }
 }
 
 function f11<T>() {
 >f11 : <T>() => void
 
     var x: { [P in keyof T]: T[P] };
->x : { [P in keyof T]: T[P]; }
+>x : { [P in keyof T]: T[P] }
 
     var x: { [P in keyof T]?: T[P] };  // Error
->x : { [P in keyof T]: T[P]; }
+>x : { [P in keyof T]: T[P] }
 
     var x: { readonly [P in keyof T]: T[P] };  // Error
->x : { [P in keyof T]: T[P]; }
+>x : { [P in keyof T]: T[P] }
 
     var x: { readonly [P in keyof T]?: T[P] };  // Error
->x : { [P in keyof T]: T[P]; }
+>x : { [P in keyof T]: T[P] }
 }
 
 function f12<T>() {
 >f12 : <T>() => void
 
     var x: { [P in keyof T]: T[P] };
->x : { [P in keyof T]: T[P]; }
+>x : { [P in keyof T]: T[P] }
 
     var x: { [P in keyof T]: T[P][] };  // Error
->x : { [P in keyof T]: T[P]; }
+>x : { [P in keyof T]: T[P] }
 }
 
 // Check that inferences to mapped types are secondary
@@= skipped -360, +360 lines =@@
 >Foo2 : Foo2<T, F>
 
     pf: {[P in F]?: T[P]},
->pf : { [P in F]?: T[P] | undefined; }
+>pf : { [P in F]?: T[P] | undefined }
 
     pt: {[P in T]?: T[P]}, // note: should be in keyof T
->pt : { [P in T]?: T[P] | undefined; }
+>pt : { [P in T]?: T[P] | undefined }
 
 };
 type O = {x: number, y: boolean};
