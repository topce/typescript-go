--- old.arrayLiteralInference.types
+++ new.arrayLiteralInference.types
@@= skipped -65, +65 lines =@@
 >appTypeStylesWithError : Map<AppType, AppStyle[]>
 >new Map([    [AppType.Standard, [AppStyle.Standard, AppStyle.MiniApp]],    [AppType.Relationship, [AppStyle.Standard, AppStyle.Tree, AppStyle.TreeEntity]],    [AppType.AdvancedList, [AppStyle.Standard, AppStyle.MiniApp]]]) : Map<AppType.AdvancedList | AppType.Standard | AppType.Relationship, (AppStyle.Standard | AppStyle.MiniApp)[] | (AppStyle.Tree | AppStyle.TreeEntity | AppStyle.Standard)[]>
 >Map : MapConstructor
->[    [AppType.Standard, [AppStyle.Standard, AppStyle.MiniApp]],    [AppType.Relationship, [AppStyle.Standard, AppStyle.Tree, AppStyle.TreeEntity]],    [AppType.AdvancedList, [AppStyle.Standard, AppStyle.MiniApp]]] : ([AppType.Standard, (AppStyle.Standard | AppStyle.MiniApp)[]] | [AppType.Relationship, (AppStyle.Tree | AppStyle.TreeEntity | AppStyle.Standard)[]] | [AppType.AdvancedList, (AppStyle.Standard | AppStyle.MiniApp)[]])[]
+>[    [AppType.Standard, [AppStyle.Standard, AppStyle.MiniApp]],    [AppType.Relationship, [AppStyle.Standard, AppStyle.Tree, AppStyle.TreeEntity]],    [AppType.AdvancedList, [AppStyle.Standard, AppStyle.MiniApp]]] : ([AppType.AdvancedList, (AppStyle.Standard | AppStyle.MiniApp)[]] | [AppType.Standard, (AppStyle.Standard | AppStyle.MiniApp)[]] | [AppType.Relationship, (AppStyle.Tree | AppStyle.TreeEntity | AppStyle.Standard)[]])[]
 
     [AppType.Standard, [AppStyle.Standard, AppStyle.MiniApp]],
 >[AppType.Standard, [AppStyle.Standard, AppStyle.MiniApp]] : [AppType.Standard, (AppStyle.Standard | AppStyle.MiniApp)[]]
@@= skipped -66, +66 lines =@@
 
 let b2: boolean[][] = foo([true], [false]);
 >b2 : boolean[][]
->foo([true], [false]) : (true[] | false[])[]
+>foo([true], [false]) : (false[] | true[])[]
 >foo : <T>(...args: T[]) => T[]
 >[true] : true[]
 >true : true
