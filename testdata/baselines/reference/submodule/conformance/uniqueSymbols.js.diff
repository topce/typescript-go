--- old.uniqueSymbols.js
+++ new.uniqueSymbols.js
@@= skipped -316, +316 lines =@@
 async function* asyncGenFuncYieldVarCall() { yield varCall; }
 // classes
 class C {
-    constructor() {
-        this.readonlyCall = Symbol();
-        this.readwriteCall = Symbol();
-    }
-    static { this.readonlyStaticCall = Symbol(); }
-    static { this.readonlyStaticTypeAndCall = Symbol(); }
-    static { this.readwriteStaticCall = Symbol(); }
+    static readonlyStaticCall = Symbol();
+    static readonlyStaticType;
+    static readonlyStaticTypeAndCall = Symbol();
+    static readwriteStaticCall = Symbol();
+    readonlyCall = Symbol();
+    readwriteCall = Symbol();
 }
 const constInitToCReadonlyStaticCall = C.readonlyStaticCall;
 const constInitToCReadonlyStaticType = C.readonlyStaticType;
@@= skipped -56, +55 lines =@@
 };
 // property initializers
 class C0 {
-    constructor() {
-        this.a = s;
-        this.b = N.s;
-        this.c = N["s"];
-        this.d = s;
-        this.e = N.s;
-        this.f = N["s"];
-    }
-    static { this.a = s; }
-    static { this.b = N.s; }
-    static { this.c = N["s"]; }
-    static { this.d = s; }
-    static { this.e = N.s; }
-    static { this.f = N["s"]; }
+    static a = s;
+    static b = N.s;
+    static c = N["s"];
+    static d = s;
+    static e = N.s;
+    static f = N["s"];
+    a = s;
+    b = N.s;
+    c = N["s"];
+    d = s;
+    e = N.s;
+    f = N["s"];
     method1() { return s; }
     async method2() { return s; }
     async *method3() { yield s; }
@@= skipped -46, +44 lines =@@
     [N.s]: "b",
 });
 class C1 {
-    static { N.s, N.s; }
+    static [s];
+    static [N.s];
+    [s];
+    [N.s];
 }
 const o3 = {
     method1() {
