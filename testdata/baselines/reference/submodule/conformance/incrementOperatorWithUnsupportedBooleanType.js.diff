--- old.incrementOperatorWithUnsupportedBooleanType.js
+++ new.incrementOperatorWithUnsupportedBooleanType.js
@@= skipped -56, +56 lines =@@
 objA.a++, M.n++;
 
 //// [incrementOperatorWithUnsupportedBooleanType.js]
-// ++ operator on boolean type
 var BOOLEAN;
 function foo() { return true; }
-var A = /** @class */ (function () {
-    function A() {
-    }
-    A.foo = function () { return true; };
-    return A;
-}());
+class A {
+    a;
+    static foo() { return true; }
+}
 var M;
 (function (M) {
 })(M || (M = {}));
 var objA = new A();
-// boolean type var
 var ResultIsNumber1 = ++BOOLEAN;
 var ResultIsNumber2 = BOOLEAN++;
-// boolean type literal
 var ResultIsNumber3 = ++true;
 var ResultIsNumber4 = ++{ x: true, y: false };
-var ResultIsNumber5 = ++{ x: true, y: function (n) { return n; } };
+var ResultIsNumber5 = ++{ x: true, y: (n) => { return n; } };
 var ResultIsNumber6 = true++;
 var ResultIsNumber7 = { x: true, y: false }++;
-var ResultIsNumber8 = { x: true, y: function (n) { return n; } }++;
-// boolean type expressions
+var ResultIsNumber8 = { x: true, y: (n) => { return n; } }++;
 var ResultIsNumber9 = ++objA.a;
 var ResultIsNumber10 = ++M.n;
 var ResultIsNumber11 = ++foo();
@@= skipped -32, +26 lines =@@
 var ResultIsNumber14 = A.foo()++;
 var ResultIsNumber15 = objA.a++;
 var ResultIsNumber16 = M.n++;
-// miss assignment operators
 ++true;
 ++BOOLEAN;
 ++foo();
