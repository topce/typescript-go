--- old.subtypingWithCallSignatures3.js
+++ new.subtypingWithCallSignatures3.js
@@= skipped -120, +120 lines =@@
 }
 
 //// [subtypingWithCallSignatures3.js]
-// checking subtype relations for function types as it relates to contextual signature instantiation
-// error cases, so function calls will all result in 'any'
-var __extends = (this && this.__extends) || (function () {
-    var extendStatics = function (d, b) {
-        extendStatics = Object.setPrototypeOf ||
-            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
-            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
-        return extendStatics(d, b);
-    };
-    return function (d, b) {
-        if (typeof b !== "function" && b !== null)
-            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
-        extendStatics(d, b);
-        function __() { this.constructor = d; }
-        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-    };
-})();
 var Errors;
 (function (Errors) {
-    var Base = /** @class */ (function () {
-        function Base() {
-        }
-        return Base;
-    }());
-    var Derived = /** @class */ (function (_super) {
-        __extends(Derived, _super);
-        function Derived() {
-            return _super !== null && _super.apply(this, arguments) || this;
-        }
-        return Derived;
-    }(Base));
-    var Derived2 = /** @class */ (function (_super) {
-        __extends(Derived2, _super);
-        function Derived2() {
-            return _super !== null && _super.apply(this, arguments) || this;
-        }
-        return Derived2;
-    }(Derived));
-    var OtherDerived = /** @class */ (function (_super) {
-        __extends(OtherDerived, _super);
-        function OtherDerived() {
-            return _super !== null && _super.apply(this, arguments) || this;
-        }
-        return OtherDerived;
-    }(Base));
-    var r1 = foo2(function (x) { return null; }); // any
-    var r1a = [function (x) { return ['']; }, function (x) { return null; }];
-    var r1b = [function (x) { return null; }, function (x) { return ['']; }];
-    var r2arg = function (x) { return function (r) { return null; }; };
-    var r2arg2 = function (x) { return function (r) { return null; }; };
-    var r2 = foo7(r2arg); // any
+    class Base {
+        foo;
+    }
+    class Derived extends Base {
+        bar;
+    }
+    class Derived2 extends Derived {
+        baz;
+    }
+    class OtherDerived extends Base {
+        bing;
+    }
+    var r1 = foo2((x) => null);
+    var r1a = [(x) => [''], (x) => null];
+    var r1b = [(x) => null, (x) => ['']];
+    var r2arg = (x) => (r) => null;
+    var r2arg2 = (x) => (r) => null;
+    var r2 = foo7(r2arg);
     var r2a = [r2arg2, r2arg];
     var r2b = [r2arg, r2arg2];
-    var r3arg = function (x, y) { return function (r) { return null; }; };
-    var r3arg2 = function (x, y) { return function (r) { return null; }; };
-    var r3 = foo8(r3arg); // any
+    var r3arg = (x, y) => (r) => null;
+    var r3arg2 = (x, y) => (r) => null;
+    var r3 = foo8(r3arg);
     var r3a = [r3arg2, r3arg];
     var r3b = [r3arg, r3arg2];
-    var r4arg = function () {
-        var x = [];
-        for (var _i = 0; _i < arguments.length; _i++) {
-            x[_i] = arguments[_i];
-        }
-        return null;
-    };
-    var r4arg2 = function () {
-        var x = [];
-        for (var _i = 0; _i < arguments.length; _i++) {
-            x[_i] = arguments[_i];
-        }
-        return null;
-    };
-    var r4 = foo10(r4arg); // any
+    var r4arg = (...x) => null;
+    var r4arg2 = (...x) => null;
+    var r4 = foo10(r4arg);
     var r4a = [r4arg2, r4arg];
     var r4b = [r4arg, r4arg2];
-    var r5arg = function (x, y) { return null; };
-    var r5arg2 = function (x, y) { return null; };
-    var r5 = foo11(r5arg); // any
+    var r5arg = (x, y) => null;
+    var r5arg2 = (x, y) => null;
+    var r5 = foo11(r5arg);
     var r5a = [r5arg2, r5arg];
     var r5b = [r5arg, r5arg2];
-    var r6arg = function (x, y) { return null; };
-    var r6arg2 = function (x, y) { return null; };
-    var r6 = foo12(r6arg); // (x: Array<Base>, y: Array<Derived2>) => Array<Derived>
+    var r6arg = (x, y) => null;
+    var r6arg2 = (x, y) => null;
+    var r6 = foo12(r6arg);
     var r6a = [r6arg2, r6arg];
     var r6b = [r6arg, r6arg2];
-    var r7arg = function (x) { return null; };
-    var r7arg2 = function (x) { return 1; };
-    var r7 = foo15(r7arg); // any
+    var r7arg = (x) => null;
+    var r7arg2 = (x) => 1;
+    var r7 = foo15(r7arg);
     var r7a = [r7arg2, r7arg];
     var r7b = [r7arg, r7arg2];
-    var r7arg3 = function (x) { return 1; };
-    var r7c = foo15(r7arg3); // (x: { a: string; b: number }) => number): number;
+    var r7arg3 = (x) => 1;
+    var r7c = foo15(r7arg3);
     var r7d = [r7arg2, r7arg3];
     var r7e = [r7arg3, r7arg2];
-    var r8arg = function (x) { return null; };
-    var r8 = foo16(r8arg); // any
-    var r9arg = function (x) { return null; };
-    var r9 = foo17(r9arg); // (x: { <T extends Derived >(a: T): T; <T extends Base >(a: T): T; }): any[]; (x: { <T extends Derived2>(a: T): T; <T extends Base>(a: T): T; }): any[];
+    var r8arg = (x) => null;
+    var r8 = foo16(r8arg);
+    var r9arg = (x) => null;
+    var r9 = foo17(r9arg);
 })(Errors || (Errors = {}));
 var WithGenericSignaturesInBaseType;
 (function (WithGenericSignaturesInBaseType) {
-    var r2arg2 = function (x) { return ['']; };
-    var r2 = foo2(r2arg2); // <T>(x:T) => T[] since we can infer from generic signatures now
-    var r3arg2 = function (x) { return null; };
-    var r3 = foo3(r3arg2); // any
+    var r2arg2 = (x) => [''];
+    var r2 = foo2(r2arg2);
+    var r3arg2 = (x) => null;
+    var r3 = foo3(r3arg2);
 })(WithGenericSignaturesInBaseType || (WithGenericSignaturesInBaseType = {}));
