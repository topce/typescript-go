--- old.objectTypesIdentityWithGenericCallSignaturesDifferingTypeParameterCounts2.types
+++ new.objectTypesIdentityWithGenericCallSignaturesDifferingTypeParameterCounts2.types
@@= skipped -42, +42 lines =@@
 >x : any
 
 function foo3(x: typeof a);
->foo3 : { (x: typeof a): any; (x: typeof a): any; }
+>foo3 : { (x: <Z, A, B, C, D>(x: Z) => Z): any; (x: <Z, A, B, C, D>(x: Z) => Z): any; }
 >x : <Z, A, B, C, D>(x: Z) => Z
 >a : <Z, A, B, C, D>(x: Z) => Z
 
 function foo3(x: typeof a); // error
->foo3 : { (x: typeof a): any; (x: typeof a): any; }
+>foo3 : { (x: <Z, A, B, C, D>(x: Z) => Z): any; (x: <Z, A, B, C, D>(x: Z) => Z): any; }
 >x : <Z, A, B, C, D>(x: Z) => Z
 >a : <Z, A, B, C, D>(x: Z) => Z
 
 function foo3(x: any) { }
->foo3 : { (x: typeof a): any; (x: typeof a): any; }
+>foo3 : { (x: <Z, A, B, C, D>(x: Z) => Z): any; (x: <Z, A, B, C, D>(x: Z) => Z): any; }
 >x : any
 
 function foo13(x: I<boolean, string, number, Date>);
->foo13 : { (x: I<boolean, string, number, Date>): any; (x: typeof a): any; }
+>foo13 : { (x: I<boolean, string, number, Date>): any; (x: <Z, A, B, C, D>(x: Z) => Z): any; }
 >x : I<boolean, string, number, Date>
 
 function foo13(x: typeof a); // ok
->foo13 : { (x: I<boolean, string, number, Date>): any; (x: typeof a): any; }
+>foo13 : { (x: I<boolean, string, number, Date>): any; (x: <Z, A, B, C, D>(x: Z) => Z): any; }
 >x : <Z, A, B, C, D>(x: Z) => Z
 >a : <Z, A, B, C, D>(x: Z) => Z
 
 function foo13(x: any) { }
->foo13 : { (x: I<boolean, string, number, Date>): any; (x: typeof a): any; }
+>foo13 : { (x: I<boolean, string, number, Date>): any; (x: <Z, A, B, C, D>(x: Z) => Z): any; }
 >x : any
 
 function foo14(x: I<boolean, string, number, Date>);
@@= skipped -39, +39 lines =@@
 >x : any
 
 function foo14b(x: typeof a);
->foo14b : { (x: typeof a): any; (x: I2): any; }
+>foo14b : { (x: <Z, A, B, C, D>(x: Z) => Z): any; (x: I2): any; }
 >x : <Z, A, B, C, D>(x: Z) => Z
 >a : <Z, A, B, C, D>(x: Z) => Z
 
 function foo14b(x: I2); // ok
->foo14b : { (x: typeof a): any; (x: I2): any; }
+>foo14b : { (x: <Z, A, B, C, D>(x: Z) => Z): any; (x: I2): any; }
 >x : I2
 
 function foo14b(x: any) { }
->foo14b : { (x: typeof a): any; (x: I2): any; }
+>foo14b : { (x: <Z, A, B, C, D>(x: Z) => Z): any; (x: I2): any; }
 >x : any
 
 function foo15(x: I<boolean, string, number, Date>);
