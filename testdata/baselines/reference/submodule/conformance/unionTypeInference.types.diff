--- old.unionTypeInference.types
+++ new.unionTypeInference.types
@@= skipped -213, +213 lines =@@
 >deepPromised : DeepPromised<T>
 
     for (const value of Object.values(deepPromisedWithIndexer)) {
->value : {} | ({ [containsPromises]?: true; } & {}) | Promise<{ [containsPromises]?: true; } & {}> | null | undefined
->Object.values(deepPromisedWithIndexer) : ({} | ({ [containsPromises]?: true; } & {}) | Promise<{ [containsPromises]?: true; } & {}> | null | undefined)[]
->Object.values : { <T_1>(o: { [s: string]: T_1; } | ArrayLike<T_1>): T_1[]; (o: {}): any[]; }
+>value : Promise<{ [containsPromises]?: true | undefined; } & {}> | {} | { [containsPromises]?: true | undefined; } & {} | null | undefined
+>Object.values(deepPromisedWithIndexer) : (Promise<{ [containsPromises]?: true | undefined; } & {}> | {} | { [containsPromises]?: true | undefined; } & {} | null | undefined)[]
+>Object.values : { <T>(o: ArrayLike<T> | { [s: string]: T; }): T[]; (o: {}): any[]; }
 >Object : ObjectConstructor
->values : { <T_1>(o: { [s: string]: T_1; } | ArrayLike<T_1>): T_1[]; (o: {}): any[]; }
+>values : { <T>(o: ArrayLike<T> | { [s: string]: T; }): T[]; (o: {}): any[]; }
 >deepPromisedWithIndexer : DeepPromised<{ [name: string]: {} | null | undefined; }>
 
         const awaitedValue = await value;
->awaitedValue : {} | ({ [containsPromises]?: true; } & {}) | null | undefined
->await value : {} | ({ [containsPromises]?: true; } & {}) | null | undefined
->value : {} | ({ [containsPromises]?: true; } & {}) | Promise<{ [containsPromises]?: true; } & {}> | null | undefined
+>awaitedValue : {} | { [containsPromises]?: true | undefined; } & {} | null | undefined
+>await value : {} | { [containsPromises]?: true | undefined; } & {} | null | undefined
+>value : Promise<{ [containsPromises]?: true | undefined; } & {}> | {} | { [containsPromises]?: true | undefined; } & {} | null | undefined
 
         if (awaitedValue)
->awaitedValue : {} | ({ [containsPromises]?: true; } & {}) | null | undefined
+>awaitedValue : {} | { [containsPromises]?: true | undefined; } & {} | null | undefined
 
             await fun(awaitedValue);
 >await fun(awaitedValue) : void
 >fun(awaitedValue) : Promise<void>
 >fun : <T>(deepPromised: DeepPromised<T>) => Promise<void>
->awaitedValue : {} | ({ [containsPromises]?: true; } & {})
+>awaitedValue : {} | { [containsPromises]?: true | undefined; } & {}
     }
 }
 
