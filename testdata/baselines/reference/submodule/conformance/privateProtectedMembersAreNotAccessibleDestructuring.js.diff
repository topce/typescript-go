--- old.privateProtectedMembersAreNotAccessibleDestructuring.js
+++ new.privateProtectedMembersAreNotAccessibleDestructuring.js
@@= skipped -26, +26 lines =@@
 
 
 //// [privateProtectedMembersAreNotAccessibleDestructuring.js]
-var __extends = (this && this.__extends) || (function () {
-    var extendStatics = function (d, b) {
-        extendStatics = Object.setPrototypeOf ||
-            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
-            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
-        return extendStatics(d, b);
-    };
-    return function (d, b) {
-        if (typeof b !== "function" && b !== null)
-            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
-        extendStatics(d, b);
-        function __() { this.constructor = d; }
-        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-    };
-})();
-var K = /** @class */ (function () {
-    function K() {
+class K {
+    priv;
+    prot;
+    privateMethod() { }
+    m() {
+        let { priv: a, prot: b } = this;
+        let { priv, prot } = new K();
     }
-    K.prototype.privateMethod = function () { };
-    K.prototype.m = function () {
-        var _a = this, a = _a.priv, b = _a.prot; // ok
-        var _b = new K(), priv = _b.priv, prot = _b.prot; // ok
-    };
-    return K;
-}());
-var C = /** @class */ (function (_super) {
-    __extends(C, _super);
-    function C() {
-        return _super !== null && _super.apply(this, arguments) || this;
+}
+class C extends K {
+    m2() {
+        let { priv: a } = this;
+        let { prot: b } = this;
     }
-    C.prototype.m2 = function () {
-        var a = this.priv; // error
-        var b = this.prot; // ok
-    };
-    return C;
-}(K));
-var k = new K();
-var priv = k.priv; // error
-var prot = k.prot; // error
-var privateMethod = k.privateMethod; // error
-var a = k.priv, b = k.prot, pm = k.privateMethod; // error
-function f(_a) {
-    var priv = _a.priv, prot = _a.prot, privateMethod = _a.privateMethod;
 }
+let k = new K();
+let { priv } = k;
+let { prot } = k;
+let { privateMethod } = k;
+let { priv: a, prot: b, privateMethod: pm } = k;
+function f({ priv, prot, privateMethod }) {
+}
