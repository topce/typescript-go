--- old.arbitraryModuleNamespaceIdentifiers_module(module=commonjs).js
+++ new.arbitraryModuleNamespaceIdentifiers_module(module=commonjs).js
@@= skipped -40, +40 lines =@@
 const arbitraryModuleNamespaceIdentifiers_module_1 = require("./arbitraryModuleNamespaceIdentifiers_module");
 if (arbitraryModuleNamespaceIdentifiers_module_1["<X>"] !== "someValue")
     throw "should be someValue";
-var arbitraryModuleNamespaceIdentifiers_module_2 = require("./arbitraryModuleNamespaceIdentifiers_module");
+const arbitraryModuleNamespaceIdentifiers_module_2 = require("./arbitraryModuleNamespaceIdentifiers_module");
 Object.defineProperty(exports, "<Y>", { enumerable: true, get: function () { return arbitraryModuleNamespaceIdentifiers_module_2["<X>"]; } });
 const arbitraryModuleNamespaceIdentifiers_module_3 = require("./arbitraryModuleNamespaceIdentifiers_module");
 if (arbitraryModuleNamespaceIdentifiers_module_3["<Y>"] !== "someValue")
@@= skipped -16, +16 lines =@@
 const importTest = "expect error about someType";
 const reimportTest = "expect error about someType";
 const importStarTestA = "expect error about otherType";
-
-
-//// [arbitraryModuleNamespaceIdentifiers_module.d.ts]
-declare const someValue = "someValue";
-type someType = "someType";
-export { someValue as "<X>" };
-export { "<X>" as "<Y>" } from "./arbitraryModuleNamespaceIdentifiers_module";
-export * as "<Z>" from "./arbitraryModuleNamespaceIdentifiers_module";
-export { type someType as "<A>" };
-export { type "<A>" as "<B>" } from "./arbitraryModuleNamespaceIdentifiers_module";
-export type * as "<C>" from "./arbitraryModuleNamespaceIdentifiers_module";
-export type otherType = "otherType";
