--- old.strictBindCallApply1.js
+++ new.strictBindCallApply1.js
@@= skipped -102, +102 lines =@@
 
 
 //// [strictBindCallApply1.js]
-"use strict";
-var f00 = foo.bind(undefined);
-var f01 = foo.bind(undefined, 10);
-var f02 = foo.bind(undefined, 10, "hello");
-var f03 = foo.bind(undefined, 10, 20); // Error
-var f04 = overloaded.bind(undefined); // typeof overloaded
-var f05 = generic.bind(undefined); // typeof generic
-var c00 = foo.call(undefined, 10, "hello");
-var c01 = foo.call(undefined, 10); // Error
-var c02 = foo.call(undefined, 10, 20); // Error
-var c03 = foo.call(undefined, 10, "hello", 30); // Error
-var a00 = foo.apply(undefined, [10, "hello"]);
-var a01 = foo.apply(undefined, [10]); // Error
-var a02 = foo.apply(undefined, [10, 20]); // Error
-var a03 = foo.apply(undefined, [10, "hello", 30]); // Error
-var C = /** @class */ (function () {
-    function C(a, b) {
-    }
-    C.prototype.foo = function (a, b) { return ""; };
-    C.prototype.overloaded = function (x) { return undefined; };
-    C.prototype.generic = function (x) { return x; };
-    return C;
-}());
-var f10 = c.foo.bind(c);
-var f11 = c.foo.bind(c, 10);
-var f12 = c.foo.bind(c, 10, "hello");
-var f13 = c.foo.bind(c, 10, 20); // Error
-var f14 = c.foo.bind(undefined); // Error
-var f15 = c.overloaded.bind(c); // typeof C.prototype.overloaded
-var f16 = c.generic.bind(c); // typeof C.prototype.generic
-var c10 = c.foo.call(c, 10, "hello");
-var c11 = c.foo.call(c, 10); // Error
-var c12 = c.foo.call(c, 10, 20); // Error
-var c13 = c.foo.call(c, 10, "hello", 30); // Error
-var c14 = c.foo.call(undefined, 10, "hello"); // Error
-var a10 = c.foo.apply(c, [10, "hello"]);
-var a11 = c.foo.apply(c, [10]); // Error
-var a12 = c.foo.apply(c, [10, 20]); // Error
-var a13 = c.foo.apply(c, [10, "hello", 30]); // Error
-var a14 = c.foo.apply(undefined, [10, "hello"]); // Error
-var f20 = C.bind(undefined);
-var f21 = C.bind(undefined, 10);
-var f22 = C.bind(undefined, 10, "hello");
-var f23 = C.bind(undefined, 10, 20); // Error
+let f00 = foo.bind(undefined);
+let f01 = foo.bind(undefined, 10);
+let f02 = foo.bind(undefined, 10, "hello");
+let f03 = foo.bind(undefined, 10, 20);
+let f04 = overloaded.bind(undefined);
+let f05 = generic.bind(undefined);
+let c00 = foo.call(undefined, 10, "hello");
+let c01 = foo.call(undefined, 10);
+let c02 = foo.call(undefined, 10, 20);
+let c03 = foo.call(undefined, 10, "hello", 30);
+let a00 = foo.apply(undefined, [10, "hello"]);
+let a01 = foo.apply(undefined, [10]);
+let a02 = foo.apply(undefined, [10, 20]);
+let a03 = foo.apply(undefined, [10, "hello", 30]);
+class C {
+    constructor(a, b) { }
+    foo(a, b) { return ""; }
+    overloaded(x) { return undefined; }
+    generic(x) { return x; }
+}
+let f10 = c.foo.bind(c);
+let f11 = c.foo.bind(c, 10);
+let f12 = c.foo.bind(c, 10, "hello");
+let f13 = c.foo.bind(c, 10, 20);
+let f14 = c.foo.bind(undefined);
+let f15 = c.overloaded.bind(c);
+let f16 = c.generic.bind(c);
+let c10 = c.foo.call(c, 10, "hello");
+let c11 = c.foo.call(c, 10);
+let c12 = c.foo.call(c, 10, 20);
+let c13 = c.foo.call(c, 10, "hello", 30);
+let c14 = c.foo.call(undefined, 10, "hello");
+let a10 = c.foo.apply(c, [10, "hello"]);
+let a11 = c.foo.apply(c, [10]);
+let a12 = c.foo.apply(c, [10, 20]);
+let a13 = c.foo.apply(c, [10, "hello", 30]);
+let a14 = c.foo.apply(undefined, [10, "hello"]);
+let f20 = C.bind(undefined);
+let f21 = C.bind(undefined, 10);
+let f22 = C.bind(undefined, 10, "hello");
+let f23 = C.bind(undefined, 10, 20);
 C.call(c, 10, "hello");
-C.call(c, 10); // Error
-C.call(c, 10, 20); // Error
-C.call(c, 10, "hello", 30); // Error
+C.call(c, 10);
+C.call(c, 10, 20);
+C.call(c, 10, "hello", 30);
 C.apply(c, [10, "hello"]);
-C.apply(c, [10]); // Error
-C.apply(c, [10, 20]); // Error
-C.apply(c, [10, "hello", 30]); // Error
+C.apply(c, [10]);
+C.apply(c, [10, 20]);
+C.apply(c, [10, "hello", 30]);
 function bar(callback) {
     callback.bind(1);
-    callback.bind(2); // Error
+    callback.bind(2);
 }
 function baz(callback) {
     callback.bind(1);
-    callback.bind(2); // Error
+    callback.bind(2);
 }
-// Repro from #32964
-var Foo = /** @class */ (function () {
-    function Foo() {
+class Foo {
+    constructor() {
         this.fn.bind(this);
     }
-    Foo.prototype.fn = function () {
-        var args = [];
-        for (var _i = 0; _i < arguments.length; _i++) {
-            args[_i] = arguments[_i];
-        }
-    };
-    return Foo;
-}());
-var Bar = /** @class */ (function () {
-    function Bar() {
+    fn(...args) { }
+}
+class Bar {
+    constructor() {
         this.fn.bind(this);
     }
-    Bar.prototype.fn = function () {
-        var args = [];
-        for (var _i = 0; _i < arguments.length; _i++) {
-            args[_i] = arguments[_i];
-        }
-    };
-    return Bar;
-}());
+    fn(...args) { }
+}
