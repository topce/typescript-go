--- old.incrementOperatorWithAnyOtherTypeInvalidOperations.js
+++ new.incrementOperatorWithAnyOtherTypeInvalidOperations.js
@@= skipped -71, +71 lines =@@
 ++ANY2[0]++;
 
 //// [incrementOperatorWithAnyOtherTypeInvalidOperations.js]
-// ++ operator on any type
 var ANY1;
 var ANY2 = [1, 2];
 var obj;
-var obj1 = { x: "", y: function () { } };
+var obj1 = { x: "", y: () => { } };
 function foo() {
     var a;
     return a;
 }
-var A = /** @class */ (function () {
-    function A() {
-    }
-    A.foo = function () {
+class A {
+    a;
+    static foo() {
         var a;
         return a;
-    };
-    return A;
-}());
+    }
+}
 var M;
 (function (M) {
 })(M || (M = {}));
 var objA = new A();
-// any type var
 var ResultIsNumber1 = ++ANY2;
 var ResultIsNumber2 = ++A;
 var ResultIsNumber3 = ++M;
@@= skipped -33, +29 lines =@@
 var ResultIsNumber8 = M++;
 var ResultIsNumber9 = obj++;
 var ResultIsNumber10 = obj1++;
-// any type literal
 var ResultIsNumber11 = ++{};
 var ResultIsNumber12 = ++null;
 var ResultIsNumber13 = ++undefined;
 var ResultIsNumber14 = null++;
 var ResultIsNumber15 = {}++;
 var ResultIsNumber16 = undefined++;
-// any type expressions
 var ResultIsNumber17 = ++foo();
 var ResultIsNumber18 = ++A.foo();
 var ResultIsNumber19 = ++(null + undefined);
@@= skipped -22, +20 lines =@@
 var ResultIsNumber28 = (undefined + undefined)++;
 var ResultIsNumber29 = obj1.x++;
 var ResultIsNumber30 = obj1.y++;
-// miss assignment operators
 ++ANY2;
 ANY2++;
 ++ANY1;
