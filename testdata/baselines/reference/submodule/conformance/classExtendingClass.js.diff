--- old.classExtendingClass.js
+++ new.classExtendingClass.js
@@= skipped -33, +33 lines =@@
 var r8 = D2.other(1);
 
 //// [classExtendingClass.js]
-var __extends = (this && this.__extends) || (function () {
-    var extendStatics = function (d, b) {
-        extendStatics = Object.setPrototypeOf ||
-            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
-            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
-        return extendStatics(d, b);
-    };
-    return function (d, b) {
-        if (typeof b !== "function" && b !== null)
-            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
-        extendStatics(d, b);
-        function __() { this.constructor = d; }
-        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-    };
-})();
-var C = /** @class */ (function () {
-    function C() {
-    }
-    C.prototype.thing = function () { };
-    C.other = function () { };
-    return C;
-}());
-var D = /** @class */ (function (_super) {
-    __extends(D, _super);
-    function D() {
-        return _super !== null && _super.apply(this, arguments) || this;
-    }
-    return D;
-}(C));
+class C {
+    foo;
+    thing() { }
+    static other() { }
+}
+class D extends C {
+    bar;
+}
 var d;
 var r = d.foo;
 var r2 = d.bar;
 var r3 = d.thing();
 var r4 = D.other();
-var C2 = /** @class */ (function () {
-    function C2() {
-    }
-    C2.prototype.thing = function (x) { };
-    C2.other = function (x) { };
-    return C2;
-}());
-var D2 = /** @class */ (function (_super) {
-    __extends(D2, _super);
-    function D2() {
-        return _super !== null && _super.apply(this, arguments) || this;
-    }
-    return D2;
-}(C2));
+class C2 {
+    foo;
+    thing(x) { }
+    static other(x) { }
+}
+class D2 extends C2 {
+    bar;
+}
 var d2;
 var r5 = d2.foo;
 var r6 = d2.bar;
