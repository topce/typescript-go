--- old.objectTypesIdentityWithGenericConstructSignaturesDifferingByConstraints3.types
+++ new.objectTypesIdentityWithGenericConstructSignaturesDifferingByConstraints3.types
@@= skipped -66, +66 lines =@@
 >y : U
 
 var b = { new<T extends U, U extends Two>(x: T, y: U) { return ''; } }; // not a construct signature, function called new
->b : { "new"<T extends U, U extends Two>(x: T, y: U): string; }
->{ new<T extends U, U extends Two>(x: T, y: U) { return ''; } } : { "new"<T extends U, U extends Two>(x: T, y: U): string; }
+>b : { new: <T extends U, U extends Two>(x: T, y: U) => string; }
+>{ new<T extends U, U extends Two>(x: T, y: U) { return ''; } } : { new: <T extends U, U extends Two>(x: T, y: U) => string; }
 >new : <T extends U, U extends Two>(x: T, y: U) => string
 >x : T
 >y : U
@@= skipped -44, +44 lines =@@
 >x : any
 
 function foo3(x: typeof a);
->foo3 : { (x: typeof a): any; (x: typeof a): any; }
+>foo3 : { (x: new <T extends U, U extends One>(x: T, y: U) => string): any; (x: new <T extends U, U extends One>(x: T, y: U) => string): any; }
 >x : new <T extends U, U extends One>(x: T, y: U) => string
 >a : new <T extends U, U extends One>(x: T, y: U) => string
 
 function foo3(x: typeof a); // error
->foo3 : { (x: typeof a): any; (x: typeof a): any; }
+>foo3 : { (x: new <T extends U, U extends One>(x: T, y: U) => string): any; (x: new <T extends U, U extends One>(x: T, y: U) => string): any; }
 >x : new <T extends U, U extends One>(x: T, y: U) => string
 >a : new <T extends U, U extends One>(x: T, y: U) => string
 
 function foo3(x: any) { }
->foo3 : { (x: typeof a): any; (x: typeof a): any; }
+>foo3 : { (x: new <T extends U, U extends One>(x: T, y: U) => string): any; (x: new <T extends U, U extends One>(x: T, y: U) => string): any; }
 >x : any
 
 function foo4(x: typeof b);
->foo4 : { (x: typeof b): any; (x: typeof b): any; }
->x : { "new"<T extends U, U extends Two>(x: T, y: U): string; }
->b : { "new"<T extends U, U extends Two>(x: T, y: U): string; }
+>foo4 : { (x: { new: <T extends U, U extends Two>(x: T, y: U) => string; }): any; (x: { new: <T extends U, U extends Two>(x: T, y: U) => string; }): any; }
+>x : { new: <T extends U, U extends Two>(x: T, y: U) => string; }
+>b : { new: <T extends U, U extends Two>(x: T, y: U) => string; }
 
 function foo4(x: typeof b); // error
->foo4 : { (x: typeof b): any; (x: typeof b): any; }
->x : { "new"<T extends U, U extends Two>(x: T, y: U): string; }
->b : { "new"<T extends U, U extends Two>(x: T, y: U): string; }
+>foo4 : { (x: { new: <T extends U, U extends Two>(x: T, y: U) => string; }): any; (x: { new: <T extends U, U extends Two>(x: T, y: U) => string; }): any; }
+>x : { new: <T extends U, U extends Two>(x: T, y: U) => string; }
+>b : { new: <T extends U, U extends Two>(x: T, y: U) => string; }
 
 function foo4(x: any) { }
->foo4 : { (x: typeof b): any; (x: typeof b): any; }
+>foo4 : { (x: { new: <T extends U, U extends Two>(x: T, y: U) => string; }): any; (x: { new: <T extends U, U extends Two>(x: T, y: U) => string; }): any; }
 >x : any
 
 function foo5c(x: C<Three, Three>);
@@= skipped -76, +76 lines =@@
 >x : any
 
 function foo10(x: B<Two, Two>);
->foo10 : { (x: B<Two, Two>): any; (x: typeof a): any; }
+>foo10 : { (x: B<Two, Two>): any; (x: new <T extends U, U extends One>(x: T, y: U) => string): any; }
 >x : B<Two, Two>
 
 function foo10(x: typeof a); // ok
->foo10 : { (x: B<Two, Two>): any; (x: typeof a): any; }
+>foo10 : { (x: B<Two, Two>): any; (x: new <T extends U, U extends One>(x: T, y: U) => string): any; }
 >x : new <T extends U, U extends One>(x: T, y: U) => string
 >a : new <T extends U, U extends One>(x: T, y: U) => string
 
 function foo10(x: any) { }
->foo10 : { (x: B<Two, Two>): any; (x: typeof a): any; }
+>foo10 : { (x: B<Two, Two>): any; (x: new <T extends U, U extends One>(x: T, y: U) => string): any; }
 >x : any
 
 function foo11(x: B<Two, Two>);
->foo11 : { (x: B<Two, Two>): any; (x: typeof b): any; }
+>foo11 : { (x: B<Two, Two>): any; (x: { new: <T extends U, U extends Two>(x: T, y: U) => string; }): any; }
 >x : B<Two, Two>
 
 function foo11(x: typeof b); // ok
->foo11 : { (x: B<Two, Two>): any; (x: typeof b): any; }
->x : { "new"<T extends U, U extends Two>(x: T, y: U): string; }
->b : { "new"<T extends U, U extends Two>(x: T, y: U): string; }
+>foo11 : { (x: B<Two, Two>): any; (x: { new: <T extends U, U extends Two>(x: T, y: U) => string; }): any; }
+>x : { new: <T extends U, U extends Two>(x: T, y: U) => string; }
+>b : { new: <T extends U, U extends Two>(x: T, y: U) => string; }
 
 function foo11(x: any) { }
->foo11 : { (x: B<Two, Two>): any; (x: typeof b): any; }
+>foo11 : { (x: B<Two, Two>): any; (x: { new: <T extends U, U extends Two>(x: T, y: U) => string; }): any; }
 >x : any
 
 function foo12(x: I<Five<string>, Five<string>>);
@@= skipped -50, +50 lines =@@
 >x : any
 
 function foo13(x: I<Five<string>, Five<string>>);
->foo13 : { (x: I<Five<string>, Five<string>>): any; (x: typeof a): any; }
+>foo13 : { (x: I<Five<string>, Five<string>>): any; (x: new <T extends U, U extends One>(x: T, y: U) => string): any; }
 >x : I<Five<string>, Five<string>>
 
 function foo13(x: typeof a); // ok
->foo13 : { (x: I<Five<string>, Five<string>>): any; (x: typeof a): any; }
+>foo13 : { (x: I<Five<string>, Five<string>>): any; (x: new <T extends U, U extends One>(x: T, y: U) => string): any; }
 >x : new <T extends U, U extends One>(x: T, y: U) => string
 >a : new <T extends U, U extends One>(x: T, y: U) => string
 
 function foo13(x: any) { }
->foo13 : { (x: I<Five<string>, Five<string>>): any; (x: typeof a): any; }
+>foo13 : { (x: I<Five<string>, Five<string>>): any; (x: new <T extends U, U extends One>(x: T, y: U) => string): any; }
 >x : any
 
 function foo14(x: I<Five<string>, Five<string>>);
->foo14 : { (x: I<Five<string>, Five<string>>): any; (x: typeof b): any; }
+>foo14 : { (x: I<Five<string>, Five<string>>): any; (x: { new: <T extends U, U extends Two>(x: T, y: U) => string; }): any; }
 >x : I<Five<string>, Five<string>>
 
 function foo14(x: typeof b); // ok
->foo14 : { (x: I<Five<string>, Five<string>>): any; (x: typeof b): any; }
->x : { "new"<T extends U, U extends Two>(x: T, y: U): string; }
->b : { "new"<T extends U, U extends Two>(x: T, y: U): string; }
+>foo14 : { (x: I<Five<string>, Five<string>>): any; (x: { new: <T extends U, U extends Two>(x: T, y: U) => string; }): any; }
+>x : { new: <T extends U, U extends Two>(x: T, y: U) => string; }
+>b : { new: <T extends U, U extends Two>(x: T, y: U) => string; }
 
 function foo14(x: any) { }
->foo14 : { (x: I<Five<string>, Five<string>>): any; (x: typeof b): any; }
+>foo14 : { (x: I<Five<string>, Five<string>>): any; (x: { new: <T extends U, U extends Two>(x: T, y: U) => string; }): any; }
 >x : any
 
