--- old.apparentTypeSubtyping.js
+++ new.apparentTypeSubtyping.js
@@= skipped -25, +25 lines =@@
 //// [apparentTypeSubtyping.js]
 // subtype checks use the apparent type of the target type
 // S is a subtype of a type T, and T is a supertype of S, if one of the following is true, where S' denotes the apparent type (section 3.8.1) of S:
-var __extends = (this && this.__extends) || (function () {
-    var extendStatics = function (d, b) {
-        extendStatics = Object.setPrototypeOf ||
-            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
-            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
-        return extendStatics(d, b);
-    };
-    return function (d, b) {
-        if (typeof b !== "function" && b !== null)
-            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
-        extendStatics(d, b);
-        function __() { this.constructor = d; }
-        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-    };
-})();
-var Base = /** @class */ (function () {
-    function Base() {
-    }
-    return Base;
-}());
+class Base {
+    x;
+}
 // is String (S) a subtype of U extends String (T)? Would only be true if we used the apparent type of U (T)
-var Derived = /** @class */ (function (_super) {
-    __extends(Derived, _super);
-    function Derived() {
-        return _super !== null && _super.apply(this, arguments) || this;
-    }
-    return Derived;
-}(Base));
-var Base2 = /** @class */ (function () {
-    function Base2() {
-    }
-    return Base2;
-}());
+class Derived extends Base {
+    x;
+}
+class Base2 {
+    x;
+    static s;
+}
 // is U extends String (S) a subtype of String (T)? Apparent type of U is String so it succeeds
-var Derived2 = /** @class */ (function (_super) {
-    __extends(Derived2, _super);
-    function Derived2() {
-        return _super !== null && _super.apply(this, arguments) || this;
-    }
-    return Derived2;
-}(Base2));
+class Derived2 extends Base2 {
+    x;
+}
