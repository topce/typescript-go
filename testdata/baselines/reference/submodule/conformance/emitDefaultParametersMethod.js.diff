--- old.emitDefaultParametersMethod.js
+++ new.emitDefaultParametersMethod.js
@@= skipped -19, +19 lines =@@
 
 
 //// [emitDefaultParametersMethod.js]
-var C = /** @class */ (function () {
-    function C(t, z, x, y) {
-        if (y === void 0) { y = "hello"; }
-    }
-    C.prototype.foo = function (x, t) {
-        if (t === void 0) { t = false; }
-    };
-    C.prototype.foo1 = function (x, t) {
-        if (t === void 0) { t = false; }
-        var rest = [];
-        for (var _i = 2; _i < arguments.length; _i++) {
-            rest[_i - 2] = arguments[_i];
-        }
-    };
-    C.prototype.bar = function (t) {
-        if (t === void 0) { t = false; }
-    };
-    C.prototype.boo = function (t) {
-        if (t === void 0) { t = false; }
-        var rest = [];
-        for (var _i = 1; _i < arguments.length; _i++) {
-            rest[_i - 1] = arguments[_i];
-        }
-    };
-    return C;
-}());
-var D = /** @class */ (function () {
-    function D(y) {
-        if (y === void 0) { y = "hello"; }
-    }
-    return D;
-}());
-var E = /** @class */ (function () {
-    function E(y) {
-        if (y === void 0) { y = "hello"; }
-        var rest = [];
-        for (var _i = 1; _i < arguments.length; _i++) {
-            rest[_i - 1] = arguments[_i];
-        }
-    }
-    return E;
-}());
+class C {
+    constructor(t, z, x, y = "hello") { }
+    foo(x, t = false) { }
+    foo1(x, t = false, ...rest) { }
+    bar(t = false) { }
+    boo(t = false, ...rest) { }
+}
+class D {
+    constructor(y = "hello") { }
+}
+class E {
+    constructor(y = "hello", ...rest) { }
+}
