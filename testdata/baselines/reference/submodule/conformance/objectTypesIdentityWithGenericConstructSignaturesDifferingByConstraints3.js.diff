--- old.objectTypesIdentityWithGenericConstructSignaturesDifferingByConstraints3.js
+++ new.objectTypesIdentityWithGenericConstructSignaturesDifferingByConstraints3.js
@@= skipped -97, +97 lines =@@
 function foo14(x: any) { }
 
 //// [objectTypesIdentityWithGenericConstructSignaturesDifferingByConstraints3.js]
-// Two call or construct signatures are considered identical when they have the same number of type parameters and, considering those 
-// parameters pairwise identical, have identical type parameter constraints, identical number of parameters with identical kind(required, 
-// optional or rest) and types, and identical return types.
-var One = /** @class */ (function () {
-    function One() {
-    }
-    return One;
-}());
-var Two = /** @class */ (function () {
-    function Two() {
-    }
-    return Two;
-}());
-var B = /** @class */ (function () {
-    function B(x, y) {
-        return null;
-    }
-    return B;
-}());
-var C = /** @class */ (function () {
-    function C(x, y) {
-        return null;
-    }
-    return C;
-}());
-var D = /** @class */ (function () {
-    function D(x, y) {
-        return null;
-    }
-    return D;
-}());
+class One {
+    foo;
+}
+class Two {
+    foo;
+}
+class B {
+    constructor(x, y) { return null; }
+}
+class C {
+    constructor(x, y) { return null; }
+}
+class D {
+    constructor(x, y) { return null; }
+}
 var a;
-var b = { new: function (x, y) { return ''; } }; // not a construct signature, function called new
+var b = { new(x, y) { return ''; } };
 function foo1b(x) { }
 function foo1c(x) { }
 function foo2(x) { }
