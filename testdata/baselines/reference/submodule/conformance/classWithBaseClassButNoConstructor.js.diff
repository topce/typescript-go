--- old.classWithBaseClassButNoConstructor.js
+++ new.classWithBaseClassButNoConstructor.js
@@= skipped -42, +42 lines =@@
 var d6 = new D(1); // ok
 
 //// [classWithBaseClassButNoConstructor.js]
-var __extends = (this && this.__extends) || (function () {
-    var extendStatics = function (d, b) {
-        extendStatics = Object.setPrototypeOf ||
-            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
-            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
-        return extendStatics(d, b);
-    };
-    return function (d, b) {
-        if (typeof b !== "function" && b !== null)
-            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
-        extendStatics(d, b);
-        function __() { this.constructor = d; }
-        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-    };
-})();
-var Base = /** @class */ (function () {
-    function Base(x) {
-    }
-    return Base;
-}());
-var C = /** @class */ (function (_super) {
-    __extends(C, _super);
-    function C() {
-        return _super !== null && _super.apply(this, arguments) || this;
-    }
-    return C;
-}(Base));
+class Base {
+    constructor(x) { }
+}
+class C extends Base {
+    foo;
+}
 var r = C;
 var c = new C(); // error
 var c2 = new C(1); // ok
-var Base2 = /** @class */ (function () {
-    function Base2(x) {
-    }
-    return Base2;
-}());
-var D = /** @class */ (function (_super) {
-    __extends(D, _super);
-    function D() {
-        return _super !== null && _super.apply(this, arguments) || this;
-    }
-    return D;
-}(Base2));
+class Base2 {
+    constructor(x) { }
+}
+class D extends Base2 {
+    foo;
+}
 var r2 = D;
 var d = new D(); // error
 var d2 = new D(1); // ok
 // specialized base class
-var D2 = /** @class */ (function (_super) {
-    __extends(D2, _super);
-    function D2() {
-        return _super !== null && _super.apply(this, arguments) || this;
-    }
-    return D2;
-}(Base2));
+class D2 extends Base2 {
+    foo;
+}
 var r3 = D2;
 var d3 = new D(); // error
 var d4 = new D(1); // ok
-var D3 = /** @class */ (function (_super) {
-    __extends(D3, _super);
-    function D3() {
-        return _super !== null && _super.apply(this, arguments) || this;
-    }
-    return D3;
-}(Base2));
+class D3 extends Base2 {
+    foo;
+}
 var r4 = D3;
 var d5 = new D(); // error
 var d6 = new D(1); // ok
