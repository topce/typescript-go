--- old.parserRealSource4.js
+++ new.parserRealSource4.js
@@= skipped -296, +296 lines =@@
 
 }
 
+//// [typescript.js]
 //// [parserRealSource4.js]
-// Copyright (c) Microsoft. All rights reserved. Licensed under the Apache License, Version 2.0. 
-// See LICENSE.txt in the project root for complete license information.
-///<reference path='typescript.ts' />
 var TypeScript;
 (function (TypeScript) {
-    var BlockIntrinsics = /** @class */ (function () {
-        function BlockIntrinsics() {
-            this.prototype = undefined;
-            this.toString = undefined;
-            this.toLocaleString = undefined;
-            this.valueOf = undefined;
-            this.hasOwnProperty = undefined;
-            this.propertyIsEnumerable = undefined;
-            this.isPrototypeOf = undefined;
-            // initialize the 'constructor' field
+    class BlockIntrinsics {
+        prototype = undefined;
+        toString = undefined;
+        toLocaleString = undefined;
+        valueOf = undefined;
+        hasOwnProperty = undefined;
+        propertyIsEnumerable = undefined;
+        isPrototypeOf = undefined;
+        constructor() {
             this["constructor"] = undefined;
         }
-        return BlockIntrinsics;
-    }());
+    }
     TypeScript.BlockIntrinsics = BlockIntrinsics;
-    var StringHashTable = /** @class */ (function () {
-        function StringHashTable() {
-            this.itemCount = 0;
-            this.table = new BlockIntrinsics();
-        }
-        StringHashTable.prototype.getAllKeys = function () {
+    class StringHashTable {
+        itemCount = 0;
+        table = new BlockIntrinsics();
+        getAllKeys() {
             var result = [];
             for (var k in this.table) {
                 if (this.table[k] != undefined) {
@@= skipped -34, +28 lines =@@
                 }
             }
             return result;
-        };
-        StringHashTable.prototype.add = function (key, data) {
+        }
+        add(key, data) {
             if (this.table[key] != undefined) {
                 return false;
             }
             this.table[key] = data;
             this.itemCount++;
             return true;
-        };
-        StringHashTable.prototype.addOrUpdate = function (key, data) {
+        }
+        addOrUpdate(key, data) {
             if (this.table[key] != undefined) {
                 this.table[key] = data;
                 return false;
@@= skipped -17, +17 lines =@@
             this.table[key] = data;
             this.itemCount++;
             return true;
-        };
-        StringHashTable.prototype.map = function (fn, context) {
+        }
+        map(fn, context) {
             for (var k in this.table) {
                 var data = this.table[k];
                 if (data != undefined) {
                     fn(k, this.table[k], context);
                 }
             }
-        };
-        StringHashTable.prototype.every = function (fn, context) {
+        }
+        every(fn, context) {
             for (var k in this.table) {
                 var data = this.table[k];
                 if (data != undefined) {
@@= skipped -19, +19 lines =@@
                 }
             }
             return true;
-        };
-        StringHashTable.prototype.some = function (fn, context) {
+        }
+        some(fn, context) {
             for (var k in this.table) {
                 var data = this.table[k];
                 if (data != undefined) {
@@= skipped -11, +11 lines =@@
                 }
             }
             return false;
-        };
-        StringHashTable.prototype.count = function () { return this.itemCount; };
-        StringHashTable.prototype.lookup = function (key) {
+        }
+        count() { return this.itemCount; }
+        lookup(key) {
             var data = this.table[key];
             if (data != undefined) {
                 return data;
@@= skipped -10, +10 lines =@@
             else {
                 return (null);
             }
-        };
-        return StringHashTable;
-    }());
+        }
+    }
     TypeScript.StringHashTable = StringHashTable;
-    // The resident table is expected to reference the same table object, whereas the 
-    // transientTable may reference different objects over time
-    // REVIEW:  WARNING:  For performance reasons, neither the primary nor secondary table may be null
-    var DualStringHashTable = /** @class */ (function () {
-        function DualStringHashTable(primaryTable, secondaryTable) {
+    class DualStringHashTable {
+        primaryTable;
+        secondaryTable;
+        insertPrimary = true;
+        constructor(primaryTable, secondaryTable) {
             this.primaryTable = primaryTable;
             this.secondaryTable = secondaryTable;
-            this.insertPrimary = true;
         }
-        DualStringHashTable.prototype.getAllKeys = function () {
+        getAllKeys() {
             return this.primaryTable.getAllKeys().concat(this.secondaryTable.getAllKeys());
-        };
-        DualStringHashTable.prototype.add = function (key, data) {
+        }
+        add(key, data) {
             if (this.insertPrimary) {
                 return this.primaryTable.add(key, data);
             }
             else {
                 return this.secondaryTable.add(key, data);
             }
-        };
-        DualStringHashTable.prototype.addOrUpdate = function (key, data) {
+        }
+        addOrUpdate(key, data) {
             if (this.insertPrimary) {
                 return this.primaryTable.addOrUpdate(key, data);
             }
             else {
                 return this.secondaryTable.addOrUpdate(key, data);
             }
-        };
-        DualStringHashTable.prototype.map = function (fn, context) {
+        }
+        map(fn, context) {
             this.primaryTable.map(fn, context);
             this.secondaryTable.map(fn, context);
-        };
-        DualStringHashTable.prototype.every = function (fn, context) {
+        }
+        every(fn, context) {
             return this.primaryTable.every(fn, context) && this.secondaryTable.every(fn, context);
-        };
-        DualStringHashTable.prototype.some = function (fn, context) {
+        }
+        some(fn, context) {
             return this.primaryTable.some(fn, context) || this.secondaryTable.some(fn, context);
-        };
-        DualStringHashTable.prototype.count = function () {
+        }
+        count() {
             return this.primaryTable.count() + this.secondaryTable.count();
-        };
-        DualStringHashTable.prototype.lookup = function (key) {
+        }
+        lookup(key) {
             var data = this.primaryTable.lookup(key);
             if (data != undefined) {
                 return data;
@@= skipped -53, +51 lines =@@
             else {
                 return this.secondaryTable.lookup(key);
             }
-        };
-        return DualStringHashTable;
-    }());
+        }
+    }
     TypeScript.DualStringHashTable = DualStringHashTable;
     function numberHashFn(key) {
-        var c2 = 0x27d4eb2d; // a prime or an odd constant
+        var c2 = 0x27d4eb2d;
         key = (key ^ 61) ^ (key >>> 16);
         key = key + (key << 3);
         key = key ^ (key >>> 4);
@@= skipped -18, +17 lines =@@
         return key2 ^ ((key1 >> 5) + key1);
     }
     TypeScript.combineHashes = combineHashes;
-    var HashEntry = /** @class */ (function () {
-        function HashEntry(key, data) {
+    class HashEntry {
+        key;
+        data;
+        next;
+        constructor(key, data) {
             this.key = key;
             this.data = data;
         }
-        return HashEntry;
-    }());
+    }
     TypeScript.HashEntry = HashEntry;
-    var HashTable = /** @class */ (function () {
-        function HashTable(size, hashFn, equalsFn) {
+    class HashTable {
+        size;
+        hashFn;
+        equalsFn;
+        itemCount = 0;
+        table = new HashEntry[];
+        constructor(size, hashFn, equalsFn) {
             this.size = size;
             this.hashFn = hashFn;
             this.equalsFn = equalsFn;
-            this.itemCount = 0;
-            this.table = new HashEntry[];
             for (var i = 0; i < this.size; i++) {
                 this.table[i] = null;
             }
         }
-        HashTable.prototype.add = function (key, data) {
+        add(key, data) {
             var current;
             var entry = new HashEntry(key, data);
             var val = this.hashFn(key);
@@= skipped -33, +38 lines =@@
             this.table[val] = entry;
             this.itemCount++;
             return true;
-        };
-        HashTable.prototype.remove = function (key) {
+        }
+        remove(key) {
             var current;
             var val = this.hashFn(key);
             val = val % this.size;
@@= skipped -22, +22 lines =@@
                 prevEntry = current;
             }
             return result;
-        };
-        HashTable.prototype.count = function () { return this.itemCount; };
-        HashTable.prototype.lookup = function (key) {
+        }
+        count() { return this.itemCount; }
+        lookup(key) {
             var current;
             var val = this.hashFn(key);
             val = val % this.size;
@@= skipped -12, +12 lines =@@
                 }
             }
             return (null);
-        };
-        return HashTable;
-    }());
-    TypeScript.HashTable = HashTable;
-    // Simple Hash table with list of keys and values matching each other at the given index
-    var SimpleHashTable = /** @class */ (function () {
-        function SimpleHashTable() {
-            this.keys = [];
-            this.values = [];
         }
-        SimpleHashTable.prototype.lookup = function (key, findValue) {
+    }
+    TypeScript.HashTable = HashTable;
+    class SimpleHashTable {
+        keys = [];
+        values = [];
+        lookup(key, findValue) {
             var searchArray = this.keys;
             if (findValue) {
                 searchArray = this.values;
@@= skipped -24, +20 lines =@@
                 }
             }
             return null;
-        };
-        SimpleHashTable.prototype.add = function (key, data) {
+        }
+        add(key, data) {
             var lookupData = this.lookup(key);
             if (lookupData) {
                 return false;
@@= skipped -9, +9 lines =@@
             this.keys[this.keys.length] = key;
             this.values[this.values.length] = data;
             return true;
-        };
-        return SimpleHashTable;
-    }());
+        }
+    }
     TypeScript.SimpleHashTable = SimpleHashTable;
 })(TypeScript || (TypeScript = {}));
