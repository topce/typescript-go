//// [tests/cases/conformance/jsx/tsxStatelessFunctionComponentsWithTypeArguments2.tsx] ////

=== file.tsx ===
import React = require('react')
>React : any

declare function ComponentSpecific1<U>(l: {prop: U, "ignore-prop": string}): JSX.Element;
>ComponentSpecific1 : <U>(l: { prop: U; "ignore-prop": string; }) => Element
>l : { prop: U; "ignore-prop": string; }
>prop : U
>"ignore-prop" : string
>JSX : any

declare function ComponentSpecific2<U>(l: {prop: U}): JSX.Element;
>ComponentSpecific2 : <U>(l: { prop: U; }) => Element
>l : { prop: U; }
>prop : U
>JSX : any

// Error
function Bar<T extends {prop: number}>(arg: T) {
>Bar : <T extends { prop: number; }>(arg: T) => void
>prop : number
>arg : T

    let a1 = <ComponentSpecific1 {...arg} ignore-prop={10} />;
>a1 : any
><ComponentSpecific1 {...arg} ignore-prop={10} /> : any
>ComponentSpecific1 : <U>(l: { prop: U; "ignore-prop": string; }) => Element
>arg : T
>ignore-prop : any
>10 : 10
 }

// Error
function Baz<T>(arg: T) {
>Baz : <T>(arg: T) => void
>arg : T

    let a0 = <ComponentSpecific1 {...arg} />
>a0 : any
><ComponentSpecific1 {...arg} /> : any
>ComponentSpecific1 : <U>(l: { prop: U; "ignore-prop": string; }) => Element
>arg : T
}

declare function Link<U>(l: {func: (arg: U)=>void}): JSX.Element;
>Link : <U>(l: { func: (arg: U) => void; }) => Element
>l : { func: (arg: U) => void; }
>func : (arg: U) => void
>arg : U
>JSX : any

// Error
function createLink(func: (a: number, b: string)=>void) {
>createLink : (func: (a: number, b: string) => void) => void
>func : (a: number, b: string) => void
>a : number
>b : string

    let o = <Link func={func} />
>o : any
><Link func={func} /> : any
>Link : <U>(l: { func: (arg: U) => void; }) => Element
>func : any
>func : (a: number, b: string) => void
}

interface InferParamProp<T> {
    values: Array<T>;
>values : Array<T>

    selectHandler: (selectedVal: T) => void;
>selectHandler : (selectedVal: T) => void
>selectedVal : T
}

declare function InferParamComponent<T>(attr: InferParamProp<T>): JSX.Element;
>InferParamComponent : <T>(attr: InferParamProp<T>) => Element
>attr : InferParamProp<T>
>JSX : any

// Error
let i = <InferParamComponent values={[1, 2, 3, 4]} selectHandler={(val: string) => { }} />;
>i : any
><InferParamComponent values={[1, 2, 3, 4]} selectHandler={(val: string) => { }} /> : any
>InferParamComponent : <T>(attr: InferParamProp<T>) => Element
>values : any
>[1, 2, 3, 4] : {}
>1 : 1
>2 : 2
>3 : 3
>4 : 4
>selectHandler : any
>(val: string) => { } : (val: string) => void
>val : string

