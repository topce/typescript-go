--- old.arrowFunctionContexts.js
+++ new.arrowFunctionContexts.js
@@= skipped -97, +97 lines =@@
 
 
 //// [arrowFunctionContexts.js]
-var __extends = (this && this.__extends) || (function () {
-    var extendStatics = function (d, b) {
-        extendStatics = Object.setPrototypeOf ||
-            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
-            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
-        return extendStatics(d, b);
-    };
-    return function (d, b) {
-        if (typeof b !== "function" && b !== null)
-            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
-        extendStatics(d, b);
-        function __() { this.constructor = d; }
-        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-    };
-})();
-var _this = this;
 // Arrow function used in with statement
 with (window) {
-    var p = function () { return _this; };
+    var p = () => this;
 }
 // Arrow function as argument to super call
-var Base = /** @class */ (function () {
-    function Base(n) {
+class Base {
+    constructor(n) { }
+}
+class Derived extends Base {
+    constructor() {
+        super(() => this);
     }
-    return Base;
-}());
-var Derived = /** @class */ (function (_super) {
-    __extends(Derived, _super);
-    function Derived() {
-        var _this = _super.call(this, function () { return _this; }) || this;
-        return _this;
-    }
-    return Derived;
-}(Base));
+}
 // Arrow function as function argument
-window.setTimeout(function () { return null; }, 100);
+window.setTimeout(() => null, 100);
 // Arrow function as value in array literal
-var obj = function (n) { return ''; };
+var obj = (n) => '';
 var obj; // OK
-var arr = [function (n) { return ''; }];
+var arr = [(n) => ''];
 var arr; // Incorrect error here (bug 829597)
 // Arrow function as enum value
 var E;
 (function (E) {
-    var _this = this;
-    E[E["x"] = function () { return 4; }] = "x";
-    E[E["y"] = (function () { return _this; }).length] = "y"; // error, can't use this in enum
+    E["x"] = () => 4;
+    if (typeof E.x !== "string") E[E.x] = "x";
+    E["y"] = (() => this).length; // error, can't use this in enum
+    if (typeof E.y !== "string") E[E.y] = "y";
 })(E || (E = {}));
 // Arrow function as module variable initializer
 var M;
 (function (M) {
-    M.a = function (s) { return ''; };
-    var b = function (s) { return s; };
+    M.a = (s) => '';
+    var b = (s) => s;
 })(M || (M = {}));
 // Repeat above for module members that are functions? (necessary to redo all of them?)
 var M2;
 (function (M2) {
-    var _this = this;
     // Arrow function used in with statement
     with (window) {
-        var p = function () { return _this; };
+        var p = () => this;
     }
     // Arrow function as argument to super call
-    var Base = /** @class */ (function () {
-        function Base(n) {
+    class Base {
+        constructor(n) { }
+    }
+    class Derived extends Base {
+        constructor() {
+            super(() => this);
         }
-        return Base;
-    }());
-    var Derived = /** @class */ (function (_super) {
-        __extends(Derived, _super);
-        function Derived() {
-            var _this = _super.call(this, function () { return _this; }) || this;
-            return _this;
-        }
-        return Derived;
-    }(Base));
+    }
     // Arrow function as function argument
-    window.setTimeout(function () { return null; }, 100);
+    window.setTimeout(() => null, 100);
     // Arrow function as value in array literal
-    var obj = function (n) { return ''; };
+    var obj = (n) => '';
     var obj; // OK
-    var arr = [function (n) { return ''; }];
+    var arr = [(n) => ''];
     var arr; // Incorrect error here (bug 829597)
     // Arrow function as enum value
-    var E;
+    let E;
     (function (E) {
-        var _this = this;
-        E[E["x"] = function () { return 4; }] = "x";
-        E[E["y"] = (function () { return _this; }).length] = "y";
+        E["x"] = () => 4;
+        if (typeof E.x !== "string") E[E.x] = "x";
+        E["y"] = (() => this).length;
+        if (typeof E.y !== "string") E[E.y] = "y";
     })(E || (E = {}));
     // Arrow function as module variable initializer
-    var M;
+    let M;
     (function (M) {
-        M.a = function (s) { return ''; };
-        var b = function (s) { return s; };
+        M.a = (s) => '';
+        var b = (s) => s;
     })(M || (M = {}));
 })(M2 || (M2 = {}));
 // <Identifier>(ParamList) => { ... } is a generic arrow function
-var generic1 = function (n) { return [n]; };
+var generic1 = (n) => [n];
 var generic1; // Incorrect error, Bug 829597
-var generic2 = function (n) { return [n]; };
+var generic2 = (n) => { return [n]; };
 var generic2;
 // <Identifier> ((ParamList) => { ... } ) is a type assertion to an arrow function
-var asserted1 = (function (n) { return [n]; });
+var asserted1 = ((n) => [n]);
 var asserted1;
-var asserted2 = (function (n) { return n; });
+var asserted2 = ((n) => { return n; });
 var asserted2;
