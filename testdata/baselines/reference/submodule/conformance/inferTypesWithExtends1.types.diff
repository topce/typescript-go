--- old.inferTypesWithExtends1.types
+++ new.inferTypesWithExtends1.types
@@= skipped -220, +220 lines =@@
 >b : "b"
 
 type X9_T2 = X9<{ a: 1, b: 2 }>; // ["number", 1 | 2]
->X9_T2 : ["number", 1 | 2]
+>X9_T2 : ["string", 1 | 2]
 >a : 1
 >b : 2
 
 type X9_T3 = X9<{ a: object, b: object }>; // never
->X9_T3 : never
+>X9_T3 : ["string", object]
 >a : object
 >b : object
 
 type X9_T4 = X9<{ a: "a", b: 1 }>; // never
->X9_T4 : never
+>X9_T4 : ["string", "a" | 1]
 >a : "a"
 >b : 1
 
@@= skipped -89, +89 lines =@@
 >IfEquals : IfEquals<X, Y, A, B>
 
 declare const x1: <T>() => (T extends infer U extends number ? 1 : 0);
->x1 : <T>() => (T extends infer U extends number ? 1 : 0)
+>x1 : <T>() => T extends infer U extends number ? 1 : 0
 
 function f1() {
->f1 : () => <T>() => (T extends infer U extends number ? 1 : 0)
+>f1 : () => <T>() => T extends infer U extends number ? 1 : 0
 
     return x1;
->x1 : <T>() => (T extends infer U extends number ? 1 : 0)
+>x1 : <T>() => T extends infer U extends number ? 1 : 0
 }
 
 type ExpectNumber<T extends number> = T;
 >ExpectNumber : T
 
 declare const x2: <T>() => (T extends ExpectNumber<infer U> ? 1 : 0);
->x2 : <T>() => (T extends ExpectNumber<infer U> ? 1 : 0)
+>x2 : <T>() => T extends infer U extends number ? 1 : 0
 
 function f2() {
->f2 : () => <T>() => (T extends ExpectNumber<infer U> ? 1 : 0)
+>f2 : () => <T>() => T extends infer U extends number ? 1 : 0
 
     return x2;
->x2 : <T>() => (T extends ExpectNumber<infer U> ? 1 : 0)
+>x2 : <T>() => T extends infer U extends number ? 1 : 0
 }
