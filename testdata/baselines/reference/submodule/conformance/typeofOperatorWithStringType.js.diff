--- old.typeofOperatorWithStringType.js
+++ new.typeofOperatorWithStringType.js
@@= skipped -59, +59 lines =@@
 z: typeof M.n;
 
 //// [typeofOperatorWithStringType.js]
-// typeof  operator on string type
 var STRING;
 var STRING1 = ["", "abc"];
 function foo() { return "abc"; }
-var A = /** @class */ (function () {
-    function A() {
-    }
-    A.foo = function () { return ""; };
-    return A;
-}());
+class A {
+    a;
+    static foo() { return ""; }
+}
 var M;
 (function (M) {
 })(M || (M = {}));
 var objA = new A();
-// string type var
 var ResultIsString1 = typeof STRING;
 var ResultIsString2 = typeof STRING1;
-// string type literal
 var ResultIsString3 = typeof "";
 var ResultIsString4 = typeof { x: "", y: "" };
-var ResultIsString5 = typeof { x: "", y: function (s) { return s; } };
-// string type expressions
+var ResultIsString5 = typeof { x: "", y: (s) => { return s; } };
 var ResultIsString6 = typeof objA.a;
 var ResultIsString7 = typeof M.n;
 var ResultIsString8 = typeof STRING1[0];
@@= skipped -29, +23 lines =@@
 var ResultIsString10 = typeof A.foo();
 var ResultIsString11 = typeof (STRING + STRING);
 var ResultIsString12 = typeof STRING.charAt(0);
-// multiple typeof  operators
 var ResultIsString13 = typeof typeof STRING;
 var ResultIsString14 = typeof typeof typeof (STRING + STRING);
-// miss assignment operators
 typeof "";
 typeof STRING;
 typeof STRING1;
 typeof foo();
 typeof objA.a, M.n;
-// use typeof in type query
 var z;
 var x;
 var r;
