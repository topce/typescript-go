--- old.derivedClassWithPrivateInstanceShadowingPublicInstance.js
+++ new.derivedClassWithPrivateInstanceShadowingPublicInstance.js
@@= skipped -34, +34 lines =@@
 Derived.a = 2; // error
 
 //// [derivedClassWithPrivateInstanceShadowingPublicInstance.js]
-var __extends = (this && this.__extends) || (function () {
-    var extendStatics = function (d, b) {
-        extendStatics = Object.setPrototypeOf ||
-            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
-            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
-        return extendStatics(d, b);
-    };
-    return function (d, b) {
-        if (typeof b !== "function" && b !== null)
-            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
-        extendStatics(d, b);
-        function __() { this.constructor = d; }
-        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-    };
-})();
-var Base = /** @class */ (function () {
-    function Base() {
-    }
-    Base.prototype.fn = function () {
+class Base {
+    x;
+    fn() {
         return '';
-    };
-    Object.defineProperty(Base.prototype, "a", {
-        get: function () { return 1; },
-        set: function (v) { },
-        enumerable: false,
-        configurable: true
-    });
-    return Base;
-}());
-// error, not a subtype
-var Derived = /** @class */ (function (_super) {
-    __extends(Derived, _super);
-    function Derived() {
-        return _super !== null && _super.apply(this, arguments) || this;
     }
-    Derived.prototype.fn = function () {
+    get a() { return 1; }
+    set a(v) { }
+}
+class Derived extends Base {
+    x;
+    fn() {
         return '';
-    };
-    Object.defineProperty(Derived.prototype, "a", {
-        get: function () { return 1; },
-        set: function (v) { },
-        enumerable: false,
-        configurable: true
-    });
-    return Derived;
-}(Base));
-var r = Base.x; // ok
-var r2 = Derived.x; // error
-var r3 = Base.fn(); // ok
-var r4 = Derived.fn(); // error
-var r5 = Base.a; // ok
-Base.a = 2; // ok
-var r6 = Derived.a; // error
-Derived.a = 2; // error
+    }
+    get a() { return 1; }
+    set a(v) { }
+}
+var r = Base.x;
+var r2 = Derived.x;
+var r3 = Base.fn();
+var r4 = Derived.fn();
+var r5 = Base.a;
+Base.a = 2;
+var r6 = Derived.a;
+Derived.a = 2;
