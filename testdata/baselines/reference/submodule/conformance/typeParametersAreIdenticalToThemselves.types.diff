--- old.typeParametersAreIdenticalToThemselves.types
+++ new.typeParametersAreIdenticalToThemselves.types
@@= skipped -3, +3 lines =@@
 // type parameters from the same declaration are identical to themself
 
 function foo1<T>(x: T);
->foo1 : { <T>(x: T): any; <T_1>(x: T_1): any; }
+>foo1 : { <T>(x: T): any; <T>(x: T): any; }
 >x : T
 
 function foo1<T>(x: T); // no error, different declaration for each T
->foo1 : { <T_1>(x: T_1): any; <T>(x: T): any; }
+>foo1 : { <T>(x: T): any; <T>(x: T): any; }
 >x : T
 
 function foo1<T>(x: T) { }
->foo1 : { <T_1>(x: T_1): any; <T_1>(x: T_1): any; }
+>foo1 : { <T>(x: T): any; <T>(x: T): any; }
 >x : T
 
 function foo2<T, U>(x: T);
->foo2 : { <T, U>(x: T): any; <T_1, U_1>(x: T_1): any; }
+>foo2 : { <T, U>(x: T): any; <T, U>(x: T): any; }
 >x : T
 
 function foo2<T, U>(x: T); // no error, different declaration for each T
->foo2 : { <T_1, U_1>(x: T_1): any; <T, U>(x: T): any; }
+>foo2 : { <T, U>(x: T): any; <T, U>(x: T): any; }
 >x : T
 
 function foo2<T, U>(x: T) { }
->foo2 : { <T_1, U_1>(x: T_1): any; <T_1, U_1>(x: T_1): any; }
+>foo2 : { <T, U>(x: T): any; <T, U>(x: T): any; }
 >x : T
 
 function foo3<T, U>(x: T, y: U) {
@@= skipped -41, +41 lines =@@
 >x : T
 
     function inner2(x: T);
->inner2 : { (x: T): any; <T_1>(x: T_1): any; }
+>inner2 : { (x: T): any; <T>(x: T): any; }
 >x : T
 
     function inner2<T>(x: T); // no error, different T
->inner2 : { (x: T_1): any; <T>(x: T): any; }
+>inner2 : { (x: T): any; <T>(x: T): any; }
 >x : T
 
     function inner2(x: any) { }
->inner2 : { (x: T): any; <T_1>(x: T_1): any; }
+>inner2 : { (x: T): any; <T>(x: T): any; }
 >x : any
 }
 
@@= skipped -28, +28 lines =@@
 >x : T
 
     foo2<U>(a: T, x: U);
->foo2 : { <U>(a: T, x: U): any; <U_1>(a: T, x: U_1): any; }
+>foo2 : { <U>(a: T, x: U): any; <U>(a: T, x: U): any; }
 >a : T
 >x : U
 
     foo2<U>(a: T, x: U); // no error, different declaration for each U
->foo2 : { <U_1>(a: T, x: U_1): any; <U>(a: T, x: U): any; }
+>foo2 : { <U>(a: T, x: U): any; <U>(a: T, x: U): any; }
 >a : T
 >x : U
 
     foo2<U>(a: T, x: U) { }
->foo2 : { <U_1>(a: T, x: U_1): any; <U_1>(a: T, x: U_1): any; }
+>foo2 : { <U>(a: T, x: U): any; <U>(a: T, x: U): any; }
 >a : T
 >x : U
 
     foo3<T>(x: T);
->foo3 : { <T>(x: T): any; <T_1>(x: T_1): any; }
+>foo3 : { <T>(x: T): any; <T>(x: T): any; }
 >x : T
 
     foo3<T>(x: T); // no error, different declaration for each T
->foo3 : { <T_1>(x: T_1): any; <T>(x: T): any; }
+>foo3 : { <T>(x: T): any; <T>(x: T): any; }
 >x : T
 
     foo3<T>(x: T) { }
->foo3 : { <T_1>(x: T_1): any; <T_1>(x: T_1): any; }
+>foo3 : { <T>(x: T): any; <T>(x: T): any; }
 >x : T
 
     foo4<T extends Date>(x: T);
->foo4 : { <T extends Date>(x: T): any; <T_1 extends Date>(x: T_1): any; }
+>foo4 : { <T extends Date>(x: T): any; <T extends Date>(x: T): any; }
 >x : T
 
     foo4<T extends Date>(x: T); // no error, different declaration for each T
->foo4 : { <T_1 extends Date>(x: T_1): any; <T extends Date>(x: T): any; }
+>foo4 : { <T extends Date>(x: T): any; <T extends Date>(x: T): any; }
 >x : T
 
     foo4<T extends Date>(x: T) { }
->foo4 : { <T_1 extends Date>(x: T_1): any; <T_1 extends Date>(x: T_1): any; }
+>foo4 : { <T extends Date>(x: T): any; <T extends Date>(x: T): any; }
 >x : T
 }
 
@@= skipped -55, +55 lines =@@
 >x : T
 
     foo2<U>(a: T, x: U);
->foo2 : { <U>(a: T, x: U): any; <U_1>(a: T, x: U_1): any; }
+>foo2 : { <U>(a: T, x: U): any; <U>(a: T, x: U): any; }
 >a : T
 >x : U
 
     foo2<U>(a: T, x: U); // no error, different declaration for each U
->foo2 : { <U_1>(a: T, x: U_1): any; <U>(a: T, x: U): any; }
+>foo2 : { <U>(a: T, x: U): any; <U>(a: T, x: U): any; }
 >a : T
 >x : U
 
     foo2<U>(a: T, x: U) { }
->foo2 : { <U_1>(a: T, x: U_1): any; <U_1>(a: T, x: U_1): any; }
+>foo2 : { <U>(a: T, x: U): any; <U>(a: T, x: U): any; }
 >a : T
 >x : U
 
     foo3<T>(x: T);
->foo3 : { <T>(x: T): any; <T_1>(x: T_1): any; }
+>foo3 : { <T>(x: T): any; <T>(x: T): any; }
 >x : T
 
     foo3<T>(x: T); // no error, different declaration for each T
->foo3 : { <T_1>(x: T_1): any; <T>(x: T): any; }
+>foo3 : { <T>(x: T): any; <T>(x: T): any; }
 >x : T
 
     foo3<T>(x: T) { }
->foo3 : { <T_1>(x: T_1): any; <T_1>(x: T_1): any; }
+>foo3 : { <T>(x: T): any; <T>(x: T): any; }
 >x : T
 }
 
@@= skipped -37, +37 lines =@@
 >x : T
 
     foo2<U>(a: T, x: U);
->foo2 : { <U>(a: T, x: U): any; <U_1>(a: T, x: U_1): any; }
+>foo2 : { <U>(a: T, x: U): any; <U>(a: T, x: U): any; }
 >a : T
 >x : U
 
     foo2<U>(a: T, x: U); // no error, different declaration for each U
->foo2 : { <U_1>(a: T, x: U_1): any; <U>(a: T, x: U): any; }
+>foo2 : { <U>(a: T, x: U): any; <U>(a: T, x: U): any; }
 >a : T
 >x : U
 
     foo3<T>(x: T);
->foo3 : { <T>(x: T): any; <T_1>(x: T_1): any; }
+>foo3 : { <T>(x: T): any; <T>(x: T): any; }
 >x : T
 
     foo3<T>(x: T); // no error, different declaration for each T
->foo3 : { <T_1>(x: T_1): any; <T>(x: T): any; }
+>foo3 : { <T>(x: T): any; <T>(x: T): any; }
 >x : T
 
     foo4<T extends Date>(x: T);
->foo4 : { <T extends Date>(x: T): any; <T_1 extends Date>(x: T_1): any; }
+>foo4 : { <T extends Date>(x: T): any; <T extends Date>(x: T): any; }
 >x : T
 
     foo4<T extends Date>(x: T); // no error, different declaration for each T
->foo4 : { <T_1 extends Date>(x: T_1): any; <T extends Date>(x: T): any; }
+>foo4 : { <T extends Date>(x: T): any; <T extends Date>(x: T): any; }
 >x : T
 }
 
@@= skipped -36, +36 lines =@@
 >x : T
 
     foo2<U>(a: T, x: U);
->foo2 : { <U>(a: T, x: U): any; <U_1>(a: T, x: U_1): any; }
+>foo2 : { <U>(a: T, x: U): any; <U>(a: T, x: U): any; }
 >a : T
 >x : U
 
     foo2<U>(a: T, x: U); // no error, different declaration for each U
->foo2 : { <U_1>(a: T, x: U_1): any; <U>(a: T, x: U): any; }
+>foo2 : { <U>(a: T, x: U): any; <U>(a: T, x: U): any; }
 >a : T
 >x : U
 
     foo3<T>(x: T);
->foo3 : { <T>(x: T): any; <T_1>(x: T_1): any; }
+>foo3 : { <T>(x: T): any; <T>(x: T): any; }
 >x : T
 
     foo3<T>(x: T); // no error, different declaration for each T
->foo3 : { <T_1>(x: T_1): any; <T>(x: T): any; }
+>foo3 : { <T>(x: T): any; <T>(x: T): any; }
 >x : T
 }
