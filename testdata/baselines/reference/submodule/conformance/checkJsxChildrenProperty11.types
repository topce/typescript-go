//// [tests/cases/conformance/jsx/checkJsxChildrenProperty11.tsx] ////

=== file.tsx ===
declare module JSX {
	interface Element { }
	interface ElementAttributesProperty { props: {} }
>props : {}

	interface IntrinsicElements { 
		div: any;
>div : any

		h2: any;
>h2 : any

		h1: any;
>h1 : any
	}
}

class Button {
>Button : Button

	props: {}
>props : {}

    render() {
>render : () => any

        return (<div>My Button</div>)
>(<div>My Button</div>) : any
><div>My Button</div> : any
>div : any
>div : any
    }
}

// OK
let k1 = <div> <h2> Hello </h2> <h1> world </h1></div>;
>k1 : any
><div> <h2> Hello </h2> <h1> world </h1></div> : any
>div : any
><h2> Hello </h2> : any
>h2 : any
>h2 : any
><h1> world </h1> : any
>h1 : any
>h1 : any
>div : any

let k2 = <div> <h2> Hello </h2> {(user: any) => <h2>{user.name}</h2>}</div>;
>k2 : any
><div> <h2> Hello </h2> {(user: any) => <h2>{user.name}</h2>}</div> : any
>div : any
><h2> Hello </h2> : any
>h2 : any
>h2 : any
>(user: any) => <h2>{user.name}</h2> : (user: any) => any
>user : any
><h2>{user.name}</h2> : any
>h2 : any
>user.name : any
>user : any
>name : any
>h2 : any
>div : any

let k3 = <div> {1} {"That is a number"} </div>;
>k3 : any
><div> {1} {"That is a number"} </div> : any
>div : any
>1 : 1
>"That is a number" : "That is a number"
>div : any

let k4 = <Button> <h2> Hello </h2> </Button>;
>k4 : any
><Button> <h2> Hello </h2> </Button> : any
>Button : typeof Button
><h2> Hello </h2> : any
>h2 : any
>h2 : any
>Button : typeof Button

