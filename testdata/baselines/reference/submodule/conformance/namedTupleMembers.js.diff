--- old.namedTupleMembers.js
+++ new.namedTupleMembers.js
@@= skipped -101, +101 lines =@@
 function useState(initial) {
     return null;
 }
-function readSegment(_a) {
-    var length = _a[0], count = _a[1];
-}
-// documenting binding pattern behavior (currently does _not_ generate tuple names)
+function readSegment([length, count]) { }
 exports.val = null;
 q = r;
 r = q;
 x = y;
 y = x;
-exports.argumentsOfGAsFirstArgument = f(getArgsForInjection(g)); // one tuple with captures arguments as first member
-exports.argumentsOfG = f.apply(void 0, getArgsForInjection(g)); // captured arguments list re-spread
-
-
-//// [namedTupleMembers.d.ts]
-export type Segment = [length: number, count: number];
-export type SegmentAnnotated = [
-    /**
-     * Size of message buffer segment handles
-     */
-    length: number,
-    /**
-     * Number of segments handled at once
-     */
-    count: number
-];
-export type WithOptAndRest = [first: number, second?: number, ...rest: string[]];
-export type Func<T extends any[]> = (...x: T) => void;
-export declare const func: Func<SegmentAnnotated>;
-export declare function useState<T>(initial: T): [value: T, setter: (T: any) => void];
-export type Iter = Func<[step: number, iterations: number]>;
-export declare function readSegment([length, count]: [number, number]): void;
-export declare const val: Parameters<typeof readSegment>[0];
-export type RecursiveTupleA = [initial: string, next: RecursiveTupleA];
-export type RecursiveTupleB = [first: string, ptr: RecursiveTupleB];
-export type RecusiveRest = [first: string, ...rest: RecusiveRest[]];
-export type RecusiveRest2 = [string, ...RecusiveRest2[]];
-export declare const argumentsOfGAsFirstArgument: [[elem: object, index: number]];
-export declare const argumentsOfG: [elem: object, index: number];
+exports.argumentsOfGAsFirstArgument = f(getArgsForInjection(g));
+exports.argumentsOfG = f(...getArgsForInjection(g));
