--- old.privateNamesInNestedClasses-1.js
+++ new.privateNamesInNestedClasses-1.js
@@= skipped -28, +28 lines =@@
 
 
 //// [privateNamesInNestedClasses-1.js]
-"use strict";
-var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
-    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
-    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
-    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
-};
-var _A_foo, _A_bar;
 class A {
-    constructor() {
-        _A_foo.set(this, "A's #foo");
-        _A_bar.set(this, "A's #bar");
-    }
+    #foo = "A's #foo";
+    #bar = "A's #bar";
     method() {
-        var _B_foo;
         class B {
-            constructor() {
-                _B_foo.set(this, "B's #foo");
-            }
+            #foo = "B's #foo";
             bar(a) {
-                __classPrivateFieldGet(a, _B_foo, "f"); // OK, no compile-time error, don't know what `a` is
+                a.#foo;
             }
             baz(a) {
-                __classPrivateFieldGet(a, _B_foo, "f"); // compile-time error, shadowed
+                a.#foo;
             }
             quux(b) {
-                __classPrivateFieldGet(b, _B_foo, "f"); // OK
+                b.#foo;
             }
         }
-        _B_foo = new WeakMap();
         const a = new A();
         new B().bar(a);
         new B().baz(a);
@@= skipped -36, +23 lines =@@
         new B().quux(b);
     }
 }
-_A_foo = new WeakMap(), _A_bar = new WeakMap();
 new A().method();
