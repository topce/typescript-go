--- old.privateNameStaticAccessorsAccess.js
+++ new.privateNameStaticAccessorsAccess.js
@@= skipped -29, +29 lines =@@
 
 
 //// [privateNameStaticAccessorsAccess.js]
-var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
-    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
-    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
-    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
-};
-var _a, _A2_prop_get, _A2_prop_set;
 class A2 {
+    static get #prop() { return ""; }
+    static set #prop(param) { }
     constructor() {
-        console.log(__classPrivateFieldGet(_a, _a, "a", _A2_prop_get));
-        let a = _a;
-        __classPrivateFieldGet(a, _a, "a", _A2_prop_get);
+        console.log(A2.#prop);
+        let a = A2;
+        a.#prop;
         function foo() {
-            __classPrivateFieldGet(a, _a, "a", _A2_prop_get);
+            a.#prop;
         }
     }
 }
-_a = A2, _A2_prop_get = function _A2_prop_get() { return ""; }, _A2_prop_set = function _A2_prop_set(param) { };
-A2.; // Error
+A2.#prop; // Error
 function foo() {
-    A2.; // Error
+    A2.#prop; // Error
 }
 class B2 {
     m() {
-        A2.;
+        A2.#prop;
     }
 }
 export {};
