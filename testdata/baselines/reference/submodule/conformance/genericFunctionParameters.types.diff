--- old.genericFunctionParameters.types
+++ new.genericFunctionParameters.types
@@= skipped -11, +11 lines =@@
 >x : S
 
 declare function f3<T>(cb: <S extends Array<S>>(x: S) => T): T;
->f3 : <T>(cb: <S extends Array<S>>(x: S) => T) => T
->cb : <S extends Array<S>>(x: S) => T
+>f3 : <T>(cb: <S extends S[]>(x: S) => T) => T
+>cb : <S extends S[]>(x: S) => T
 >x : S
 
 let x1 = f1(x => x);  // {}
@@= skipped -21, +21 lines =@@
 >x : S
 
 let x3 = f3(x => x);  // Array<any>
->x3 : any[]
->f3(x => x) : any[]
->f3 : <T>(cb: <S extends Array<S>>(x: S) => T) => T
+>x3 : any[][]
+>f3(x => x) : any[][]
+>f3 : <T>(cb: <S extends S[]>(x: S) => T) => T
 >x => x : <S extends S[]>(x: S) => S
 >x : S
 >x : S
@@= skipped -10, +10 lines =@@
 // Repro from #19345
 
 declare const s: <R>(go: <S>(ops: { init(): S; }) => R) => R;
->s : <R>(go: <S>(ops: { init(): S; }) => R) => R
->go : <S>(ops: { init(): S; }) => R
->ops : { init(): S; }
+>s : <R>(go: <S>(ops: { init: () => S; }) => R) => R
+>go : <S>(ops: { init: () => S; }) => R
+>ops : { init: () => S; }
 >init : () => S
 
 const x = s(a => a.init());  // x is any, should have been {}
 >x : unknown
 >s(a => a.init()) : unknown
->s : <R>(go: <S>(ops: { init(): S; }) => R) => R
->a => a.init() : <S>(a: { init(): S; }) => S
->a : { init(): S; }
+>s : <R>(go: <S>(ops: { init: () => S; }) => R) => R
+>a => a.init() : <S>(a: { init: () => S; }) => S
+>a : { init: () => S; }
 >a.init() : S
 >a.init : () => S
->a : { init(): S; }
+>a : { init: () => S; }
 >init : () => S
 
