--- old.typeGuardFunction.js
+++ new.typeGuardFunction.js
@@= skipped -84, +84 lines =@@
 let union3: boolean | B = isA(union2) || union2;
 
 //// [typeGuardFunction.js]
-var __extends = (this && this.__extends) || (function () {
-    var extendStatics = function (d, b) {
-        extendStatics = Object.setPrototypeOf ||
-            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
-            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
-        return extendStatics(d, b);
-    };
-    return function (d, b) {
-        if (typeof b !== "function" && b !== null)
-            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
-        extendStatics(d, b);
-        function __() { this.constructor = d; }
-        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-    };
-})();
-var A = /** @class */ (function () {
-    function A() {
-    }
-    return A;
-}());
-var B = /** @class */ (function () {
-    function B() {
-    }
-    return B;
-}());
-var C = /** @class */ (function (_super) {
-    __extends(C, _super);
-    function C() {
-        return _super !== null && _super.apply(this, arguments) || this;
-    }
-    return C;
-}(A));
+class A {
+    propA;
+}
+class B {
+    propB;
+}
+class C extends A {
+    propC;
+}
 var a;
 var b;
 // Basic
@@= skipped -53, +30 lines =@@
 }
 // Methods
 var obj;
-var D = /** @class */ (function () {
-    function D() {
-    }
-    D.prototype.method1 = function (p1) {
+class D {
+    method1(p1) {
         return true;
-    };
-    return D;
-}());
+    }
+}
 // Arrow function
-var f1 = function (p1) { return false; };
+let f1 = (p1) => false;
 // Function expressions
 f2(function (p1) {
     return true;
@@= skipped -17, +14 lines =@@
 acceptingBoolean(isA(a));
 acceptingTypeGuardFunction(isA);
 // Binary expressions
-var union2;
-var union3 = isA(union2) || union2;
+let union2;
+let union3 = isA(union2) || union2;
