--- old.stringLiteralTypeIsSubtypeOfString.types
+++ new.stringLiteralTypeIsSubtypeOfString.types
@@= skipped -235, +235 lines =@@
 >x : any
 
 function f12<T>(x: 'a');
->f12 : { <T>(x: "a"): any; <T_1>(x: T_1): any; }
+>f12 : { <T>(x: "a"): any; <T>(x: T): any; }
 >x : "a"
 
 function f12<T>(x: T);
->f12 : { <T_1>(x: "a"): any; <T>(x: T): any; }
+>f12 : { <T>(x: "a"): any; <T>(x: T): any; }
 >x : T
 
 function f12<T>(x: any) { }
->f12 : { <T_1>(x: "a"): any; <T_1>(x: T_1): any; }
+>f12 : { <T>(x: "a"): any; <T>(x: T): any; }
 >x : any
 
 function f13<T extends String>(x: 'a');
->f13 : { <T extends String>(x: "a"): any; <T_1 extends String>(x: T_1): any; }
+>f13 : { <T extends String>(x: "a"): any; <T extends String>(x: T): any; }
 >x : "a"
 
 function f13<T extends String>(x: T);
->f13 : { <T_1 extends String>(x: "a"): any; <T extends String>(x: T): any; }
+>f13 : { <T extends String>(x: "a"): any; <T extends String>(x: T): any; }
 >x : T
 
 function f13<T extends String>(x: any) { }
->f13 : { <T_1 extends String>(x: "a"): any; <T_1 extends String>(x: T_1): any; }
+>f13 : { <T extends String>(x: "a"): any; <T extends String>(x: T): any; }
 >x : any
 
 enum E { A }
@@= skipped -40, +40 lines =@@
 >x : any
 
 function f15<T, U extends T>(x: 'a');
->f15 : { <T, U extends T>(x: "a"): any; <T_1, U_1 extends T_1>(x: U_1): any; }
+>f15 : { <T, U extends T>(x: "a"): any; <T, U extends T>(x: U): any; }
 >x : "a"
 
 function f15<T, U extends T>(x: U);
->f15 : { <T_1, U_1 extends T_1>(x: "a"): any; <T, U extends T>(x: U): any; }
+>f15 : { <T, U extends T>(x: "a"): any; <T, U extends T>(x: U): any; }
 >x : U
 
 function f15<T, U extends T>(x: any) { }
->f15 : { <T_1, U_1 extends T_1>(x: "a"): any; <T_1, U_1 extends T_1>(x: U_1): any; }
+>f15 : { <T, U extends T>(x: "a"): any; <T, U extends T>(x: U): any; }
 >x : any
 
 function f16<T extends String, U extends T>(x: 'a');
->f16 : { <T extends String, U extends T>(x: "a"): any; <T_1 extends String, U_1 extends T_1>(x: U_1): any; }
+>f16 : { <T extends String, U extends T>(x: "a"): any; <T extends String, U extends T>(x: U): any; }
 >x : "a"
 
 function f16<T extends String, U extends T>(x: U);
->f16 : { <T_1 extends String, U_1 extends T_1>(x: "a"): any; <T extends String, U extends T>(x: U): any; }
+>f16 : { <T extends String, U extends T>(x: "a"): any; <T extends String, U extends T>(x: U): any; }
 >x : U
 
 function f16<T extends String, U extends T>(x: any) { }
->f16 : { <T_1 extends String, U_1 extends T_1>(x: "a"): any; <T_1 extends String, U_1 extends T_1>(x: U_1): any; }
+>f16 : { <T extends String, U extends T>(x: "a"): any; <T extends String, U extends T>(x: U): any; }
 >x : any
 
