--- old.parserRealSource2.js
+++ new.parserRealSource2.js
@@= skipped -272, +272 lines =@@
 
 }
 
+//// [typescript.js]
 //// [parserRealSource2.js]
 // Copyright (c) Microsoft. All rights reserved. Licensed under the Apache License, Version 2.0. 
 // See LICENSE.txt in the project root for complete license information.
@@= skipped -10, +11 lines =@@
         return (val & flag) != 0;
     }
     TypeScript.hasFlag = hasFlag;
-    var ErrorRecoverySet;
+    let ErrorRecoverySet;
     (function (ErrorRecoverySet) {
         ErrorRecoverySet[ErrorRecoverySet["None"] = 0] = "None";
         ErrorRecoverySet[ErrorRecoverySet["Comma"] = 1] = "Comma";
@@= skipped -41, +41 lines =@@
         ErrorRecoverySet[ErrorRecoverySet["StmtStart"] = 1608580098] = "StmtStart";
         ErrorRecoverySet[ErrorRecoverySet["Postfix"] = 49280] = "Postfix";
     })(ErrorRecoverySet = TypeScript.ErrorRecoverySet || (TypeScript.ErrorRecoverySet = {}));
-    var AllowedElements;
+    let AllowedElements;
     (function (AllowedElements) {
         AllowedElements[AllowedElements["None"] = 0] = "None";
         AllowedElements[AllowedElements["ModuleDeclarations"] = 4] = "ModuleDeclarations";
@@= skipped -11, +11 lines =@@
         AllowedElements[AllowedElements["Global"] = 1052] = "Global";
         AllowedElements[AllowedElements["QuickParse"] = 3100] = "QuickParse";
     })(AllowedElements = TypeScript.AllowedElements || (TypeScript.AllowedElements = {}));
-    var Modifiers;
+    let Modifiers;
     (function (Modifiers) {
         Modifiers[Modifiers["None"] = 0] = "None";
         Modifiers[Modifiers["Private"] = 1] = "Private";
@@= skipped -12, +12 lines =@@
         Modifiers[Modifiers["Setter"] = 64] = "Setter";
         Modifiers[Modifiers["Static"] = 128] = "Static";
     })(Modifiers = TypeScript.Modifiers || (TypeScript.Modifiers = {}));
-    var ASTFlags;
+    let ASTFlags;
     (function (ASTFlags) {
         ASTFlags[ASTFlags["None"] = 0] = "None";
         ASTFlags[ASTFlags["ExplicitSemicolon"] = 1] = "ExplicitSemicolon";
@@= skipped -19, +19 lines =@@
         //         Once we have a better way to associate information with nodes, this flag should not be used.
         ASTFlags[ASTFlags["SkipNextRParen"] = 2048] = "SkipNextRParen";
     })(ASTFlags = TypeScript.ASTFlags || (TypeScript.ASTFlags = {}));
-    var DeclFlags;
+    let DeclFlags;
     (function (DeclFlags) {
         DeclFlags[DeclFlags["None"] = 0] = "None";
         DeclFlags[DeclFlags["Exported"] = 1] = "Exported";
@@= skipped -12, +12 lines =@@
         DeclFlags[DeclFlags["GetAccessor"] = 64] = "GetAccessor";
         DeclFlags[DeclFlags["SetAccessor"] = 128] = "SetAccessor";
     })(DeclFlags = TypeScript.DeclFlags || (TypeScript.DeclFlags = {}));
-    var ModuleFlags;
+    let ModuleFlags;
     (function (ModuleFlags) {
         ModuleFlags[ModuleFlags["None"] = 0] = "None";
         ModuleFlags[ModuleFlags["Exported"] = 1] = "Exported";
@@= skipped -17, +17 lines =@@
         ModuleFlags[ModuleFlags["IsDynamic"] = 2048] = "IsDynamic";
         ModuleFlags[ModuleFlags["MustCaptureThis"] = 4096] = "MustCaptureThis";
     })(ModuleFlags = TypeScript.ModuleFlags || (TypeScript.ModuleFlags = {}));
-    var SymbolFlags;
+    let SymbolFlags;
     (function (SymbolFlags) {
         SymbolFlags[SymbolFlags["None"] = 0] = "None";
         SymbolFlags[SymbolFlags["Exported"] = 1] = "Exported";
@@= skipped -24, +24 lines =@@
         SymbolFlags[SymbolFlags["Bound"] = 262144] = "Bound";
         SymbolFlags[SymbolFlags["CompilerGenerated"] = 524288] = "CompilerGenerated";
     })(SymbolFlags = TypeScript.SymbolFlags || (TypeScript.SymbolFlags = {}));
-    var VarFlags;
+    let VarFlags;
     (function (VarFlags) {
         VarFlags[VarFlags["None"] = 0] = "None";
         VarFlags[VarFlags["Exported"] = 1] = "Exported";
@@= skipped -22, +22 lines =@@
         VarFlags[VarFlags["Constant"] = 65536] = "Constant";
         VarFlags[VarFlags["MustCaptureThis"] = 131072] = "MustCaptureThis";
     })(VarFlags = TypeScript.VarFlags || (TypeScript.VarFlags = {}));
-    var FncFlags;
+    let FncFlags;
     (function (FncFlags) {
         FncFlags[FncFlags["None"] = 0] = "None";
         FncFlags[FncFlags["Exported"] = 1] = "Exported";
@@= skipped -24, +24 lines =@@
         FncFlags[FncFlags["ClassMethod"] = 262144] = "ClassMethod";
         FncFlags[FncFlags["ClassPropertyMethodExported"] = 524288] = "ClassPropertyMethodExported";
     })(FncFlags = TypeScript.FncFlags || (TypeScript.FncFlags = {}));
-    var SignatureFlags;
+    let SignatureFlags;
     (function (SignatureFlags) {
         SignatureFlags[SignatureFlags["None"] = 0] = "None";
         SignatureFlags[SignatureFlags["IsIndexer"] = 1] = "IsIndexer";
@@= skipped -11, +11 lines =@@
         return fncOrVarOrSymbolOrModuleFlags;
     }
     TypeScript.ToDeclFlags = ToDeclFlags;
-    var TypeFlags;
+    let TypeFlags;
     (function (TypeFlags) {
         TypeFlags[TypeFlags["None"] = 0] = "None";
         TypeFlags[TypeFlags["HasImplementation"] = 1] = "HasImplementation";
@@= skipped -12, +12 lines =@@
         TypeFlags[TypeFlags["HasBaseTypeOfObject"] = 64] = "HasBaseTypeOfObject";
         TypeFlags[TypeFlags["IsClass"] = 128] = "IsClass";
     })(TypeFlags = TypeScript.TypeFlags || (TypeScript.TypeFlags = {}));
-    var TypeRelationshipFlags;
+    let TypeRelationshipFlags;
     (function (TypeRelationshipFlags) {
         TypeRelationshipFlags[TypeRelationshipFlags["SuccessfulComparison"] = 0] = "SuccessfulComparison";
         TypeRelationshipFlags[TypeRelationshipFlags["SourceIsNullTargetIsVoidOrUndefined"] = 1] = "SourceIsNullTargetIsVoidOrUndefined";
@@= skipped -11, +11 lines =@@
         TypeRelationshipFlags[TypeRelationshipFlags["IncompatiblePropertyTypes"] = 32] = "IncompatiblePropertyTypes";
         TypeRelationshipFlags[TypeRelationshipFlags["IncompatibleParameterTypes"] = 64] = "IncompatibleParameterTypes";
     })(TypeRelationshipFlags = TypeScript.TypeRelationshipFlags || (TypeScript.TypeRelationshipFlags = {}));
-    var CodeGenTarget;
+    let CodeGenTarget;
     (function (CodeGenTarget) {
         CodeGenTarget[CodeGenTarget["ES3"] = 0] = "ES3";
         CodeGenTarget[CodeGenTarget["ES5"] = 1] = "ES5";
     })(CodeGenTarget = TypeScript.CodeGenTarget || (TypeScript.CodeGenTarget = {}));
-    var ModuleGenTarget;
+    let ModuleGenTarget;
     (function (ModuleGenTarget) {
         ModuleGenTarget[ModuleGenTarget["Synchronous"] = 0] = "Synchronous";
         ModuleGenTarget[ModuleGenTarget["Asynchronous"] = 1] = "Asynchronous";
