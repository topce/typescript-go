--- old.enumMerging.js
+++ new.enumMerging.js
@@= skipped -68, +68 lines =@@
 
 
 //// [enumMerging.js]
-// Enum with only constant members across 2 declarations with the same root module
-// Enum with initializer in all declarations with constant members with the same root module
 var M1;
 (function (M1) {
-    var EImpl1;
+    let EImpl1;
     (function (EImpl1) {
         EImpl1[EImpl1["A"] = 0] = "A";
         EImpl1[EImpl1["B"] = 1] = "B";
@@= skipped -15, +13 lines =@@
         EImpl1[EImpl1["E"] = 2] = "E";
         EImpl1[EImpl1["F"] = 3] = "F";
     })(EImpl1 || (EImpl1 = {}));
-    var EConst1;
+    let EConst1;
     (function (EConst1) {
         EConst1[EConst1["A"] = 3] = "A";
         EConst1[EConst1["B"] = 2] = "B";
@@= skipped -13, +13 lines =@@
     })(EConst1 = M1.EConst1 || (M1.EConst1 = {}));
     var x = [EConst1.A, EConst1.B, EConst1.C, EConst1.D, EConst1.E, EConst1.F];
 })(M1 || (M1 = {}));
-// Enum with only computed members across 2 declarations with the same root module 
 var M2;
 (function (M2) {
-    var EComp2;
+    let EComp2;
     (function (EComp2) {
-        EComp2[EComp2["A"] = 'foo'.length] = "A";
-        EComp2[EComp2["B"] = 'foo'.length] = "B";
-        EComp2[EComp2["C"] = 'foo'.length] = "C";
+        EComp2["A"] = 'foo'.length;
+        if (typeof EComp2.A !== "string") EComp2[EComp2.A] = "A";
+        EComp2["B"] = 'foo'.length;
+        if (typeof EComp2.B !== "string") EComp2[EComp2.B] = "B";
+        EComp2["C"] = 'foo'.length;
+        if (typeof EComp2.C !== "string") EComp2[EComp2.C] = "C";
     })(EComp2 = M2.EComp2 || (M2.EComp2 = {}));
     (function (EComp2) {
-        EComp2[EComp2["D"] = 'foo'.length] = "D";
-        EComp2[EComp2["E"] = 'foo'.length] = "E";
-        EComp2[EComp2["F"] = 'foo'.length] = "F";
+        EComp2["D"] = 'foo'.length;
+        if (typeof EComp2.D !== "string") EComp2[EComp2.D] = "D";
+        EComp2["E"] = 'foo'.length;
+        if (typeof EComp2.E !== "string") EComp2[EComp2.E] = "E";
+        EComp2["F"] = 'foo'.length;
+        if (typeof EComp2.F !== "string") EComp2[EComp2.F] = "F";
     })(EComp2 = M2.EComp2 || (M2.EComp2 = {}));
     var x = [EComp2.A, EComp2.B, EComp2.C, EComp2.D, EComp2.E, EComp2.F];
 })(M2 || (M2 = {}));
-// Enum with initializer in only one of two declarations with constant members with the same root module
 var M3;
 (function (M3) {
-    var EInit;
+    let EInit;
     (function (EInit) {
         EInit[EInit["A"] = 0] = "A";
         EInit[EInit["B"] = 1] = "B";
@@= skipped -30, +34 lines =@@
         EInit[EInit["E"] = 3] = "E";
     })(EInit || (EInit = {}));
 })(M3 || (M3 = {}));
-// Enums with same name but different root module
 var M4;
 (function (M4) {
-    var Color;
+    let Color;
     (function (Color) {
         Color[Color["Red"] = 0] = "Red";
         Color[Color["Green"] = 1] = "Green";
@@= skipped -12, +11 lines =@@
 })(M4 || (M4 = {}));
 var M5;
 (function (M5) {
-    var Color;
+    let Color;
     (function (Color) {
         Color[Color["Red"] = 0] = "Red";
         Color[Color["Green"] = 1] = "Green";
@@= skipped -9, +9 lines =@@
 })(M5 || (M5 = {}));
 var M6;
 (function (M6) {
-    var A;
+    let A;
     (function (A) {
-        var Color;
+        let Color;
         (function (Color) {
             Color[Color["Red"] = 0] = "Red";
             Color[Color["Green"] = 1] = "Green";
@@= skipped -11, +11 lines =@@
     })(A = M6.A || (M6.A = {}));
 })(M6 || (M6 = {}));
 (function (M6) {
-    var A;
+    let A;
     (function (A) {
-        var Color;
+        let Color;
         (function (Color) {
             Color[Color["Yellow"] = 1] = "Yellow";
         })(Color = A.Color || (A.Color = {}));
