--- old.asyncAwait_es6.js
+++ new.asyncAwait_es6.js
@@= skipped -48, +48 lines =@@
 }
 
 //// [asyncAwait_es6.js]
-var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
-    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
-    return new (P || (P = Promise))(function (resolve, reject) {
-        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
-        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
-        step((generator = generator.apply(thisArg, _arguments || [])).next());
-    });
-};
-function f0() {
-    return __awaiter(this, void 0, void 0, function* () { });
-}
-function f1() {
-    return __awaiter(this, void 0, void 0, function* () { });
-}
-function f3() {
-    return __awaiter(this, void 0, void 0, function* () { });
-}
-let f4 = function () {
-    return __awaiter(this, void 0, void 0, function* () { });
-};
-let f5 = function () {
-    return __awaiter(this, void 0, void 0, function* () { });
-};
-let f6 = function () {
-    return __awaiter(this, void 0, void 0, function* () { });
-};
-let f7 = () => __awaiter(this, void 0, void 0, function* () { });
-let f8 = () => __awaiter(this, void 0, void 0, function* () { });
-let f9 = () => __awaiter(this, void 0, void 0, function* () { });
-let f10 = () => __awaiter(this, void 0, void 0, function* () { return p; });
-let f11 = () => __awaiter(this, void 0, void 0, function* () { return mp; });
-let f12 = () => __awaiter(this, void 0, void 0, function* () { return mp; });
-let f13 = () => __awaiter(this, void 0, void 0, function* () { return p; });
+async function f0() { }
+async function f1() { }
+async function f3() { }
+let f4 = async function () { };
+let f5 = async function () { };
+let f6 = async function () { };
+let f7 = async () => { };
+let f8 = async () => { };
+let f9 = async () => { };
+let f10 = async () => p;
+let f11 = async () => mp;
+let f12 = async () => mp;
+let f13 = async () => p;
 let o = {
-    m1() {
-        return __awaiter(this, void 0, void 0, function* () { });
-    },
-    m2() {
-        return __awaiter(this, void 0, void 0, function* () { });
-    },
-    m3() {
-        return __awaiter(this, void 0, void 0, function* () { });
-    }
+    async m1() { },
+    async m2() { },
+    async m3() { }
 };
 class C {
-    m1() {
-        return __awaiter(this, void 0, void 0, function* () { });
-    }
-    m2() {
-        return __awaiter(this, void 0, void 0, function* () { });
-    }
-    m3() {
-        return __awaiter(this, void 0, void 0, function* () { });
-    }
-    static m4() {
-        return __awaiter(this, void 0, void 0, function* () { });
-    }
-    static m5() {
-        return __awaiter(this, void 0, void 0, function* () { });
-    }
-    static m6() {
-        return __awaiter(this, void 0, void 0, function* () { });
-    }
+    async m1() { }
+    async m2() { }
+    async m3() { }
+    static async m4() { }
+    static async m5() { }
+    static async m6() { }
 }
 var M;
 (function (M) {
-    function f1() {
-        return __awaiter(this, void 0, void 0, function* () { });
-    }
+    async function f1() { }
     M.f1 = f1;
 })(M || (M = {}));
-function f14() {
-    return __awaiter(this, void 0, void 0, function* () {
-        block: {
-            yield 1;
-            break block;
-        }
-    });
+async function f14() {
+    block: {
+        await 1;
+        break block;
+    }
 }
