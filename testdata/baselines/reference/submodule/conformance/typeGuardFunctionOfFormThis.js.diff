--- old.typeGuardFunctionOfFormThis.js
+++ new.typeGuardFunctionOfFormThis.js
@@= skipped -143, +143 lines =@@
 
 
 //// [typeGuardFunctionOfFormThis.js]
-var __extends = (this && this.__extends) || (function () {
-    var extendStatics = function (d, b) {
-        extendStatics = Object.setPrototypeOf ||
-            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
-            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
-        return extendStatics(d, b);
-    };
-    return function (d, b) {
-        if (typeof b !== "function" && b !== null)
-            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
-        extendStatics(d, b);
-        function __() { this.constructor = d; }
-        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-    };
-})();
-var RoyalGuard = /** @class */ (function () {
-    function RoyalGuard() {
-    }
-    RoyalGuard.prototype.isLeader = function () {
+class RoyalGuard {
+    isLeader() {
         return this instanceof LeadGuard;
-    };
-    RoyalGuard.prototype.isFollower = function () {
+    }
+    isFollower() {
         return this instanceof FollowerGuard;
-    };
-    return RoyalGuard;
-}());
-var LeadGuard = /** @class */ (function (_super) {
-    __extends(LeadGuard, _super);
-    function LeadGuard() {
-        return _super !== null && _super.apply(this, arguments) || this;
     }
-    LeadGuard.prototype.lead = function () { };
+}
+class LeadGuard extends RoyalGuard {
+    lead() { }
     ;
-    return LeadGuard;
-}(RoyalGuard));
-var FollowerGuard = /** @class */ (function (_super) {
-    __extends(FollowerGuard, _super);
-    function FollowerGuard() {
-        return _super !== null && _super.apply(this, arguments) || this;
-    }
-    FollowerGuard.prototype.follow = function () { };
+}
+class FollowerGuard extends RoyalGuard {
+    follow() { }
     ;
-    return FollowerGuard;
-}(RoyalGuard));
-var a = new FollowerGuard();
+}
+let a = new FollowerGuard();
 if (a.isLeader()) {
     a.lead();
 }
 else if (a.isFollower()) {
     a.follow();
 }
-var b;
+let b;
 if (b.isLeader()) {
     b.lead();
 }
@@= skipped -70, +42 lines =@@
 // else if (((a)["isFollower"]())) {
 //     a.follow();
 // }
-var holder2 = { a: a };
+var holder2 = { a };
 if (holder2.a.isLeader()) {
     holder2.a;
 }
 else {
     holder2.a;
 }
-var ArrowGuard = /** @class */ (function () {
-    function ArrowGuard() {
-        var _this = this;
-        this.isElite = function () {
-            return _this instanceof ArrowElite;
-        };
-        this.isMedic = function () {
-            return _this instanceof ArrowMedic;
-        };
-    }
-    return ArrowGuard;
-}());
-var ArrowElite = /** @class */ (function (_super) {
-    __extends(ArrowElite, _super);
-    function ArrowElite() {
-        return _super !== null && _super.apply(this, arguments) || this;
-    }
-    ArrowElite.prototype.defend = function () { };
-    return ArrowElite;
-}(ArrowGuard));
-var ArrowMedic = /** @class */ (function (_super) {
-    __extends(ArrowMedic, _super);
-    function ArrowMedic() {
-        return _super !== null && _super.apply(this, arguments) || this;
-    }
-    ArrowMedic.prototype.heal = function () { };
-    return ArrowMedic;
-}(ArrowGuard));
-var guard = new ArrowGuard();
+class ArrowGuard {
+    isElite = () => {
+        return this instanceof ArrowElite;
+    };
+    isMedic = () => {
+        return this instanceof ArrowMedic;
+    };
+}
+class ArrowElite extends ArrowGuard {
+    defend() { }
+}
+class ArrowMedic extends ArrowGuard {
+    heal() { }
+}
+let guard = new ArrowGuard();
 if (guard.isElite()) {
     guard.defend();
 }
 else if (guard.isMedic()) {
     guard.heal();
 }
-var crate;
+let crate;
 if (crate.isSundries()) {
     crate.contents.broken = true;
 }
@@= skipped -52, +38 lines =@@
 // Matching guards should be assignable
 a.isFollower = b.isFollower;
 a.isLeader = b.isLeader;
-var MimicGuard = /** @class */ (function () {
-    function MimicGuard() {
-    }
-    MimicGuard.prototype.isLeader = function () { return this instanceof MimicLeader; };
+class MimicGuard {
+    isLeader() { return this instanceof MimicLeader; }
     ;
-    MimicGuard.prototype.isFollower = function () { return this instanceof MimicFollower; };
+    isFollower() { return this instanceof MimicFollower; }
     ;
-    return MimicGuard;
-}());
-var MimicLeader = /** @class */ (function (_super) {
-    __extends(MimicLeader, _super);
-    function MimicLeader() {
-        return _super !== null && _super.apply(this, arguments) || this;
-    }
-    MimicLeader.prototype.lead = function () { };
-    return MimicLeader;
-}(MimicGuard));
-var MimicFollower = /** @class */ (function (_super) {
-    __extends(MimicFollower, _super);
-    function MimicFollower() {
-        return _super !== null && _super.apply(this, arguments) || this;
-    }
-    MimicFollower.prototype.follow = function () { };
-    return MimicFollower;
-}(MimicGuard));
-var mimic = new MimicGuard();
+}
+class MimicLeader extends MimicGuard {
+    lead() { }
+}
+class MimicFollower extends MimicGuard {
+    follow() { }
+}
+let mimic = new MimicGuard();
 a.isLeader = mimic.isLeader;
 a.isFollower = mimic.isFollower;
 if (mimic.isFollower()) {
     mimic.follow();
     mimic.isFollower = a.isFollower;
 }
-
-
-//// [typeGuardFunctionOfFormThis.d.ts]
-declare class RoyalGuard {
-    isLeader(): this is LeadGuard;
-    isFollower(): this is FollowerGuard;
-}
-declare class LeadGuard extends RoyalGuard {
-    lead(): void;
-}
-declare class FollowerGuard extends RoyalGuard {
-    follow(): void;
-}
-declare let a: RoyalGuard;
-interface GuardInterface extends RoyalGuard {
-}
-declare let b: GuardInterface;
-declare var holder2: {
-    a: RoyalGuard;
-};
-declare class ArrowGuard {
-    isElite: () => this is ArrowElite;
-    isMedic: () => this is ArrowMedic;
-}
-declare class ArrowElite extends ArrowGuard {
-    defend(): void;
-}
-declare class ArrowMedic extends ArrowGuard {
-    heal(): void;
-}
-declare let guard: ArrowGuard;
-interface Supplies {
-    spoiled: boolean;
-}
-interface Sundries {
-    broken: boolean;
-}
-interface Crate<T> {
-    contents: T;
-    volume: number;
-    isSupplies(): this is Crate<Supplies>;
-    isSundries(): this is Crate<Sundries>;
-}
-declare let crate: Crate<{}>;
-declare class MimicGuard {
-    isLeader(): this is MimicLeader;
-    isFollower(): this is MimicFollower;
-}
-declare class MimicLeader extends MimicGuard {
-    lead(): void;
-}
-declare class MimicFollower extends MimicGuard {
-    follow(): void;
-}
-declare let mimic: MimicGuard;
-interface MimicGuardInterface {
-    isLeader(): this is LeadGuard;
-    isFollower(): this is FollowerGuard;
-}
