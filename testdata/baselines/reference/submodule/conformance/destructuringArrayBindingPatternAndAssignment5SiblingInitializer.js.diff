--- old.destructuringArrayBindingPatternAndAssignment5SiblingInitializer.js
+++ new.destructuringArrayBindingPatternAndAssignment5SiblingInitializer.js
@@= skipped -27, +27 lines =@@
 
 
 //// [destructuringArrayBindingPatternAndAssignment5SiblingInitializer.js]
-// To be inferred as `number`
 function f1() {
-    var _a = [1], a1 = _a[0], _b = _a[1], b1 = _b === void 0 ? a1 : _b;
-    var _c = [1], a2 = _c[0], _d = _c[1], b2 = _d === void 0 ? 1 + a2 : _d;
+    const [a1, b1 = a1] = [1];
+    const [a2, b2 = 1 + a2] = [1];
 }
-// To be inferred as `string`
 function f2() {
-    var _a = ['hi'], a1 = _a[0], _b = _a[1], b1 = _b === void 0 ? a1 : _b;
-    var _c = ['hi'], a2 = _c[0], _d = _c[1], b2 = _d === void 0 ? a2 + '!' : _d;
+    const [a1, b1 = a1] = ['hi'];
+    const [a2, b2 = a2 + '!'] = ['hi'];
 }
-// To be inferred as `string | number`
 function f3() {
-    var _a = ['hi', 1], a1 = _a[0], _b = _a[1], b1 = _b === void 0 ? a1 : _b;
-    var _c = ['hi', 1], a2 = _c[0], _d = _c[1], b2 = _d === void 0 ? a2 + '!' : _d;
+    const [a1, b1 = a1] = ['hi', 1];
+    const [a2, b2 = a2 + '!'] = ['hi', 1];
 }
 function f4() {
-    var _a = yadda !== null && yadda !== void 0 ? yadda : [], a = _a[0], _b = _a[1], b = _b === void 0 ? a : _b;
+    const [a, b = a] = yadda ?? [];
 }
