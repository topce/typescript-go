--- old.recursiveTypesUsedAsFunctionParameters.types
+++ new.recursiveTypesUsedAsFunctionParameters.types
@@= skipped -29, +29 lines =@@
 >x : List<U>
 
 function foo<T>(x: List<T>) {
->foo : { <T_1>(x: List<T_1>): any; <U>(x: List<U>): any; }
+>foo : { <T>(x: List<T>): any; <U>(x: List<U>): any; }
 >x : List<T>
 }
 
@@= skipped -13, +13 lines =@@
 >x : MyList<U>
 
 function foo2<T>(x: any) {
->foo2 : { <T_1>(x: List<T_1>): any; <U>(x: MyList<U>): any; }
+>foo2 : { <T>(x: List<T>): any; <U>(x: MyList<U>): any; }
 >x : any
 }
 
@@= skipped -14, +14 lines =@@
 >x : T
 
     function foo3<V>(x: MyList<V>) { }
->foo3 : <V_1>(x: T) => any
+>foo3 : <V>(x: T) => any
 >x : MyList<V>
 
     // should be error
@@= skipped -10, +10 lines =@@
 >x : T
 
     function foo4<V>(x: List<V>) { }
->foo4 : <V_1>(x: T) => any
+>foo4 : <V>(x: T) => any
 >x : List<V>
 
     // ok
     function foo5<V>(x: T): string;
->foo5 : { <V>(x: T): string; <V_1>(x: List<V_1>): number; <V_1>(x: MyList<V_1>): boolean; }
+>foo5 : { <V>(x: T): string; <V>(x: List<V>): number; <V>(x: MyList<V>): boolean; }
 >x : T
 
     function foo5<V>(x: List<V>): number;
->foo5 : { <V_1>(x: T): string; <V>(x: List<V>): number; <V_1>(x: MyList<V_1>): boolean; }
+>foo5 : { <V>(x: T): string; <V>(x: List<V>): number; <V>(x: MyList<V>): boolean; }
 >x : List<V>
 
     function foo5<V>(x: MyList<V>): boolean;
->foo5 : { <V_1>(x: T): string; <V_1>(x: List<V_1>): number; <V>(x: MyList<V>): boolean; }
+>foo5 : { <V>(x: T): string; <V>(x: List<V>): number; <V>(x: MyList<V>): boolean; }
 >x : MyList<V>
 
     function foo5<V>(x: any): any { return null; }
->foo5 : { <V_1>(x: T): string; <V_1>(x: List<V_1>): number; <V_1>(x: MyList<V_1>): boolean; }
+>foo5 : { <V>(x: T): string; <V>(x: List<V>): number; <V>(x: MyList<V>): boolean; }
 >x : any
 
     var list: List<string>;
