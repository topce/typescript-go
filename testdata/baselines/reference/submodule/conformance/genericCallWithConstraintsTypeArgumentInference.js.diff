--- old.genericCallWithConstraintsTypeArgumentInference.js
+++ new.genericCallWithConstraintsTypeArgumentInference.js
@@= skipped -110, +110 lines =@@
 
 //// [genericCallWithConstraintsTypeArgumentInference.js]
 // Basic type inference with generic calls and constraints, no errors expected
-var __extends = (this && this.__extends) || (function () {
-    var extendStatics = function (d, b) {
-        extendStatics = Object.setPrototypeOf ||
-            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
-            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
-        return extendStatics(d, b);
-    };
-    return function (d, b) {
-        if (typeof b !== "function" && b !== null)
-            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
-        extendStatics(d, b);
-        function __() { this.constructor = d; }
-        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-    };
-})();
-var Base = /** @class */ (function () {
-    function Base() {
-    }
-    return Base;
-}());
-var Derived = /** @class */ (function (_super) {
-    __extends(Derived, _super);
-    function Derived() {
-        return _super !== null && _super.apply(this, arguments) || this;
-    }
-    return Derived;
-}(Base));
-var Derived2 = /** @class */ (function (_super) {
-    __extends(Derived2, _super);
-    function Derived2() {
-        return _super !== null && _super.apply(this, arguments) || this;
-    }
-    return Derived2;
-}(Derived));
+class Base {
+    foo;
+}
+class Derived extends Base {
+    bar;
+}
+class Derived2 extends Derived {
+    baz;
+}
 var b;
 var d1;
 var d2;
@@= skipped -55, +30 lines =@@
 }
 var r3 = foo2b(d1); // Base
 var r3b = foo2c(); // Base
-var C = /** @class */ (function () {
-    function C(t, u) {
+class C {
+    t;
+    u;
+    constructor(t, u) {
         this.t = t;
         this.u = u;
     }
-    C.prototype.foo = function (t, u) {
+    foo(t, u) {
         return t;
-    };
-    C.prototype.foo2 = function (t, u) {
+    }
+    foo2(t, u) {
         return u;
-    };
-    C.prototype.foo3 = function (t, u) {
+    }
+    foo3(t, u) {
         return t;
-    };
-    C.prototype.foo4 = function (t, u) {
+    }
+    foo4(t, u) {
         return t;
-    };
-    C.prototype.foo5 = function (t, u) {
+    }
+    foo5(t, u) {
         return t;
-    };
-    C.prototype.foo6 = function () {
+    }
+    foo6() {
         var x;
         return x;
-    };
-    C.prototype.foo7 = function (u) {
+    }
+    foo7(u) {
         var x;
         return x;
-    };
-    C.prototype.foo8 = function () {
+    }
+    foo8() {
         var x;
         return x;
-    };
-    return C;
-}());
+    }
+}
 var c = new C(b, d1);
 var r4 = c.foo(d1, d2); // Base
 var r5 = c.foo2(b, d2); // Derived
