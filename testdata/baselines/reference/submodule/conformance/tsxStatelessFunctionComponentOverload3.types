//// [tests/cases/conformance/jsx/tsxStatelessFunctionComponentOverload3.tsx] ////

=== file.tsx ===
interface Context {
    color: any;
>color : any
}
declare function ZeroThingOrTwoThing(): JSX.Element;
>ZeroThingOrTwoThing : { (): Element; (l: { yy: number; yy1: string; }, context: Context): Element; }
>JSX : any

declare function ZeroThingOrTwoThing(l: {yy: number, yy1: string}, context: Context): JSX.Element;
>ZeroThingOrTwoThing : { (): Element; (l: { yy: number; yy1: string; }, context: Context): Element; }
>l : { yy: number; yy1: string; }
>yy : number
>yy1 : string
>context : Context
>JSX : any

let obj2: any;
>obj2 : any

// OK
const two1 = <ZeroThingOrTwoThing />;
>two1 : any
><ZeroThingOrTwoThing /> : any
>ZeroThingOrTwoThing : { (): Element; (l: { yy: number; yy1: string; }, context: Context): Element; }

const two2 = <ZeroThingOrTwoThing yy={100}  yy1="hello"/>;
>two2 : any
><ZeroThingOrTwoThing yy={100}  yy1="hello"/> : any
>ZeroThingOrTwoThing : { (): Element; (l: { yy: number; yy1: string; }, context: Context): Element; }
>yy : any
>100 : 100
>yy1 : any

const two3 = <ZeroThingOrTwoThing {...obj2} />;  // it is just any so we allow it to pass through
>two3 : any
><ZeroThingOrTwoThing {...obj2} /> : any
>ZeroThingOrTwoThing : { (): Element; (l: { yy: number; yy1: string; }, context: Context): Element; }
>obj2 : any

const two4 = <ZeroThingOrTwoThing  yy={1000} {...obj2} />;  // it is just any so we allow it to pass through
>two4 : any
><ZeroThingOrTwoThing  yy={1000} {...obj2} /> : any
>ZeroThingOrTwoThing : { (): Element; (l: { yy: number; yy1: string; }, context: Context): Element; }
>yy : any
>1000 : 1000
>obj2 : any

const two5 = <ZeroThingOrTwoThing  {...obj2} yy={1000} />;  // it is just any so we allow it to pass through
>two5 : any
><ZeroThingOrTwoThing  {...obj2} yy={1000} /> : any
>ZeroThingOrTwoThing : { (): Element; (l: { yy: number; yy1: string; }, context: Context): Element; }
>obj2 : any
>yy : any
>1000 : 1000

declare function ThreeThing(l: {y1: string}): JSX.Element;
>ThreeThing : { (l: { y1: string; }): Element; (l: { y2: string; }): Element; (l: { yy: number; yy1: string; }, context: Context, updater: any): Element; }
>l : { y1: string; }
>y1 : string
>JSX : any

declare function ThreeThing(l: {y2: string}): JSX.Element;
>ThreeThing : { (l: { y1: string; }): Element; (l: { y2: string; }): Element; (l: { yy: number; yy1: string; }, context: Context, updater: any): Element; }
>l : { y2: string; }
>y2 : string
>JSX : any

declare function ThreeThing(l: {yy: number, yy1: string}, context: Context, updater: any): JSX.Element;
>ThreeThing : { (l: { y1: string; }): Element; (l: { y2: string; }): Element; (l: { yy: number; yy1: string; }, context: Context, updater: any): Element; }
>l : { yy: number; yy1: string; }
>yy : number
>yy1 : string
>context : Context
>updater : any
>JSX : any

// OK
const three1 = <ThreeThing yy={99} yy1="hello world" />;
>three1 : any
><ThreeThing yy={99} yy1="hello world" /> : any
>ThreeThing : { (l: { y1: string; }): Element; (l: { y2: string; }): Element; (l: { yy: number; yy1: string; }, context: Context, updater: any): Element; }
>yy : any
>99 : 99
>yy1 : any

const three2 = <ThreeThing y2="Bye" />;
>three2 : any
><ThreeThing y2="Bye" /> : any
>ThreeThing : { (l: { y1: string; }): Element; (l: { y2: string; }): Element; (l: { yy: number; yy1: string; }, context: Context, updater: any): Element; }
>y2 : any

const three3 = <ThreeThing {...obj2} y2={10} />;  // it is just any so we allow it to pass through
>three3 : any
><ThreeThing {...obj2} y2={10} /> : any
>ThreeThing : { (l: { y1: string; }): Element; (l: { y2: string; }): Element; (l: { yy: number; yy1: string; }, context: Context, updater: any): Element; }
>obj2 : any
>y2 : any
>10 : 10

