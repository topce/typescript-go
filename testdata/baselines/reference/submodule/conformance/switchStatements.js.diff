--- old.switchStatements.js
+++ new.switchStatements.js
@@= skipped -57, +57 lines =@@
 
 
 //// [switchStatements.js]
-var __extends = (this && this.__extends) || (function () {
-    var extendStatics = function (d, b) {
-        extendStatics = Object.setPrototypeOf ||
-            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
-            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
-        return extendStatics(d, b);
-    };
-    return function (d, b) {
-        if (typeof b !== "function" && b !== null)
-            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
-        extendStatics(d, b);
-        function __() { this.constructor = d; }
-        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-    };
-})();
 var M;
 (function (M) {
     function fn(x) {
@@= skipped -39, +24 lines =@@
     case typeof x:
     case typeof M:
     case M.fn(1):
-    case function (x) { return ''; }:
-    case (function (x) { return ''; })(2):
+    case (x) => '':
+    case ((x) => '')(2):
     default:
 }
 // basic assignable check, rest covered in tests for 'assignment compatibility'
-var C = /** @class */ (function () {
-    function C() {
-    }
-    return C;
-}());
-var D = /** @class */ (function (_super) {
-    __extends(D, _super);
-    function D() {
-        return _super !== null && _super.apply(this, arguments) || this;
-    }
-    return D;
-}(C));
+class C {
+    id;
+}
+class D extends C {
+    name;
+}
 switch (new C()) {
     case new D():
     case { id: 12, name: '' }:
@@= skipped -46, +40 lines =@@
 }
 switch (['a']) {
 }
-switch (function (x) { return ''; }) {
+switch ((x) => '') {
 }
-switch ((function (x) { return ''; })(1)) {
+switch (((x) => '')(1)) {
 }
