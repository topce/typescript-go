--- old.objectTypesIdentityWithGenericConstructSignaturesDifferingByReturnType2.types
+++ new.objectTypesIdentityWithGenericConstructSignaturesDifferingByReturnType2.types
@@= skipped -33, +33 lines =@@
 >x : T
 
 var b = { new<T extends Date>(x: T) { return null; } }; // not a construct signature, function called new
->b : { "new"<T extends Date>(x: T): any; }
->{ new<T extends Date>(x: T) { return null; } } : { "new"<T extends Date>(x: T): any; }
+>b : { new: <T extends Date>(x: T) => any; }
+>{ new<T extends Date>(x: T) { return null; } } : { new: <T extends Date>(x: T) => any; }
 >new : <T extends Date>(x: T) => any
 >x : T
 
@@= skipped -42, +42 lines =@@
 >x : any
 
 function foo3(x: typeof a);
->foo3 : { (x: typeof a): any; (x: typeof a): any; }
+>foo3 : { (x: new <T extends Date>(x: T) => T): any; (x: new <T extends Date>(x: T) => T): any; }
 >x : new <T extends Date>(x: T) => T
 >a : new <T extends Date>(x: T) => T
 
 function foo3(x: typeof a); // error
->foo3 : { (x: typeof a): any; (x: typeof a): any; }
+>foo3 : { (x: new <T extends Date>(x: T) => T): any; (x: new <T extends Date>(x: T) => T): any; }
 >x : new <T extends Date>(x: T) => T
 >a : new <T extends Date>(x: T) => T
 
 function foo3(x: any) { }
->foo3 : { (x: typeof a): any; (x: typeof a): any; }
+>foo3 : { (x: new <T extends Date>(x: T) => T): any; (x: new <T extends Date>(x: T) => T): any; }
 >x : any
 
 function foo4(x: typeof b);
->foo4 : { (x: typeof b): any; (x: typeof b): any; }
->x : { "new"<T extends Date>(x: T): any; }
->b : { "new"<T extends Date>(x: T): any; }
+>foo4 : { (x: { new: <T extends Date>(x: T) => any; }): any; (x: { new: <T extends Date>(x: T) => any; }): any; }
+>x : { new: <T extends Date>(x: T) => any; }
+>b : { new: <T extends Date>(x: T) => any; }
 
 function foo4(x: typeof b); // error
->foo4 : { (x: typeof b): any; (x: typeof b): any; }
->x : { "new"<T extends Date>(x: T): any; }
->b : { "new"<T extends Date>(x: T): any; }
+>foo4 : { (x: { new: <T extends Date>(x: T) => any; }): any; (x: { new: <T extends Date>(x: T) => any; }): any; }
+>x : { new: <T extends Date>(x: T) => any; }
+>b : { new: <T extends Date>(x: T) => any; }
 
 function foo4(x: any) { }
->foo4 : { (x: typeof b): any; (x: typeof b): any; }
+>foo4 : { (x: { new: <T extends Date>(x: T) => any; }): any; (x: { new: <T extends Date>(x: T) => any; }): any; }
 >x : any
 
 function foo8(x: B<Date>);
@@= skipped -52, +52 lines =@@
 >x : any
 
 function foo10(x: B<Date>);
->foo10 : { (x: B<Date>): any; (x: typeof a): any; }
+>foo10 : { (x: B<Date>): any; (x: new <T extends Date>(x: T) => T): any; }
 >x : B<Date>
 
 function foo10(x: typeof a); // ok
->foo10 : { (x: B<Date>): any; (x: typeof a): any; }
+>foo10 : { (x: B<Date>): any; (x: new <T extends Date>(x: T) => T): any; }
 >x : new <T extends Date>(x: T) => T
 >a : new <T extends Date>(x: T) => T
 
 function foo10(x: any) { }
->foo10 : { (x: B<Date>): any; (x: typeof a): any; }
+>foo10 : { (x: B<Date>): any; (x: new <T extends Date>(x: T) => T): any; }
 >x : any
 
 function foo11(x: B<Date>);
->foo11 : { (x: B<Date>): any; (x: typeof b): any; }
+>foo11 : { (x: B<Date>): any; (x: { new: <T extends Date>(x: T) => any; }): any; }
 >x : B<Date>
 
 function foo11(x: typeof b); // ok
->foo11 : { (x: B<Date>): any; (x: typeof b): any; }
->x : { "new"<T extends Date>(x: T): any; }
->b : { "new"<T extends Date>(x: T): any; }
+>foo11 : { (x: B<Date>): any; (x: { new: <T extends Date>(x: T) => any; }): any; }
+>x : { new: <T extends Date>(x: T) => any; }
+>b : { new: <T extends Date>(x: T) => any; }
 
 function foo11(x: any) { }
->foo11 : { (x: B<Date>): any; (x: typeof b): any; }
+>foo11 : { (x: B<Date>): any; (x: { new: <T extends Date>(x: T) => any; }): any; }
 >x : any
 
 function foo12(x: I<Date>);
@@= skipped -50, +50 lines =@@
 >x : any
 
 function foo13(x: I<Date>);
->foo13 : { (x: I<Date>): any; (x: typeof a): any; }
+>foo13 : { (x: I<Date>): any; (x: new <T extends Date>(x: T) => T): any; }
 >x : I<Date>
 
 function foo13(x: typeof a); // ok
->foo13 : { (x: I<Date>): any; (x: typeof a): any; }
+>foo13 : { (x: I<Date>): any; (x: new <T extends Date>(x: T) => T): any; }
 >x : new <T extends Date>(x: T) => T
 >a : new <T extends Date>(x: T) => T
 
 function foo13(x: any) { }
->foo13 : { (x: I<Date>): any; (x: typeof a): any; }
+>foo13 : { (x: I<Date>): any; (x: new <T extends Date>(x: T) => T): any; }
 >x : any
 
 function foo14(x: I<Date>);
->foo14 : { (x: I<Date>): any; (x: typeof b): any; }
+>foo14 : { (x: I<Date>): any; (x: { new: <T extends Date>(x: T) => any; }): any; }
 >x : I<Date>
 
 function foo14(x: typeof b); // ok
->foo14 : { (x: I<Date>): any; (x: typeof b): any; }
->x : { "new"<T extends Date>(x: T): any; }
->b : { "new"<T extends Date>(x: T): any; }
+>foo14 : { (x: I<Date>): any; (x: { new: <T extends Date>(x: T) => any; }): any; }
+>x : { new: <T extends Date>(x: T) => any; }
+>b : { new: <T extends Date>(x: T) => any; }
 
 function foo14(x: any) { }
->foo14 : { (x: I<Date>): any; (x: typeof b): any; }
+>foo14 : { (x: I<Date>): any; (x: { new: <T extends Date>(x: T) => any; }): any; }
 >x : any
 
 function foo15(x: I2);
