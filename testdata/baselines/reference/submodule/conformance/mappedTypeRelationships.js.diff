--- old.mappedTypeRelationships.js
+++ new.mappedTypeRelationships.js
@@= skipped -282, +282 lines =@@
     y = x; // Error
 }
 function f50(obj, key) {
-    var item = obj[key];
+    let item = obj[key];
     return obj[key].name;
 }
 function f51(obj, key) {
-    var item = obj[key];
+    let item = obj[key];
     return obj[key].name;
 }
 function f60(x, y) {
@@= skipped -57, +57 lines =@@
     return t[k1][k2];
 }
 function f90() {
-    var n = { x: 1 };
+    const n = { x: 1 };
 }
 function f() {
     return undefined;
 }
-
-
-//// [mappedTypeRelationships.d.ts]
-declare function f1<T>(x: T, k: keyof T): T[keyof T];
-declare function f2<T, K extends keyof T>(x: T, k: K): T[K];
-declare function f3<T, U extends T>(x: T, y: U, k: keyof T): void;
-declare function f4<T, U extends T, K extends keyof T>(x: T, y: U, k: K): void;
-declare function f5<T, U extends T>(x: T, y: U, k: keyof U): void;
-declare function f6<T, U extends T, K extends keyof U>(x: T, y: U, k: K): void;
-declare function f10<T>(x: T, y: Partial<T>, k: keyof T): void;
-declare function f11<T, K extends keyof T>(x: T, y: Partial<T>, k: K): void;
-declare function f12<T, U extends T>(x: T, y: Partial<U>, k: keyof T): void;
-declare function f13<T, U extends T, K extends keyof T>(x: T, y: Partial<U>, k: K): void;
-declare function f20<T>(x: T, y: Readonly<T>, k: keyof T): void;
-declare function f21<T, K extends keyof T>(x: T, y: Readonly<T>, k: K): void;
-declare function f22<T, U extends T>(x: T, y: Readonly<U>, k: keyof T): void;
-declare function f23<T, U extends T, K extends keyof T>(x: T, y: Readonly<U>, k: K): void;
-type Thing = {
-    a: string;
-    b: string;
-};
-declare function f30<T>(x: T, y: Partial<T>): void;
-declare function f31<T extends Thing>(x: Partial<Thing>, y: Partial<T>): void;
-declare function f40<T>(x: T, y: Readonly<T>): void;
-declare function f41<T extends Thing>(x: Readonly<Thing>, y: Readonly<T>): void;
-type Item = {
-    name: string;
-};
-type ItemMap = {
-    [x: string]: Item;
-};
-declare function f50<T extends ItemMap>(obj: T, key: keyof T): string;
-declare function f51<T extends ItemMap, K extends keyof T>(obj: T, key: K): string;
-type T1<T> = {
-    [P in keyof T]: T[P];
-};
-type T2<T> = {
-    [P in keyof T]: T[P];
-};
-declare function f60<U>(x: T1<U>, y: T2<U>): void;
-type Identity<T> = {
-    [P in keyof T]: T[P];
-};
-declare function f61<U>(x: Identity<U>, y: Partial<U>): void;
-declare function f62<U>(x: Identity<U>, y: Readonly<U>): void;
-declare function f70<T>(x: {
-    [P in keyof T]: T[P];
-}, y: {
-    [P in keyof T]: T[P];
-}): void;
-declare function f71<T, U extends T>(x: {
-    [P in keyof T]: T[P];
-}, y: {
-    [P in keyof T]: U[P];
-}): void;
-declare function f72<T, U extends T>(x: {
-    [P in keyof T]: T[P];
-}, y: {
-    [P in keyof U]: U[P];
-}): void;
-declare function f73<T, K extends keyof T>(x: {
-    [P in K]: T[P];
-}, y: {
-    [P in keyof T]: T[P];
-}): void;
-declare function f74<T, U extends T, K extends keyof T>(x: {
-    [P in K]: T[P];
-}, y: {
-    [P in keyof U]: U[P];
-}): void;
-declare function f75<T, U extends T, K extends keyof T>(x: {
-    [P in K]: T[P];
-}, y: {
-    [P in keyof T]: U[P];
-}): void;
-declare function f76<T, U extends T, K extends keyof T>(x: {
-    [P in K]: T[P];
-}, y: {
-    [P in K]: U[P];
-}): void;
-declare function f80<T>(t: T): Partial<T>;
-declare function f81<T, K extends keyof T>(t: T, k: K): Partial<T[K]>;
-declare function f82<T, K1 extends keyof T, K2 extends keyof T[K1]>(t: T, k1: K1, k2: K2): Partial<T[K1][K2]>;
-type Numeric<T> = {
-    [K in keyof T]?: number;
-};
-declare function f90<T extends {
-    x: number;
-}>(): void;
-declare function f<T extends {
-    x: {};
-}>(): Partial<T>;
-interface SettingsTypes {
-    audio: {
-        volume: string;
-    };
-    video: {
-        resolution: string;
-    };
-}
-interface Settings<Params extends {
-    [K in keyof Params]?: string;
-}> {
-    config: Params;
-}
-type ConcreteSettingsResult1 = Settings<SettingsTypes["audio"]>;
-type ConcreteSettingsResult2 = Settings<SettingsTypes["audio" | "video"]>;
-type GenericSettingsAccess<T extends keyof SettingsTypes> = Settings<SettingsTypes[T]>;
-type GenericSettingsResult1 = GenericSettingsAccess<"audio">;
-type GenericSettingsResult2 = GenericSettingsAccess<"audio" | "video">;
