--- old.inlineJsxFactoryDeclarationsLocalTypes.js
+++ new.inlineJsxFactoryDeclarationsLocalTypes.js
@@= skipped -88, +88 lines =@@
 
 //// [component.js]
 "use strict";
-var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
-    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
-        if (ar || !(i in from)) {
-            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
-            ar[i] = from[i];
-        }
-    }
-    return to.concat(ar || Array.prototype.slice.call(from));
-};
-var _this = this;
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.tree = exports.MyClass = exports.MySFC = void 0;
-/** @jsx predom */
-var renderer2_1 = require("./renderer2");
-var MySFC = function (props) { return renderer2_1.predom.apply(void 0, __spreadArray(["p", null, props.x,
-    " + ",
-    props.y,
-    " = ",
-    props.x + props.y], _this.props.children, false)); };
+const MySFC = (props) => <p>{props.x} + {props.y} = {props.x + props.y}{...this.props.children}</p>;
 exports.MySFC = MySFC;
-var MyClass = /** @class */ (function () {
-    function MyClass(props) {
+class MyClass {
+    props;
+    __predomBrand;
+    constructor(props) {
         this.props = props;
     }
-    MyClass.prototype.render = function () {
-        return renderer2_1.predom.apply(void 0, __spreadArray(["p", null, this.props.x,
-            " + ",
-            this.props.y,
-            " = ",
-            this.props.x + this.props.y], this.props.children, false));
-    };
-    return MyClass;
-}());
+    render() {
+        return <p>
+            {this.props.x} + {this.props.y} = {this.props.x + this.props.y}
+            {...this.props.children}
+        </p>;
+    }
+}
 exports.MyClass = MyClass;
-exports.tree = (0, renderer2_1.predom)(exports.MySFC, { x: 1, y: 2 },
-    (0, renderer2_1.predom)(MyClass, { x: 3, y: 4 }),
-    (0, renderer2_1.predom)(MyClass, { x: 5, y: 6 }));
-exports.default = (0, renderer2_1.predom)("h", null);
+exports.tree = <exports.MySFC x={1} y={2}><MyClass x={3} y={4}/><MyClass x={5} y={6}/></MySFC>;
+exports.default = <h></h>;
 //// [index.js]
 "use strict";
-var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
-    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
-        if (ar || !(i in from)) {
-            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
-            ar[i] = from[i];
-        }
-    }
-    return to.concat(ar || Array.prototype.slice.call(from));
-};
 Object.defineProperty(exports, "__esModule", { value: true });
-/** @jsx dom */
-var renderer_1 = require("./renderer");
-var component_1 = require("./component");
-var elem = component_1.default;
-elem = (0, renderer_1.dom)("h", null); // Expect assignability error here
-var DOMSFC = function (props) { return (0, renderer_1.dom)("p", null,
-    props.x,
-    " + ",
-    props.y,
-    " = ",
-    props.x + props.y,
-    props.children); };
-var DOMClass = /** @class */ (function () {
-    function DOMClass(props) {
+const component_1 = require("./component");
+let elem = component_1.default;
+elem = <h></h>;
+const DOMSFC = (props) => <p>{props.x} + {props.y} = {props.x + props.y}{props.children}</p>;
+class DOMClass {
+    props;
+    __domBrand;
+    constructor(props) {
         this.props = props;
     }
-    DOMClass.prototype.render = function () {
-        return renderer_1.dom.apply(void 0, __spreadArray(["p", null, this.props.x,
-            " + ",
-            this.props.y,
-            " = ",
-            this.props.x + this.props.y], this.props.children, false));
-    };
-    return DOMClass;
-}());
-// Should work, everything is a DOM element
-var _tree = (0, renderer_1.dom)(DOMSFC, { x: 1, y: 2 },
-    (0, renderer_1.dom)(DOMClass, { x: 3, y: 4 }),
-    (0, renderer_1.dom)(DOMClass, { x: 5, y: 6 }));
-// Should fail, no dom elements
-var _brokenTree = (0, renderer_1.dom)(component_1.MySFC, { x: 1, y: 2 },
-    (0, renderer_1.dom)(component_1.MyClass, { x: 3, y: 4 }),
-    (0, renderer_1.dom)(component_1.MyClass, { x: 5, y: 6 }));
-// Should fail, nondom isn't allowed as children of dom
-var _brokenTree2 = (0, renderer_1.dom)(DOMSFC, { x: 1, y: 2 },
-    component_1.tree,
-    component_1.tree);
+    render() {
+        return <p>{this.props.x} + {this.props.y} = {this.props.x + this.props.y}{...this.props.children}</p>;
+    }
+}
+const _tree = <DOMSFC x={1} y={2}><DOMClass x={3} y={4}/><DOMClass x={5} y={6}/></DOMSFC>;
+const _brokenTree = <component_1.MySFC x={1} y={2}><component_1.MyClass x={3} y={4}/><component_1.MyClass x={5} y={6}/></MySFC>;
+const _brokenTree2 = <DOMSFC x={1} y={2}>{component_1.tree}{component_1.tree}</DOMSFC>;
