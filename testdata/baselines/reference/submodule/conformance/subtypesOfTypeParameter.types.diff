--- old.subtypesOfTypeParameter.types
+++ new.subtypesOfTypeParameter.types
@@= skipped -169, +169 lines =@@
 >Date : DateConstructor
 
     var r5 = true ? /1/ : x;
->r5 : RegExp | T
->true ? /1/ : x : RegExp | T
+>r5 : T | RegExp
+>true ? /1/ : x : T | RegExp
 >true : true
 >/1/ : RegExp
 >x : T
 
     var r5 = true ? x : /1/;
->r5 : RegExp | T
->true ? x : /1/ : RegExp | T
+>r5 : T | RegExp
+>true ? x : /1/ : T | RegExp
 >true : true
 >x : T
 >/1/ : RegExp
@@= skipped -32, +32 lines =@@
 >1 : 1
 
     var r7 = true ? () => { } : x;
->r7 : T | (() => void)
->true ? () => { } : x : T | (() => void)
+>r7 : T | () => void
+>true ? () => { } : x : T | () => void
 >true : true
 >() => { } : () => void
 >x : T
 
     var r7 = true ? x : () => { };
->r7 : T | (() => void)
->true ? x : () => { } : T | (() => void)
+>r7 : T | () => void
+>true ? x : () => { } : T | () => void
 >true : true
 >x : T
 >() => { } : () => void
 
     var r8 = true ? <T>(x: T) => { return x } : x;
->r8 : T | (<T_1>(x: T_1) => T_1)
->true ? <T>(x: T) => { return x } : x : T | (<T_1>(x: T_1) => T_1)
+>r8 : T | <T>(x: T) => T
+>true ? <T>(x: T) => { return x } : x : T | <T>(x: T) => T
 >true : true
-><T>(x: T) => { return x } : <T_1>(x: T_1) => T_1
+><T>(x: T) => { return x } : <T>(x: T) => T
 >x : T
 >x : T
 >x : T
 
     var r8b = true ? x : <T>(x: T) => { return x }; // type parameters not identical across declarations
->r8b : T | (<T_1>(x: T_1) => T_1)
->true ? x : <T>(x: T) => { return x } : T | (<T_1>(x: T_1) => T_1)
+>r8b : T | <T>(x: T) => T
+>true ? x : <T>(x: T) => { return x } : T | <T>(x: T) => T
 >true : true
 >x : T
-><T>(x: T) => { return x } : <T_1>(x: T_1) => T_1
+><T>(x: T) => { return x } : <T>(x: T) => T
 >x : T
 >x : T
 
@@= skipped -35, +35 lines =@@
 >i1 : I1
 
     var r9 = true ? i1 : x;
->r9 : I1 | T
->true ? i1 : x : I1 | T
+>r9 : T | I1
+>true ? i1 : x : T | I1
 >true : true
 >i1 : I1
 >x : T
 
     var r9 = true ? x : i1;
->r9 : I1 | T
->true ? x : i1 : I1 | T
+>r9 : T | I1
+>true ? x : i1 : T | I1
 >true : true
 >x : T
 >i1 : I1
@@= skipped -17, +17 lines =@@
 >c1 : C1
 
     var r10 = true ? c1 : x;
->r10 : C1 | T
->true ? c1 : x : C1 | T
+>r10 : T | C1
+>true ? c1 : x : T | C1
 >true : true
 >c1 : C1
 >x : T
 
     var r10 = true ? x : c1;
->r10 : C1 | T
->true ? x : c1 : C1 | T
+>r10 : T | C1
+>true ? x : c1 : T | C1
 >true : true
 >x : T
 >c1 : C1
@@= skipped -47, +47 lines =@@
 >E : typeof E
 
     var r14 = true ? E.A : x;
->r14 : T | E
->true ? E.A : x : T | E
+>r14 : E | T
+>true ? E.A : x : E | T
 >true : true
 >E.A : E
 >E : typeof E
@@= skipped -9, +9 lines =@@
 >x : T
 
     var r14 = true ? x : E.A;
->r14 : T | E
->true ? x : E.A : T | E
+>r14 : E | T
+>true ? x : E.A : E | T
 >true : true
 >x : T
 >E.A : E
@@= skipped -31, +31 lines =@@
 >c : typeof c
 
     var r16 = true ? ac : x;
->r16 : typeof c | T
->true ? ac : x : typeof c | T
+>r16 : T | typeof c
+>true ? ac : x : T | typeof c
 >true : true
 >ac : typeof c
 >x : T
 
     var r16 = true ? x : ac;
->r16 : typeof c | T
->true ? x : ac : typeof c | T
+>r16 : T | typeof c
+>true ? x : ac : T | typeof c
 >true : true
 >x : T
 >ac : typeof c
@@= skipped -18, +18 lines =@@
 >a : T
 
         var r17 = true ? x : a;
->r17 : T_1 | T
->true ? x : a : T_1 | T
+>r17 : T | T
+>true ? x : a : T | T
 >true : true
->x : T_1
+>x : T
 >a : T
 
         var r17 = true ? a : x;
->r17 : T_1 | T
->true ? a : x : T_1 | T
+>r17 : T | T
+>true ? a : x : T | T
 >true : true
 >a : T
->x : T_1
+>x : T
     }
 
     function f18<T, U extends T>(a: U) {
@@= skipped -19, +19 lines =@@
 >a : U
 
         var r18 = true ? x : a;
->r18 : T_1 | U
->true ? x : a : T_1 | U
+>r18 : T | U
+>true ? x : a : T | U
 >true : true
->x : T_1
+>x : T
 >a : U
 
         var r18 = true ? a : x;
->r18 : T_1 | U
->true ? a : x : T_1 | U
+>r18 : T | U
+>true ? a : x : T | U
 >true : true
 >a : U
->x : T_1
+>x : T
     }
 
     var r19 = true ? new Object() : x; // BCT is Object
