--- old.objectTypeWithRecursiveWrappedPropertyCheckedNominally.js
+++ new.objectTypeWithRecursiveWrappedPropertyCheckedNominally.js
@@= skipped -54, +54 lines =@@
 }
 
 //// [objectTypeWithRecursiveWrappedPropertyCheckedNominally.js]
-// Types with infinitely expanding recursive types are type checked nominally
-var List = /** @class */ (function () {
-    function List() {
-    }
-    return List;
-}());
-var MyList = /** @class */ (function () {
-    function MyList() {
-    }
-    return MyList;
-}());
+class List {
+    data;
+    next;
+}
+class MyList {
+    data;
+    next;
+}
 var list1 = new List();
 var list2 = new List();
 var myList1 = new MyList();
 var myList2 = new MyList();
-list1 = myList1; // error, not nominally equal
-list1 = myList2; // error, type mismatch
-list2 = myList1; // error, not nominally equal
-list2 = myList2; // error, type mismatch
+list1 = myList1;
+list1 = myList2;
+list2 = myList1;
+list2 = myList2;
 var rList1 = new List();
 var rMyList1 = new List();
-rList1 = rMyList1; // error, not nominally equal
+rList1 = rMyList1;
 function foo(t, u) {
-    t = u; // error
-    u = t; // error
+    t = u;
+    u = t;
     var a;
     var b;
-    a = t; // ok
-    a = u; // error
-    b = t; // error
-    b = u; // ok
+    a = t;
+    a = u;
+    b = t;
+    b = u;
 }
 function foo2(t, u) {
-    t = u; // error
-    u = t; // was error, ok after constraint made illegal, doesn't matter
+    t = u;
+    u = t;
     var a;
     var b;
-    a = t; // error
-    a = u; // error
-    b = t; // ok
-    b = u; // ok
+    a = t;
+    a = u;
+    b = t;
+    b = u;
 }
