--- old.callChain.3.types
+++ new.callChain.3.types
@@= skipped -4, +4 lines =@@
 >absorb : <T>() => T
 
 declare const a: { m?<T>(obj: {x: T}): T } | undefined;
->a : { m?<T>(obj: { x: T; }): T; } | undefined
->m : (<T>(obj: { x: T; }) => T) | undefined
+>a : { m?: <T>(obj: { x: T; }) => T | undefined; } | undefined
+>m : <T>(obj: { x: T; }) => T | undefined
 >obj : { x: T; }
 >x : T
 
 const n1: number = a?.m?.({x: 12 }); // should be an error (`undefined` is not assignable to `number`)
 >n1 : number
 >a?.m?.({x: 12 }) : number | undefined
->a?.m : (<T>(obj: { x: T; }) => T) | undefined
->a : { m?<T>(obj: { x: T; }): T; } | undefined
->m : (<T>(obj: { x: T; }) => T) | undefined
+>a?.m : <T>(obj: { x: T; }) => T | undefined
+>a : { m?: <T>(obj: { x: T; }) => T | undefined; } | undefined
+>m : <T>(obj: { x: T; }) => T | undefined
 >{x: 12 } : { x: number; }
 >x : number
 >12 : 12
@@= skipped -18, +18 lines =@@
 const n2: number = a?.m?.({x: absorb()}); // likewise
 >n2 : number
 >a?.m?.({x: absorb()}) : number | undefined
->a?.m : (<T>(obj: { x: T; }) => T) | undefined
->a : { m?<T>(obj: { x: T; }): T; } | undefined
->m : (<T>(obj: { x: T; }) => T) | undefined
+>a?.m : <T>(obj: { x: T; }) => T | undefined
+>a : { m?: <T>(obj: { x: T; }) => T | undefined; } | undefined
+>m : <T>(obj: { x: T; }) => T | undefined
 >{x: absorb()} : { x: number; }
 >x : number
 >absorb() : number
@@= skipped -11, +11 lines =@@
 const n3: number | undefined = a?.m?.({x: 12}); // should be ok
 >n3 : number | undefined
 >a?.m?.({x: 12}) : number | undefined
->a?.m : (<T>(obj: { x: T; }) => T) | undefined
->a : { m?<T>(obj: { x: T; }): T; } | undefined
->m : (<T>(obj: { x: T; }) => T) | undefined
+>a?.m : <T>(obj: { x: T; }) => T | undefined
+>a : { m?: <T>(obj: { x: T; }) => T | undefined; } | undefined
+>m : <T>(obj: { x: T; }) => T | undefined
 >{x: 12} : { x: number; }
 >x : number
 >12 : 12
@@= skipped -10, +10 lines =@@
 const n4: number | undefined = a?.m?.({x: absorb()}); // likewise
 >n4 : number | undefined
 >a?.m?.({x: absorb()}) : number | undefined
->a?.m : (<T>(obj: { x: T; }) => T) | undefined
->a : { m?<T>(obj: { x: T; }): T; } | undefined
->m : (<T>(obj: { x: T; }) => T) | undefined
+>a?.m : <T>(obj: { x: T; }) => T | undefined
+>a : { m?: <T>(obj: { x: T; }) => T | undefined; } | undefined
+>m : <T>(obj: { x: T; }) => T | undefined
 >{x: absorb()} : { x: number; }
 >x : number
 >absorb() : number
@@= skipped -12, +12 lines =@@
 let t1 = a?.m?.({x: 12});
 >t1 : number | undefined
 >a?.m?.({x: 12}) : number | undefined
->a?.m : (<T>(obj: { x: T; }) => T) | undefined
->a : { m?<T>(obj: { x: T; }): T; } | undefined
->m : (<T>(obj: { x: T; }) => T) | undefined
+>a?.m : <T>(obj: { x: T; }) => T | undefined
+>a : { m?: <T>(obj: { x: T; }) => T | undefined; } | undefined
+>m : <T>(obj: { x: T; }) => T | undefined
 >{x: 12} : { x: number; }
 >x : number
 >12 : 12
@@= skipped -12, +12 lines =@@
 >t1 : number | undefined
 >a!.m!({x: 12}) : number
 >a!.m! : <T>(obj: { x: T; }) => T
->a!.m : (<T>(obj: { x: T; }) => T) | undefined
->a! : { m?<T>(obj: { x: T; }): T; }
->a : { m?<T>(obj: { x: T; }): T; } | undefined
->m : (<T>(obj: { x: T; }) => T) | undefined
+>a!.m : <T>(obj: { x: T; }) => T | undefined
+>a! : { m?: <T>(obj: { x: T; }) => T | undefined; }
+>a : { m?: <T>(obj: { x: T; }) => T | undefined; } | undefined
+>m : <T>(obj: { x: T; }) => T | undefined
 >{x: 12} : { x: number; }
 >x : number
 >12 : 12
