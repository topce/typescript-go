--- old.parser.asyncGenerators.objectLiteralMethods.es2018.types
+++ new.parser.asyncGenerators.objectLiteralMethods.es2018.types
@@= skipped -1, +1 lines =@@
 
 === methodIsOk.ts ===
 const o1 = {
->o1 : { f(): AsyncGenerator<never, void, unknown>; }
->{    async * f() {    }} : { f(): AsyncGenerator<never, void, unknown>; }
+>o1 : { f: () => AsyncGenerator<never, void, unknown>; }
+>{    async * f() {    }} : { f: () => AsyncGenerator<never, void, unknown>; }
 
     async * f() {
 >f : () => AsyncGenerator<never, void, unknown>
@@= skipped -9, +9 lines =@@
 };
 === awaitMethodNameIsOk.ts ===
 const o2 = {
->o2 : { await(): AsyncGenerator<never, void, unknown>; }
->{    async * await() {    }} : { await(): AsyncGenerator<never, void, unknown>; }
+>o2 : { await: () => AsyncGenerator<never, void, unknown>; }
+>{    async * await() {    }} : { await: () => AsyncGenerator<never, void, unknown>; }
 
     async * await() {
 >await : () => AsyncGenerator<never, void, unknown>
@@= skipped -9, +9 lines =@@
 };
 === yieldMethodNameIsOk.ts ===
 const o3 = {
->o3 : { yield(): AsyncGenerator<never, void, unknown>; }
->{    async * yield() {    }} : { yield(): AsyncGenerator<never, void, unknown>; }
+>o3 : { yield: () => AsyncGenerator<never, void, unknown>; }
+>{    async * yield() {    }} : { yield: () => AsyncGenerator<never, void, unknown>; }
 
     async * yield() {
 >yield : () => AsyncGenerator<never, void, unknown>
@@= skipped -9, +9 lines =@@
 };
 === awaitParameterIsError.ts ===
 const o4 = {
->o4 : { f(await: any): AsyncGenerator<never, void, unknown>; }
->{    async * f(await) {    }} : { f(await: any): AsyncGenerator<never, void, unknown>; }
+>o4 : { f: (await: any) => AsyncGenerator<never, void, unknown>; }
+>{    async * f(await) {    }} : { f: (await: any) => AsyncGenerator<never, void, unknown>; }
 
     async * f(await) {
 >f : (await: any) => AsyncGenerator<never, void, unknown>
@@= skipped -10, +10 lines =@@
 };
 === yieldParameterIsError.ts ===
 const o5 = {
->o5 : { f(yield: any): AsyncGenerator<never, void, unknown>; }
->{    async * f(yield) {    }} : { f(yield: any): AsyncGenerator<never, void, unknown>; }
+>o5 : { f: (yield: any) => AsyncGenerator<never, void, unknown>; }
+>{    async * f(yield) {    }} : { f: (yield: any) => AsyncGenerator<never, void, unknown>; }
 
     async * f(yield) {
 >f : (yield: any) => AsyncGenerator<never, void, unknown>
@@= skipped -10, +10 lines =@@
 };
 === awaitInParameterInitializerIsError.ts ===
 const o6 = {
->o6 : { f(a?: number): AsyncGenerator<never, void, unknown>; }
->{    async * f(a = await 1) {    }} : { f(a?: number): AsyncGenerator<never, void, unknown>; }
+>o6 : { f: (a?: number) => AsyncGenerator<never, void, unknown>; }
+>{    async * f(a = await 1) {    }} : { f: (a?: number) => AsyncGenerator<never, void, unknown>; }
 
     async * f(a = await 1) {
 >f : (a?: number) => AsyncGenerator<never, void, unknown>
@@= skipped -12, +12 lines =@@
 };
 === yieldInParameterInitializerIsError.ts ===
 const o7 = {
->o7 : { f(a?: any): AsyncGenerator<never, void, unknown>; }
->{    async * f(a = yield) {    }} : { f(a?: any): AsyncGenerator<never, void, unknown>; }
+>o7 : { f: (a?: any) => AsyncGenerator<never, void, unknown>; }
+>{    async * f(a = yield) {    }} : { f: (a?: any) => AsyncGenerator<never, void, unknown>; }
 
     async * f(a = yield) {
 >f : (a?: any) => AsyncGenerator<never, void, unknown>
@@= skipped -11, +11 lines =@@
 };
 === nestedAsyncGeneratorIsOk.ts ===
 const o8 = {
->o8 : { f(): AsyncGenerator<never, void, unknown>; }
->{    async * f() {        async function * g() {        }    }} : { f(): AsyncGenerator<never, void, unknown>; }
+>o8 : { f: () => AsyncGenerator<never, void, unknown>; }
+>{    async * f() {        async function * g() {        }    }} : { f: () => AsyncGenerator<never, void, unknown>; }
 
     async * f() {
 >f : () => AsyncGenerator<never, void, unknown>
@@= skipped -13, +13 lines =@@
 };
 === nestedFunctionDeclarationNamedYieldIsError.ts ===
 const o9 = {
->o9 : { f(): AsyncGenerator<never, void, unknown>; }
->{    async * f() {        function yield() {        }    }} : { f(): AsyncGenerator<never, void, unknown>; }
+>o9 : { f: () => AsyncGenerator<never, void, unknown>; }
+>{    async * f() {        function yield() {        }    }} : { f: () => AsyncGenerator<never, void, unknown>; }
 
     async * f() {
 >f : () => AsyncGenerator<never, void, unknown>
@@= skipped -13, +13 lines =@@
 };
 === nestedFunctionExpressionNamedYieldIsError.ts ===
 const o10 = {
->o10 : { f(): AsyncGenerator<never, void, unknown>; }
->{    async * f() {        const x = function yield() {        };    }} : { f(): AsyncGenerator<never, void, unknown>; }
+>o10 : { f: () => AsyncGenerator<never, void, unknown>; }
+>{    async * f() {        const x = function yield() {        };    }} : { f: () => AsyncGenerator<never, void, unknown>; }
 
     async * f() {
 >f : () => AsyncGenerator<never, void, unknown>
@@= skipped -16, +16 lines =@@
 };
 === nestedFunctionDeclarationNamedAwaitIsError.ts ===
 const o11 = {
->o11 : { f(): AsyncGenerator<never, void, unknown>; }
->{    async * f() {        function await() {        }    }} : { f(): AsyncGenerator<never, void, unknown>; }
+>o11 : { f: () => AsyncGenerator<never, void, unknown>; }
+>{    async * f() {        function await() {        }    }} : { f: () => AsyncGenerator<never, void, unknown>; }
 
     async * f() {
 >f : () => AsyncGenerator<never, void, unknown>
@@= skipped -13, +13 lines =@@
 };
 === nestedFunctionExpressionNamedAwaitIsError.ts ===
 const o12 = {
->o12 : { f(): AsyncGenerator<never, void, unknown>; }
->{    async * f() {        const x = function await() {        };    }} : { f(): AsyncGenerator<never, void, unknown>; }
+>o12 : { f: () => AsyncGenerator<never, void, unknown>; }
+>{    async * f() {        const x = function await() {        };    }} : { f: () => AsyncGenerator<never, void, unknown>; }
 
     async * f() {
 >f : () => AsyncGenerator<never, void, unknown>
@@= skipped -16, +16 lines =@@
 };
 === yieldIsOk.ts ===
 const o13 = {
->o13 : { f(): AsyncGenerator<any, void, unknown>; }
->{    async * f() {        yield;    }} : { f(): AsyncGenerator<any, void, unknown>; }
+>o13 : { f: () => AsyncGenerator<any, void, unknown>; }
+>{    async * f() {        yield;    }} : { f: () => AsyncGenerator<any, void, unknown>; }
 
     async * f() {
 >f : () => AsyncGenerator<any, void, unknown>
@@= skipped -12, +12 lines =@@
 };
 === yieldWithValueIsOk.ts ===
 const o14 = {
->o14 : { f(): AsyncGenerator<number, void, unknown>; }
->{    async * f() {        yield 1;    }} : { f(): AsyncGenerator<number, void, unknown>; }
+>o14 : { f: () => AsyncGenerator<number, void, unknown>; }
+>{    async * f() {        yield 1;    }} : { f: () => AsyncGenerator<number, void, unknown>; }
 
     async * f() {
 >f : () => AsyncGenerator<number, void, unknown>
@@= skipped -13, +13 lines =@@
 };
 === yieldStarMissingValueIsError.ts ===
 const o15 = {
->o15 : { f(): AsyncGenerator<any, void, any>; }
->{    async * f() {        yield *;    }} : { f(): AsyncGenerator<any, void, any>; }
+>o15 : { f: () => AsyncGenerator<any, void, any>; }
+>{    async * f() {        yield *;    }} : { f: () => AsyncGenerator<any, void, any>; }
 
     async * f() {
 >f : () => AsyncGenerator<any, void, any>
@@= skipped -13, +13 lines =@@
 };
 === yieldStarWithValueIsOk.ts ===
 const o16 = {
->o16 : { f(): AsyncGenerator<any, void, unknown>; }
->{    async * f() {        yield * [];    }} : { f(): AsyncGenerator<any, void, unknown>; }
+>o16 : { f: () => AsyncGenerator<any, void, unknown>; }
+>{    async * f() {        yield * [];    }} : { f: () => AsyncGenerator<any, void, unknown>; }
 
     async * f() {
 >f : () => AsyncGenerator<any, void, unknown>
@@= skipped -13, +13 lines =@@
 };
 === awaitWithValueIsOk.ts ===
 const o17 = {
->o17 : { f(): AsyncGenerator<never, void, unknown>; }
->{    async * f() {        await 1;    }} : { f(): AsyncGenerator<never, void, unknown>; }
+>o17 : { f: () => AsyncGenerator<never, void, unknown>; }
+>{    async * f() {        await 1;    }} : { f: () => AsyncGenerator<never, void, unknown>; }
 
     async * f() {
 >f : () => AsyncGenerator<never, void, unknown>
@@= skipped -13, +13 lines =@@
 };
 === awaitMissingValueIsError.ts ===
 const o18 = {
->o18 : { f(): AsyncGenerator<never, void, unknown>; }
->{    async * f() {        await;    }} : { f(): AsyncGenerator<never, void, unknown>; }
+>o18 : { f: () => AsyncGenerator<never, void, unknown>; }
+>{    async * f() {        await;    }} : { f: () => AsyncGenerator<never, void, unknown>; }
 
     async * f() {
 >f : () => AsyncGenerator<never, void, unknown>
@@= skipped -14, +14 lines =@@
 === awaitAsTypeIsOk.ts ===
 interface await {}
 const o19 = {
->o19 : { f(): AsyncGenerator<never, void, unknown>; }
->{    async * f() {        let x: await;    }} : { f(): AsyncGenerator<never, void, unknown>; }
+>o19 : { f: () => AsyncGenerator<never, void, unknown>; }
+>{    async * f() {        let x: await;    }} : { f: () => AsyncGenerator<never, void, unknown>; }
 
     async * f() {
 >f : () => AsyncGenerator<never, void, unknown>
@@= skipped -13, +13 lines =@@
 === yieldAsTypeIsOk.ts ===
 interface yield {}
 const o20 = {
->o20 : { f(): AsyncGenerator<never, void, unknown>; }
->{    async * f() {        let x: yield;    }} : { f(): AsyncGenerator<never, void, unknown>; }
+>o20 : { f: () => AsyncGenerator<never, void, unknown>; }
+>{    async * f() {        let x: yield;    }} : { f: () => AsyncGenerator<never, void, unknown>; }
 
     async * f() {
 >f : () => AsyncGenerator<never, void, unknown>
@@= skipped -12, +12 lines =@@
 };
 === yieldInNestedComputedPropertyIsOk.ts ===
 const o21 = {
->o21 : { f(): AsyncGenerator<any, void, unknown>; }
->{    async * f() {        const x = { [yield]: 1 };    }} : { f(): AsyncGenerator<any, void, unknown>; }
+>o21 : { f: () => AsyncGenerator<any, void, unknown>; }
+>{    async * f() {        const x = { [yield]: 1 };    }} : { f: () => AsyncGenerator<any, void, unknown>; }
 
     async * f() {
 >f : () => AsyncGenerator<any, void, unknown>
@@= skipped -16, +16 lines =@@
 };
 === asyncGeneratorGetAccessorIsError.ts ===
 const o22 = {
->o22 : { get(): any; x(): number; }
->{    async * get x() {        return 1;    }} : { get(): any; x(): number; }
+>o22 : { get: () => any; x: () => number; }
+>{    async * get x() {        return 1;    }} : { get: () => any; x: () => number; }
 
     async * get x() {
 >get : () => any
@@= skipped -13, +13 lines =@@
 };
 === asyncGeneratorSetAccessorIsError.ts ===
 const o23 = {
->o23 : { set(): any; x(value: number): void; }
->{    async * set x(value: number) {    }} : { set(): any; x(value: number): void; }
+>o23 : { set: () => any; x: (value: number) => void; }
+>{    async * set x(value: number) {    }} : { set: () => any; x: (value: number) => void; }
 
     async * set x(value: number) {
 >set : () => any
@@= skipped -11, +11 lines =@@
 };
 === asyncGeneratorPropertyIsError.ts ===
 const o24 = {
->o24 : { x(): 1; }
->{    async * x: 1;} : { x(): 1; }
+>o24 : { x: () => 1; }
+>{    async * x: 1;} : { x: () => 1; }
 
     async * x: 1;
 >x : () => 1
