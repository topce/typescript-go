--- old.typeOfThisInStaticMembers10(target=es6).js
+++ new.typeOfThisInStaticMembers10(target=es6).js
@@= skipped -50, +50 lines =@@
 
 
 //// [typeOfThisInStaticMembers10.js]
-var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
-    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
-    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
-    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
-    return c > 3 && r && Object.defineProperty(target, key, r), r;
-};
-var _a, _b, _c;
-let C = class C {
-};
-C.a = 1;
-C.b = (void 0).a + 1;
-C = __decorate([
-    foo
-], C);
-let D = class D extends C {
+@foo
+class C {
+    static a = 1;
+    static b = this.a + 1;
+}
+@foo
+class D extends C {
+    static c = 2;
+    static d = this.c + 1;
+    static e = super.a + this.c + 1;
+    static f = () => this.c + 1;
+    static ff = function () { this.c + 1; };
     static foo() {
         return this.c + 1;
     }
@@= skipped -24, +21 lines =@@
     static set fa(v) {
         this.c = v + 1;
     }
-};
-D.c = 2;
-D.d = (void 0).c + 1;
-D.e = (void 0).a + (void 0).c + 1;
-D.f = () => (void 0).c + 1;
-D.ff = function () { this.c + 1; };
-D = __decorate([
-    foo
-], D);
+}
 class CC {
+    static a = 1;
+    static b = this.a + 1;
 }
-_a = CC;
-CC.a = 1;
-CC.b = _a.a + 1;
-class DD extends (_c = CC) {
+class DD extends CC {
+    static c = 2;
+    static d = this.c + 1;
+    static e = super.a + this.c + 1;
+    static f = () => this.c + 1;
+    static ff = function () { this.c + 1; };
     static foo() {
         return this.c + 1;
     }
@@= skipped -25, +21 lines =@@
         this.c = v + 1;
     }
 }
-_b = DD;
-DD.c = 2;
-DD.d = _b.c + 1;
-DD.e = Reflect.get(_c, "a", _b) + _b.c + 1;
-DD.f = () => _b.c + 1;
-DD.ff = function () { this.c + 1; };
