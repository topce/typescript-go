--- old.neverReturningFunctions1.js
+++ new.neverReturningFunctions1.js
@@= skipped -266, +266 lines =@@
 
 //// [neverReturningFunctions1.js]
 "use strict";
-var __extends = (this && this.__extends) || (function () {
-    var extendStatics = function (d, b) {
-        extendStatics = Object.setPrototypeOf ||
-            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
-            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
-        return extendStatics(d, b);
-    };
-    return function (d, b) {
-        if (typeof b !== "function" && b !== null)
-            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
-        extendStatics(d, b);
-        function __() { this.constructor = d; }
-        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-    };
-})();
 Object.defineProperty(exports, "__esModule", { value: true });
 function fail(message) {
     throw new Error(message);
@@= skipped -22, +7 lines =@@
 function f01(x) {
     if (x === undefined)
         fail("undefined argument");
-    x.length; // string
+    x.length;
 }
 function f02(x) {
     if (x >= 0)
         return x;
     fail("negative number");
-    x; // Unreachable
+    x;
 }
 function f03(x) {
-    x; // string
+    x;
     fail();
-    x; // Unreachable
+    x;
 }
 function f11(x, fail) {
     if (x === undefined)
         fail("undefined argument");
-    x.length; // string
+    x.length;
 }
 function f12(x, fail) {
     if (x >= 0)
         return x;
     fail("negative number");
-    x; // Unreachable
+    x;
 }
 function f13(x, fail) {
-    x; // string
+    x;
     fail();
-    x; // Unreachable
+    x;
 }
 var Debug;
 (function (Debug) {
@@= skipped -35, +35 lines =@@
 function f21(x) {
     if (x === undefined)
         Debug.fail("undefined argument");
-    x.length; // string
+    x.length;
 }
 function f22(x) {
     if (x >= 0)
         return x;
     Debug.fail("negative number");
-    x; // Unreachable
+    x;
 }
 function f23(x) {
-    x; // string
+    x;
     Debug.fail();
-    x; // Unreachable
+    x;
 }
 function f24(x) {
-    x; // string
+    x;
     ((Debug).fail)();
-    x; // Unreachable
+    x;
 }
-var Test = /** @class */ (function () {
-    function Test() {
-    }
-    Test.prototype.fail = function (message) {
+class Test {
+    fail(message) {
         throw new Error(message);
-    };
-    Test.prototype.f1 = function (x) {
+    }
+    f1(x) {
         if (x === undefined)
             this.fail("undefined argument");
-        x.length; // string
-    };
-    Test.prototype.f2 = function (x) {
+        x.length;
+    }
+    f2(x) {
         if (x >= 0)
             return x;
         this.fail("negative number");
-        x; // Unreachable
-    };
-    Test.prototype.f3 = function (x) {
-        x; // string
+        x;
+    }
+    f3(x) {
+        x;
         this.fail();
-        x; // Unreachable
-    };
-    return Test;
-}());
+        x;
+    }
+}
 function f30(x) {
     if (typeof x === "string") {
         fail();
-        x; // Unreachable
+        x;
     }
     else {
-        x; // number | undefined
+        x;
         if (x !== undefined) {
-            x; // number
+            x;
             fail();
-            x; // Unreachable
+            x;
         }
         else {
-            x; // undefined
+            x;
             fail();
-            x; // Unreachable
+            x;
         }
-        x; // Unreachable
+        x;
     }
-    x; // Unreachable
+    x;
 }
 function f31(x) {
     if (typeof x.a === "string") {
         fail();
-        x; // Unreachable
-        x.a; // Unreachable
+        x;
+        x.a;
     }
-    x; // { a: string | number }
-    x.a; // number
+    x;
+    x.a;
 }
 function f40(x) {
     try {
         x;
         fail();
-        x; // Unreachable
+        x;
     }
     finally {
         x;
         fail();
-        x; // Unreachable
+        x;
     }
-    x; // Unreachable
+    x;
 }
 function f41(x) {
     try {
@@= skipped -92, +89 lines =@@
     finally {
         x;
         fail();
-        x; // Unreachable
+        x;
     }
-    x; // Unreachable
+    x;
 }
 function f42(x) {
     try {
         x;
         fail();
-        x; // Unreachable
+        x;
     }
     finally {
         x;
     }
-    x; // Unreachable
+    x;
 }
 function f43() {
-    var fail = function () { throw new Error(); };
-    var f = [fail];
-    fail(); // No effect (missing type annotation)
-    f[0](); // No effect (not a dotted name)
+    const fail = () => { throw new Error(); };
+    const f = [fail];
+    fail();
+    f[0]();
     f;
 }
-var Component = registerComponent('test-component', {
+const Component = registerComponent('test-component', {
     schema: {
         myProperty: {
             default: [],
-            parse: function () {
+            parse() {
                 return [true];
             }
         },
         string: { type: 'string' },
         num: 0
     },
-    init: function () {
+    init() {
         this.data.num = 0;
         this.el.setAttribute('custom-attribute', 'custom-value');
     },
-    update: function () { },
-    tick: function () { },
-    remove: function () { },
-    pause: function () { },
-    play: function () { },
-    multiply: function (f) {
-        // Reference to system because both were registered with the same name.
+    update() { },
+    tick() { },
+    remove() { },
+    pause() { },
+    play() { },
+    multiply(f) {
         return f * this.data.num * this.system.data.counter;
     }
 });
-// Repro from #36147
-var MyThrowable = /** @class */ (function () {
-    function MyThrowable() {
-    }
-    MyThrowable.prototype.throw = function () {
+class MyThrowable {
+    throw() {
         throw new Error();
-    };
-    return MyThrowable;
-}());
-var SuperThrowable = /** @class */ (function (_super) {
-    __extends(SuperThrowable, _super);
-    function SuperThrowable() {
-        return _super !== null && _super.apply(this, arguments) || this;
     }
-    SuperThrowable.prototype.err = function (msg) {
-        _super.prototype.throw.call(this);
-    };
-    SuperThrowable.prototype.ok = function () {
+}
+class SuperThrowable extends MyThrowable {
+    err(msg) {
+        super.throw();
+    }
+    ok() {
         this.throw();
-    };
-    return SuperThrowable;
-}(MyThrowable));
+    }
+}
 function foo(services, s) {
     if (s === null) {
         services.panic("ouch");
@@= skipped -77, +67 lines =@@
         return s;
     }
 }
-
-
-//// [neverReturningFunctions1.d.ts]
-export interface Component<T extends object = any> {
-    attrName?: string;
-    data: T;
-    dependencies?: string[];
-    el: any;
-    id: string;
-    multiple?: boolean;
-    name: string;
-    schema: unknown;
-    system: any;
-    init(data?: T): void;
-    pause(): void;
-    play(): void;
-    remove(): void;
-    tick?(time: number, timeDelta: number): void;
-    update(oldData: T): void;
-    updateSchema?(): void;
-    extendSchema(update: unknown): void;
-    flushToDOM(): void;
-}
-export interface ComponentConstructor<T extends object> {
-    new (el: unknown, attrValue: string, id: string): T & Component;
-    prototype: T & {
-        name: string;
-        system: unknown;
-        play(): void;
-        pause(): void;
-    };
-}
-export type ComponentDefinition<T extends object = object> = T & Partial<Component> & ThisType<T & Component>;
