--- old.thisTypeInFunctions.types
+++ new.thisTypeInFunctions.types
@@= skipped -128, +128 lines =@@
 }
 let impl: I = {
 >impl : I
->{    a: 12,    explicitVoid2: () => this.a, // ok, this: any because it refers to some outer object (window?)    explicitVoid1() { return 12; },    explicitStructural() {        return this.a;    },    explicitInterface() {        return this.a;    },    explicitThis() {        return this.a;    },} : { a: number; explicitVoid2: () => any; explicitVoid1(this: void): number; explicitStructural(this: { a: number; }): number; explicitInterface(this: I): number; explicitThis(this: I): number; }
+>{    a: 12,    explicitVoid2: () => this.a, // ok, this: any because it refers to some outer object (window?)    explicitVoid1() { return 12; },    explicitStructural() {        return this.a;    },    explicitInterface() {        return this.a;    },    explicitThis() {        return this.a;    },} : { a: number; explicitVoid2: () => any; explicitVoid1: (this: void) => number; explicitStructural: (this: { a: number; }) => number; explicitInterface: (this: I) => number; explicitThis: (this: I) => number; }
 
     a: 12,
 >a : number
@@= skipped -210, +210 lines =@@
 >12 : 12
 
 let reconstructed: { 
->reconstructed : { n: number; explicitThis(this: C, m: number): number; explicitC(this: C, m: number): number; explicitProperty: (this: { n: number; }, m: number) => number; explicitVoid(this: void, m: number): number; }
+>reconstructed : { n: number; explicitThis: (this: C, m: number) => number; explicitC: (this: C, m: number) => number; explicitProperty: (this: { n: number; }, m: number) => number; explicitVoid: (this: void, m: number) => number; }
 
     n: number,
 >n : number
@@= skipped -61, +61 lines =@@
 reconstructed.explicitThis(10);
 >reconstructed.explicitThis(10) : number
 >reconstructed.explicitThis : (this: C, m: number) => number
->reconstructed : { n: number; explicitThis(this: C, m: number): number; explicitC(this: C, m: number): number; explicitProperty: (this: { n: number; }, m: number) => number; explicitVoid(this: void, m: number): number; }
+>reconstructed : { n: number; explicitThis: (this: C, m: number) => number; explicitC: (this: C, m: number) => number; explicitProperty: (this: { n: number; }, m: number) => number; explicitVoid: (this: void, m: number) => number; }
 >explicitThis : (this: C, m: number) => number
 >10 : 10
 
 reconstructed.explicitProperty(11);
 >reconstructed.explicitProperty(11) : number
 >reconstructed.explicitProperty : (this: { n: number; }, m: number) => number
->reconstructed : { n: number; explicitThis(this: C, m: number): number; explicitC(this: C, m: number): number; explicitProperty: (this: { n: number; }, m: number) => number; explicitVoid(this: void, m: number): number; }
+>reconstructed : { n: number; explicitThis: (this: C, m: number) => number; explicitC: (this: C, m: number) => number; explicitProperty: (this: { n: number; }, m: number) => number; explicitVoid: (this: void, m: number) => number; }
 >explicitProperty : (this: { n: number; }, m: number) => number
 >11 : 11
 
 let explicitVoid = reconstructed.explicitVoid;
 >explicitVoid : (this: void, m: number) => number
 >reconstructed.explicitVoid : (this: void, m: number) => number
->reconstructed : { n: number; explicitThis(this: C, m: number): number; explicitC(this: C, m: number): number; explicitProperty: (this: { n: number; }, m: number) => number; explicitVoid(this: void, m: number): number; }
+>reconstructed : { n: number; explicitThis: (this: C, m: number) => number; explicitC: (this: C, m: number) => number; explicitProperty: (this: { n: number; }, m: number) => number; explicitVoid: (this: void, m: number) => number; }
 >explicitVoid : (this: void, m: number) => number
 
 explicitVoid(12);
@@= skipped -148, +148 lines =@@
 >c : C
 >explicitProperty : (this: { n: number; }, m: number) => number
 >reconstructed.explicitProperty : (this: { n: number; }, m: number) => number
->reconstructed : { n: number; explicitThis(this: C, m: number): number; explicitC(this: C, m: number): number; explicitProperty: (this: { n: number; }, m: number) => number; explicitVoid(this: void, m: number): number; }
+>reconstructed : { n: number; explicitThis: (this: C, m: number) => number; explicitC: (this: C, m: number) => number; explicitProperty: (this: { n: number; }, m: number) => number; explicitVoid: (this: void, m: number) => number; }
 >explicitProperty : (this: { n: number; }, m: number) => number
 
 // lambdas are assignable to anything
@@= skipped -367, +367 lines =@@
 
 //// type parameter inference ////
 declare var f: { 
->f : { (this: void, x: number): number; call<U>(this: (...argArray: any[]) => U, ...argArray: any[]): U; }
+>f : { (this: void, x: number): number; call: <U>(this: (...argArray: any[]) => U, ...argArray: any[]) => U; }
 
     (this: void, x: number): number, 
 >this : void
@@= skipped -17, +17 lines =@@
 >n : number
 >f.call(12) : number
 >f.call : <U>(this: (...argArray: any[]) => U, ...argArray: any[]) => U
->f : { (this: void, x: number): number; call<U>(this: (...argArray: any[]) => U, ...argArray: any[]): U; }
+>f : { (this: void, x: number): number; call: <U>(this: (...argArray: any[]) => U, ...argArray: any[]) => U; }
 >call : <U>(this: (...argArray: any[]) => U, ...argArray: any[]) => U
 >12 : 12
 
