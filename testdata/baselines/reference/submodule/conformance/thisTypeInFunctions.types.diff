--- old.thisTypeInFunctions.types
+++ new.thisTypeInFunctions.types
@@= skipped -14, +14 lines =@@
 >n : number
 
     explicitThis(this: this, m: number): number {
->explicitThis : (this: this, m: number) => number
+>explicitThis : (m: number) => number
 >this : this
 >m : number
 
@@= skipped -12, +12 lines =@@
 >m : number
     }
     explicitC(this: C, m: number): number {
->explicitC : (this: C, m: number) => number
+>explicitC : (m: number) => number
 >this : C
 >m : number
 
@@= skipped -12, +12 lines =@@
 >m : number
     }
     explicitProperty(this: {n: number}, m: number): number {
->explicitProperty : (this: { n: number; }, m: number) => number
+>explicitProperty : (m: number) => number
 >this : { n: number; }
 >n : number
 >m : number
@@= skipped -13, +13 lines =@@
 >m : number
     }
     explicitVoid(this: void, m: number): number {
->explicitVoid : (this: void, m: number) => number
+>explicitVoid : (m: number) => number
 >this : void
 >m : number
 
@@= skipped -19, +19 lines =@@
 >a : number
 
     explicitVoid1(this: void): number;
->explicitVoid1 : (this: void) => number
+>explicitVoid1 : () => number
 >this : void
 
     explicitVoid2(this: void): number;
->explicitVoid2 : (this: void) => number
+>explicitVoid2 : () => number
 >this : void
 
     explicitStructural(this: {a: number}): number;
->explicitStructural : (this: { a: number; }) => number
+>explicitStructural : () => number
 >this : { a: number; }
 >a : number
 
     explicitInterface(this: I): number;
->explicitInterface : (this: I) => number
+>explicitInterface : () => number
 >this : I
 
     explicitThis(this: this): number;
->explicitThis : (this: this) => number
+>explicitThis : () => number
 >this : this
 }
 function explicitStructural(this: { y: number }, x: number): number {
->explicitStructural : (this: { y: number; }, x: number) => number
+>explicitStructural : (x: number) => number
 >this : { y: number; }
 >y : number
 >x : number
@@= skipped -34, +34 lines =@@
 >y : number
 }
 function justThis(this: { y: number }): number {
->justThis : (this: { y: number; }) => number
+>justThis : () => number
 >this : { y: number; }
 >y : number
 
@@= skipped -24, +24 lines =@@
 }
 let impl: I = {
 >impl : I
->{    a: 12,    explicitVoid2: () => this.a, // ok, this: any because it refers to some outer object (window?)    explicitVoid1() { return 12; },    explicitStructural() {        return this.a;    },    explicitInterface() {        return this.a;    },    explicitThis() {        return this.a;    },} : { a: number; explicitVoid2: () => any; explicitVoid1(this: void): number; explicitStructural(this: { a: number; }): number; explicitInterface(this: I): number; explicitThis(this: I): number; }
+>{    a: 12,    explicitVoid2: () => this.a, // ok, this: any because it refers to some outer object (window?)    explicitVoid1() { return 12; },    explicitStructural() {        return this.a;    },    explicitInterface() {        return this.a;    },    explicitThis() {        return this.a;    },} : { a: number; explicitVoid2: () => any; explicitVoid1: () => number; explicitStructural: () => number; explicitInterface: () => number; explicitThis: () => number; }
 
     a: 12,
 >a : number
@@= skipped -14, +14 lines =@@
 >a : any
 
     explicitVoid1() { return 12; },
->explicitVoid1 : (this: void) => number
+>explicitVoid1 : () => number
 >12 : 12
 
     explicitStructural() {
->explicitStructural : (this: { a: number; }) => number
+>explicitStructural : () => number
 
         return this.a;
 >this.a : number
@@= skipped -13, +13 lines =@@
 
     },
     explicitInterface() {
->explicitInterface : (this: I) => number
+>explicitInterface : () => number
 
         return this.a;
 >this.a : number
@@= skipped -9, +9 lines =@@
 
     },
     explicitThis() {
->explicitThis : (this: I) => number
+>explicitThis : () => number
 
         return this.a;
 >this.a : number
@@= skipped -10, +10 lines =@@
     },
 }
 impl.explicitVoid1 = function () { return 12; };
->impl.explicitVoid1 = function () { return 12; } : (this: void) => number
->impl.explicitVoid1 : (this: void) => number
+>impl.explicitVoid1 = function () { return 12; } : () => number
+>impl.explicitVoid1 : () => number
 >impl : I
->explicitVoid1 : (this: void) => number
->function () { return 12; } : (this: void) => number
+>explicitVoid1 : () => number
+>function () { return 12; } : () => number
 >12 : 12
 
 impl.explicitVoid2 = () => 12;
 >impl.explicitVoid2 = () => 12 : () => number
->impl.explicitVoid2 : (this: void) => number
+>impl.explicitVoid2 : () => number
 >impl : I
->explicitVoid2 : (this: void) => number
+>explicitVoid2 : () => number
 >() => 12 : () => number
 >12 : 12
 
 impl.explicitStructural = function() { return this.a; };
->impl.explicitStructural = function() { return this.a; } : (this: { a: number; }) => number
->impl.explicitStructural : (this: { a: number; }) => number
+>impl.explicitStructural = function() { return this.a; } : () => number
+>impl.explicitStructural : () => number
 >impl : I
->explicitStructural : (this: { a: number; }) => number
->function() { return this.a; } : (this: { a: number; }) => number
+>explicitStructural : () => number
+>function() { return this.a; } : () => number
 >this.a : number
 >this : { a: number; }
 >a : number
 
 impl.explicitInterface = function() { return this.a; };
->impl.explicitInterface = function() { return this.a; } : (this: I) => number
->impl.explicitInterface : (this: I) => number
+>impl.explicitInterface = function() { return this.a; } : () => number
+>impl.explicitInterface : () => number
 >impl : I
->explicitInterface : (this: I) => number
->function() { return this.a; } : (this: I) => number
+>explicitInterface : () => number
+>function() { return this.a; } : () => number
 >this.a : number
 >this : I
 >a : number
 
 impl.explicitStructural = () => 12;
 >impl.explicitStructural = () => 12 : () => number
->impl.explicitStructural : (this: { a: number; }) => number
+>impl.explicitStructural : () => number
 >impl : I
->explicitStructural : (this: { a: number; }) => number
+>explicitStructural : () => number
 >() => 12 : () => number
 >12 : 12
 
 impl.explicitInterface = () => 12;
 >impl.explicitInterface = () => 12 : () => number
->impl.explicitInterface : (this: I) => number
+>impl.explicitInterface : () => number
 >impl : I
->explicitInterface : (this: I) => number
+>explicitInterface : () => number
 >() => 12 : () => number
 >12 : 12
 
 impl.explicitThis = function () { return this.a; };
->impl.explicitThis = function () { return this.a; } : (this: I) => number
->impl.explicitThis : (this: I) => number
+>impl.explicitThis = function () { return this.a; } : () => number
+>impl.explicitThis : () => number
 >impl : I
->explicitThis : (this: I) => number
->function () { return this.a; } : (this: I) => number
+>explicitThis : () => number
+>function () { return this.a; } : () => number
 >this.a : number
 >this : I
 >a : number
 
 // parameter checking
 let ok: {y: number, f: (this: { y: number }, x: number) => number} = { y: 12, f: explicitStructural };
->ok : { y: number; f: (this: { y: number; }, x: number) => number; }
+>ok : { y: number; f: (x: number) => number; }
 >y : number
->f : (this: { y: number; }, x: number) => number
+>f : (x: number) => number
 >this : { y: number; }
 >y : number
 >x : number
->{ y: 12, f: explicitStructural } : { y: number; f: (this: { y: number; }, x: number) => number; }
+>{ y: 12, f: explicitStructural } : { y: number; f: (x: number) => number; }
 >y : number
 >12 : 12
->f : (this: { y: number; }, x: number) => number
->explicitStructural : (this: { y: number; }, x: number) => number
+>f : (x: number) => number
+>explicitStructural : (x: number) => number
 
 let implicitAnyOk: {notSpecified: number, f: (x: number) => number} = { notSpecified: 12, f: implicitThis };
 >implicitAnyOk : { notSpecified: number; f: (x: number) => number; }
@@= skipped -88, +88 lines =@@
 
 ok.f(13);
 >ok.f(13) : number
->ok.f : (this: { y: number; }, x: number) => number
->ok : { y: number; f: (this: { y: number; }, x: number) => number; }
->f : (this: { y: number; }, x: number) => number
+>ok.f : (x: number) => number
+>ok : { y: number; f: (x: number) => number; }
+>f : (x: number) => number
 >13 : 13
 
 implicitThis(12);
@@= skipped -28, +28 lines =@@
 >D : typeof D
 
 let ripped = c.explicitC;
->ripped : (this: C, m: number) => number
->c.explicitC : (this: C, m: number) => number
+>ripped : (m: number) => number
+>c.explicitC : (m: number) => number
 >c : C
->explicitC : (this: C, m: number) => number
+>explicitC : (m: number) => number
 
 c.explicitC(12);
 >c.explicitC(12) : number
->c.explicitC : (this: C, m: number) => number
+>c.explicitC : (m: number) => number
 >c : C
->explicitC : (this: C, m: number) => number
+>explicitC : (m: number) => number
 >12 : 12
 
 c.explicitProperty(12);
 >c.explicitProperty(12) : number
->c.explicitProperty : (this: { n: number; }, m: number) => number
+>c.explicitProperty : (m: number) => number
 >c : C
->explicitProperty : (this: { n: number; }, m: number) => number
+>explicitProperty : (m: number) => number
 >12 : 12
 
 c.explicitThis(12);
 >c.explicitThis(12) : number
->c.explicitThis : (this: C, m: number) => number
+>c.explicitThis : (m: number) => number
 >c : C
->explicitThis : (this: C, m: number) => number
+>explicitThis : (m: number) => number
 >12 : 12
 
 d.explicitC(12);
 >d.explicitC(12) : number
->d.explicitC : (this: C, m: number) => number
+>d.explicitC : (m: number) => number
 >d : D
->explicitC : (this: C, m: number) => number
+>explicitC : (m: number) => number
 >12 : 12
 
 d.explicitProperty(12);
 >d.explicitProperty(12) : number
->d.explicitProperty : (this: { n: number; }, m: number) => number
+>d.explicitProperty : (m: number) => number
 >d : D
->explicitProperty : (this: { n: number; }, m: number) => number
+>explicitProperty : (m: number) => number
 >12 : 12
 
 d.explicitThis(12);
 >d.explicitThis(12) : number
->d.explicitThis : (this: D, m: number) => number
+>d.explicitThis : (m: number) => number
 >d : D
->explicitThis : (this: D, m: number) => number
+>explicitThis : (m: number) => number
 >12 : 12
 
 let reconstructed: { 
->reconstructed : { n: number; explicitThis(this: C, m: number): number; explicitC(this: C, m: number): number; explicitProperty: (this: { n: number; }, m: number) => number; explicitVoid(this: void, m: number): number; }
+>reconstructed : { n: number; explicitThis: (m: number) => number; explicitC: (m: number) => number; explicitProperty: (m: number) => number; explicitVoid: (m: number) => number; }
 
     n: number,
 >n : number
 
     explicitThis(this: C, m: number): number, // note: this: this is not allowed in an object literal type.
->explicitThis : (this: C, m: number) => number
+>explicitThis : (m: number) => number
 >this : C
 >m : number
 
     explicitC(this: C, m: number): number,
->explicitC : (this: C, m: number) => number
+>explicitC : (m: number) => number
 >this : C
 >m : number
 
     explicitProperty: (this: {n : number}, m: number) => number,
->explicitProperty : (this: { n: number; }, m: number) => number
+>explicitProperty : (m: number) => number
 >this : { n: number; }
 >n : number
 >m : number
 
     explicitVoid(this: void, m: number): number,
->explicitVoid : (this: void, m: number) => number
+>explicitVoid : (m: number) => number
 >this : void
 >m : number
 
 } = { 
->{     n: 12,    explicitThis: c.explicitThis,    explicitC: c.explicitC,    explicitProperty: c.explicitProperty,    explicitVoid: c.explicitVoid} : { n: number; explicitThis: (this: C, m: number) => number; explicitC: (this: C, m: number) => number; explicitProperty: (this: { n: number; }, m: number) => number; explicitVoid: (this: void, m: number) => number; }
+>{     n: 12,    explicitThis: c.explicitThis,    explicitC: c.explicitC,    explicitProperty: c.explicitProperty,    explicitVoid: c.explicitVoid} : { n: number; explicitThis: (m: number) => number; explicitC: (m: number) => number; explicitProperty: (m: number) => number; explicitVoid: (m: number) => number; }
 
     n: 12,
 >n : number
 >12 : 12
 
     explicitThis: c.explicitThis,
->explicitThis : (this: C, m: number) => number
->c.explicitThis : (this: C, m: number) => number
+>explicitThis : (m: number) => number
+>c.explicitThis : (m: number) => number
 >c : C
->explicitThis : (this: C, m: number) => number
+>explicitThis : (m: number) => number
 
     explicitC: c.explicitC,
->explicitC : (this: C, m: number) => number
->c.explicitC : (this: C, m: number) => number
+>explicitC : (m: number) => number
+>c.explicitC : (m: number) => number
 >c : C
->explicitC : (this: C, m: number) => number
+>explicitC : (m: number) => number
 
     explicitProperty: c.explicitProperty,
->explicitProperty : (this: { n: number; }, m: number) => number
->c.explicitProperty : (this: { n: number; }, m: number) => number
+>explicitProperty : (m: number) => number
+>c.explicitProperty : (m: number) => number
 >c : C
->explicitProperty : (this: { n: number; }, m: number) => number
+>explicitProperty : (m: number) => number
 
     explicitVoid: c.explicitVoid
->explicitVoid : (this: void, m: number) => number
->c.explicitVoid : (this: void, m: number) => number
+>explicitVoid : (m: number) => number
+>c.explicitVoid : (m: number) => number
 >c : C
->explicitVoid : (this: void, m: number) => number
+>explicitVoid : (m: number) => number
 
 };
 reconstructed.explicitThis(10);
 >reconstructed.explicitThis(10) : number
->reconstructed.explicitThis : (this: C, m: number) => number
->reconstructed : { n: number; explicitThis(this: C, m: number): number; explicitC(this: C, m: number): number; explicitProperty: (this: { n: number; }, m: number) => number; explicitVoid(this: void, m: number): number; }
->explicitThis : (this: C, m: number) => number
+>reconstructed.explicitThis : (m: number) => number
+>reconstructed : { n: number; explicitThis: (m: number) => number; explicitC: (m: number) => number; explicitProperty: (m: number) => number; explicitVoid: (m: number) => number; }
+>explicitThis : (m: number) => number
 >10 : 10
 
 reconstructed.explicitProperty(11);
 >reconstructed.explicitProperty(11) : number
->reconstructed.explicitProperty : (this: { n: number; }, m: number) => number
->reconstructed : { n: number; explicitThis(this: C, m: number): number; explicitC(this: C, m: number): number; explicitProperty: (this: { n: number; }, m: number) => number; explicitVoid(this: void, m: number): number; }
->explicitProperty : (this: { n: number; }, m: number) => number
+>reconstructed.explicitProperty : (m: number) => number
+>reconstructed : { n: number; explicitThis: (m: number) => number; explicitC: (m: number) => number; explicitProperty: (m: number) => number; explicitVoid: (m: number) => number; }
+>explicitProperty : (m: number) => number
 >11 : 11
 
 let explicitVoid = reconstructed.explicitVoid;
->explicitVoid : (this: void, m: number) => number
->reconstructed.explicitVoid : (this: void, m: number) => number
->reconstructed : { n: number; explicitThis(this: C, m: number): number; explicitC(this: C, m: number): number; explicitProperty: (this: { n: number; }, m: number) => number; explicitVoid(this: void, m: number): number; }
->explicitVoid : (this: void, m: number) => number
+>explicitVoid : (m: number) => number
+>reconstructed.explicitVoid : (m: number) => number
+>reconstructed : { n: number; explicitThis: (m: number) => number; explicitC: (m: number) => number; explicitProperty: (m: number) => number; explicitVoid: (m: number) => number; }
+>explicitVoid : (m: number) => number
 
 explicitVoid(12);
 >explicitVoid(12) : number
->explicitVoid : (this: void, m: number) => number
+>explicitVoid : (m: number) => number
 >12 : 12
 
 // assignment checking
 let unboundToSpecified: (this: { y: number }, x: number) => number = x => x + this.y; // ok, this:any
->unboundToSpecified : (this: { y: number; }, x: number) => number
+>unboundToSpecified : (x: number) => number
 >this : { y: number; }
 >y : number
 >x : number
->x => x + this.y : (this: { y: number; }, x: number) => any
+>x => x + this.y : (x: number) => any
 >x : number
 >x + this.y : any
 >x : number
@@= skipped -146, +146 lines =@@
 >y : any
 
 let specifiedToSpecified: (this: {y: number}, x: number) => number = explicitStructural;
->specifiedToSpecified : (this: { y: number; }, x: number) => number
+>specifiedToSpecified : (x: number) => number
 >this : { y: number; }
 >y : number
 >x : number
->explicitStructural : (this: { y: number; }, x: number) => number
+>explicitStructural : (x: number) => number
 
 let anyToSpecified: (this: { y: number }, x: number) => number = function(x: number): number { return x + 12; };
->anyToSpecified : (this: { y: number; }, x: number) => number
+>anyToSpecified : (x: number) => number
 >this : { y: number; }
 >y : number
 >x : number
->function(x: number): number { return x + 12; } : (this: { y: number; }, x: number) => number
+>function(x: number): number { return x + 12; } : (x: number) => number
 >x : number
 >x + 12 : number
 >x : number
@@= skipped -27, +27 lines =@@
 >12 : 12
 
 let specifiedLambda: (this: void, x: number) => number = x => x + 12;
->specifiedLambda : (this: void, x: number) => number
+>specifiedLambda : (x: number) => number
 >this : void
 >x : number
->x => x + 12 : (this: void, x: number) => number
+>x => x + 12 : (x: number) => number
 >x : number
 >x + 12 : number
 >x : number
 >12 : 12
 
 let unspecifiedLambdaToSpecified: (this: {y: number}, x: number) => number = unspecifiedLambda;
->unspecifiedLambdaToSpecified : (this: { y: number; }, x: number) => number
+>unspecifiedLambdaToSpecified : (x: number) => number
 >this : { y: number; }
 >y : number
 >x : number
 >unspecifiedLambda : (x: number) => number
 
 let specifiedLambdaToSpecified: (this: {y: number}, x: number) => number = specifiedLambda;
->specifiedLambdaToSpecified : (this: { y: number; }, x: number) => number
+>specifiedLambdaToSpecified : (x: number) => number
 >this : { y: number; }
 >y : number
 >x : number
->specifiedLambda : (this: void, x: number) => number
+>specifiedLambda : (x: number) => number
 
 
 let explicitCFunction: (this: C, m: number) => number;
->explicitCFunction : (this: C, m: number) => number
+>explicitCFunction : (m: number) => number
 >this : C
 >m : number
 
 let explicitPropertyFunction: (this: {n: number}, m: number) => number;
->explicitPropertyFunction : (this: { n: number; }, m: number) => number
+>explicitPropertyFunction : (m: number) => number
 >this : { n: number; }
 >n : number
 >m : number
 
 c.explicitC = explicitCFunction;
->c.explicitC = explicitCFunction : (this: C, m: number) => number
->c.explicitC : (this: C, m: number) => number
+>c.explicitC = explicitCFunction : (m: number) => number
+>c.explicitC : (m: number) => number
 >c : C
->explicitC : (this: C, m: number) => number
->explicitCFunction : (this: C, m: number) => number
+>explicitC : (m: number) => number
+>explicitCFunction : (m: number) => number
 
 c.explicitC = function(this: C, m: number) { return this.n + m };
->c.explicitC = function(this: C, m: number) { return this.n + m } : (this: C, m: number) => number
->c.explicitC : (this: C, m: number) => number
+>c.explicitC = function(this: C, m: number) { return this.n + m } : (m: number) => number
+>c.explicitC : (m: number) => number
 >c : C
->explicitC : (this: C, m: number) => number
->function(this: C, m: number) { return this.n + m } : (this: C, m: number) => number
+>explicitC : (m: number) => number
+>function(this: C, m: number) { return this.n + m } : (m: number) => number
 >this : C
 >m : number
 >this.n + m : number
@@= skipped -57, +57 lines =@@
 >m : number
 
 c.explicitProperty = explicitPropertyFunction;
->c.explicitProperty = explicitPropertyFunction : (this: { n: number; }, m: number) => number
->c.explicitProperty : (this: { n: number; }, m: number) => number
+>c.explicitProperty = explicitPropertyFunction : (m: number) => number
+>c.explicitProperty : (m: number) => number
 >c : C
->explicitProperty : (this: { n: number; }, m: number) => number
->explicitPropertyFunction : (this: { n: number; }, m: number) => number
+>explicitProperty : (m: number) => number
+>explicitPropertyFunction : (m: number) => number
 
 c.explicitProperty = function(this: {n: number}, m: number) { return this.n + m };
->c.explicitProperty = function(this: {n: number}, m: number) { return this.n + m } : (this: { n: number; }, m: number) => number
->c.explicitProperty : (this: { n: number; }, m: number) => number
+>c.explicitProperty = function(this: {n: number}, m: number) { return this.n + m } : (m: number) => number
+>c.explicitProperty : (m: number) => number
 >c : C
->explicitProperty : (this: { n: number; }, m: number) => number
->function(this: {n: number}, m: number) { return this.n + m } : (this: { n: number; }, m: number) => number
+>explicitProperty : (m: number) => number
+>function(this: {n: number}, m: number) { return this.n + m } : (m: number) => number
 >this : { n: number; }
 >n : number
 >m : number
@@= skipped -22, +22 lines =@@
 >m : number
 
 c.explicitProperty = reconstructed.explicitProperty;
->c.explicitProperty = reconstructed.explicitProperty : (this: { n: number; }, m: number) => number
->c.explicitProperty : (this: { n: number; }, m: number) => number
+>c.explicitProperty = reconstructed.explicitProperty : (m: number) => number
+>c.explicitProperty : (m: number) => number
 >c : C
->explicitProperty : (this: { n: number; }, m: number) => number
->reconstructed.explicitProperty : (this: { n: number; }, m: number) => number
->reconstructed : { n: number; explicitThis(this: C, m: number): number; explicitC(this: C, m: number): number; explicitProperty: (this: { n: number; }, m: number) => number; explicitVoid(this: void, m: number): number; }
->explicitProperty : (this: { n: number; }, m: number) => number
+>explicitProperty : (m: number) => number
+>reconstructed.explicitProperty : (m: number) => number
+>reconstructed : { n: number; explicitThis: (m: number) => number; explicitC: (m: number) => number; explicitProperty: (m: number) => number; explicitVoid: (m: number) => number; }
+>explicitProperty : (m: number) => number
 
 // lambdas are assignable to anything
 c.explicitC = m => m;
->c.explicitC = m => m : (this: C, m: number) => number
->c.explicitC : (this: C, m: number) => number
+>c.explicitC = m => m : (m: number) => number
+>c.explicitC : (m: number) => number
 >c : C
->explicitC : (this: C, m: number) => number
->m => m : (this: C, m: number) => number
+>explicitC : (m: number) => number
+>m => m : (m: number) => number
 >m : number
 >m : number
 
 c.explicitThis = m => m;
->c.explicitThis = m => m : (this: C, m: number) => number
->c.explicitThis : (this: C, m: number) => number
+>c.explicitThis = m => m : (m: number) => number
+>c.explicitThis : (m: number) => number
 >c : C
->explicitThis : (this: C, m: number) => number
->m => m : (this: C, m: number) => number
+>explicitThis : (m: number) => number
+>m => m : (m: number) => number
 >m : number
 >m : number
 
 c.explicitProperty = m => m;
->c.explicitProperty = m => m : (this: { n: number; }, m: number) => number
->c.explicitProperty : (this: { n: number; }, m: number) => number
+>c.explicitProperty = m => m : (m: number) => number
+>c.explicitProperty : (m: number) => number
 >c : C
->explicitProperty : (this: { n: number; }, m: number) => number
->m => m : (this: { n: number; }, m: number) => number
+>explicitProperty : (m: number) => number
+>m => m : (m: number) => number
 >m : number
 >m : number
 
 // this inside lambdas refer to outer scope
 // the outer-scoped lambda at top-level is still just `any`
 c.explicitC = m => m + this.n;
->c.explicitC = m => m + this.n : (this: C, m: number) => any
->c.explicitC : (this: C, m: number) => number
+>c.explicitC = m => m + this.n : (m: number) => any
+>c.explicitC : (m: number) => number
 >c : C
->explicitC : (this: C, m: number) => number
->m => m + this.n : (this: C, m: number) => any
+>explicitC : (m: number) => number
+>m => m + this.n : (m: number) => any
 >m : number
 >m + this.n : any
 >m : number
@@= skipped -52, +52 lines =@@
 >n : any
 
 c.explicitThis = m => m + this.n;
->c.explicitThis = m => m + this.n : (this: C, m: number) => any
->c.explicitThis : (this: C, m: number) => number
+>c.explicitThis = m => m + this.n : (m: number) => any
+>c.explicitThis : (m: number) => number
 >c : C
->explicitThis : (this: C, m: number) => number
->m => m + this.n : (this: C, m: number) => any
+>explicitThis : (m: number) => number
+>m => m + this.n : (m: number) => any
 >m : number
 >m + this.n : any
 >m : number
@@= skipped -13, +13 lines =@@
 >n : any
 
 c.explicitProperty = m => m + this.n;
->c.explicitProperty = m => m + this.n : (this: { n: number; }, m: number) => any
->c.explicitProperty : (this: { n: number; }, m: number) => number
+>c.explicitProperty = m => m + this.n : (m: number) => any
+>c.explicitProperty : (m: number) => number
 >c : C
->explicitProperty : (this: { n: number; }, m: number) => number
->m => m + this.n : (this: { n: number; }, m: number) => any
+>explicitProperty : (m: number) => number
+>m => m + this.n : (m: number) => any
 >m : number
 >m + this.n : any
 >m : number
@@= skipped -14, +14 lines =@@
 
 //NOTE: this=C here, I guess?
 c.explicitThis = explicitCFunction;
->c.explicitThis = explicitCFunction : (this: C, m: number) => number
->c.explicitThis : (this: C, m: number) => number
+>c.explicitThis = explicitCFunction : (m: number) => number
+>c.explicitThis : (m: number) => number
 >c : C
->explicitThis : (this: C, m: number) => number
->explicitCFunction : (this: C, m: number) => number
+>explicitThis : (m: number) => number
+>explicitCFunction : (m: number) => number
 
 c.explicitThis = function(this: C, m: number) { return this.n + m };
->c.explicitThis = function(this: C, m: number) { return this.n + m } : (this: C, m: number) => number
->c.explicitThis : (this: C, m: number) => number
+>c.explicitThis = function(this: C, m: number) { return this.n + m } : (m: number) => number
+>c.explicitThis : (m: number) => number
 >c : C
->explicitThis : (this: C, m: number) => number
->function(this: C, m: number) { return this.n + m } : (this: C, m: number) => number
+>explicitThis : (m: number) => number
+>function(this: C, m: number) { return this.n + m } : (m: number) => number
 >this : C
 >m : number
 >this.n + m : number
@@= skipped -22, +22 lines =@@
 
 // this:any compatibility
 c.explicitC = function(m) { return this.n + m };
->c.explicitC = function(m) { return this.n + m } : (this: C, m: number) => number
->c.explicitC : (this: C, m: number) => number
+>c.explicitC = function(m) { return this.n + m } : (m: number) => number
+>c.explicitC : (m: number) => number
 >c : C
->explicitC : (this: C, m: number) => number
->function(m) { return this.n + m } : (this: C, m: number) => number
+>explicitC : (m: number) => number
+>function(m) { return this.n + m } : (m: number) => number
 >m : number
 >this.n + m : number
 >this.n : number
@@= skipped -13, +13 lines =@@
 >m : number
 
 c.explicitProperty = function(m) { return this.n + m };
->c.explicitProperty = function(m) { return this.n + m } : (this: { n: number; }, m: number) => number
->c.explicitProperty : (this: { n: number; }, m: number) => number
+>c.explicitProperty = function(m) { return this.n + m } : (m: number) => number
+>c.explicitProperty : (m: number) => number
 >c : C
->explicitProperty : (this: { n: number; }, m: number) => number
->function(m) { return this.n + m } : (this: { n: number; }, m: number) => number
+>explicitProperty : (m: number) => number
+>function(m) { return this.n + m } : (m: number) => number
 >m : number
 >this.n + m : number
 >this.n : number
@@= skipped -13, +13 lines =@@
 >m : number
 
 c.explicitThis = function(m) { return this.n + m };
->c.explicitThis = function(m) { return this.n + m } : (this: C, m: number) => number
->c.explicitThis : (this: C, m: number) => number
+>c.explicitThis = function(m) { return this.n + m } : (m: number) => number
+>c.explicitThis : (m: number) => number
 >c : C
->explicitThis : (this: C, m: number) => number
->function(m) { return this.n + m } : (this: C, m: number) => number
+>explicitThis : (m: number) => number
+>function(m) { return this.n + m } : (m: number) => number
 >m : number
 >this.n + m : number
 >this.n : number
@@= skipped -14, +14 lines =@@
 
 // this: contextual typing
 c.explicitThis = function(this, m) { return this.n + m };
->c.explicitThis = function(this, m) { return this.n + m } : (this: C, m: number) => number
->c.explicitThis : (this: C, m: number) => number
+>c.explicitThis = function(this, m) { return this.n + m } : (m: number) => number
+>c.explicitThis : (m: number) => number
 >c : C
->explicitThis : (this: C, m: number) => number
->function(this, m) { return this.n + m } : (this: C, m: number) => number
+>explicitThis : (m: number) => number
+>function(this, m) { return this.n + m } : (m: number) => number
 >this : C
 >m : number
 >this.n + m : number
@@= skipped -15, +15 lines =@@
 
 // this: superclass compatibility
 c.explicitC = function(this: B, m: number) { return this.n + m };
->c.explicitC = function(this: B, m: number) { return this.n + m } : (this: B, m: number) => number
->c.explicitC : (this: C, m: number) => number
+>c.explicitC = function(this: B, m: number) { return this.n + m } : (m: number) => number
+>c.explicitC : (m: number) => number
 >c : C
->explicitC : (this: C, m: number) => number
->function(this: B, m: number) { return this.n + m } : (this: B, m: number) => number
+>explicitC : (m: number) => number
+>function(this: B, m: number) { return this.n + m } : (m: number) => number
 >this : B
 >m : number
 >this.n + m : number
@@= skipped -15, +15 lines =@@
 
 // this:void compatibility
 c.explicitVoid = n => n;
->c.explicitVoid = n => n : (this: void, n: number) => number
->c.explicitVoid : (this: void, m: number) => number
+>c.explicitVoid = n => n : (n: number) => number
+>c.explicitVoid : (m: number) => number
 >c : C
->explicitVoid : (this: void, m: number) => number
->n => n : (this: void, n: number) => number
+>explicitVoid : (m: number) => number
+>n => n : (n: number) => number
 >n : number
 >n : number
 
@@= skipped -16, +16 lines =@@
 >x : number
 
     public polymorphic(this: this): number { return this.x; }
->polymorphic : (this: this) => number
+>polymorphic : () => number
 >this : this
 >this.x : number
 >this : this
 >x : number
 
     explicit(this: Base1): number { return this.x; }
->explicit : (this: Base1) => number
+>explicit : () => number
 >this : Base1
 >this.x : number
 >this : Base1
 >x : number
 
     static explicitStatic(this: typeof Base1): number { return this.y; }
->explicitStatic : (this: typeof Base1) => number
+>explicitStatic : () => number
 >this : typeof Base1
 >Base1 : typeof Base1
 >this.y : number
@@= skipped -38, +38 lines =@@
 >y : number
 
     polymorphic(this: this): number { return this.y; }
->polymorphic : (this: this) => number
+>polymorphic : () => number
 >this : this
 >this.y : number
 >this : this
 >y : number
 
     explicit(this: Base1): number { return this.x; }
->explicit : (this: Base1) => number
+>explicit : () => number
 >this : Base1
 >this.x : number
 >this : Base1
@@= skipped -41, +41 lines =@@
 >Derived2 : typeof Derived2
 
 d2.polymorphic = d1.polymorphic // ok, 'x' and 'y' in { x, y }
->d2.polymorphic = d1.polymorphic : (this: Derived1) => number
->d2.polymorphic : (this: Derived2) => number
+>d2.polymorphic = d1.polymorphic : () => number
+>d2.polymorphic : () => number
 >d2 : Derived2
->polymorphic : (this: Derived2) => number
->d1.polymorphic : (this: Derived1) => number
+>polymorphic : () => number
+>d1.polymorphic : () => number
 >d1 : Derived1
->polymorphic : (this: Derived1) => number
+>polymorphic : () => number
 
 d1.polymorphic = d2.polymorphic // ok, 'x' and 'y' in { x, y }
->d1.polymorphic = d2.polymorphic : (this: Derived2) => number
->d1.polymorphic : (this: Derived1) => number
+>d1.polymorphic = d2.polymorphic : () => number
+>d1.polymorphic : () => number
 >d1 : Derived1
->polymorphic : (this: Derived1) => number
->d2.polymorphic : (this: Derived2) => number
+>polymorphic : () => number
+>d2.polymorphic : () => number
 >d2 : Derived2
->polymorphic : (this: Derived2) => number
+>polymorphic : () => number
 
 // bivariance-allowed cases
 d1.polymorphic = b2.polymorphic // ok, 'y' in D: { x, y }
->d1.polymorphic = b2.polymorphic : (this: Base2) => number
->d1.polymorphic : (this: Derived1) => number
+>d1.polymorphic = b2.polymorphic : () => number
+>d1.polymorphic : () => number
 >d1 : Derived1
->polymorphic : (this: Derived1) => number
->b2.polymorphic : (this: Base2) => number
+>polymorphic : () => number
+>b2.polymorphic : () => number
 >b2 : Base2
->polymorphic : (this: Base2) => number
+>polymorphic : () => number
 
 d2.polymorphic = d1.explicit // ok, 'y' in { x, y }
->d2.polymorphic = d1.explicit : (this: Base1) => number
->d2.polymorphic : (this: Derived2) => number
+>d2.polymorphic = d1.explicit : () => number
+>d2.polymorphic : () => number
 >d2 : Derived2
->polymorphic : (this: Derived2) => number
->d1.explicit : (this: Base1) => number
+>polymorphic : () => number
+>d1.explicit : () => number
 >d1 : Derived1
->explicit : (this: Base1) => number
+>explicit : () => number
 
 b1.polymorphic = d2.polymorphic // ok, 'x' and 'y' not in Base1: { x }
->b1.polymorphic = d2.polymorphic : (this: Derived2) => number
->b1.polymorphic : (this: Base1) => number
+>b1.polymorphic = d2.polymorphic : () => number
+>b1.polymorphic : () => number
 >b1 : Base1
->polymorphic : (this: Base1) => number
->d2.polymorphic : (this: Derived2) => number
+>polymorphic : () => number
+>d2.polymorphic : () => number
 >d2 : Derived2
->polymorphic : (this: Derived2) => number
+>polymorphic : () => number
 
 b1.explicit = d2.polymorphic // ok, 'x' and 'y' not in Base1: { x }
->b1.explicit = d2.polymorphic : (this: Derived2) => number
->b1.explicit : (this: Base1) => number
+>b1.explicit = d2.polymorphic : () => number
+>b1.explicit : () => number
 >b1 : Base1
->explicit : (this: Base1) => number
->d2.polymorphic : (this: Derived2) => number
+>explicit : () => number
+>d2.polymorphic : () => number
 >d2 : Derived2
->polymorphic : (this: Derived2) => number
+>polymorphic : () => number
 
 ////// use this-type for construction with new ////
 function InterfaceThis(this: I) {
->InterfaceThis : (this: I) => void
+>InterfaceThis : () => void
 >this : I
 
     this.a = 12;
@@= skipped -67, +67 lines =@@
 >12 : 12
 }
 function LiteralTypeThis(this: {x: string}) {
->LiteralTypeThis : (this: { x: string; }) => void
+>LiteralTypeThis : () => void
 >this : { x: string; }
 >x : string
 
@@= skipped -12, +12 lines =@@
 >"ok" : "ok"
 }
 function AnyThis(this: any) {
->AnyThis : (this: any) => void
+>AnyThis : () => void
 >this : any
 
     this.x = "ok";
@@= skipped -13, +13 lines =@@
 let interfaceThis = new InterfaceThis();
 >interfaceThis : any
 >new InterfaceThis() : any
->InterfaceThis : (this: I) => void
+>InterfaceThis : () => void
 
 let literalTypeThis = new LiteralTypeThis();
 >literalTypeThis : any
 >new LiteralTypeThis() : any
->LiteralTypeThis : (this: { x: string; }) => void
+>LiteralTypeThis : () => void
 
 let anyThis = new AnyThis();
 >anyThis : any
 >new AnyThis() : any
->AnyThis : (this: any) => void
+>AnyThis : () => void
 
 //// type parameter inference ////
 declare var f: { 
->f : { (this: void, x: number): number; call<U>(this: (...argArray: any[]) => U, ...argArray: any[]): U; }
+>f : { (x: number): number; call: <U>(...argArray: any[]) => U; }
 
     (this: void, x: number): number, 
 >this : void
 >x : number
 
     call<U>(this: (...argArray: any[]) => U, ...argArray: any[]): U;
->call : <U>(this: (...argArray: any[]) => U, ...argArray: any[]) => U
+>call : <U>(...argArray: any[]) => U
 >this : (...argArray: any[]) => U
 >argArray : any[]
 >argArray : any[]
@@= skipped -30, +30 lines =@@
 let n: number = f.call(12);
 >n : number
 >f.call(12) : number
->f.call : <U>(this: (...argArray: any[]) => U, ...argArray: any[]) => U
->f : { (this: void, x: number): number; call<U>(this: (...argArray: any[]) => U, ...argArray: any[]): U; }
->call : <U>(this: (...argArray: any[]) => U, ...argArray: any[]) => U
+>f.call : <U>(...argArray: any[]) => U
+>f : { (x: number): number; call: <U>(...argArray: any[]) => U; }
+>call : <U>(...argArray: any[]) => U
 >12 : 12
 
 function missingTypeIsImplicitAny(this, a: number) { return this.anything + a; } 
->missingTypeIsImplicitAny : (this: any, a: number) => any
+>missingTypeIsImplicitAny : (a: number) => any
 >this : any
 >a : number
 >this.anything + a : any
