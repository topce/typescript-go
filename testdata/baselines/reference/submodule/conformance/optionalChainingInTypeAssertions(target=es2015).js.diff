--- old.optionalChainingInTypeAssertions(target=es2015).js
+++ new.optionalChainingInTypeAssertions(target=es2015).js
@@= skipped -19, +19 lines =@@
 (<any>foo?.["m"]).length;
 
 //// [optionalChainingInTypeAssertions.js]
-var _a, _b, _c, _d;
 class Foo {
     m() { }
 }
 const foo = new Foo();
-(_a = foo.m) === null || _a === void 0 ? void 0 : _a.call(foo);
-(_b = foo.m) === null || _b === void 0 ? void 0 : _b.call(foo);
-/*a1*/ (_c = /*a2*/ foo.m /*a3*/ /*a4*/) === null || _c === void 0 ? void 0 : _c.call(foo);
-/*b1*/ (_d = /*b2*/ foo.m /*b3*/ /*b4*/) === null || _d === void 0 ? void 0 : _d.call(foo);
+foo.m?.();
+foo.m?.();
+/*a1*/ foo.m /*a3*/ /*a4*/?.();
+/*b1*/ foo.m /*b3*/ /*b4*/?.();
 // https://github.com/microsoft/TypeScript/issues/50148
-(foo === null || foo === void 0 ? void 0 : foo.m).length;
-(foo === null || foo === void 0 ? void 0 : foo.m).length;
-(foo === null || foo === void 0 ? void 0 : foo["m"]).length;
-(foo === null || foo === void 0 ? void 0 : foo["m"]).length;
+((foo?.m)).length;
+((foo?.m)).length;
+((foo?.["m"])).length;
+((foo?.["m"])).length;
