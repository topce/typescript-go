--- old.privateNameInInExpressionTransform(target=esnext).js
+++ new.privateNameInInExpressionTransform(target=esnext).js
@@= skipped -54, +54 lines =@@
     static #staticField = 2;
     static #staticMethod() { }
     check(v) {
-        #field in v; // expect Foo's 'field' WeakMap
-        #method in v; // expect Foo's 'instances' WeakSet
-        #staticField in v; // expect Foo's constructor
-        #staticMethod in v; // expect Foo's constructor
+        #field in v;
+        #method in v;
+        #staticField in v;
+        #staticMethod in v;
     }
     precedence(v) {
-        // '==' and '||' have lower precedence than 'in'
-        // 'in'  naturally has same precedence as 'in'
-        // '<<' has higher precedence than 'in'
-        v == #field in v || v; // Good precedence: (v == (#field in v)) || v
-        v << #field in v << v; // Good precedence (SyntaxError): (v << #field) in (v << v)
-        v << #field in v == v; // Good precedence (SyntaxError): ((v << #field) in v) == v
-        v == #field in v in v; // Good precedence: v == ((#field in v) in v)
-        #field in v && #field in v; // Good precedence: (#field in v) && (#field in v)
+        v == #field in v || v;
+        v << #field in v << v;
+        v << #field in v == v;
+        v == #field in v in v;
+        #field in v && #field in v;
     }
     invalidLHS(v) {
         'prop' in v;
@@= skipped -25, +22 lines =@@
 class Bar {
     #field = 1;
     check(v) {
-        #field in v; // expect Bar's 'field' WeakMap
+        #field in v;
     }
 }
 function syntaxError(v) {
-    return #field in v; // expect `return in v` so runtime will have a syntax error
+    return #field in v;
 }
 export {};
