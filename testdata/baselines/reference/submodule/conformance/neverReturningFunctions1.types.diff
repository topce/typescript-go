--- old.neverReturningFunctions1.types
+++ new.neverReturningFunctions1.types
@@= skipped -1, +1 lines =@@
 
 === neverReturningFunctions1.ts ===
 function fail(message?: string): never {
->fail : (message?: string) => never
+>fail : (message?: string | undefined) => never
 >message : string | undefined
 
     throw new Error(message);
@@= skipped -18, +18 lines =@@
 >x : string | undefined
 >undefined : undefined
 >fail("undefined argument") : never
->fail : (message?: string) => never
+>fail : (message?: string | undefined) => never
 >"undefined argument" : "undefined argument"
 
     x.length;  // string
@@= skipped -21, +21 lines =@@
 
     fail("negative number");
 >fail("negative number") : never
->fail : (message?: string) => never
+>fail : (message?: string | undefined) => never
 >"negative number" : "negative number"
 
     x;  // Unreachable
@@= skipped -16, +16 lines =@@
 
     fail();
 >fail() : never
->fail : (message?: string) => never
+>fail : (message?: string | undefined) => never
 
     x;  // Unreachable
 >x : string
 }
 
 function f11(x: string | undefined, fail: (message?: string) => never) {
->f11 : (x: string | undefined, fail: (message?: string) => never) => void
+>f11 : (x: string | undefined, fail: (message?: string | undefined) => never) => void
 >x : string | undefined
->fail : (message?: string) => never
+>fail : (message?: string | undefined) => never
 >message : string | undefined
 
     if (x === undefined) fail("undefined argument");
@@= skipped -17, +17 lines =@@
 >x : string | undefined
 >undefined : undefined
 >fail("undefined argument") : never
->fail : (message?: string) => never
+>fail : (message?: string | undefined) => never
 >"undefined argument" : "undefined argument"
 
     x.length;  // string
@@= skipped -10, +10 lines =@@
 }
 
 function f12(x: number, fail: (message?: string) => never): number {
->f12 : (x: number, fail: (message?: string) => never) => number
+>f12 : (x: number, fail: (message?: string | undefined) => never) => number
 >x : number
->fail : (message?: string) => never
+>fail : (message?: string | undefined) => never
 >message : string | undefined
 
     if (x >= 0) return x;
@@= skipped -13, +13 lines =@@
 
     fail("negative number");
 >fail("negative number") : never
->fail : (message?: string) => never
+>fail : (message?: string | undefined) => never
 >"negative number" : "negative number"
 
     x;  // Unreachable
@@= skipped -8, +8 lines =@@
 }
 
 function f13(x: string, fail: (message?: string) => never) {
->f13 : (x: string, fail: (message?: string) => never) => void
+>f13 : (x: string, fail: (message?: string | undefined) => never) => void
 >x : string
->fail : (message?: string) => never
+>fail : (message?: string | undefined) => never
 >message : string | undefined
 
     x;  // string
@@= skipped -10, +10 lines =@@
 
     fail();
 >fail() : never
->fail : (message?: string) => never
+>fail : (message?: string | undefined) => never
 
     x;  // Unreachable
 >x : string
@@= skipped -10, +10 lines =@@
 >Debug : typeof Debug
 
     export declare function fail(message?: string): never;
->fail : (message?: string) => never
+>fail : (message?: string | undefined) => never
 >message : string | undefined
 }
 
@@= skipped -13, +13 lines =@@
 >x : string | undefined
 >undefined : undefined
 >Debug.fail("undefined argument") : never
->Debug.fail : (message?: string) => never
+>Debug.fail : (message?: string | undefined) => never
 >Debug : typeof Debug
->fail : (message?: string) => never
+>fail : (message?: string | undefined) => never
 >"undefined argument" : "undefined argument"
 
     x.length;  // string
@@= skipped -23, +23 lines =@@
 
     Debug.fail("negative number");
 >Debug.fail("negative number") : never
->Debug.fail : (message?: string) => never
+>Debug.fail : (message?: string | undefined) => never
 >Debug : typeof Debug
->fail : (message?: string) => never
+>fail : (message?: string | undefined) => never
 >"negative number" : "negative number"
 
     x;  // Unreachable
@@= skipped -18, +18 lines =@@
 
     Debug.fail();
 >Debug.fail() : never
->Debug.fail : (message?: string) => never
+>Debug.fail : (message?: string | undefined) => never
 >Debug : typeof Debug
->fail : (message?: string) => never
+>fail : (message?: string | undefined) => never
 
     x;  // Unreachable
 >x : string
@@= skipped -17, +17 lines =@@
 
     ((Debug).fail)();
 >((Debug).fail)() : never
->((Debug).fail) : (message?: string) => never
->(Debug).fail : (message?: string) => never
+>((Debug).fail) : (message?: string | undefined) => never
+>(Debug).fail : (message?: string | undefined) => never
 >(Debug) : typeof Debug
 >Debug : typeof Debug
->fail : (message?: string) => never
+>fail : (message?: string | undefined) => never
 
     x;  // Unreachable
 >x : string
@@= skipped -14, +14 lines =@@
 >Test : Test
 
     fail(message?: string): never {
->fail : (message?: string) => never
+>fail : (message?: string | undefined) => never
 >message : string | undefined
 
         throw new Error(message);
@@= skipped -17, +17 lines =@@
 >x : string | undefined
 >undefined : undefined
 >this.fail("undefined argument") : never
->this.fail : (message?: string) => never
+>this.fail : (message?: string | undefined) => never
 >this : this
->fail : (message?: string) => never
+>fail : (message?: string | undefined) => never
 >"undefined argument" : "undefined argument"
 
         x.length;  // string
@@= skipped -22, +22 lines =@@
 
         this.fail("negative number");
 >this.fail("negative number") : never
->this.fail : (message?: string) => never
+>this.fail : (message?: string | undefined) => never
 >this : this
->fail : (message?: string) => never
+>fail : (message?: string | undefined) => never
 >"negative number" : "negative number"
 
         x;  // Unreachable
@@= skipped -17, +17 lines =@@
 
         this.fail();
 >this.fail() : never
->this.fail : (message?: string) => never
+>this.fail : (message?: string | undefined) => never
 >this : this
->fail : (message?: string) => never
+>fail : (message?: string | undefined) => never
 
         x;  // Unreachable
 >x : string
@@= skipped -15, +15 lines =@@
 
     if (typeof x === "string") {
 >typeof x === "string" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : string | number | undefined
 >"string" : "string"
 
         fail();
 >fail() : never
->fail : (message?: string) => never
+>fail : (message?: string | undefined) => never
 
         x;  // Unreachable
 >x : string | number | undefined
@@= skipped -25, +25 lines =@@
 
             fail();
 >fail() : never
->fail : (message?: string) => never
+>fail : (message?: string | undefined) => never
 
             x;  // Unreachable
 >x : string | number | undefined
@@= skipped -11, +11 lines =@@
 
             fail();
 >fail() : never
->fail : (message?: string) => never
+>fail : (message?: string | undefined) => never
 
             x;  // Unreachable
 >x : string | number | undefined
@@= skipped -19, +19 lines =@@
 
     if (typeof x.a === "string") {
 >typeof x.a === "string" : boolean
->typeof x.a : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x.a : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x.a : string | number
 >x : { a: string | number; }
 >a : string | number
@@= skipped -8, +8 lines =@@
 
         fail();
 >fail() : never
->fail : (message?: string) => never
+>fail : (message?: string | undefined) => never
 
         x;    // Unreachable
 >x : { a: string | number; }
@@= skipped -29, +29 lines =@@
 
         fail();
 >fail() : never
->fail : (message?: string) => never
+>fail : (message?: string | undefined) => never
 
         x;  // Unreachable
 >x : number
@@= skipped -11, +11 lines =@@
 
         fail();
 >fail() : never
->fail : (message?: string) => never
+>fail : (message?: string | undefined) => never
 
         x;  // Unreachable
 >x : number
@@= skipped -23, +23 lines =@@
 
         fail();
 >fail() : never
->fail : (message?: string) => never
+>fail : (message?: string | undefined) => never
 
         x;  // Unreachable
 >x : number
@@= skipped -19, +19 lines =@@
 
         fail();
 >fail() : never
->fail : (message?: string) => never
+>fail : (message?: string | undefined) => never
 
         x;  // Unreachable
 >x : number
@@= skipped -23, +23 lines =@@
 >Error : ErrorConstructor
 
     const f = [fail];
->f : (() => never)[]
->[fail] : (() => never)[]
+>f : () => never[]
+>[fail] : () => never[]
 >fail : () => never
 
     fail();  // No effect (missing type annotation)
@@= skipped -11, +11 lines =@@
     f[0]();  // No effect (not a dotted name)
 >f[0]() : never
 >f[0] : () => never
->f : (() => never)[]
+>f : () => never[]
 >0 : 0
 
     f;
->f : (() => never)[]
+>f : () => never[]
 }
 
 // Repro from #33582
@@= skipped -38, +38 lines =@@
 >system : any
 
 	init(data?: T): void;
->init : (data?: T) => void
+>init : (data?: T | undefined) => void
 >data : T | undefined
 
 	pause(): void;
@@= skipped -13, +13 lines =@@
 >remove : () => void
 
 	tick?(time: number, timeDelta: number): void;
->tick : ((time: number, timeDelta: number) => void) | undefined
+>tick : (time: number, timeDelta: number) => void | undefined
 >time : number
 >timeDelta : number
 
@@= skipped -9, +9 lines =@@
 >oldData : T
 
 	updateSchema?(): void;
->updateSchema : (() => void) | undefined
+>updateSchema : () => void | undefined
 
 	extendSchema(update: unknown): void;
 >extendSchema : (update: unknown) => void
@@= skipped -17, +17 lines =@@
 >id : string
 
 	prototype: T & {
->prototype : T & { name: string; system: unknown; play(): void; pause(): void; }
+>prototype : T & { name: string; system: unknown; play: () => void; pause: () => void; }
 
 		name: string;
 >name : string
@@= skipped -32, +32 lines =@@
 >ComponentDefinition : ComponentDefinition<T>
 
 const Component = registerComponent('test-component', {
->Component : ComponentConstructor<{ schema: { myProperty: { default: never[]; parse(): boolean[]; }; string: { type: string; }; num: number; }; init(): void; update(): void; tick(): void; remove(): void; pause(): void; play(): void; multiply(f: number): number; }>
->registerComponent('test-component', {	schema: {		myProperty: {			default: [],			parse() {				return [true];			}		},		string: { type: 'string' },		num: 0	},	init() {		this.data.num = 0;		this.el.setAttribute('custom-attribute', 'custom-value');	},	update() {},	tick() {},	remove() {},	pause() {},	play() {},	multiply(f: number) {		// Reference to system because both were registered with the same name.		return f * this.data.num * this.system!.data.counter;	}}) : ComponentConstructor<{ schema: { myProperty: { default: never[]; parse(): boolean[]; }; string: { type: string; }; num: number; }; init(): void; update(): void; tick(): void; remove(): void; pause(): void; play(): void; multiply(f: number): number; }>
+>Component : ComponentConstructor<{ schema: { myProperty: { default: never[]; parse: () => boolean[]; }; string: { type: string; }; num: number; }; init: () => void; update: () => void; tick: () => void; remove: () => void; pause: () => void; play: () => void; multiply: (f: number) => number; }>
+>registerComponent('test-component', {	schema: {		myProperty: {			default: [],			parse() {				return [true];			}		},		string: { type: 'string' },		num: 0	},	init() {		this.data.num = 0;		this.el.setAttribute('custom-attribute', 'custom-value');	},	update() {},	tick() {},	remove() {},	pause() {},	play() {},	multiply(f: number) {		// Reference to system because both were registered with the same name.		return f * this.data.num * this.system!.data.counter;	}}) : ComponentConstructor<{ schema: { myProperty: { default: never[]; parse: () => boolean[]; }; string: { type: string; }; num: number; }; init: () => void; update: () => void; tick: () => void; remove: () => void; pause: () => void; play: () => void; multiply: (f: number) => number; }>
 >registerComponent : <T extends object>(name: string, component: ComponentDefinition<T>) => ComponentConstructor<T>
 >'test-component' : "test-component"
->{	schema: {		myProperty: {			default: [],			parse() {				return [true];			}		},		string: { type: 'string' },		num: 0	},	init() {		this.data.num = 0;		this.el.setAttribute('custom-attribute', 'custom-value');	},	update() {},	tick() {},	remove() {},	pause() {},	play() {},	multiply(f: number) {		// Reference to system because both were registered with the same name.		return f * this.data.num * this.system!.data.counter;	}} : { schema: { myProperty: { default: never[]; parse(): boolean[]; }; string: { type: string; }; num: number; }; init(): void; update(): void; tick(): void; remove(): void; pause(): void; play(): void; multiply(f: number): number; }
+>{	schema: {		myProperty: {			default: [],			parse() {				return [true];			}		},		string: { type: 'string' },		num: 0	},	init() {		this.data.num = 0;		this.el.setAttribute('custom-attribute', 'custom-value');	},	update() {},	tick() {},	remove() {},	pause() {},	play() {},	multiply(f: number) {		// Reference to system because both were registered with the same name.		return f * this.data.num * this.system!.data.counter;	}} : { schema: { myProperty: { default: never[]; parse: () => boolean[]; }; string: { type: string; }; num: number; }; init: () => void; update: () => void; tick: () => void; remove: () => void; pause: () => void; play: () => void; multiply: (f: number) => number; }
 
 	schema: {
->schema : { myProperty: { default: never[]; parse(): boolean[]; }; string: { type: string; }; num: number; }
->{		myProperty: {			default: [],			parse() {				return [true];			}		},		string: { type: 'string' },		num: 0	} : { myProperty: { default: never[]; parse(): boolean[]; }; string: { type: string; }; num: number; }
+>schema : { myProperty: { default: never[]; parse: () => boolean[]; }; string: { type: string; }; num: number; }
+>{		myProperty: {			default: [],			parse() {				return [true];			}		},		string: { type: 'string' },		num: 0	} : { myProperty: { default: never[]; parse: () => boolean[]; }; string: { type: string; }; num: number; }
 
 		myProperty: {
->myProperty : { default: never[]; parse(): boolean[]; }
->{			default: [],			parse() {				return [true];			}		} : { default: never[]; parse(): boolean[]; }
+>myProperty : { default: never[]; parse: () => boolean[]; }
+>{			default: [],			parse() {				return [true];			}		} : { default: never[]; parse: () => boolean[]; }
 
 			default: [],
 >default : never[]
@@= skipped -44, +44 lines =@@
 >this.data.num = 0 : 0
 >this.data.num : any
 >this.data : any
->this : { schema: { myProperty: { default: never[]; parse(): boolean[]; }; string: { type: string; }; num: number; }; init(): void; update(): void; tick(): void; remove(): void; pause(): void; play(): void; multiply(f: number): number; } & Component<any>
+>this : { schema: { myProperty: { default: never[]; parse: () => boolean[]; }; string: { type: string; }; num: number; }; init: () => void; update: () => void; tick: () => void; remove: () => void; pause: () => void; play: () => void; multiply: (f: number) => number; } & Component<any>
 >data : any
 >num : any
 >0 : 0
@@= skipped -9, +9 lines =@@
 >this.el.setAttribute('custom-attribute', 'custom-value') : any
 >this.el.setAttribute : any
 >this.el : any
->this : { schema: { myProperty: { default: never[]; parse(): boolean[]; }; string: { type: string; }; num: number; }; init(): void; update(): void; tick(): void; remove(): void; pause(): void; play(): void; multiply(f: number): number; } & Component<any>
+>this : { schema: { myProperty: { default: never[]; parse: () => boolean[]; }; string: { type: string; }; num: number; }; init: () => void; update: () => void; tick: () => void; remove: () => void; pause: () => void; play: () => void; multiply: (f: number) => number; } & Component<any>
 >el : any
 >setAttribute : any
 >'custom-attribute' : "custom-attribute"
@@= skipped -33, +33 lines =@@
 >f : number
 >this.data.num : any
 >this.data : any
->this : { schema: { myProperty: { default: never[]; parse(): boolean[]; }; string: { type: string; }; num: number; }; init(): void; update(): void; tick(): void; remove(): void; pause(): void; play(): void; multiply(f: number): number; } & Component<any>
+>this : { schema: { myProperty: { default: never[]; parse: () => boolean[]; }; string: { type: string; }; num: number; }; init: () => void; update: () => void; tick: () => void; remove: () => void; pause: () => void; play: () => void; multiply: (f: number) => number; } & Component<any>
 >data : any
 >num : any
 >this.system!.data.counter : any
 >this.system!.data : any
 >this.system! : any
 >this.system : any
->this : { schema: { myProperty: { default: never[]; parse(): boolean[]; }; string: { type: string; }; num: number; }; init(): void; update(): void; tick(): void; remove(): void; pause(): void; play(): void; multiply(f: number): number; } & Component<any>
+>this : { schema: { myProperty: { default: never[]; parse: () => boolean[]; }; string: { type: string; }; num: number; }; init: () => void; update: () => void; tick: () => void; remove: () => void; pause: () => void; play: () => void; multiply: (f: number) => number; } & Component<any>
 >system : any
 >data : any
 >counter : any
