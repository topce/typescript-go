--- old.contextuallyTypedBindingInitializerNegative.types
+++ new.contextuallyTypedBindingInitializerNegative.types
@@= skipped -6, +6 lines =@@
 >x : number
 }
 function f({ show: showRename = v => v }: Show) {}
->f : ({ show: showRename }: Show) => void
+>f : (__0: Show) => void
 >show : any
 >showRename : (x: number) => string
 >v => v : (v: number) => number
@@= skipped -8, +8 lines =@@
 >v : number
 
 function f2({ "show": showRename = v => v }: Show) {}
->f2 : ({ "show": showRename }: Show) => void
+>f2 : (__0: Show) => void
 >showRename : (x: number) => string
 >v => v : (v: number) => number
 >v : number
 >v : number
 
 function f3({ ["show"]: showRename = v => v }: Show) {}
->f3 : ({ ["show"]: showRename }: Show) => void
+>f3 : (__0: Show) => void
 >"show" : "show"
 >showRename : (x: number) => string
 >v => v : (v: number) => number
@@= skipped -19, +19 lines =@@
 >nested : Show
 }
 function ff({ nested: nestedRename = { show: v => v } }: Nested) {}
->ff : ({ nested: nestedRename }: Nested) => void
+>ff : (__0: Nested) => void
 >nested : any
 >nestedRename : Show
 >{ show: v => v } : { show: (v: number) => number; }
@@= skipped -33, +33 lines =@@
 >prop : [string, number]
 }
 function g({ prop = [101, 1234] }: Tuples) {}
->g : ({ prop }: Tuples) => void
+>g : (__0: Tuples) => void
 >prop : [string, number]
 >[101, 1234] : [number, number]
 >101 : 101
@@= skipped -8, +8 lines =@@
 
 interface StringUnion {
     prop: "foo" | "bar";
->prop : "foo" | "bar"
+>prop : "bar" | "foo"
 }
 function h({ prop = "baz" }: StringUnion) {}
->h : ({ prop }: StringUnion) => void
->prop : "foo" | "bar"
+>h : (__0: StringUnion) => void
+>prop : "bar" | "foo"
 >"baz" : "baz"
 
