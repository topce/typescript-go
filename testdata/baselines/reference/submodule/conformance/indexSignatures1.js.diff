--- old.indexSignatures1.js
+++ new.indexSignatures1.js
@@= skipped -324, +324 lines =@@
 
 
 //// [indexSignatures1.js]
-"use strict";
 // Symbol index signature checking
 const sym = Symbol();
 function gg3(x, y, z) {
@@= skipped -161, +160 lines =@@
 const obj1 = { [sym]: 'hello ' };
 const obj2 = { [sym]: 'hello ' }; // Permitted for backwards compatibility
 const obj3 = { [sym]: 'hello ' }; // Error
-
-
-//// [indexSignatures1.d.ts]
-declare const sym: unique symbol;
-declare function gg3(x: {
-    [key: string]: string;
-}, y: {
-    [key: symbol]: string;
-}, z: {
-    [sym]: number;
-}): void;
-declare function gg1(x: {
-    [key: `a${string}`]: string;
-    [key: `${string}a`]: string;
-}, y: {
-    [key: `a${string}a`]: string;
-}): void;
-interface IX {
-    [key: `a${string}`]: string;
-    [key: `${string}a`]: string;
-}
-interface IY {
-    [key: `a${string}a`]: string;
-}
-declare function gg2(x: IX, y: IY): void;
-declare let combo: {
-    [x: `foo-${string}`]: 'a' | 'b';
-} & {
-    [x: `${string}-bar`]: 'b' | 'c';
-};
-declare const x1: "a" | "b";
-declare const x2: "b" | "c";
-declare const x3: "b";
-declare var str: string;
-declare const x4: "a" | "b";
-declare const x5: "b" | "c";
-declare const x6: "b";
-declare let combo2: {
-    [x: `${string}xxx${string}` & `${string}yyy${string}`]: string;
-};
-declare const x7: string;
-declare const x8: string;
-declare const x9: any;
-declare let dom: {
-    [x: `data${string}`]: string;
-};
-declare const y1: string;
-declare const y2: string;
-type Funcs = {
-    [key: `s${string}`]: (x: string) => void;
-    [key: `n${string}`]: (x: number) => void;
-};
-declare const funcs: Funcs;
-type Duplicates = {
-    [key: string | number]: any;
-    [key: number | symbol]: any;
-    [key: symbol | `foo${string}`]: any;
-    [key: `foo${string}`]: any;
-};
-type Conflicting = {
-    [key: `a${string}`]: 'a';
-    [key: `${string}a`]: 'b';
-    [key: `a${string}a`]: 'c';
-};
-type Invalid<T extends string> = {
-    [key: 'a' | 'b' | 'c']: string;
-    [key: T | number]: string;
-    [key: Error]: string;
-    [key: T & string]: string;
-};
-type Tag1 = {
-    __tag1__: void;
-};
-type Tag2 = {
-    __tag2__: void;
-};
-type TaggedString1 = string & Tag1;
-type TaggedString2 = string & Tag2;
-declare let s0: string;
-declare let s1: TaggedString1;
-declare let s2: TaggedString2;
-declare let s3: TaggedString1 | TaggedString2;
-declare let s4: TaggedString1 & TaggedString2;
-interface I1 {
-    [key: TaggedString1]: string;
-}
-interface I2 {
-    [key: TaggedString2]: string;
-}
-interface I3 {
-    [key: TaggedString1 | TaggedString2]: string;
-}
-interface I4 {
-    [key: TaggedString1 & TaggedString2]: string;
-}
-declare let i1: I1;
-declare let i2: I2;
-declare let i3: I3;
-declare let i4: I4;
-declare let o1: {
-    [key: TaggedString1]: string;
-};
-declare let o2: {
-    [key: TaggedString2]: string;
-};
-declare let o3: {
-    [key: TaggedString1 | TaggedString2]: string;
-};
-declare let o4: {
-    [key: TaggedString1 & TaggedString2]: string;
-};
-declare const obj10: {
-    [x: string]: 0 | 1;
-    x: 0;
-};
-declare const obj11: {
-    [x: number]: 2 | 3;
-    1: 2;
-};
-declare const obj12: {
-    [x: symbol]: 4 | 5;
-    [sym]: 4;
-};
-declare const obj13: {
-    [x: string]: 0 | 2 | 1 | 3;
-    [x: number]: 2 | 3;
-    [x: symbol]: 4 | 5;
-    x: 0;
-    1: 2;
-    [sym]: 4;
-};
-declare const system: unique symbol;
-declare const SomeSytePlugin: unique symbol;
-interface Plugs {
-    [key: symbol]: (...args: any) => unknown;
-}
-declare const plugins: {
-    user: Plugs;
-    [system]: Plugs;
-};
-declare var theAnswer: symbol;
-declare var obj: Record<symbol, number>;
-declare const directive: unique symbol;
-declare function foo<TArg, TRet, TDir>(options: {
-    [x in string]: (arg: TArg) => TRet;
-} & {
-    [directive]?: TDir;
-}): void;
-declare let case1: void;
-declare let case2: void;
-declare let case3: void;
-type Pseudo = `&:${string}`;
-declare const AmIPseudo1: Pseudo;
-declare const AmIPseudo: Pseudo;
-type PseudoDeclaration = {
-    [key in Pseudo]: string;
-};
-declare const test: PseudoDeclaration;
-type FieldPattern = `/${string}`;
-declare const path1: FieldPattern;
-declare const path2: FieldPattern;
-type PathsObject = {
-    [P in FieldPattern]: object;
-};
-declare const pathObject: PathsObject;
-type IdType = `${number}-${number}-${number}-${number}`;
-declare const id: IdType;
-type A = Record<IdType, string>;
-declare const a: A;
-declare let aid: string;
-interface AA {
-    a?: string;
-    b?: number;
-    [key: symbol]: string;
-}
-declare const aa: AA;
-declare const obj1: {
-    [key: symbol]: string;
-};
-declare const obj2: {
-    [key: string]: string;
-};
-declare const obj3: {
-    [key: number]: string;
-};
-type Id = string & {
-    __tag: 'id ';
-};
-type Rec1 = {
-    [key: Id]: number;
-};
-type Rec2 = Record<Id, number>;
-type K1 = keyof Rec1;
-type K2 = keyof Rec2;
-
-
-!!!! File indexSignatures1.d.ts differs from original emit in noCheck emit
-//// [indexSignatures1.d.ts]
-===================================================================
---- Expected	The full check baseline
-+++ Actual	with noCheck set
-@@= skipped --368, +-367 lines =@@
-     [x: symbol]: 4 | 5;
-     [sym]: 4;
- };
- declare const obj13: {
--    [x: string]: 0 | 2 | 1 | 3;
-+    [x: string]: 0 | 1 | 2 | 3;
-     [x: number]: 2 | 3;
-     [x: symbol]: 4 | 5;
-     x: 0;
-     1: 2;
