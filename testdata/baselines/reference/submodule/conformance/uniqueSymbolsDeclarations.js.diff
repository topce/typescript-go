--- old.uniqueSymbolsDeclarations.js
+++ new.uniqueSymbolsDeclarations.js
@@= skipped -284, +284 lines =@@
 async function* asyncGenFuncYieldVarCall() { yield varCall; }
 // classes
 class C {
-    constructor() {
-        this.readonlyCall = Symbol();
-        this.readwriteCall = Symbol();
-    }
-    static { this.readonlyStaticCall = Symbol(); }
-    static { this.readonlyStaticTypeAndCall = Symbol(); }
-    static { this.readwriteStaticCall = Symbol(); }
+    static readonlyStaticCall = Symbol();
+    static readonlyStaticType;
+    static readonlyStaticTypeAndCall = Symbol();
+    static readwriteStaticCall = Symbol();
+    readonlyCall = Symbol();
+    readwriteCall = Symbol();
 }
 const constInitToCReadonlyStaticCall = C.readonlyStaticCall;
 const constInitToCReadonlyStaticType = C.readonlyStaticType;
@@= skipped -56, +55 lines =@@
 };
 // property initializers
 class C0 {
-    constructor() {
-        this.a = s;
-        this.b = N.s;
-        this.c = N["s"];
-        this.d = s;
-        this.e = N.s;
-        this.f = N["s"];
-    }
-    static { this.a = s; }
-    static { this.b = N.s; }
-    static { this.c = N["s"]; }
-    static { this.d = s; }
-    static { this.e = N.s; }
-    static { this.f = N["s"]; }
+    static a = s;
+    static b = N.s;
+    static c = N["s"];
+    static d = s;
+    static e = N.s;
+    static f = N["s"];
+    a = s;
+    b = N.s;
+    c = N["s"];
+    d = s;
+    e = N.s;
+    f = N["s"];
     method1() { return s; }
     async method2() { return s; }
     async *method3() { yield s; }
@@= skipped -46, +44 lines =@@
     [N.s]: "b",
 });
 class C1 {
-    static { N.s, N.s; }
+    static [s];
+    static [N.s];
+    [s];
+    [N.s];
 }
 const o4 = {
     method1() {
@@= skipped -19, +22 lines =@@
         return p;
     }
 };
-
-
-//// [uniqueSymbolsDeclarations.d.ts]
-declare const constCall: unique symbol;
-declare let letCall: symbol;
-declare var varCall: symbol;
-declare const constType: unique symbol;
-declare const constTypeAndCall: unique symbol;
-declare const constInitToConstCall: symbol;
-declare const constInitToLetCall: symbol;
-declare const constInitToVarCall: symbol;
-declare const constInitToConstDeclAmbient: symbol;
-declare let letInitToConstCall: symbol;
-declare let letInitToLetCall: symbol;
-declare let letInitToVarCall: symbol;
-declare let letInitToConstDeclAmbient: symbol;
-declare var varInitToConstCall: symbol;
-declare var varInitToLetCall: symbol;
-declare var varInitToVarCall: symbol;
-declare var varInitToConstDeclAmbient: symbol;
-declare const constInitToConstCallWithTypeQuery: typeof constCall;
-declare const constInitToConstDeclAmbientWithTypeQuery: typeof constType;
-declare function funcReturnConstCall(): symbol;
-declare function funcReturnLetCall(): symbol;
-declare function funcReturnVarCall(): symbol;
-declare function funcReturnConstCallWithTypeQuery(): typeof constCall;
-declare function genFuncYieldConstCall(): Generator<symbol, void, unknown>;
-declare function genFuncYieldLetCall(): Generator<symbol, void, unknown>;
-declare function genFuncYieldVarCall(): Generator<symbol, void, unknown>;
-declare function genFuncYieldConstCallWithTypeQuery(): IterableIterator<typeof constCall>;
-declare function asyncFuncReturnConstCall(): Promise<symbol>;
-declare function asyncFuncReturnLetCall(): Promise<symbol>;
-declare function asyncFuncReturnVarCall(): Promise<symbol>;
-declare function asyncGenFuncYieldConstCall(): AsyncGenerator<symbol, void, unknown>;
-declare function asyncGenFuncYieldLetCall(): AsyncGenerator<symbol, void, unknown>;
-declare function asyncGenFuncYieldVarCall(): AsyncGenerator<symbol, void, unknown>;
-declare class C {
-    static readonly readonlyStaticCall: unique symbol;
-    static readonly readonlyStaticType: unique symbol;
-    static readonly readonlyStaticTypeAndCall: unique symbol;
-    static readwriteStaticCall: symbol;
-    readonly readonlyCall: symbol;
-    readwriteCall: symbol;
-}
-declare const c: C;
-declare const constInitToCReadonlyStaticCall: symbol;
-declare const constInitToCReadonlyStaticType: symbol;
-declare const constInitToCReadonlyStaticTypeAndCall: symbol;
-declare const constInitToCReadwriteStaticCall: symbol;
-declare const constInitToCReadonlyStaticCallWithTypeQuery: typeof C.readonlyStaticCall;
-declare const constInitToCReadonlyStaticTypeWithTypeQuery: typeof C.readonlyStaticType;
-declare const constInitToCReadonlyStaticTypeAndCallWithTypeQuery: typeof C.readonlyStaticTypeAndCall;
-declare const constInitToCReadwriteStaticCallWithTypeQuery: typeof C.readwriteStaticCall;
-declare const constInitToCReadonlyCall: symbol;
-declare const constInitToCReadwriteCall: symbol;
-declare const constInitToCReadonlyCallWithTypeQuery: typeof c.readonlyCall;
-declare const constInitToCReadwriteCallWithTypeQuery: typeof c.readwriteCall;
-declare const constInitToCReadonlyCallWithIndexedAccess: C["readonlyCall"];
-declare const constInitToCReadwriteCallWithIndexedAccess: C["readwriteCall"];
-interface I {
-    readonly readonlyType: unique symbol;
-}
-declare const i: I;
-declare const constInitToIReadonlyType: symbol;
-declare const constInitToIReadonlyTypeWithTypeQuery: typeof i.readonlyType;
-declare const constInitToIReadonlyTypeWithIndexedAccess: I["readonlyType"];
-type L = {
-    readonly readonlyType: unique symbol;
-    nested: {
-        readonly readonlyNestedType: unique symbol;
-    };
-};
-declare const l: L;
-declare const constInitToLReadonlyType: symbol;
-declare const constInitToLReadonlyNestedType: symbol;
-declare const constInitToLReadonlyTypeWithTypeQuery: typeof l.readonlyType;
-declare const constInitToLReadonlyNestedTypeWithTypeQuery: typeof l.nested.readonlyNestedType;
-declare const constInitToLReadonlyTypeWithIndexedAccess: L["readonlyType"];
-declare const constInitToLReadonlyNestedTypeWithIndexedAccess: L["nested"]["readonlyNestedType"];
-declare const promiseForConstCall: Promise<typeof constCall>;
-declare const arrayOfConstCall: symbol[];
-declare const s: unique symbol;
-declare namespace N {
-    const s: unique symbol;
-}
-declare const o: {
-    [s]: "a";
-    [N.s]: "b";
-};
-declare function f<T>(x: T): T;
-declare function g(x: typeof s): void;
-declare function g(x: typeof N.s): void;
-declare const o2: {
-    a: symbol;
-    b: symbol;
-    c: symbol;
-    method1(): symbol;
-    method2(): Promise<symbol>;
-    method3(): AsyncGenerator<symbol, void, unknown>;
-    method4(): Generator<symbol, void, unknown>;
-    method5(p?: symbol): symbol;
-};
-declare class C0 {
-    static readonly a: symbol;
-    static readonly b: symbol;
-    static readonly c: symbol;
-    static d: symbol;
-    static e: symbol;
-    static f: symbol;
-    readonly a: symbol;
-    readonly b: symbol;
-    readonly c: symbol;
-    d: symbol;
-    e: symbol;
-    f: symbol;
-    method1(): symbol;
-    method2(): Promise<symbol>;
-    method3(): AsyncGenerator<symbol, void, unknown>;
-    method4(): Generator<symbol, void, unknown>;
-    method5(p?: symbol): symbol;
-}
-declare class C1 {
-    static [s]: "a";
-    static [N.s]: "b";
-    [s]: "a";
-    [N.s]: "b";
-}
-interface Context {
-    method1(): typeof s;
-    method2(): Promise<typeof s>;
-    method3(): AsyncIterableIterator<typeof s>;
-    method4(): IterableIterator<typeof s>;
-    method5(p?: typeof s): typeof s;
-}
-declare const o4: Context;
