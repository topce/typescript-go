--- old.esDecorators-classDeclaration-classSuper.7.js
+++ new.esDecorators-classDeclaration-classSuper.7.js
@@= skipped -44, +44 lines =@@
 //// [esDecorators-classDeclaration-classSuper.7.js]
 class A {
 }
-let B = (() => {
-    let _classSuper = A;
-    let _instanceExtraInitializers = [];
-    let _m_decorators;
-    return class B extends _classSuper {
-        static {
-            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
-            _m_decorators = [foo];
-            __esDecorate(this, null, _m_decorators, { kind: "method", name: "m", static: false, private: false, access: { has: obj => "m" in obj, get: obj => obj.m }, metadata: _metadata }, null, _instanceExtraInitializers);
-            if (_metadata) Object.defineProperty(this, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
-        }
-        constructor() {
-            'inject';
-            super();
-            __runInitializers(this, _instanceExtraInitializers);
-            const a = 1;
-            const b = 1;
-        }
-        m() { }
-    };
-})();
+class B extends A {
+    constructor() {
+        'inject';
+        'inject';
+        super();
+        const a = 1;
+        const b = 1;
+    }
+    @foo
+    m() { }
+}
 function foo(method, _context) {
     return function () {
         method.call(this);
@@= skipped -28, +18 lines =@@
 }
 new B();
 // https://github.com/microsoft/TypeScript/issues/53448
-let C = (() => {
-    let _instanceExtraInitializers = [];
-    let _get_val_decorators;
-    return class C {
-        static {
-            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
-            _get_val_decorators = [foo];
-            __esDecorate(this, null, _get_val_decorators, { kind: "getter", name: "val", static: false, private: false, access: { has: obj => "val" in obj, get: obj => obj.val }, metadata: _metadata }, null, _instanceExtraInitializers);
-            if (_metadata) Object.defineProperty(this, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
-        }
-        constructor() {
-            __runInitializers(this, _instanceExtraInitializers);
-            this.val;
-        }
-        get val() { return 3; }
-    };
-})();
-let D = (() => {
-    let _classSuper = A;
-    let _instanceExtraInitializers = [];
-    let _get_val_decorators;
-    return class D extends _classSuper {
-        static {
-            const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(_classSuper[Symbol.metadata] ?? null) : void 0;
-            _get_val_decorators = [foo];
-            __esDecorate(this, null, _get_val_decorators, { kind: "getter", name: "val", static: false, private: false, access: { has: obj => "val" in obj, get: obj => obj.val }, metadata: _metadata }, null, _instanceExtraInitializers);
-            if (_metadata) Object.defineProperty(this, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
-        }
-        constructor() {
-            super();
-            __runInitializers(this, _instanceExtraInitializers);
-            this.val;
-        }
-        get val() { return 3; }
-    };
-})();
+class C {
+    constructor() {
+        this.val;
+    }
+    @foo
+    get val() { return 3; }
+}
+class D extends A {
+    constructor() {
+        super();
+        this.val;
+    }
+    @foo
+    get val() { return 3; }
+}
