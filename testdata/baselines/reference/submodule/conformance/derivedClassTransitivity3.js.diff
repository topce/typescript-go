--- old.derivedClassTransitivity3.js
+++ new.derivedClassTransitivity3.js
@@= skipped -22, +22 lines =@@
 var r2 = e.foo('', 1);
 
 //// [derivedClassTransitivity3.js]
-// subclassing is not transitive when you can remove required parameters and add optional parameters
-var __extends = (this && this.__extends) || (function () {
-    var extendStatics = function (d, b) {
-        extendStatics = Object.setPrototypeOf ||
-            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
-            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
-        return extendStatics(d, b);
-    };
-    return function (d, b) {
-        if (typeof b !== "function" && b !== null)
-            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
-        extendStatics(d, b);
-        function __() { this.constructor = d; }
-        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-    };
-})();
-var C = /** @class */ (function () {
-    function C() {
-    }
-    C.prototype.foo = function (x, y) { };
-    return C;
-}());
-var D = /** @class */ (function (_super) {
-    __extends(D, _super);
-    function D() {
-        return _super !== null && _super.apply(this, arguments) || this;
-    }
-    D.prototype.foo = function (x) { }; // ok to drop parameters
-    return D;
-}(C));
-var E = /** @class */ (function (_super) {
-    __extends(E, _super);
-    function E() {
-        return _super !== null && _super.apply(this, arguments) || this;
-    }
-    E.prototype.foo = function (x, y) { }; // ok to add optional parameters
-    return E;
-}(D));
+class C {
+    foo(x, y) { }
+}
+class D extends C {
+    foo(x) { }
+}
+class E extends D {
+    foo(x, y) { }
+}
 var c;
 var d;
 var e;
