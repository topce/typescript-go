--- old.superInStaticMembers1(target=es2015).js
+++ new.superInStaticMembers1(target=es2015).js
@@= skipped -493, +493 lines =@@
 //// [external.js]
 export class Reflect {
 }
+export { Baz };
+var Baz;
+(function (Baz) {
+})(Baz || (Baz = {}));
 export default class {
 }
 ;
 //// [locals.js]
-var _a, _b;
-class C extends (_b = B) {
-}
-_a = C;
-C._ = [
-    (() => {
-        var Reflect; // collision (es2015-es2021 only)
-        Reflect.get(_b, "w", _a).call(_a);
-    })(),
-    (() => {
+class C extends B {
+    static _ = [
+        (() => {
+            var Reflect; // collision (es2015-es2021 only)
+            super.w();
+        })(),
+        (() => {
+            var { Reflect } = { Reflect: null }; // collision (es2015-es2021 only)
+            super.w();
+        })(),
+        (() => {
+            var [Reflect] = [null]; // collision (es2015-es2021 only)
+            super.w();
+        })(),
+        (() => {
+            class Reflect {
+            } // collision (es2015-es2021 only)
+            super.w();
+        })(),
+        (() => {
+            function Reflect() { } // collision (es2015-es2021 only)
+            super.w();
+        })(),
+        (() => {
+            let Reflect;
+            (function (Reflect) {
+            })(Reflect || (Reflect = {})); // collision (es2015-es2021 only)
+            super.w();
+        })(),
+        (() => {
+            let Reflect;
+            (function (Reflect) {
+            })(Reflect || (Reflect = {})); // collision (es2015-es2021 only)
+            super.w();
+        })(),
+        (() => {
+            super.w();
+        })(),
+        (() => {
+            ; // no collision
+            super.w();
+        })(),
+        (() => {
+            (class Reflect {
+            }); // no collision
+            super.w();
+        })(),
+        (() => {
+            (function Reflect() { }); // no collision
+            super.w();
+        })(),
+    ];
+    static {
         var { Reflect } = { Reflect: null }; // collision (es2015-es2021 only)
-        Reflect.get(_b, "w", _a).call(_a);
-    })(),
-    (() => {
+        super.w();
+    }
+    static {
         var [Reflect] = [null]; // collision (es2015-es2021 only)
-        Reflect.get(_b, "w", _a).call(_a);
-    })(),
-    (() => {
+        super.w();
+    }
+    static {
+        var Reflect; // collision (es2015-es2021 only)
+        super.w();
+    }
+    static {
         class Reflect {
         } // collision (es2015-es2021 only)
-        Reflect.get(_b, "w", _a).call(_a);
-    })(),
-    (() => {
+        super.w();
+    }
+    static {
         function Reflect() { } // collision (es2015-es2021 only)
-        Reflect.get(_b, "w", _a).call(_a);
-    })(),
-    (() => {
+        super.w();
+    }
+    static {
         let Reflect;
         (function (Reflect) {
         })(Reflect || (Reflect = {})); // collision (es2015-es2021 only)
-        Reflect.get(_b, "w", _a).call(_a);
-    })(),
-    (() => {
-        Reflect.get(_b, "w", _a).call(_a);
-    })(),
-    (() => {
-        Reflect.get(_b, "w", _a).call(_a);
-    })(),
-    (() => {
-        ; // no collision
-        Reflect.get(_b, "w", _a).call(_a);
-    })(),
-    (() => {
+        super.w();
+    }
+    static {
+        let Reflect;
+        (function (Reflect) {
+        })(Reflect || (Reflect = {})); // collision (es2015-es2021 only)
+        super.w();
+    }
+    static {
+        super.w();
+    }
+    static {
+        super.w();
+    }
+    static {
         (class Reflect {
         }); // no collision
-        Reflect.get(_b, "w", _a).call(_a);
-    })(),
-    (() => {
+        super.w();
+    }
+    static {
         (function Reflect() { }); // no collision
-        Reflect.get(_b, "w", _a).call(_a);
-    })(),
-];
-(() => {
-    var { Reflect } = { Reflect: null }; // collision (es2015-es2021 only)
-    Reflect.get(_b, "w", _a).call(_a);
-})();
-(() => {
-    var [Reflect] = [null]; // collision (es2015-es2021 only)
-    Reflect.get(_b, "w", _a).call(_a);
-})();
-(() => {
-    var Reflect; // collision (es2015-es2021 only)
-    Reflect.get(_b, "w", _a).call(_a);
-})();
-(() => {
-    class Reflect {
-    } // collision (es2015-es2021 only)
-    Reflect.get(_b, "w", _a).call(_a);
-})();
-(() => {
-    function Reflect() { } // collision (es2015-es2021 only)
-    Reflect.get(_b, "w", _a).call(_a);
-})();
-(() => {
-    let Reflect;
-    (function (Reflect) {
-    })(Reflect || (Reflect = {})); // collision (es2015-es2021 only)
-    Reflect.get(_b, "w", _a).call(_a);
-})();
-(() => {
-    Reflect.get(_b, "w", _a).call(_a);
-})();
-(() => {
-    Reflect.get(_b, "w", _a).call(_a);
-})();
-(() => {
-    Reflect.get(_b, "w", _a).call(_a);
-})();
-(() => {
-    (class Reflect {
-    }); // no collision
-    Reflect.get(_b, "w", _a).call(_a);
-})();
-(() => {
-    (function Reflect() { }); // no collision
-    Reflect.get(_b, "w", _a).call(_a);
-})();
+        super.w();
+    }
+}
 export {};
 //// [varInContainingScopeStaticField1.js]
-var _a, _b;
 var Reflect = null; // collision (es2015-es2021 only)
-class C extends (_b = B) {
+class C extends B {
+    static _ = super.w();
 }
-_a = C;
-C._ = Reflect.get(_b, "w", _a).call(_a);
 export {};
 //// [varInContainingScopeStaticField2.js]
-var _a, _b;
 var { Reflect } = { Reflect: null }; // collision (es2015-es2021 only)
-class C extends (_b = B) {
+class C extends B {
+    static _ = super.w();
 }
-_a = C;
-C._ = Reflect.get(_b, "w", _a).call(_a);
 export {};
 //// [varInContainingScopeStaticField3.js]
-var _a, _b;
 var [Reflect] = [null]; // collision (es2015-es2021 only)
-class C extends (_b = B) {
+class C extends B {
+    static _ = super.w();
 }
-_a = C;
-C._ = Reflect.get(_b, "w", _a).call(_a);
 export {};
 //// [varInContainingScopeStaticBlock1.js]
-var _a, _b;
 var Reflect = null; // collision (es2015-es2021 only)
-class C extends (_b = B) {
+class C extends B {
+    static { super.w(); }
 }
-_a = C;
-(() => {
-    Reflect.get(_b, "w", _a).call(_a);
-})();
 export {};
 //// [varInContainingScopeStaticBlock2.js]
-var _a, _b;
 var { Reflect } = { Reflect: null }; // collision (es2015-es2021 only)
-class C extends (_b = B) {
+class C extends B {
+    static { super.w(); }
 }
-_a = C;
-(() => {
-    Reflect.get(_b, "w", _a).call(_a);
-})();
 export {};
 //// [varInContainingScopeStaticBlock3.js]
-var _a, _b;
 var [Reflect] = [null]; // collision (es2015-es2021 only)
-class C extends (_b = B) {
+class C extends B {
+    static { super.w(); }
 }
-_a = C;
-(() => {
-    Reflect.get(_b, "w", _a).call(_a);
-})();
 export {};
 //// [classDeclInContainingScopeStaticField.js]
-var _a, _b;
 class Reflect {
 } // collision (es2015-es2021 only)
-class C extends (_b = B) {
+class C extends B {
+    static _ = super.w();
 }
-_a = C;
-C._ = Reflect.get(_b, "w", _a).call(_a);
 export {};
 //// [classDeclInContainingScopeStaticBlock.js]
-var _a, _b;
 class Reflect {
 } // collision (es2015-es2021 only)
-class C extends (_b = B) {
+class C extends B {
+    static { super.w(); }
 }
-_a = C;
-(() => {
-    Reflect.get(_b, "w", _a).call(_a);
-})();
 export {};
 //// [funcDeclInContainingScopeStaticField.js]
-var _a, _b;
 function Reflect() { } // collision (es2015-es2021 only)
-class C extends (_b = B) {
+class C extends B {
+    static _ = super.w();
 }
-_a = C;
-C._ = Reflect.get(_b, "w", _a).call(_a);
 export {};
 //// [funcDeclInContainingScopeStaticBlock.js]
-var _a, _b;
 function Reflect() { } // collision (es2015-es2021 only)
-class C extends (_b = B) {
+class C extends B {
+    static { super.w(); }
 }
-_a = C;
-(() => {
-    Reflect.get(_b, "w", _a).call(_a);
-})();
 export {};
 //// [valueNamespaceInContainingScopeStaticField.js]
-var _a, _b;
-class C extends (_b = B) {
+class C extends B {
+    static _ = super.w();
 }
-_a = C;
-C._ = Reflect.get(_b, "w", _a).call(_a);
 export {};
 //// [valueNamespaceInContainingScopeStaticBlock.js]
-var _a, _b;
-class C extends (_b = B) {
+class C extends B {
+    static { super.w(); }
 }
-_a = C;
-(() => {
-    Reflect.get(_b, "w", _a).call(_a);
-})();
 export {};
 //// [enumInContainingScopeStaticField.js]
-var _a, _b;
 var Reflect;
 (function (Reflect) {
 })(Reflect || (Reflect = {})); // collision (es2015-es2021 only)
-class C extends (_b = B) {
+class C extends B {
+    static _ = super.w();
 }
-_a = C;
-C._ = Reflect.get(_b, "w", _a).call(_a);
 export {};
 //// [enumInContainingScopeStaticBlock.js]
-var _a, _b;
 var Reflect;
 (function (Reflect) {
 })(Reflect || (Reflect = {})); // collision (es2015-es2021 only)
-class C extends (_b = B) {
+class C extends B {
+    static { super.w(); }
 }
-_a = C;
-(() => {
-    Reflect.get(_b, "w", _a).call(_a);
-})();
 export {};
 //// [constEnumInContainingScopeStaticField.js]
-var _a, _b;
-class C extends (_b = B) {
+var Reflect;
+(function (Reflect) {
+})(Reflect || (Reflect = {})); // collision (es2015-es2021 only)
+class C extends B {
+    static _ = super.w();
 }
-_a = C;
-C._ = Reflect.get(_b, "w", _a).call(_a);
 export {};
 //// [constEnumInContainingScopeStaticBlock.js]
-var _a, _b;
-class C extends (_b = B) {
+var Reflect;
+(function (Reflect) {
+})(Reflect || (Reflect = {})); // collision (es2015-es2021 only)
+class C extends B {
+    static { super.w(); }
 }
-_a = C;
-(() => {
-    Reflect.get(_b, "w", _a).call(_a);
-})();
 export {};
 //// [namespaceImportInContainingScopeStaticField.js]
-var _a, _b;
-class C extends (_b = B) {
+class C extends B {
+    static _ = super.w();
 }
-_a = C;
-C._ = Reflect.get(_b, "w", _a).call(_a);
 export {};
 //// [namespaceImportInContainingScopeStaticBlock.js]
-var _a, _b;
-class C extends (_b = B) {
+class C extends B {
+    static { super.w(); }
 }
-_a = C;
-(() => {
-    Reflect.get(_b, "w", _a).call(_a);
-})();
 export {};
 //// [namedImportInContainingScopeStaticField.js]
-var _a, _b;
-class C extends (_b = B) {
+class C extends B {
+    static _ = super.w();
 }
-_a = C;
-C._ = Reflect.get(_b, "w", _a).call(_a);
 export {};
 //// [namedImportInContainingScopeStaticBlock.js]
-var _a, _b;
-class C extends (_b = B) {
+class C extends B {
+    static { super.w(); }
 }
-_a = C;
-(() => {
-    Reflect.get(_b, "w", _a).call(_a);
-})();
 export {};
 //// [namedImportOfInterfaceInContainingScopeStaticField.js]
-var _a, _b;
-class C extends (_b = B) {
+class C extends B {
+    static _ = super.w();
 }
-_a = C;
-C._ = Reflect.get(_b, "w", _a).call(_a);
 export {};
 //// [namedImportOfInterfaceInContainingScopeStaticBlock.js]
-var _a, _b;
-class C extends (_b = B) {
+class C extends B {
+    static { super.w(); }
 }
-_a = C;
-(() => {
-    Reflect.get(_b, "w", _a).call(_a);
-})();
 export {};
 //// [namedImportOfUninstantiatedNamespaceInContainingScopeStaticField.js]
-var _a, _b;
-class C extends (_b = B) {
+class C extends B {
+    static _ = super.w();
 }
-_a = C;
-C._ = Reflect.get(_b, "w", _a).call(_a);
 export {};
 //// [namedImportOfUninstantiatedNamespaceInContainingScopeStaticBlock.js]
-var _a, _b;
-class C extends (_b = B) {
+class C extends B {
+    static { super.w(); }
 }
-_a = C;
-(() => {
-    Reflect.get(_b, "w", _a).call(_a);
-})();
 export {};
 //// [namedImportOfConstEnumInContainingScopeStaticField.js]
-var _a, _b;
-class C extends (_b = B) {
+class C extends B {
+    static _ = super.w();
 }
-_a = C;
-C._ = Reflect.get(_b, "w", _a).call(_a);
 export {};
 //// [namedImportOfConstEnumInContainingScopeStaticBlock.js]
-var _a, _b;
-class C extends (_b = B) {
+class C extends B {
+    static { super.w(); }
 }
-_a = C;
-(() => {
-    Reflect.get(_b, "w", _a).call(_a);
-})();
 export {};
 //// [typeOnlyNamedImportInContainingScopeStaticField.js]
-var _a, _b;
-class C extends (_b = B) {
+class C extends B {
+    static _ = super.w();
 }
-_a = C;
-C._ = Reflect.get(_b, "w", _a).call(_a);
 export {};
 //// [typeOnlyNamedImportInContainingScopeStaticBlock.js]
-var _a, _b;
-class C extends (_b = B) {
+class C extends B {
+    static { super.w(); }
 }
-_a = C;
-(() => {
-    Reflect.get(_b, "w", _a).call(_a);
-})();
 export {};
 //// [defaultImportInContainingScopeStaticField.js]
-var _a, _b;
-class C extends (_b = B) {
+class C extends B {
+    static _ = super.w();
 }
-_a = C;
-C._ = Reflect.get(_b, "w", _a).call(_a);
 export {};
 //// [defaultImportInContainingScopeStaticBlock.js]
-var _a, _b;
-class C extends (_b = B) {
+class C extends B {
+    static { super.w(); }
 }
-_a = C;
-(() => {
-    Reflect.get(_b, "w", _a).call(_a);
-})();
 export {};
 //// [typeOnlyDefaultImportInContainingScopeStaticField.js]
-var _a, _b;
-class C extends (_b = B) {
+class C extends B {
+    static _ = super.w();
 }
-_a = C;
-C._ = Reflect.get(_b, "w", _a).call(_a);
 export {};
 //// [typeOnlyDefaultImportInContainingScopeStaticBlock.js]
-var _a, _b;
-class C extends (_b = B) {
+class C extends B {
+    static { super.w(); }
 }
-_a = C;
-(() => {
-    Reflect.get(_b, "w", _a).call(_a);
-})();
 export {};
 //// [typeInContainingScopeStaticField.js]
-var _a, _b;
-class C extends (_b = B) {
+class C extends B {
+    static _ = super.w();
 }
-_a = C;
-C._ = Reflect.get(_b, "w", _a).call(_a);
 export {};
 //// [typeInContainingScopeStaticBlock.js]
-var _a, _b;
-class C extends (_b = B) {
+class C extends B {
+    static { super.w(); }
 }
-_a = C;
-(() => {
-    Reflect.get(_b, "w", _a).call(_a);
-})();
 export {};
 //// [interfaceInContainingScopeStaticField.js]
-var _a, _b;
 ; // no collision
-class C extends (_b = B) {
+class C extends B {
+    static _ = super.w();
 }
-_a = C;
-C._ = Reflect.get(_b, "w", _a).call(_a);
 export {};
 //// [interfaceInContainingScopeStaticBlock.js]
-var _a, _b;
 ; // no collision
-class C extends (_b = B) {
+class C extends B {
+    static { super.w(); }
 }
-_a = C;
-(() => {
-    Reflect.get(_b, "w", _a).call(_a);
-})();
 export {};
 //// [uninstantiatedNamespaceInContainingScopeStaticField.js]
-var _a, _b;
 ; // no collision
-class C extends (_b = B) {
+class C extends B {
+    static _ = super.w();
 }
-_a = C;
-C._ = Reflect.get(_b, "w", _a).call(_a);
 export {};
 //// [uninstantiatedNamespaceInContainingScopeStaticBlock.js]
-var _a, _b;
 ; // no collision
-class C extends (_b = B) {
+class C extends B {
+    static { super.w(); }
 }
-_a = C;
-(() => {
-    Reflect.get(_b, "w", _a).call(_a);
-})();
 export {};
 //// [classExprInContainingScopeStaticField.js]
-var _a, _b;
 (class Reflect {
 }); // no collision
-class C extends (_b = B) {
+class C extends B {
+    static _ = super.w();
 }
-_a = C;
-C._ = Reflect.get(_b, "w", _a).call(_a);
 export {};
 //// [classExprInContainingScopeStaticBlock.js]
-var _a, _b;
 (class Reflect {
 }); // no collision
-class C extends (_b = B) {
+class C extends B {
+    static { super.w(); }
 }
-_a = C;
-(() => {
-    Reflect.get(_b, "w", _a).call(_a);
-})();
 export {};
 //// [inContainingClassExprStaticField.js]
-var _a;
-(_a = class Reflect {
-    },
-    (() => {
-        var _b, _c;
-        class C extends (_c = B) {
+(class Reflect {
+    static {
+        class C extends B {
+            static _ = super.w();
         }
-        _b = C;
-        C._ = Reflect.get(_c, "w", _b).call(_b);
-    })(),
-    _a);
+    }
+});
 export {};
 //// [inContainingClassExprStaticBlock.js]
-var _a;
-(_a = class Reflect {
-    },
-    (() => {
-        var _b, _c;
-        class C extends (_c = B) {
+(class Reflect {
+    static {
+        class C extends B {
+            static { super.w(); }
         }
-        _b = C;
-        (() => {
-            Reflect.get(_c, "w", _b).call(_b);
-        })();
-    })(),
-    _a);
+    }
+});
 export {};
 //// [funcExprInContainingScopeStaticField.js]
-var _a, _b;
 (function Reflect() { }); // no collision
-class C extends (_b = B) {
+class C extends B {
+    static _ = super.w();
 }
-_a = C;
-C._ = Reflect.get(_b, "w", _a).call(_a);
 export {};
 //// [funcExprInContainingScopeStaticBlock.js]
-var _a, _b;
 (function Reflect() { }); // no collision
-class C extends (_b = B) {
+class C extends B {
+    static { super.w(); }
 }
-_a = C;
-(() => {
-    Reflect.get(_b, "w", _a).call(_a);
-})();
 export {};
 //// [inContainingFuncExprStaticField.js]
 (function Reflect() {
-    var _a, _b;
-    class C extends (_b = B) {
+    class C extends B {
+        static _ = super.w();
     }
-    _a = C;
-    C._ = Reflect.get(_b, "w", _a).call(_a);
 });
 export {};
 //// [inContainingFuncExprStaticBlock.js]
 (function Reflect() {
-    var _a, _b;
-    class C extends (_b = B) {
+    class C extends B {
+        static { super.w(); }
     }
-    _a = C;
-    (() => {
-        Reflect.get(_b, "w", _a).call(_a);
-    })();
 });
 export {};
