--- old.contextuallyTypeAsyncFunctionReturnType.types
+++ new.contextuallyTypeAsyncFunctionReturnType.types
@@= skipped -182, +182 lines =@@
 
 };
 declare function scanMetadata(
->scanMetadata : (local: ILocalExtension) => Promise<Metadata | undefined>
+>scanMetadata : (local: ILocalExtension) => Promise<Metadata>
 
   local: ILocalExtension
 >local : ILocalExtension
@@= skipped -20, +20 lines =@@
     await Promise.all(
 >await Promise.all(      fromExtensions        .filter((e) => !e.isApplicationScoped)        .map(async (e) => [e, await scanMetadata(e)])    ) : [ILocalExtension, Metadata][]
 >Promise.all(      fromExtensions        .filter((e) => !e.isApplicationScoped)        .map(async (e) => [e, await scanMetadata(e)])    ) : Promise<[ILocalExtension, Metadata][]>
->Promise.all : { <T>(values: Iterable<T | PromiseLike<T>>): Promise<Awaited<T>[]>; <T extends readonly unknown[] | []>(values: T): Promise<{ -readonly [P in keyof T]: Awaited<T[P]>; }>; }
+>Promise.all : { <T>(values: Iterable<T | PromiseLike<T>, any, any>): Promise<Awaited<T>[]>; <T extends readonly unknown[] | []>(values: T): Promise<{ -readonly [P in keyof T]: Awaited<T[P]> }>; }
 >Promise : PromiseConstructor
->all : { <T>(values: Iterable<T | PromiseLike<T>>): Promise<Awaited<T>[]>; <T extends readonly unknown[] | []>(values: T): Promise<{ -readonly [P in keyof T]: Awaited<T[P]>; }>; }
+>all : { <T>(values: Iterable<T | PromiseLike<T>, any, any>): Promise<Awaited<T>[]>; <T extends readonly unknown[] | []>(values: T): Promise<{ -readonly [P in keyof T]: Awaited<T[P]> }>; }
 
       fromExtensions
 >fromExtensions        .filter((e) => !e.isApplicationScoped)        .map(async (e) => [e, await scanMetadata(e)]) : Promise<[ILocalExtension, Metadata]>[]
@@= skipped -28, +28 lines =@@
 >e : ILocalExtension
 >await scanMetadata(e) : Metadata
 >scanMetadata(e) : Promise<Metadata>
->scanMetadata : (local: ILocalExtension) => Promise<Metadata | undefined>
+>scanMetadata : (local: ILocalExtension) => Promise<Metadata>
 >e : ILocalExtension
 
     );
