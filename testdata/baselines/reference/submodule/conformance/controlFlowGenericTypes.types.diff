--- old.controlFlowGenericTypes.types
+++ new.controlFlowGenericTypes.types
@@= skipped -109, +109 lines =@@
 
         unbox(x);
 >unbox(x) : T
->unbox : <T_1>(x: Box<T_1>) => T_1
+>unbox : <T>(x: Box<T>) => T
 >x : Box<T>
     }
 }
@@= skipped -17, +17 lines =@@
 
         unbox(x);
 >unbox(x) : T
->unbox : <T_1>(x: Box<T_1>) => T_1
+>unbox : <T>(x: Box<T>) => T
 >x : Box<T>
     }
 }
@@= skipped -17, +17 lines =@@
 
         unbox(x);  // Error
 >unbox(x) : T
->unbox : <T_1>(x: Box<T_1>) => T_1
+>unbox : <T>(x: Box<T>) => T
 >x : undefined
     }
 }
@@= skipped -16, +16 lines =@@
 
         unbox(x);  // Error
 >unbox(x) : unknown
->unbox : <T_1>(x: Box<T_1>) => T_1
+>unbox : <T>(x: Box<T>) => T
 >x : undefined
     }
 }
@@= skipped -172, +172 lines =@@
 };
 
 function get<K extends keyof A>(key: K, obj: A): number {
->get : <K extends keyof A>(key: K, obj: A) => number
+>get : <K extends "a">(key: K, obj: A) => number
 >key : K
 >obj : A
 
@@= skipped -28, +28 lines =@@
 >EventEmitter : EventEmitter<ET>
 
     off<K extends keyof ET>(...args: [K, number] | [unknown, string]):void {}
->off : <K extends keyof ET>(...args: [K, number] | [unknown, string]) => void
->args : [K, number] | [unknown, string]
+>off : <K extends keyof ET>(...args: [unknown, string] | [K, number]) => void
+>args : [unknown, string] | [K, number]
 }
 function once<ET, T extends EventEmitter<ET>>(emittingObject: T, eventName: keyof ET): void {
 >once : <ET, T extends EventEmitter<ET>>(emittingObject: T, eventName: keyof ET) => void
@@= skipped -226, +226 lines =@@
 >title : string | undefined
 
 function getColumnProperty<T>(column: Column<T>, key: keyof Column<T>) {
->getColumnProperty : <T>(column: Column<T>, key: keyof Column<T>) => Column<T>["title" | keyof (keyof T extends never ? { id?: number | string; } : { id: T; })]
+>getColumnProperty : <T>(column: Column<T>, key: "title" | keyof (keyof T extends never ? { id?: string | number | undefined; } : { id: T; })) => Column<T>["title" | keyof (keyof T extends never ? { id?: string | number | undefined; } : { id: T; })]
 >column : Column<T>
->key : "title" | keyof (keyof T extends never ? { id?: number | string; } : { id: T; })
+>key : "title" | keyof (keyof T extends never ? { id?: string | number | undefined; } : { id: T; })
 
   return column[key];
->column[key] : Column<T>["title" | keyof (keyof T extends never ? { id?: number | string; } : { id: T; })]
+>column[key] : Column<T>["title" | keyof (keyof T extends never ? { id?: string | number | undefined; } : { id: T; })]
 >column : Column<T>
->key : "title" | keyof (keyof T extends never ? { id?: number | string; } : { id: T; })
+>key : "title" | keyof (keyof T extends never ? { id?: string | number | undefined; } : { id: T; })
 }
 
