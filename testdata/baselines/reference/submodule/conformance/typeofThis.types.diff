--- old.typeofThis.types
+++ new.typeofThis.types
@@= skipped -82, +82 lines =@@
 }
 
 function Test3(this: { no: number }) {
->Test3 : (this: { no: number; }) => void
+>Test3 : () => void
 >this : { no: number; }
 >no : number
 
@@= skipped -13, +13 lines =@@
 }
 
 function Test4(this: { no: number } | undefined) {
->Test4 : (this: { no: number; } | undefined) => void
+>Test4 : () => void
 >this : { no: number; } | undefined
 >no : number
 
@@= skipped -183, +183 lines =@@
 >Test10 : Test10
 
     a?: { b?: string }
->a : { b?: string; } | undefined
+>a : { b?: string | undefined; } | undefined
 >b : string | undefined
 
     foo() {
 >foo : () => void
 
         let a: typeof this.a = undefined as any;
->a : { b?: string; } | undefined
->this.a : { b?: string; } | undefined
+>a : { b?: string | undefined; } | undefined
+>this.a : { b?: string | undefined; } | undefined
 >this : this
->a : { b?: string; } | undefined
+>a : { b?: string | undefined; } | undefined
 >undefined as any : any
 >undefined : undefined
 
         if (this.a) {
->this.a : { b?: string; } | undefined
+>this.a : { b?: string | undefined; } | undefined
 >this : this
->a : { b?: string; } | undefined
+>a : { b?: string | undefined; } | undefined
 
             let a: typeof this.a = undefined as any;    // should narrow to { b?: string }
->a : { b?: string; }
->this.a : { b?: string; }
+>a : { b?: string | undefined; }
+>this.a : { b?: string | undefined; }
 >this : this
->a : { b?: string; }
+>a : { b?: string | undefined; }
 >undefined as any : any
 >undefined : undefined
 
             let b: typeof this.a.b = undefined as any;
 >b : string | undefined
 >this.a.b : string | undefined
->this.a : { b?: string; }
+>this.a : { b?: string | undefined; }
 >this : this
->a : { b?: string; }
+>a : { b?: string | undefined; }
 >b : string | undefined
 >undefined as any : any
 >undefined : undefined
 
             if (this.a.b) {
 >this.a.b : string | undefined
->this.a : { b?: string; }
+>this.a : { b?: string | undefined; }
 >this : this
->a : { b?: string; }
+>a : { b?: string | undefined; }
 >b : string | undefined
 
                 let b: typeof this.a.b = undefined as any;   // should narrow to string
 >b : string
 >this.a.b : string
->this.a : { b?: string; }
+>this.a : { b?: string | undefined; }
 >this : this
->a : { b?: string; }
+>a : { b?: string | undefined; }
 >b : string
 >undefined as any : any
 >undefined : undefined
@@= skipped -62, +62 lines =@@
 >Test11 : Test11
 
     this?: { x?: string };
->this : { x?: string; } | undefined
+>this : { x?: string | undefined; } | undefined
 >x : string | undefined
     
     foo() {
@@= skipped -11, +11 lines =@@
 >this : this
 
         let bar: typeof o.this = {};
->bar : { x?: string; } | undefined
->o.this : { x?: string; } | undefined
+>bar : { x?: string | undefined; } | undefined
+>o.this : { x?: string | undefined; } | undefined
 >o : this
->this : { x?: string; } | undefined
+>this : { x?: string | undefined; } | undefined
 >{} : {}
 
         if (o.this && o.this.x) {
 >o.this && o.this.x : string | undefined
->o.this : { x?: string; } | undefined
+>o.this : { x?: string | undefined; } | undefined
 >o : this
->this : { x?: string; } | undefined
+>this : { x?: string | undefined; } | undefined
 >o.this.x : string | undefined
->o.this : { x?: string; }
+>o.this : { x?: string | undefined; }
 >o : this
->this : { x?: string; }
+>this : { x?: string | undefined; }
 >x : string | undefined
 
             let y: string = o.this.x;   // should narrow to string
 >y : string
 >o.this.x : string
->o.this : { x?: string; }
+>o.this : { x?: string | undefined; }
 >o : this
->this : { x?: string; }
+>this : { x?: string | undefined; }
 >x : string
         }
     }
