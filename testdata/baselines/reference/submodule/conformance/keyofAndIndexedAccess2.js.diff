--- old.keyofAndIndexedAccess2.js
+++ new.keyofAndIndexedAccess2.js
@@= skipped -172, +172 lines =@@
 function f1(obj, k0, k1, k2) {
     obj[k0] = 1;
     obj[k0] = 2;
-    obj[k0] = 'x'; // Error
+    obj[k0] = 'x';
     obj[k1] = 1;
-    obj[k1] = 2; // Error
-    obj[k1] = 'x'; // Error
-    obj[k2] = 1; // Error
-    obj[k2] = 2; // Error
-    obj[k2] = 'x'; // Error
+    obj[k1] = 2;
+    obj[k1] = 'x';
+    obj[k2] = 1;
+    obj[k2] = 2;
+    obj[k2] = 'x';
 }
 function f2(a, b, c, k) {
-    a = b; // Error, index signature in source doesn't imply properties are present
-    a = c; // Error, index signature in source doesn't imply properties are present
+    a = b;
+    a = c;
     b = a;
     b = c;
-    c = a; // Error, constraint on target doesn't imply any properties or signatures
-    c = b; // Error, constraint on target doesn't imply any properties or signatures
+    c = a;
+    c = b;
     a.x;
     b.x;
     c.x;
     c[k];
     a.x = 1;
     b.x = 1;
-    c.x = 1; // Error, cannot write to index signature through constraint
-    c[k] = 1; // Error, cannot write to index signature through constraint
+    c.x = 1;
+    c[k] = 1;
 }
 function f3(a, b, k) {
-    a = b; // Error, index signature doesn't imply properties are present
+    a = b;
     b = a;
     a[k];
     a[k] = 1;
 }
 function f3b(a, b, k) {
-    a = b; // Error, index signature doesn't imply properties are present
+    a = b;
     b = a;
 }
 function f4(a, b) {
@@= skipped -39, +39 lines =@@
     b = a;
 }
 function f10(obj, k1, k2, k3, k4) {
-    obj[k1] = 123; // Error
-    obj[k2] = 123; // Error
-    obj[k3] = 123; // Error
-    obj[k4] = 123; // Error
+    obj[k1] = 123;
+    obj[k2] = 123;
+    obj[k3] = 123;
+    obj[k4] = 123;
 }
 function f11(obj, k1, k2) {
     obj.foo = 123;
@@= skipped -11, +11 lines =@@
     obj[k2] = 123;
 }
 function f12(obj, k1, k2, k3) {
-    obj.foo = 123; // Error
-    obj[k1] = 123; // Error
-    obj[k2] = 123; // Error
-    obj[k3] = 123; // Error
+    obj.foo = 123;
+    obj[k1] = 123;
+    obj[k2] = 123;
+    obj[k3] = 123;
 }
 export function getAllEntities(state) {
     const { ids, entities } = state;
@@= skipped -17, +17 lines =@@
     return entities[id];
 }
 function get123() {
-    return 123; // Error
+    return 123;
 }
-// Repros from #30938
 function fn(param, cb) {
     cb(param.elements[0]);
 }
 function fn2(param, cb) {
     cb(param[0]);
 }
-// Repro from #31149
 function fn3(param, cb) {
     cb(param[0]);
 }
@@= skipped -17, +15 lines =@@
     let x = 'abc';
     let y = 'abc';
 }
-// Repro from #31439 and #31691
 export class c {
     constructor() {
         this.a = "b";
         this["a"] = "b";
     }
 }
-// Repro from #32038
 const actions = ['resizeTo', 'resizeBy'];
 for (const action of actions) {
     window[action] = (x, y) => {
