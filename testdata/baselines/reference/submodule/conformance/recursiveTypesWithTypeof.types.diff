--- old.recursiveTypesWithTypeof.types
+++ new.recursiveTypesWithTypeof.types
@@= skipped -47, +47 lines =@@
 // None of these declarations should have any errors!
 // Truly recursive types
 var g: { x: typeof g; };
->g : { x: typeof g; }
->x : { x: typeof g; }
->g : { x: typeof g; }
+>g : { x: ???; }
+>x : { x: ???; }
+>g : { x: ???; }
 
 var g: typeof g.x;
->g : { x: typeof g; }
->g.x : { x: typeof g; }
->g : { x: typeof g; }
->x : { x: typeof g; }
+>g : { x: ???; }
+>g.x : { x: ???; }
+>g : { x: ???; }
+>x : { x: ???; }
 
 var h: () => typeof h;
->h : () => typeof h
->h : () => typeof h
+>h : () => ???
+>h : () => ???
 
 var h = h();
->h : () => typeof h
->h() : () => typeof h
->h : () => typeof h
+>h : () => ???
+>h() : () => ???
+>h : () => ???
 
 var i: (x: typeof i) => typeof x;
->i : (x: typeof i) => typeof x
->x : (x: typeof i) => typeof x
->i : (x: typeof i) => typeof x
->x : (x: typeof i) => typeof x
+>i : (x: ???) => ???
+>x : (x: ???) => ???
+>i : (x: ???) => ???
+>x : (x: ???) => ???
 
 var i = i(i);
->i : (x: typeof i) => typeof x
->i(i) : (x: typeof i) => typeof x
->i : (x: typeof i) => typeof x
->i : (x: typeof i) => typeof x
+>i : (x: ???) => ???
+>i(i) : (x: ???) => ???
+>i : (x: ???) => ???
+>i : (x: ???) => ???
 
 var j: <T extends typeof j>(x: T) => T;
->j : <T extends typeof j>(x: T) => T
->j : <T extends typeof j>(x: T) => T
+>j : <T extends ???>(x: T) => T
+>j : <T extends ???>(x: T) => T
 >x : T
 
 var j = j(j);
->j : <T extends typeof j>(x: T) => T
->j(j) : <T extends typeof j>(x: T) => T
->j : <T extends typeof j>(x: T) => T
->j : <T extends typeof j>(x: T) => T
+>j : <T extends ???>(x: T) => T
+>j(j) : <T extends ???>(x: T) => T
+>j : <T extends ???>(x: T) => T
+>j : <T extends ???>(x: T) => T
 
 // Same as h, i, j with construct signatures
 var h2: new () => typeof h2;
->h2 : new () => typeof h2
->h2 : new () => typeof h2
+>h2 : new () => ???
+>h2 : new () => ???
 
 var h2 = new h2();
->h2 : new () => typeof h2
->new h2() : new () => typeof h2
->h2 : new () => typeof h2
+>h2 : new () => ???
+>new h2() : new () => ???
+>h2 : new () => ???
 
 var i2: new (x: typeof i2) => typeof x;
->i2 : new (x: typeof i2) => typeof x
->x : new (x: typeof i2) => typeof x
->i2 : new (x: typeof i2) => typeof x
->x : new (x: typeof i2) => typeof x
+>i2 : new (x: ???) => ???
+>x : new (x: ???) => ???
+>i2 : new (x: ???) => ???
+>x : new (x: ???) => ???
 
 var i2 = new i2(i2);
->i2 : new (x: typeof i2) => typeof x
->new i2(i2) : new (x: typeof i2) => typeof x
->i2 : new (x: typeof i2) => typeof x
->i2 : new (x: typeof i2) => typeof x
+>i2 : new (x: ???) => ???
+>new i2(i2) : new (x: ???) => ???
+>i2 : new (x: ???) => ???
+>i2 : new (x: ???) => ???
 
 var j2: new <T extends typeof j2>(x: T) => T;
->j2 : new <T extends typeof j2>(x: T) => T
->j2 : new <T extends typeof j2>(x: T) => T
+>j2 : new <T extends ???>(x: T) => T
+>j2 : new <T extends ???>(x: T) => T
 >x : T
 
 var j2 = new j2(j2);
->j2 : new <T extends typeof j2>(x: T) => T
->new j2(j2) : new <T extends typeof j2>(x: T) => T
->j2 : new <T extends typeof j2>(x: T) => T
->j2 : new <T extends typeof j2>(x: T) => T
+>j2 : new <T extends ???>(x: T) => T
+>new j2(j2) : new <T extends ???>(x: T) => T
+>j2 : new <T extends ???>(x: T) => T
+>j2 : new <T extends ???>(x: T) => T
 
 // Indexers
 var k: { [n: number]: typeof k;[s: string]: typeof k };
->k : { [n: number]: any; [s: string]: any; }
+>k : { [n: number]: ???; [s: string]: ???; }
 >n : number
->k : { [n: number]: any; [s: string]: any; }
+>k : { [n: number]: ???; [s: string]: ???; }
 >s : string
->k : { [n: number]: any; [s: string]: any; }
+>k : { [n: number]: ???; [s: string]: ???; }
 
 var k = k[0];
->k : { [n: number]: any; [s: string]: any; }
->k[0] : { [n: number]: any; [s: string]: any; }
->k : { [n: number]: any; [s: string]: any; }
+>k : { [n: number]: ???; [s: string]: ???; }
+>k[0] : { [n: number]: ???; [s: string]: ???; }
+>k : { [n: number]: ???; [s: string]: ???; }
 >0 : 0
 
 var k = k[''];
->k : { [n: number]: any; [s: string]: any; }
->k[''] : { [n: number]: any; [s: string]: any; }
->k : { [n: number]: any; [s: string]: any; }
+>k : { [n: number]: ???; [s: string]: ???; }
+>k[''] : { [n: number]: ???; [s: string]: ???; }
+>k : { [n: number]: ???; [s: string]: ???; }
 >'' : ""
 
 // Hybrid - contains type literals as well as type arguments
 // These two are recursive
 var hy1: { x: typeof hy1 }[];
->hy1 : { x: typeof hy1; }[]
->x : { x: typeof hy1; }[]
->hy1 : { x: typeof hy1; }[]
+>hy1 : { x: ???; }[]
+>x : { x: ???; }[]
+>hy1 : { x: ???; }[]
 
 var hy1 = hy1[0].x;
->hy1 : { x: typeof hy1; }[]
->hy1[0].x : { x: typeof hy1; }[]
->hy1[0] : { x: typeof hy1; }
->hy1 : { x: typeof hy1; }[]
+>hy1 : { x: ???; }[]
+>hy1[0].x : { x: ???; }[]
+>hy1[0] : { x: ???[]; }
+>hy1 : { x: ???; }[]
 >0 : 0
->x : { x: typeof hy1; }[]
+>x : { x: ???; }[]
 
 var hy2: { x: Array<typeof hy2> };
->hy2 : { x: Array<typeof hy2>; }
->x : { x: Array<typeof hy2>; }[]
->hy2 : { x: Array<typeof hy2>; }
+>hy2 : { x: ???[]; }
+>x : { x: ???; }[]
+>hy2 : { x: ???[]; }
 
 var hy2 = hy2.x[0];
->hy2 : { x: Array<typeof hy2>; }
->hy2.x[0] : { x: Array<typeof hy2>; }
->hy2.x : { x: Array<typeof hy2>; }[]
->hy2 : { x: Array<typeof hy2>; }
->x : { x: Array<typeof hy2>; }[]
+>hy2 : { x: ???[]; }
+>hy2.x[0] : { x: ???[]; }
+>hy2.x : { x: ???; }[]
+>hy2 : { x: ???[]; }
+>x : { x: ???; }[]
 >0 : 0
 
 interface Foo2<T, U> { }
