--- old.enumClassification.js
+++ new.enumClassification.js
@@= skipped -81, +81 lines =@@
 
 
 //// [enumClassification.js]
-// An enum type where each member has no initializer or an initializer that specififes
-// a numeric literal, a string literal, or a single identifier naming another member in
-// the enum type is classified as a literal enum type. An enum type that doesn't adhere
-// to this pattern is classified as a numeric enum type.
-// Examples of literal enum types
 var E01;
 (function (E01) {
     E01[E01["A"] = 0] = "A";
@@= skipped -52, +47 lines =@@
     E08["D"] = "hello";
     E08[E08["E"] = 10] = "E";
 })(E08 || (E08 = {}));
-// Examples of numeric enum types with only constant members
 var E10;
 (function (E10) {
 })(E10 || (E10 = {}));
@@= skipped -16, +15 lines =@@
     E12[E12["B"] = 2] = "B";
     E12[E12["C"] = 4] = "C";
 })(E12 || (E12 = {}));
-// Examples of numeric enum types with constant and computed members
 var E20;
 (function (E20) {
-    E20[E20["A"] = "foo".length] = "A";
-    E20[E20["B"] = E20.A + 1] = "B";
-    E20[E20["C"] = +"123"] = "C";
-    E20[E20["D"] = Math.sin(1)] = "D";
+    E20["A"] = "foo".length;
+    if (typeof E20.A !== "string") E20[E20.A] = "A";
+    E20["B"] = E20.A + 1;
+    if (typeof E20.B !== "string") E20[E20.B] = "B";
+    E20["C"] = +"123";
+    if (typeof E20.C !== "string") E20[E20.C] = "C";
+    E20["D"] = Math.sin(1);
+    if (typeof E20.D !== "string") E20[E20.D] = "D";
 })(E20 || (E20 = {}));
-
-
-//// [enumClassification.d.ts]
-declare enum E01 {
-    A = 0
-}
-declare enum E02 {
-    A = 123
-}
-declare enum E03 {
-    A = "hello"
-}
-declare enum E04 {
-    A = 0,
-    B = 1,
-    C = 2
-}
-declare enum E05 {
-    A = 0,
-    B = 10,
-    C = 11
-}
-declare enum E06 {
-    A = "one",
-    B = "two",
-    C = "three"
-}
-declare enum E07 {
-    A = 0,
-    B = 1,
-    C = "hi",
-    D = 10,
-    E = 11,
-    F = "bye"
-}
-declare enum E08 {
-    A = 10,
-    B = "hello",
-    C = 10,
-    D = "hello",
-    E = 10
-}
-declare enum E10 {
-}
-declare enum E11 {
-    A = 0,
-    B = 1,
-    C = 2
-}
-declare enum E12 {
-    A = 1,
-    B = 2,
-    C = 4
-}
-declare enum E20 {
-    A,
-    B,
-    C,
-    D
-}
