--- old.contextualTypeWithUnionTypeIndexSignatures.js
+++ new.contextualTypeWithUnionTypeIndexSignatures.js
@@= skipped -66, +66 lines =@@
 // Let S be the set of types in U that has a string index signature.
 // If S is not empty, U has a string index signature of a union type of 
 // the types of the string index signatures from each type in S.
-var x = { z: function (a) { return a; } }; // a should be number
-var x = { foo: function (a) { return a; } }; // a should be number (because of index signature of IWithStringIndexSignature1)
+var x = { z: a => a }; // a should be number
+var x = { foo: a => a }; // a should be number (because of index signature of IWithStringIndexSignature1)
 var x = { foo: "hello" };
-var x2 = { z: function (a) { return a.toString(); } }; // a should be number
-var x2 = { z: function (a) { return a; } }; // a should be number
+var x2 = { z: a => a.toString() }; // a should be number
+var x2 = { z: a => a }; // a should be number
 // Let S be the set of types in U that has a numeric index signature.
 // If S is not empty, U has a numeric index signature of a union type of 
 // the types of the numeric index signatures from each type in S.
-var x3 = { 1: function (a) { return a; } }; // a should be number
-var x3 = { 0: function (a) { return a; } }; // a should be number (because of index signature of IWithNumberIndexSignature1)
+var x3 = { 1: a => a }; // a should be number
+var x3 = { 0: a => a }; // a should be number (because of index signature of IWithNumberIndexSignature1)
 var x3 = { 0: "hello" };
-var x4 = { 1: function (a) { return a.toString(); } }; // a should be number
-var x4 = { 1: function (a) { return a; } }; // a should be number
+var x4 = { 1: a => a.toString() }; // a should be number
+var x4 = { 1: a => a }; // a should be number
