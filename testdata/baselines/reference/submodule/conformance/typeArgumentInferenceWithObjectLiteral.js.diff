--- old.typeArgumentInferenceWithObjectLiteral.js
+++ new.typeArgumentInferenceWithObjectLiteral.js
@@= skipped -42, +42 lines =@@
 var s;
 // Calls below should infer string for T and then assign that type to the value parameter
 foo({
-    read: function () { return s; },
-    write: function (value) { return s = value; }
+    read: () => s,
+    write: value => s = value
 });
 foo({
-    write: function (value) { return s = value; },
-    read: function () { return s; }
+    write: value => s = value,
+    read: () => s
 });
 var E1;
 (function (E1) {
@@= skipped -16, +16 lines =@@
     E2[E2["X"] = 0] = "X";
 })(E2 || (E2 = {}));
 var v1;
-var v1 = f1({ w: function (x) { return x; }, r: function () { return 0; } }, 0);
-var v1 = f1({ w: function (x) { return x; }, r: function () { return 0; } }, E1.X);
-var v1 = f1({ w: function (x) { return x; }, r: function () { return E1.X; } }, 0);
+var v1 = f1({ w: x => x, r: () => 0 }, 0);
+var v1 = f1({ w: x => x, r: () => 0 }, E1.X);
+var v1 = f1({ w: x => x, r: () => E1.X }, 0);
 var v2;
-var v2 = f1({ w: function (x) { return x; }, r: function () { return E1.X; } }, E1.X);
-var v3 = f1({ w: function (x) { return x; }, r: function () { return E1.X; } }, E2.X); // Error
+var v2 = f1({ w: x => x, r: () => E1.X }, E1.X);
+var v3 = f1({ w: x => x, r: () => E1.X }, E2.X); // Error
