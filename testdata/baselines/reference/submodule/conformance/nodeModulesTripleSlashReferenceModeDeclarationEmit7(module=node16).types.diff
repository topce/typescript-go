--- old.nodeModulesTripleSlashReferenceModeDeclarationEmit7(module=node16).types
+++ new.nodeModulesTripleSlashReferenceModeDeclarationEmit7(module=node16).types
@@= skipped -2, +2 lines =@@
 === /index.ts ===
 // only an esm file can `import` both kinds of files
 import obj1 from "./sub1/uses.js"
->obj1 : ImportInterface
+>obj1 : any
 
 import obj2 from "./sub2/uses.js"
->obj2 : typeof obj2
+>obj2 : RequireInterface
 
 export default [obj1, obj2.default] as const;
->[obj1, obj2.default] as const : readonly [ImportInterface, RequireInterface]
->[obj1, obj2.default] : readonly [ImportInterface, RequireInterface]
->obj1 : ImportInterface
->obj2.default : RequireInterface
->obj2 : typeof obj2
->default : RequireInterface
+>[obj1, obj2.default] as const : readonly [any, any]
+>[obj1, obj2.default] : readonly [any, any]
+>obj1 : any
+>obj2.default : any
+>obj2 : RequireInterface
+>default : any
 
-=== /node_modules/pkg/import.d.ts ===
-export {};
-declare global {
->global : typeof global
-
-    interface ImportInterface { _i: any; }
->_i : any
-
-    function getInterI(): ImportInterface;
->getInterI : () => ImportInterface
-}
 === /node_modules/pkg/require.d.ts ===
 export {};
 declare global {
@@= skipped -38, +27 lines =@@
 === /sub1/uses.ts ===
 /// <reference types="pkg" preserve="true" />
 export default getInterI();
->getInterI() : ImportInterface
->getInterI : () => ImportInterface
+>getInterI() : any
+>getInterI : any
 
 === /sub2/uses.ts ===
 /// <reference types="pkg" preserve="true" />
