--- old.mappedTypeConstraints.types
+++ new.mappedTypeConstraints.types
@@= skipped -25, +25 lines =@@
 }
 
 function f2<T extends { a: string, b: string }, U extends { b: string, c: string }>(obj: Pick<T | U, keyof (T | U)>) {
->f2 : <T extends { a: string; b: string; }, U extends { b: string; c: string; }>(obj: Pick<T | U, keyof (T | U)>) => void
+>f2 : <T extends { a: string; b: string; }, U extends { b: string; c: string; }>(obj: Pick<T | U, keyof T & keyof U>) => void
 >a : string
 >b : string
 >b : string
@@= skipped -8, +8 lines =@@
 >obj : Pick<T | U, keyof T & keyof U>
 
     obj.b;
->obj.b : (T | U)["b"]
+>obj.b : T | U["b"]
 >obj : Pick<T | U, keyof T & keyof U>
->b : (T | U)["b"]
+>b : T | U["b"]
 }
 
 function f3<T extends { a: string, b: string }, U extends { b: string, c: string }>(obj: Pick<T & U, keyof (T & U)>) {
->f3 : <T extends { a: string; b: string; }, U extends { b: string; c: string; }>(obj: Pick<T & U, keyof (T & U)>) => void
+>f3 : <T extends { a: string; b: string; }, U extends { b: string; c: string; }>(obj: Pick<T & U, keyof T | keyof U>) => void
 >a : string
 >b : string
 >b : string
@@= skipped -14, +14 lines =@@
 >obj : Pick<T & U, keyof T | keyof U>
 
     obj.a;
->obj.a : (T & U)["a"]
+>obj.a : T & U["a"]
 >obj : Pick<T & U, keyof T | keyof U>
->a : (T & U)["a"]
+>a : T & U["a"]
 
     obj.b;
->obj.b : (T & U)["b"]
+>obj.b : T & U["b"]
 >obj : Pick<T & U, keyof T | keyof U>
->b : (T & U)["b"]
+>b : T & U["b"]
 
     obj.c;
->obj.c : (T & U)["c"]
+>obj.c : T & U["c"]
 >obj : Pick<T & U, keyof T | keyof U>
->c : (T & U)["c"]
+>c : T & U["c"]
 }
 
 function f4<T extends { a: string, b: string }>(obj: Record<Exclude<keyof T, 'b'> | 'c', string>) {
->f4 : <T extends { a: string; b: string; }>(obj: Record<Exclude<keyof T, "b"> | "c", string>) => void
+>f4 : <T extends { a: string; b: string; }>(obj: Record<"c" | Exclude<keyof T, "b">, string>) => void
 >a : string
 >b : string
 >obj : Record<"c" | Exclude<keyof T, "b">, string>
