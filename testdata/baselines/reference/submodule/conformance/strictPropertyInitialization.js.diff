--- old.strictPropertyInitialization.js
+++ new.strictPropertyInitialization.js
@@= skipped -162, +162 lines =@@
 
 
 //// [strictPropertyInitialization.js]
-"use strict";
-// Properties with non-undefined types require initialization
-var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
-    if (kind === "m") throw new TypeError("Private method is not writable");
-    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
-    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
-    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
-};
-var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
-    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
-    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
-    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
-};
-var _C1_f, _C1_g, _C1_h, _C1_i, _C4_d, _C4_e, _C4_f, _C5_b, _C6_b, _C7_b, _C10_d, _C11_b;
 class C1 {
-    constructor() {
-        _C1_f.set(this, void 0); //Error
-        _C1_g.set(this, void 0);
-        _C1_h.set(this, void 0); //Error
-        _C1_i.set(this, void 0);
-    }
+    a;
+    b;
+    c;
+    d;
+    #f;
+    #g;
+    #h;
+    #i;
 }
-_C1_f = new WeakMap(), _C1_g = new WeakMap(), _C1_h = new WeakMap(), _C1_i = new WeakMap();
-// No strict initialization checks for static members
 class C3 {
+    static a;
+    static b;
+    static c;
+    static d;
 }
-// Initializer satisfies strict initialization check
 class C4 {
-    constructor() {
-        this.a = 0;
-        this.b = 0;
-        this.c = "abc";
-        _C4_d.set(this, 0);
-        _C4_e.set(this, 0);
-        _C4_f.set(this, "abc");
-    }
+    a = 0;
+    b = 0;
+    c = "abc";
+    #d = 0;
+    #e = 0;
+    #f = "abc";
 }
-_C4_d = new WeakMap(), _C4_e = new WeakMap(), _C4_f = new WeakMap();
-// Assignment in constructor satisfies strict initialization check
 class C5 {
+    a;
+    #b;
     constructor() {
-        _C5_b.set(this, void 0);
         this.a = 0;
-        __classPrivateFieldSet(this, _C5_b, 0, "f");
+        this.#b = 0;
     }
 }
-_C5_b = new WeakMap();
-// All code paths must contain assignment
 class C6 {
+    a;
+    #b;
     constructor(cond) {
-        _C6_b.set(this, void 0);
         if (cond) {
             return;
         }
         this.a = 0;
-        __classPrivateFieldSet(this, _C6_b, 0, "f");
+        this.#b = 0;
     }
 }
-_C6_b = new WeakMap();
 class C7 {
+    a;
+    #b;
     constructor(cond) {
-        _C7_b.set(this, void 0);
         if (cond) {
             this.a = 1;
-            __classPrivateFieldSet(this, _C7_b, 1, "f");
+            this.#b = 1;
             return;
         }
         this.a = 0;
-        __classPrivateFieldSet(this, _C7_b, 1, "f");
+        this.#b = 1;
     }
 }
-_C7_b = new WeakMap();
-// Properties with string literal names aren't checked
 class C8 {
+    a;
+    "b";
+    0;
 }
-// No strict initialization checks for abstract members
 class C9 {
+    a;
+    b;
+    c;
+    d;
 }
-// Properties with non-undefined types must be assigned before they can be accessed
-// within their constructor
 class C10 {
+    a;
+    b;
+    c;
+    #d;
     constructor() {
-        _C10_d.set(this, void 0);
-        let x = this.a; // Error
-        this.a = this.b; // Error
-        this.b = __classPrivateFieldGet(this, _C10_d, "f"); //Error
+        let x = this.a;
+        this.a = this.b;
+        this.b = this.#d;
         this.b = x;
-        __classPrivateFieldSet(this, _C10_d, x, "f");
+        this.#d = x;
         let y = this.c;
     }
 }
-_C10_d = new WeakMap();
 class C11 {
+    a;
+    #b;
     constructor() {
-        _C11_b.set(this, void 0);
         this.a = someValue();
-        __classPrivateFieldSet(this, _C11_b, someValue(), "f");
+        this.#b = someValue();
     }
 }
-_C11_b = new WeakMap();
 const a = 'a';
 const b = Symbol();
 class C12 {
+    [a];
+    [b];
+    ['c'];
     constructor() {
         this[a] = 1;
         this[b] = 1;
@@= skipped -115, +107 lines =@@
     E["B"] = "B";
 })(E || (E = {}));
 class C13 {
+    [E.A];
     constructor() {
         this[E.A] = 1;
     }
 }
-E.A;
-
-
-//// [strictPropertyInitialization.d.ts]
-declare class C1 {
-    #private;
-    a: number;
-    b: number | undefined;
-    c: number | null;
-    d?: number;
-}
-declare class C2 {
-    #private;
-    a: number;
-    b: number | undefined;
-    c: number | null;
-    d?: number;
-}
-declare class C3 {
-    static a: number;
-    static b: number | undefined;
-    static c: number | null;
-    static d?: number;
-}
-declare class C4 {
-    #private;
-    a: number;
-    b: number;
-    c: string;
-}
-declare class C5 {
-    #private;
-    a: number;
-    constructor();
-}
-declare class C6 {
-    #private;
-    a: number;
-    constructor(cond: boolean);
-}
-declare class C7 {
-    #private;
-    a: number;
-    constructor(cond: boolean);
-}
-declare class C8 {
-    a: number;
-    "b": number;
-    0: number;
-}
-declare abstract class C9 {
-    abstract a: number;
-    abstract b: number | undefined;
-    abstract c: number | null;
-    abstract d?: number;
-}
-declare class C10 {
-    #private;
-    a: number;
-    b: number;
-    c?: number;
-    constructor();
-}
-declare function someValue(): any;
-declare class C11 {
-    #private;
-    a: number;
-    constructor();
-}
-declare const a = "a";
-declare const b: unique symbol;
-declare class C12 {
-    [a]: number;
-    [b]: number;
-    ['c']: number;
-    constructor();
-}
-declare enum E {
-    A = "A",
-    B = "B"
-}
-declare class C13 {
-    [E.A]: number;
-    constructor();
-}
