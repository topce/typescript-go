--- old.uniqueSymbols.types
+++ new.uniqueSymbols.types
@@= skipped -108, +108 lines =@@
 
 // function return value with type query
 function funcReturnConstCallWithTypeQuery(): typeof constCall { return constCall; }
->funcReturnConstCallWithTypeQuery : () => typeof constCall
+>funcReturnConstCallWithTypeQuery : () => unique symbol
 >constCall : unique symbol
 >constCall : unique symbol
 
@@= skipped -22, +22 lines =@@
 
 // generator function yield with return type query
 function* genFuncYieldConstCallWithTypeQuery(): IterableIterator<typeof constCall> { yield constCall; }
->genFuncYieldConstCallWithTypeQuery : () => IterableIterator<typeof constCall>
+>genFuncYieldConstCallWithTypeQuery : () => IterableIterator<unique symbol, any, any>
 >constCall : unique symbol
 >yield constCall : any
 >constCall : unique symbol
@@= skipped -303, +303 lines =@@
 >x : T
 
 declare function g(x: typeof s): void;
->g : { (x: typeof s): void; (x: typeof N.s): void; }
+>g : { (x: unique symbol): void; (x: unique symbol): void; }
 >x : unique symbol
 >s : unique symbol
 
 declare function g(x: typeof N.s): void;
->g : { (x: typeof s): void; (x: typeof N.s): void; }
+>g : { (x: unique symbol): void; (x: unique symbol): void; }
 >x : unique symbol
 >N.s : unique symbol
 >N : typeof N
@@= skipped -52, +52 lines =@@
 
 // property assignments/methods
 const o2 = {
->o2 : { a: symbol; b: symbol; c: symbol; method1(): symbol; method2(): Promise<symbol>; method3(): AsyncGenerator<symbol, void, unknown>; method4(): Generator<symbol, void, unknown>; method5(p?: symbol): symbol; }
->{    a: s,    b: N.s,    c: N["s"],    method1() { return s; },    async method2() { return s; },    async * method3() { yield s; },    * method4() { yield s; },    method5(p = s) { return p; },} : { a: symbol; b: symbol; c: symbol; method1(): symbol; method2(): Promise<symbol>; method3(): AsyncGenerator<symbol, void, unknown>; method4(): Generator<symbol, void, unknown>; method5(p?: symbol): symbol; }
+>o2 : { a: symbol; b: symbol; c: symbol; method1: () => symbol; method2: () => Promise<symbol>; method3: () => AsyncGenerator<symbol, void, unknown>; method4: () => Generator<symbol, void, unknown>; method5: (p?: symbol) => symbol; }
+>{    a: s,    b: N.s,    c: N["s"],    method1() { return s; },    async method2() { return s; },    async * method3() { yield s; },    * method4() { yield s; },    method5(p = s) { return p; },} : { a: symbol; b: symbol; c: symbol; method1: () => symbol; method2: () => Promise<symbol>; method3: () => AsyncGenerator<symbol, void, unknown>; method4: () => Generator<symbol, void, unknown>; method5: (p?: symbol) => symbol; }
 
     a: s,
 >a : symbol
@@= skipped -189, +189 lines =@@
 
 g(s);
 >g(s) : void
->g : { (x: typeof s): void; (x: typeof N.s): void; }
+>g : { (x: unique symbol): void; (x: unique symbol): void; }
 >s : unique symbol
 
 g(N.s);
 >g(N.s) : void
->g : { (x: typeof s): void; (x: typeof N.s): void; }
+>g : { (x: unique symbol): void; (x: unique symbol): void; }
 >N.s : unique symbol
 >N : typeof N
 >s : unique symbol
 
 g(N["s"]);
 >g(N["s"]) : void
->g : { (x: typeof s): void; (x: typeof N.s): void; }
+>g : { (x: unique symbol): void; (x: unique symbol): void; }
 >N["s"] : unique symbol
 >N : typeof N
 >"s" : "s"
@@= skipped -39, +39 lines =@@
 
 // conditionals
 Math.random() * 2 ? s : "a";
->Math.random() * 2 ? s : "a" : unique symbol | "a"
+>Math.random() * 2 ? s : "a" : "a" | unique symbol
 >Math.random() * 2 : number
 >Math.random() : number
 >Math.random : () => number
@@= skipped -11, +11 lines =@@
 >"a" : "a"
 
 Math.random() * 2 ? N.s : "a";
->Math.random() * 2 ? N.s : "a" : unique symbol | "a"
+>Math.random() * 2 ? N.s : "a" : "a" | unique symbol
 >Math.random() * 2 : number
 >Math.random() : number
 >Math.random : () => number
@@= skipped -13, +13 lines =@@
 >"a" : "a"
 
 Math.random() * 2 ? N["s"] : "a";
->Math.random() * 2 ? N["s"] : "a" : unique symbol | "a"
+>Math.random() * 2 ? N["s"] : "a" : "a" | unique symbol
 >Math.random() * 2 : number
 >Math.random() : number
 >Math.random : () => number
@@= skipped -59, +59 lines =@@
 
 interface Context {
     method1(): typeof s;
->method1 : () => typeof s
+>method1 : () => unique symbol
 >s : unique symbol
 
     method2(): Promise<typeof s>;
->method2 : () => Promise<typeof s>
+>method2 : () => Promise<unique symbol>
 >s : unique symbol
 
     method3(): AsyncIterableIterator<typeof s>;
->method3 : () => AsyncIterableIterator<typeof s>
+>method3 : () => AsyncIterableIterator<unique symbol, any, any>
 >s : unique symbol
 
     method4(): IterableIterator<typeof s>;
->method4 : () => IterableIterator<typeof s>
+>method4 : () => IterableIterator<unique symbol, any, any>
 >s : unique symbol
 
     method5(p?: typeof s): typeof s;
->method5 : (p?: typeof s) => typeof s
+>method5 : (p?: unique symbol) => unique symbol
 >p : unique symbol
 >s : unique symbol
 >s : unique symbol
@@= skipped -24, +24 lines =@@
 
 const o3: Context = {
 >o3 : Context
->{    method1() {        return s; // return type should not widen due to contextual type    },    async method2() {        return s; // return type should not widen due to contextual type    },    async * method3() {        yield s; // yield type should not widen due to contextual type    },    * method4() {        yield s; // yield type should not widen due to contextual type    },    method5(p = s) { // parameter should not widen due to contextual type        return p;    },} : { method1(): unique symbol; method2(): Promise<unique symbol>; method3(): AsyncGenerator<unique symbol, void, any>; method4(): Generator<unique symbol, void, any>; method5(p?: unique symbol): unique symbol; }
+>{    method1() {        return s; // return type should not widen due to contextual type    },    async method2() {        return s; // return type should not widen due to contextual type    },    async * method3() {        yield s; // yield type should not widen due to contextual type    },    * method4() {        yield s; // yield type should not widen due to contextual type    },    method5(p = s) { // parameter should not widen due to contextual type        return p;    },} : { method1: () => unique symbol; method2: () => Promise<unique symbol>; method3: () => AsyncGenerator<unique symbol, void, any>; method4: () => Generator<unique symbol, void, any>; method5: (p?: unique symbol) => unique symbol; }
 
     method1() {
 >method1 : () => unique symbol
@@= skipped -46, +46 lines =@@
 // allowed when not emitting declarations
 
 const o4 = {
->o4 : { method1(p: typeof s): typeof s; method2(p: I["readonlyType"]): I["readonlyType"]; }
->{    method1(p: typeof s): typeof s {        return p;    },    method2(p: I["readonlyType"]): I["readonlyType"] {        return p;    }} : { method1(p: typeof s): typeof s; method2(p: I["readonlyType"]): I["readonlyType"]; }
+>o4 : { method1: (p: unique symbol) => unique symbol; method2: (p: unique symbol) => unique symbol; }
+>{    method1(p: typeof s): typeof s {        return p;    },    method2(p: I["readonlyType"]): I["readonlyType"] {        return p;    }} : { method1: (p: unique symbol) => unique symbol; method2: (p: unique symbol) => unique symbol; }
 
     method1(p: typeof s): typeof s {
->method1 : (p: typeof s) => typeof s
+>method1 : (p: unique symbol) => unique symbol
 >p : unique symbol
 >s : unique symbol
 >s : unique symbol
@@= skipped -14, +14 lines =@@
 
     },
     method2(p: I["readonlyType"]): I["readonlyType"] {
->method2 : (p: I["readonlyType"]) => I["readonlyType"]
+>method2 : (p: unique symbol) => unique symbol
 >p : unique symbol
 
         return p;
@@= skipped -13, +13 lines =@@
 >class {    method1(p: typeof s): typeof s {        return p;    }    method2(p: I["readonlyType"]): I["readonlyType"] {        return p;    }} : typeof ce0
 
     method1(p: typeof s): typeof s {
->method1 : (p: typeof s) => typeof s
+>method1 : (p: unique symbol) => unique symbol
 >p : unique symbol
 >s : unique symbol
 >s : unique symbol
@@= skipped -9, +9 lines =@@
 >p : unique symbol
     }
     method2(p: I["readonlyType"]): I["readonlyType"] {
->method2 : (p: I["readonlyType"]) => I["readonlyType"]
+>method2 : (p: unique symbol) => unique symbol
 >p : unique symbol
 
         return p;
@@= skipped -9, +9 lines =@@
 };
 
 function funcInferredReturnType(obj: { method(p: typeof s): void }) {
->funcInferredReturnType : (obj: { method(p: typeof s): void; }) => { method(p: typeof s): void; }
->obj : { method(p: typeof s): void; }
->method : (p: typeof s) => void
+>funcInferredReturnType : (obj: { method: (p: unique symbol) => void; }) => { method: (p: unique symbol) => void; }
+>obj : { method: (p: unique symbol) => void; }
+>method : (p: unique symbol) => void
 >p : unique symbol
 >s : unique symbol
 
     return obj;
->obj : { method(p: typeof s): void; }
+>obj : { method: (p: unique symbol) => void; }
 }
 
