--- old.callWithMissingVoid.js
+++ new.callWithMissingVoid.js
@@= skipped -86, +86 lines =@@
 
 
 //// [callWithMissingVoid.js]
-"use strict";
 // From #4260
-var X = /** @class */ (function () {
-    function X() {
-    }
-    X.prototype.f = function (t) {
+class X {
+    f(t) {
         return { a: t };
-    };
-    return X;
-}());
+    }
+}
 x.f(); // no error because f expects void
 xUnion.f(42); // no error because f accepts number
 xUnion.f(); // no error because f accepts void
@@= skipped -17, +13 lines =@@
 xUnknown.f(); // error, unknown still expects an argument
 xNever.f(); // error, never still expects an argument
 // Promise has previously been updated to work without arguments, but to show this fixes the issue too.
-var MyPromise = /** @class */ (function () {
-    function MyPromise(executor) {
+class MyPromise {
+    constructor(executor) {
     }
-    return MyPromise;
-}());
-new MyPromise(function (resolve) { return resolve(); }); // no error
-new MyPromise(function (resolve) { return resolve(); }); // no error
-new MyPromise(function (resolve) { return resolve(); }); // error, `any` arguments cannot be omitted
-new MyPromise(function (resolve) { return resolve(); }); // error, `unknown` arguments cannot be omitted
-new MyPromise(function (resolve) { return resolve(); }); // error, `never` arguments cannot be omitted
+}
+new MyPromise(resolve => resolve()); // no error
+new MyPromise(resolve => resolve()); // no error
+new MyPromise(resolve => resolve()); // error, `any` arguments cannot be omitted
+new MyPromise(resolve => resolve()); // error, `unknown` arguments cannot be omitted
+new MyPromise(resolve => resolve()); // error, `never` arguments cannot be omitted
 // Multiple parameters
 function a(x, y, z) {
 }
@@= skipped -28, +27 lines =@@
 c(3, void 0); // ok
 c(3); // ok
 c(); // ok
-call(function (x, y) { return x + y; }); // error
-call(function (x, y) { return x + y; }, 4, 2); // ok
-call(function (x, y) { return x; }, 4, void 0); // ok
-call(function (x, y) { return x; }, 4); // ok
-call(function (x, y) { return 42; }); // ok
-call(function (x, y) { return 42; }); // ok
-call(function (x, y) { return 42; }, 4); // ok
-call(function (x, y) { return 42; }, 4, 2); // ok
+call((x, y) => x + y); // error
+call((x, y) => x + y, 4, 2); // ok
+call((x, y) => x, 4, void 0); // ok
+call((x, y) => x, 4); // ok
+call((x, y) => 42); // ok
+call((x, y) => 42); // ok
+call((x, y) => 42, 4); // ok
+call((x, y) => 42, 4, 2); // ok
