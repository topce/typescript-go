--- old.indexSignatures1.types
+++ new.indexSignatures1.types
@@= skipped -677, +677 lines =@@
 };
 
 const obj11 = {
->obj11 : { [x: number]: 2 | 3; 1: 2; }
->{    [1]: 2 as const,    [1 + 2]: 3 as const,} : { [x: number]: 2 | 3; 1: 2; }
+>obj11 : { [x: number]: 2 | 3; [1]: 2; }
+>{    [1]: 2 as const,    [1 + 2]: 3 as const,} : { [x: number]: 2 | 3; [1]: 2; }
 
     [1]: 2 as const,
 >[1] : 2
@@= skipped -39, +39 lines =@@
 };
 
 const obj13 = {
->obj13 : { [x: string]: 0 | 2 | 1 | 3; [x: number]: 2 | 3; [x: symbol]: 4 | 5; x: 0; 1: 2; [sym]: 4; }
->{    ['x']: 0 as const,    ['a' + 'b']: 1 as const,    [1]: 2 as const,    [1 + 2]: 3 as const,    [sym]: 4 as const,    [Symbol()]: 5 as const,} : { [x: string]: 0 | 2 | 1 | 3; [x: number]: 2 | 3; [x: symbol]: 4 | 5; x: 0; 1: 2; [sym]: 4; }
+>obj13 : { [x: string]: 0 | 1 | 2 | 3; [x: number]: 2 | 3; [x: symbol]: 4 | 5; x: 0; [1]: 2; [sym]: 4; }
+>{    ['x']: 0 as const,    ['a' + 'b']: 1 as const,    [1]: 2 as const,    [1 + 2]: 3 as const,    [sym]: 4 as const,    [Symbol()]: 5 as const,} : { [x: string]: 0 | 1 | 2 | 3; [x: number]: 2 | 3; [x: symbol]: 4 | 5; x: 0; [1]: 2; [sym]: 4; }
 
     ['x']: 0 as const,
 >['x'] : 0
@@= skipped -132, +132 lines =@@
 >'directive' : "directive"
 
 declare function foo<TArg, TRet, TDir>(options: { [x in string]: (arg: TArg) => TRet } & { [directive]?: TDir }): void;
->foo : <TArg, TRet, TDir>(options: { [x in string]: (arg: TArg) => TRet; } & { [directive]?: TDir; }) => void
->options : { [x: string]: (arg: TArg) => TRet; } & { [directive]?: TDir; }
+>foo : <TArg, TRet, TDir>(options: { [x: string]: (arg: TArg) => TRet; } & { [directive]?: TDir | undefined; }) => void
+>options : { [x: string]: (arg: TArg) => TRet; } & { [directive]?: TDir | undefined; }
 >arg : TArg
 >[directive] : TDir | undefined
 >directive : unique symbol
@@= skipped -9, +9 lines =@@
 let case1 = foo({
 >case1 : void
 >foo({    [directive]: (x: string) => 'str',    addOne: (x: number) => x + 1,    double: (x: number) => x + x,}) : void
->foo : <TArg, TRet, TDir>(options: { [x in string]: (arg: TArg) => TRet; } & { [directive]?: TDir; }) => void
+>foo : <TArg, TRet, TDir>(options: { [x: string]: (arg: TArg) => TRet; } & { [directive]?: TDir | undefined; }) => void
 >{    [directive]: (x: string) => 'str',    addOne: (x: number) => x + 1,    double: (x: number) => x + x,} : { [directive]: (x: string) => "str"; addOne: (x: number) => number; double: (x: number) => number; }
 
     [directive]: (x: string) => 'str',
@@= skipped -31, +31 lines =@@
 let case2 = foo({
 >case2 : void
 >foo({    addOne: (x: number) => x + 1,    double: (x: number) => x + x,    [directive]: (x: string) => 'str',}) : void
->foo : <TArg, TRet, TDir>(options: { [x in string]: (arg: TArg) => TRet; } & { [directive]?: TDir; }) => void
+>foo : <TArg, TRet, TDir>(options: { [x: string]: (arg: TArg) => TRet; } & { [directive]?: TDir | undefined; }) => void
 >{    addOne: (x: number) => x + 1,    double: (x: number) => x + x,    [directive]: (x: string) => 'str',} : { addOne: (x: number) => number; double: (x: number) => number; [directive]: (x: string) => "str"; }
 
     addOne: (x: number) => x + 1,
@@= skipped -31, +31 lines =@@
 let case3 = foo({
 >case3 : void
 >foo({    [directive]: 'str',    addOne: (x: number) => x + 1,    double: (x: number) => x + x,}) : void
->foo : <TArg, TRet, TDir>(options: { [x in string]: (arg: TArg) => TRet; } & { [directive]?: TDir; }) => void
+>foo : <TArg, TRet, TDir>(options: { [x: string]: (arg: TArg) => TRet; } & { [directive]?: TDir | undefined; }) => void
 >{    [directive]: 'str',    addOne: (x: number) => x + 1,    double: (x: number) => x + x,} : { [directive]: string; addOne: (x: number) => number; double: (x: number) => number; }
 
     [directive]: 'str',
