--- old.parserRealSource8.js
+++ new.parserRealSource8.js
@@= skipped -467, +467 lines =@@
     }
 }
 
+//// [typescript.js]
 //// [parserRealSource8.js]
 // Copyright (c) Microsoft. All rights reserved. Licensed under the Apache License, Version 2.0. 
 // See LICENSE.txt in the project root for complete license information.
 ///<reference path='typescript.ts' />
 var TypeScript;
 (function (TypeScript) {
-    var AssignScopeContext = /** @class */ (function () {
-        function AssignScopeContext(scopeChain, typeFlow, modDeclChain) {
+    class AssignScopeContext {
+        scopeChain;
+        typeFlow;
+        modDeclChain;
+        constructor(scopeChain, typeFlow, modDeclChain) {
             this.scopeChain = scopeChain;
             this.typeFlow = typeFlow;
             this.modDeclChain = modDeclChain;
         }
-        return AssignScopeContext;
-    }());
+    }
     TypeScript.AssignScopeContext = AssignScopeContext;
     function pushAssignScope(scope, context, type, classType, fnc) {
         var chain = new ScopeChain(null, context.scopeChain, scope);
@@= skipped -40, +43 lines =@@
         return s.isInstanceProperty();
     }
     TypeScript.instanceFilterStop = instanceFilterStop;
-    var ScopeSearchFilter = /** @class */ (function () {
-        function ScopeSearchFilter(select, stop) {
+    class ScopeSearchFilter {
+        select;
+        stop;
+        constructor(select, stop) {
             this.select = select;
             this.stop = stop;
-            this.result = null;
         }
-        ScopeSearchFilter.prototype.reset = function () {
+        result = null;
+        reset() {
             this.result = null;
-        };
-        ScopeSearchFilter.prototype.update = function (b) {
+        }
+        update(b) {
             this.result = this.select(this.result, b);
             if (this.result) {
                 return this.stop(this.result);
@@= skipped -17, +19 lines =@@
             else {
                 return false;
             }
-        };
-        return ScopeSearchFilter;
-    }());
+        }
+    }
     TypeScript.ScopeSearchFilter = ScopeSearchFilter;
     TypeScript.instanceFilter = new ScopeSearchFilter(instanceCompare, instanceFilterStop);
     function preAssignModuleScopes(ast, context) {
