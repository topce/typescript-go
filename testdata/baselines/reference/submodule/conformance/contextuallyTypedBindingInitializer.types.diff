--- old.contextuallyTypedBindingInitializer.types
+++ new.contextuallyTypedBindingInitializer.types
@@= skipped -6, +6 lines =@@
 >x : number
 }
 function f({ show = v => v.toString() }: Show) {}
->f : ({ show }: Show) => void
+>f : (__0: Show) => void
 >show : (x: number) => string
 >v => v.toString() : (v: number) => string
 >v : number
@@= skipped -10, +10 lines =@@
 >toString : (radix?: number) => string
 
 function f2({ "show": showRename = v => v.toString() }: Show) {}
->f2 : ({ "show": showRename }: Show) => void
+>f2 : (__0: Show) => void
 >showRename : (x: number) => string
 >v => v.toString() : (v: number) => string
 >v : number
@@= skipped -10, +10 lines =@@
 >toString : (radix?: number) => string
 
 function f3({ ["show"]: showRename = v => v.toString() }: Show) {}
->f3 : ({ ["show"]: showRename }: Show) => void
+>f3 : (__0: Show) => void
 >"show" : "show"
 >showRename : (x: number) => string
 >v => v.toString() : (v: number) => string
@@= skipped -15, +15 lines =@@
 >nested : Show
 }
 function ff({ nested = { show: v => v.toString() } }: Nested) {}
->ff : ({ nested }: Nested) => void
+>ff : (__0: Nested) => void
 >nested : Show
 >{ show: v => v.toString() } : { show: (v: number) => string; }
 >show : (v: number) => string
@@= skipped -16, +16 lines =@@
 >prop : [string, number]
 }
 function g({ prop = ["hello", 1234] }: Tuples) {}
->g : ({ prop }: Tuples) => void
+>g : (__0: Tuples) => void
 >prop : [string, number]
 >["hello", 1234] : [string, number]
 >"hello" : "hello"
@@= skipped -8, +8 lines =@@
 
 interface StringUnion {
     prop: "foo" | "bar";
->prop : "foo" | "bar"
+>prop : "bar" | "foo"
 }
 function h({ prop = "foo" }: StringUnion) {}
->h : ({ prop }: StringUnion) => void
->prop : "foo" | "bar"
+>h : (__0: StringUnion) => void
+>prop : "bar" | "foo"
 >"foo" : "foo"
 
 interface StringIdentity {
