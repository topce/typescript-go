--- old.contextualTypeWithUnionTypeMembers.js
+++ new.contextualTypeWithUnionTypeMembers.js
@@= skipped -129, +129 lines =@@
 var i1Ori2 = i2;
 var i1Ori2 = {
     commonPropertyType: "hello",
-    commonMethodType: function (a) { return a; },
-    commonMethodWithTypeParameter: function (a) { return a; },
-    methodOnlyInI1: function (a) { return a; },
+    commonMethodType: a => a,
+    commonMethodWithTypeParameter: a => a,
+    methodOnlyInI1: a => a,
     propertyOnlyInI1: "Hello",
 };
 var i1Ori2 = {
     commonPropertyType: "hello",
-    commonMethodType: function (a) { return a; },
-    commonMethodWithTypeParameter: function (a) { return a; },
-    methodOnlyInI2: function (a) { return a; },
+    commonMethodType: a => a,
+    commonMethodWithTypeParameter: a => a,
+    methodOnlyInI2: a => a,
     propertyOnlyInI2: "Hello",
 };
 var i1Ori2 = {
     commonPropertyType: "hello",
-    commonMethodType: function (a) { return a; },
-    commonMethodWithTypeParameter: function (a) { return a; },
-    methodOnlyInI1: function (a) { return a; },
+    commonMethodType: a => a,
+    commonMethodWithTypeParameter: a => a,
+    methodOnlyInI1: a => a,
     propertyOnlyInI1: "Hello",
-    methodOnlyInI2: function (a) { return a; },
+    methodOnlyInI2: a => a,
     propertyOnlyInI2: "Hello",
 };
 var arrayI1OrI2 = [i1, i2, {
         commonPropertyType: "hello",
-        commonMethodType: function (a) { return a; },
-        commonMethodWithTypeParameter: function (a) { return a; },
-        methodOnlyInI1: function (a) { return a; },
+        commonMethodType: a => a,
+        commonMethodWithTypeParameter: a => a,
+        methodOnlyInI1: a => a,
         propertyOnlyInI1: "Hello",
     },
     {
         commonPropertyType: "hello",
-        commonMethodType: function (a) { return a; },
-        commonMethodWithTypeParameter: function (a) { return a; },
-        methodOnlyInI2: function (a) { return a; },
+        commonMethodType: a => a,
+        commonMethodWithTypeParameter: a => a,
+        methodOnlyInI2: a => a,
         propertyOnlyInI2: "Hello",
     }, {
         commonPropertyType: "hello",
-        commonMethodType: function (a) { return a; },
-        commonMethodWithTypeParameter: function (a) { return a; },
-        methodOnlyInI1: function (a) { return a; },
+        commonMethodType: a => a,
+        commonMethodWithTypeParameter: a => a,
+        methodOnlyInI1: a => a,
         propertyOnlyInI1: "Hello",
-        methodOnlyInI2: function (a) { return a; },
+        methodOnlyInI2: a => a,
         propertyOnlyInI2: "Hello",
     }];
 var i11;
@@= skipped -49, +49 lines =@@
 var i11Ori21 = i21;
 var i11Ori21 = {
     // Like i1
-    commonMethodDifferentReturnType: function (a, b) {
+    commonMethodDifferentReturnType: (a, b) => {
         var z = a.charAt(b);
         return z;
     },
@@= skipped -8, +8 lines =@@
 };
 var i11Ori21 = {
     // Like i2
-    commonMethodDifferentReturnType: function (a, b) {
+    commonMethodDifferentReturnType: (a, b) => {
         var z = a.charCodeAt(b);
         return z;
     },
@@= skipped -8, +8 lines =@@
 };
 var arrayOrI11OrI21 = [i11, i21, i11 || i21, {
         // Like i1
-        commonMethodDifferentReturnType: function (a, b) {
+        commonMethodDifferentReturnType: (a, b) => {
             var z = a.charAt(b);
             return z;
         },
         commonPropertyDifferentType: "hello",
     }, {
         // Like i2
-        commonMethodDifferentReturnType: function (a, b) {
+        commonMethodDifferentReturnType: (a, b) => {
             var z = a.charCodeAt(b);
             return z;
         },
