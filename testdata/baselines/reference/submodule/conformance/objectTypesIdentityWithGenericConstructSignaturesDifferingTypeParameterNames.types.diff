--- old.objectTypesIdentityWithGenericConstructSignaturesDifferingTypeParameterNames.types
+++ new.objectTypesIdentityWithGenericConstructSignaturesDifferingTypeParameterNames.types
@@= skipped -31, +31 lines =@@
 >x : Z
 
 var b = { new<A>(x: A) { return new C<A>(x); } };
->b : { "new"<A>(x: A): C<A>; }
->{ new<A>(x: A) { return new C<A>(x); } } : { "new"<A>(x: A): C<A>; }
+>b : { new: <A>(x: A) => C<A>; }
+>{ new<A>(x: A) { return new C<A>(x); } } : { new: <A>(x: A) => C<A>; }
 >new : <A>(x: A) => C<A>
 >x : A
 >new C<A>(x) : C<A>
@@= skipped -45, +45 lines =@@
 >x : any
 
 function foo3(x: typeof a);
->foo3 : { (x: typeof a): any; (x: typeof a): any; }
+>foo3 : { (x: new <Z>(x: Z) => B<Z>): any; (x: new <Z>(x: Z) => B<Z>): any; }
 >x : new <Z>(x: Z) => B<Z>
 >a : new <Z>(x: Z) => B<Z>
 
 function foo3(x: typeof a); // error
->foo3 : { (x: typeof a): any; (x: typeof a): any; }
+>foo3 : { (x: new <Z>(x: Z) => B<Z>): any; (x: new <Z>(x: Z) => B<Z>): any; }
 >x : new <Z>(x: Z) => B<Z>
 >a : new <Z>(x: Z) => B<Z>
 
 function foo3(x: any) { }
->foo3 : { (x: typeof a): any; (x: typeof a): any; }
+>foo3 : { (x: new <Z>(x: Z) => B<Z>): any; (x: new <Z>(x: Z) => B<Z>): any; }
 >x : any
 
 function foo4(x: typeof b);
->foo4 : { (x: typeof b): any; (x: typeof b): any; }
->x : { "new"<A>(x: A): C<A>; }
->b : { "new"<A>(x: A): C<A>; }
+>foo4 : { (x: { new: <A>(x: A) => C<A>; }): any; (x: { new: <A>(x: A) => C<A>; }): any; }
+>x : { new: <A>(x: A) => C<A>; }
+>b : { new: <A>(x: A) => C<A>; }
 
 function foo4(x: typeof b); // error
->foo4 : { (x: typeof b): any; (x: typeof b): any; }
->x : { "new"<A>(x: A): C<A>; }
->b : { "new"<A>(x: A): C<A>; }
+>foo4 : { (x: { new: <A>(x: A) => C<A>; }): any; (x: { new: <A>(x: A) => C<A>; }): any; }
+>x : { new: <A>(x: A) => C<A>; }
+>b : { new: <A>(x: A) => C<A>; }
 
 function foo4(x: any) { }
->foo4 : { (x: typeof b): any; (x: typeof b): any; }
+>foo4 : { (x: { new: <A>(x: A) => C<A>; }): any; (x: { new: <A>(x: A) => C<A>; }): any; }
 >x : any
 
 function foo8(x: B<string>);
@@= skipped -52, +52 lines =@@
 >x : any
 
 function foo10(x: B<string>);
->foo10 : { (x: B<string>): any; (x: typeof a): any; }
+>foo10 : { (x: B<string>): any; (x: new <Z>(x: Z) => B<Z>): any; }
 >x : B<string>
 
 function foo10(x: typeof a); // BUG 832086
->foo10 : { (x: B<string>): any; (x: typeof a): any; }
+>foo10 : { (x: B<string>): any; (x: new <Z>(x: Z) => B<Z>): any; }
 >x : new <Z>(x: Z) => B<Z>
 >a : new <Z>(x: Z) => B<Z>
 
 function foo10(x: any) { }
->foo10 : { (x: B<string>): any; (x: typeof a): any; }
+>foo10 : { (x: B<string>): any; (x: new <Z>(x: Z) => B<Z>): any; }
 >x : any
 
 function foo11(x: B<string>);
->foo11 : { (x: B<string>): any; (x: typeof b): any; }
+>foo11 : { (x: B<string>): any; (x: { new: <A>(x: A) => C<A>; }): any; }
 >x : B<string>
 
 function foo11(x: typeof b); // ok
->foo11 : { (x: B<string>): any; (x: typeof b): any; }
->x : { "new"<A>(x: A): C<A>; }
->b : { "new"<A>(x: A): C<A>; }
+>foo11 : { (x: B<string>): any; (x: { new: <A>(x: A) => C<A>; }): any; }
+>x : { new: <A>(x: A) => C<A>; }
+>b : { new: <A>(x: A) => C<A>; }
 
 function foo11(x: any) { }
->foo11 : { (x: B<string>): any; (x: typeof b): any; }
+>foo11 : { (x: B<string>): any; (x: { new: <A>(x: A) => C<A>; }): any; }
 >x : any
 
 function foo12(x: I<string>);
@@= skipped -50, +50 lines =@@
 >x : any
 
 function foo13(x: I<string>);
->foo13 : { (x: I<string>): any; (x: typeof a): any; }
+>foo13 : { (x: I<string>): any; (x: new <Z>(x: Z) => B<Z>): any; }
 >x : I<string>
 
 function foo13(x: typeof a); // BUG 832086
->foo13 : { (x: I<string>): any; (x: typeof a): any; }
+>foo13 : { (x: I<string>): any; (x: new <Z>(x: Z) => B<Z>): any; }
 >x : new <Z>(x: Z) => B<Z>
 >a : new <Z>(x: Z) => B<Z>
 
 function foo13(x: any) { }
->foo13 : { (x: I<string>): any; (x: typeof a): any; }
+>foo13 : { (x: I<string>): any; (x: new <Z>(x: Z) => B<Z>): any; }
 >x : any
 
 function foo14(x: I<string>);
->foo14 : { (x: I<string>): any; (x: typeof b): any; }
+>foo14 : { (x: I<string>): any; (x: { new: <A>(x: A) => C<A>; }): any; }
 >x : I<string>
 
 function foo14(x: typeof b); // ok
->foo14 : { (x: I<string>): any; (x: typeof b): any; }
->x : { "new"<A>(x: A): C<A>; }
->b : { "new"<A>(x: A): C<A>; }
+>foo14 : { (x: I<string>): any; (x: { new: <A>(x: A) => C<A>; }): any; }
+>x : { new: <A>(x: A) => C<A>; }
+>b : { new: <A>(x: A) => C<A>; }
 
 function foo14(x: any) { }
->foo14 : { (x: I<string>): any; (x: typeof b): any; }
+>foo14 : { (x: I<string>): any; (x: { new: <A>(x: A) => C<A>; }): any; }
 >x : any
 
