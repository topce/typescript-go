--- old.constructorHasPrototypeProperty.js
+++ new.constructorHasPrototypeProperty.js
@@= skipped -33, +33 lines =@@
 }
 
 //// [constructorHasPrototypeProperty.js]
-var __extends = (this && this.__extends) || (function () {
-    var extendStatics = function (d, b) {
-        extendStatics = Object.setPrototypeOf ||
-            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
-            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
-        return extendStatics(d, b);
-    };
-    return function (d, b) {
-        if (typeof b !== "function" && b !== null)
-            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
-        extendStatics(d, b);
-        function __() { this.constructor = d; }
-        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-    };
-})();
 var NonGeneric;
 (function (NonGeneric) {
-    var C = /** @class */ (function () {
-        function C() {
-        }
-        return C;
-    }());
-    var D = /** @class */ (function (_super) {
-        __extends(D, _super);
-        function D() {
-            return _super !== null && _super.apply(this, arguments) || this;
-        }
-        return D;
-    }(C));
+    class C {
+        foo;
+    }
+    class D extends C {
+        bar;
+    }
     var r = C.prototype;
     r.foo;
     var r2 = D.prototype;
@@= skipped -36, +15 lines =@@
 })(NonGeneric || (NonGeneric = {}));
 var Generic;
 (function (Generic) {
-    var C = /** @class */ (function () {
-        function C() {
-        }
-        return C;
-    }());
-    var D = /** @class */ (function (_super) {
-        __extends(D, _super);
-        function D() {
-            return _super !== null && _super.apply(this, arguments) || this;
-        }
-        return D;
-    }(C));
+    class C {
+        foo;
+        bar;
+    }
+    class D extends C {
+        baz;
+        bing;
+    }
     var r = C.prototype; // C<any, any>
     var ra = r.foo; // any
     var r2 = D.prototype; // D<any, any>
