--- old.bestCommonTypeOfConditionalExpressions.types
+++ new.bestCommonTypeOfConditionalExpressions.types
@@= skipped -65, +65 lines =@@
 >a : { x: number; y?: number; }
 
 var r6 = true ? (x: number) => { } : (x: Object) => { }; // returns number => void
->r6 : ((x: number) => void) | ((x: Object) => void)
->true ? (x: number) => { } : (x: Object) => { } : ((x: number) => void) | ((x: Object) => void)
+>r6 : (x: number) => void | (x: Object) => void
+>true ? (x: number) => { } : (x: Object) => { } : (x: number) => void | (x: Object) => void
 >true : true
 >(x: number) => { } : (x: number) => void
 >x : number
@@= skipped -11, +11 lines =@@
 var r7: (x: Object) => void = true ? (x: number) => { } : (x: Object) => { }; 
 >r7 : (x: Object) => void
 >x : Object
->true ? (x: number) => { } : (x: Object) => { } : ((x: number) => void) | ((x: Object) => void)
+>true ? (x: number) => { } : (x: Object) => { } : (x: number) => void | (x: Object) => void
 >true : true
 >(x: number) => { } : (x: number) => void
 >x : number
@@= skipped -8, +8 lines =@@
 >x : Object
 
 var r8 = true ? (x: Object) => { } : (x: number) => { }; // returns Object => void
->r8 : ((x: Object) => void) | ((x: number) => void)
->true ? (x: Object) => { } : (x: number) => { } : ((x: Object) => void) | ((x: number) => void)
+>r8 : (x: Object) => void | (x: number) => void
+>true ? (x: Object) => { } : (x: number) => { } : (x: Object) => void | (x: number) => void
 >true : true
 >(x: Object) => { } : (x: Object) => void
 >x : Object
