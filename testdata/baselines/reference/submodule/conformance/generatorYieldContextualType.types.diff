--- old.generatorYieldContextualType.types
+++ new.generatorYieldContextualType.types
@@= skipped -0, +0 lines =@@
 //// [tests/cases/conformance/generators/generatorYieldContextualType.ts] ////
 
-=== Performance Stats ===
-Type Count: 1,000
-Instantiation count: 2,500
-
 === generatorYieldContextualType.ts ===
 declare function f1<T, R, S>(gen: () => Generator<R, T, S>): void;
 >f1 : <T, R, S>(gen: () => Generator<R, T, S>) => void
@@= skipped -24, +20 lines =@@
 });
 
 declare function f2<T, R, S>(gen: () => Generator<R, T, S> | AsyncGenerator<R, T, S>): void;
->f2 : <T, R, S>(gen: () => Generator<R, T, S> | AsyncGenerator<R, T, S>) => void
->gen : () => Generator<R, T, S> | AsyncGenerator<R, T, S>
+>f2 : <T, R, S>(gen: () => AsyncGenerator<R, T, S> | Generator<R, T, S>) => void
+>gen : () => AsyncGenerator<R, T, S> | Generator<R, T, S>
 
 f2<0, 0, 1>(async function* () {
 >f2<0, 0, 1>(async function* () {	const a = yield 0;	return 0;}) : void
->f2 : <T, R, S>(gen: () => Generator<R, T, S> | AsyncGenerator<R, T, S>) => void
+>f2 : <T, R, S>(gen: () => AsyncGenerator<R, T, S> | Generator<R, T, S>) => void
 >async function* () {	const a = yield 0;	return 0;} : () => AsyncGenerator<0, 0, 1>
 
 	const a = yield 0;
@@= skipped -39, +39 lines =@@
 >Directive : typeof Directive
 
   export function is<T>(value: Directive | T): value is Directive {
->is : <T>(value: Directive | T) => value is Directive
+>is : <T>(value: T | Directive) => value is Directive
 >value : T | Directive
 
     return typeof value === "number" && Directive[value] != null;
 >typeof value === "number" && Directive[value] != null : boolean
 >typeof value === "number" : boolean
->typeof value : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof value : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >value : T | Directive
 >"number" : "number"
 >Directive[value] != null : boolean
->Directive[value] : (typeof Directive)[Directive | (T & number)]
+>Directive[value] : typeof Directive[Directive | T & number]
 >Directive : typeof Directive
->value : Directive | (T & number)
+>value : Directive | T & number
   }
 }
 
@@= skipped -132, +132 lines =@@
 };
 
 function canPickStepContinue<T extends QuickPickStep>(
->canPickStepContinue : <T extends QuickPickStep>(_step: T, _state: PartialStepState, _selection: StepItemType<T> | Directive) => _selection is StepItemType<T>
+>canPickStepContinue : <T extends QuickPickStep<QuickPickItem>>(_step: T, _state: PartialStepState<unknown>, _selection: Directive | StepItemType<T>) => _selection is StepItemType<T>
 
   _step: T,
 >_step : T
@@= skipped -28, +28 lines =@@
 }
 
 function* showStep<
->showStep : <State extends PartialStepState & { repo: any; }, Context extends { repos: any[]; title: string; status: any; }>(state: State, _context: Context) => StepResultGenerator<QuickPickItem>
+>showStep : <State extends Partial<unknown> & { counter: number; confirm?: boolean | undefined; startingStep?: number | undefined; } & { repo: any; }, Context extends { repos: any[]; title: string; status: any; }>(state: State, _context: Context) => StepResultGenerator<QuickPickItem>
 
   State extends PartialStepState & { repo: any },
 >repo : any
@@= skipped -30, +30 lines =@@
 
   });
   const selection: StepSelection<typeof step> = yield step;
->selection : Directive | QuickPickItem[]
+>selection : QuickPickItem[] | Directive
 >step : QuickPickStep<QuickPickItem>
 >yield step : any
 >step : QuickPickStep<QuickPickItem>
 
   return canPickStepContinue(step, state, selection)
->canPickStepContinue(step, state, selection)    ? selection[0]    : StepResult.Break : QuickPickItem | unique symbol
+>canPickStepContinue(step, state, selection)    ? selection[0]    : StepResult.Break : unique symbol | QuickPickItem
 >canPickStepContinue(step, state, selection) : boolean
->canPickStepContinue : <T extends QuickPickStep>(_step: T, _state: PartialStepState, _selection: StepItemType<T> | Directive) => _selection is StepItemType<T>
+>canPickStepContinue : <T extends QuickPickStep<QuickPickItem>>(_step: T, _state: PartialStepState<unknown>, _selection: Directive | StepItemType<T>) => _selection is StepItemType<T>
 >step : QuickPickStep<QuickPickItem>
 >state : State
->selection : Directive | QuickPickItem[]
+>selection : QuickPickItem[] | Directive
 
     ? selection[0]
 >selection[0] : QuickPickItem
