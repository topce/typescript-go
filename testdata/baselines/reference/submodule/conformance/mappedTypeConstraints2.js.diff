--- old.mappedTypeConstraints2.js
+++ new.mappedTypeConstraints2.js
@@= skipped -86, +86 lines =@@
 
 
 //// [mappedTypeConstraints2.js]
-"use strict";
 function f1(obj, key) {
     const x = obj[key];
 }
 function f2(obj, key) {
-    const x = obj[key]; // Error
+    const x = obj[key];
 }
 function f3(obj, key) {
-    const x = obj[key]; // Error
+    const x = obj[key];
 }
 function f4(obj, key) {
     let s = obj[key];
@@= skipped -17, +16 lines =@@
     let s = obj[key];
 }
 function f6(obj, key) {
-    let s = obj[key]; // Error
+    let s = obj[key];
 }
-const get = (t, foo) => foo[`get${t}`]; // Type 'Foo<T>[`get${T}`]' is not assignable to type 'T'
+const get = (t, foo) => foo[`get${t}`];
 function validate(obj, bounds) {
     for (const [key, val] of Object.entries(obj)) {
         const boundsForKey = bounds[key];
@@= skipped -15, +15 lines =@@
     return true;
 }
 function genericTest(objectWithUnderscoredKeys, key) {
-    const shouldBeTrue = objectWithUnderscoredKeys[`_${key}`]; // assignability fails here, but ideally should not
+    const shouldBeTrue = objectWithUnderscoredKeys[`_${key}`];
 }
-
-
-//// [mappedTypeConstraints2.d.ts]
-type Mapped1<K extends string> = {
-    [P in K]: {
-        a: P;
-    };
-};
-declare function f1<K extends string>(obj: Mapped1<K>, key: K): void;
-type Mapped2<K extends string> = {
-    [P in K as `get${P}`]: {
-        a: P;
-    };
-};
-declare function f2<K extends string>(obj: Mapped2<K>, key: `get${K}`): void;
-type Mapped3<K extends string> = {
-    [P in K as Uppercase<P>]: {
-        a: P;
-    };
-};
-declare function f3<K extends string>(obj: Mapped3<K>, key: Uppercase<K>): void;
-type Mapped4<K extends `_${string}`> = {
-    [P in K]: P;
-};
-declare function f4<K extends `_${string}`>(obj: Mapped4<K>, key: keyof Mapped4<K>): void;
-type Mapped5<K extends string> = {
-    [P in K as P extends `_${string}` ? P : never]: P;
-};
-declare function f5<K extends string>(obj: Mapped5<K>, key: keyof Mapped5<K>): void;
-type Mapped6<K extends string> = {
-    [P in K as `_${P}`]: P;
-};
-declare function f6<K extends string>(obj: Mapped6<K>, key: keyof Mapped6<K>): void;
-type Foo<T extends string> = {
-    [RemappedT in T as `get${RemappedT}`]: RemappedT;
-};
-declare const get: <T extends string>(t: T, foo: Foo<T>) => T;
-interface Bounds {
-    min: number;
-    max: number;
-}
-type NumericBoundsOf<T> = {
-    [K in keyof T as T[K] extends number | undefined ? K : never]: Bounds;
-};
-declare function validate<T extends object>(obj: T, bounds: NumericBoundsOf<T>): boolean;
-type ObjectWithUnderscoredKeys<K extends string> = {
-    [k in K as `_${k}`]: true;
-};
-declare function genericTest<K extends string>(objectWithUnderscoredKeys: ObjectWithUnderscoredKeys<K>, key: K): void;
