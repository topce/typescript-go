--- old.mappedTypes1.types
+++ new.mappedTypes1.types
@@= skipped -76, +76 lines =@@
 >T47 : T47
 
 declare function f1<T1>(): { [P in keyof T1]: void };
->f1 : <T1>() => { [P in keyof T1]: void; }
+>f1 : <T1>() => { [P in keyof T1]: void }
 
 declare function f2<T1 extends string>(): { [P in keyof T1]: void };
->f2 : <T1 extends string>() => { [P in keyof T1]: void; }
+>f2 : <T1 extends string>() => { [P in keyof T1]: void }
 
 declare function f3<T1 extends number>(): { [P in keyof T1]: void };
->f3 : <T1 extends number>() => { [P in keyof T1]: void; }
+>f3 : <T1 extends number>() => { [P in keyof T1]: void }
 
 declare function f4<T1 extends Number>(): { [P in keyof T1]: void };
->f4 : <T1 extends Number>() => { [P in keyof T1]: void; }
+>f4 : <T1 extends Number>() => { [P in keyof T1]: void }
 
 let x1 = f1();
 >x1 : {}
 >f1() : {}
->f1 : <T1>() => { [P in keyof T1]: void; }
+>f1 : <T1>() => { [P in keyof T1]: void }
 
 let x2 = f2();
 >x2 : string
 >f2() : string
->f2 : <T1 extends string>() => { [P in keyof T1]: void; }
+>f2 : <T1 extends string>() => { [P in keyof T1]: void }
 
 let x3 = f3();
 >x3 : number
 >f3() : number
->f3 : <T1 extends number>() => { [P in keyof T1]: void; }
+>f3 : <T1 extends number>() => { [P in keyof T1]: void }
 
 let x4 = f4();
 >x4 : { toString: void; toFixed: void; toExponential: void; toPrecision: void; valueOf: void; toLocaleString: void; }
 >f4() : { toString: void; toFixed: void; toExponential: void; toPrecision: void; valueOf: void; toLocaleString: void; }
->f4 : <T1 extends Number>() => { [P in keyof T1]: void; }
+>f4 : <T1 extends Number>() => { [P in keyof T1]: void }
 
