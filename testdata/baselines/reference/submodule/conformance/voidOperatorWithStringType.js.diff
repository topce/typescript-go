--- old.voidOperatorWithStringType.js
+++ new.voidOperatorWithStringType.js
@@= skipped -46, +46 lines =@@
 void objA.a,M.n;
 
 //// [voidOperatorWithStringType.js]
-// void  operator on string type
 var STRING;
 var STRING1 = ["", "abc"];
 function foo() { return "abc"; }
-var A = /** @class */ (function () {
-    function A() {
-    }
-    A.foo = function () { return ""; };
-    return A;
-}());
+class A {
+    a;
+    static foo() { return ""; }
+}
 var M;
 (function (M) {
 })(M || (M = {}));
 var objA = new A();
-// string type var
 var ResultIsAny1 = void STRING;
 var ResultIsAny2 = void STRING1;
-// string type literal
 var ResultIsAny3 = void "";
 var ResultIsAny4 = void { x: "", y: "" };
-var ResultIsAny5 = void { x: "", y: function (s) { return s; } };
-// string type expressions
+var ResultIsAny5 = void { x: "", y: (s) => { return s; } };
 var ResultIsAny6 = void objA.a;
 var ResultIsAny7 = void M.n;
 var ResultIsAny8 = void STRING1[0];
@@= skipped -29, +23 lines =@@
 var ResultIsAny10 = void A.foo();
 var ResultIsAny11 = void (STRING + STRING);
 var ResultIsAny12 = void STRING.charAt(0);
-// multiple void  operators
 var ResultIsAny13 = void void STRING;
 var ResultIsAny14 = void void void (STRING + STRING);
-// miss assignment operators
 void "";
 void STRING;
 void STRING1;
