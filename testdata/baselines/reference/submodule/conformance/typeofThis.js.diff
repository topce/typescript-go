--- old.typeofThis.js
+++ new.typeofThis.js
@@= skipped -145, +145 lines =@@
 }
 
 //// [typeofThis.js]
-"use strict";
-var Test = /** @class */ (function () {
-    function Test() {
-        this.data = {};
+class Test {
+    data = {};
+    constructor() {
         var copy = {};
     }
-    return Test;
-}());
-var Test1 = /** @class */ (function () {
-    function Test1() {
-        this.data = { foo: '' };
-        this['this'] = '';
+}
+class Test1 {
+    data = { foo: '' };
+    ['this'] = '';
+    constructor() {
         var copy = { foo: '' };
         var foo = '';
         var self = this;
         self.data;
         var str = '';
     }
-    return Test1;
-}());
+}
 function Test2() {
-    var x = 1;
+    let x = 1;
 }
 function Test3() {
-    var x = 1;
+    let x = 1;
 }
 function Test4() {
-    var x = 1;
+    let x = 1;
 }
-var Test5 = /** @class */ (function () {
-    function Test5() {
-        this.no = 1;
-        this.f = function () {
-            // should not capture this.
-            var x = 1;
-        };
-    }
-    return Test5;
-}());
+class Test5 {
+    no = 1;
+    f = () => {
+        let x = 1;
+    };
+}
 var Test6;
 (function (Test6) {
-    Test6.f = function () {
-        var x = 1;
+    Test6.f = () => {
+        let x = 1;
     };
 })(Test6 || (Test6 = {}));
 var Test7;
 (function (Test7) {
-    Test7.f = function () {
-        var x = 1;
+    Test7.f = () => {
+        let x = 1;
     };
 })(Test7 || (Test7 = {}));
-var Test8 = function () {
-    var x = 1;
+const Test8 = () => {
+    let x = 1;
 };
-var Test9 = /** @class */ (function () {
-    function Test9() {
-        this.no = 0;
-        this.this = 0;
-    }
-    Test9.prototype.f = function () {
+class Test9 {
+    no = 0;
+    this = 0;
+    f() {
         if (this instanceof Test9D1) {
-            var d1 = this;
+            const d1 = this;
             d1.f1();
         }
         if (this instanceof Test9D2) {
-            var d2 = this;
+            const d2 = this;
             d2.f2();
         }
-    };
-    Test9.prototype.g = function () {
+    }
+    g() {
         if (this.no === 1) {
-            var no = this.no;
+            const no = this.no;
         }
         if (this.this === 1) {
-            var no = this.this;
+            const no = this.this;
         }
-    };
-    return Test9;
-}());
-var Test9D1 = /** @class */ (function () {
-    function Test9D1() {
     }
-    Test9D1.prototype.f1 = function () { };
-    return Test9D1;
-}());
-var Test9D2 = /** @class */ (function () {
-    function Test9D2() {
-    }
-    Test9D2.prototype.f2 = function () { };
-    return Test9D2;
-}());
-var Test10 = /** @class */ (function () {
-    function Test10() {
-    }
-    Test10.prototype.foo = function () {
-        var a = undefined;
+}
+class Test9D1 {
+    f1() { }
+}
+class Test9D2 {
+    f2() { }
+}
+class Test10 {
+    a;
+    foo() {
+        let a = undefined;
         if (this.a) {
-            var a_1 = undefined; // should narrow to { b?: string }
-            var b = undefined;
+            let a = undefined;
+            let b = undefined;
             if (this.a.b) {
-                var b_1 = undefined; // should narrow to string
+                let b = undefined;
             }
         }
-    };
-    return Test10;
-}());
-var Test11 = /** @class */ (function () {
-    function Test11() {
     }
-    Test11.prototype.foo = function () {
-        var o = this;
-        var bar = {};
+}
+class Test11 {
+    this;
+    foo() {
+        const o = this;
+        let bar = {};
         if (o.this && o.this.x) {
-            var y = o.this.x; // should narrow to string
+            let y = o.this.x;
         }
-    };
-    return Test11;
-}());
-var Tests12 = /** @class */ (function () {
-    function Tests12() {
     }
-    Tests12.prototype.test1 = function () {
-    };
-    Tests12.prototype.test2 = function () {
+}
+class Tests12 {
+    test1() {
+    }
+    test2() {
         for (;;) { }
-    };
-    Tests12.prototype.test3 = function () {
-        for (var dummy in []) { }
-    };
-    Tests12.prototype.test4 = function () {
-        for (var _i = 0, _a = []; _i < _a.length; _i++) {
-            var dummy = _a[_i];
-        }
-    };
-    return Tests12;
-}());
+    }
+    test3() {
+        for (const dummy in []) { }
+    }
+    test4() {
+        for (const dummy of []) { }
+    }
+}
