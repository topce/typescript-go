--- old.esDecorators-preservesThis.types
+++ new.esDecorators-preservesThis.types
@@= skipped -6, +6 lines =@@
 >DecoratorProvider : DecoratorProvider
 
     decorate<T>(this: DecoratorProvider, v: T, ctx: DecoratorContext): T;
->decorate : <T>(this: DecoratorProvider, v: T, ctx: DecoratorContext) => T
+>decorate : <T>(v: T, ctx: DecoratorContext) => T
 >this : DecoratorProvider
 >v : T
 >ctx : DecoratorContext
@@= skipped -14, +14 lines =@@
 >C : C
 
     @instance.decorate
->instance.decorate : <T>(this: DecoratorProvider, v: T, ctx: DecoratorContext) => T
+>instance.decorate : <T>(v: T, ctx: DecoratorContext) => T
 >instance : DecoratorProvider
->decorate : <T>(this: DecoratorProvider, v: T, ctx: DecoratorContext) => T
+>decorate : <T>(v: T, ctx: DecoratorContext) => T
 
     method1() { }
 >method1 : () => void
 
     @(instance["decorate"])
->(instance["decorate"]) : <T>(this: DecoratorProvider, v: T, ctx: DecoratorContext) => T
->instance["decorate"] : <T>(this: DecoratorProvider, v: T, ctx: DecoratorContext) => T
+>(instance["decorate"]) : <T>(v: T, ctx: DecoratorContext) => T
+>instance["decorate"] : <T>(v: T, ctx: DecoratorContext) => T
 >instance : DecoratorProvider
 >"decorate" : "decorate"
 
@@= skipped -18, +18 lines =@@
 
     // even in parens
     @((instance.decorate))
->((instance.decorate)) : <T>(this: DecoratorProvider, v: T, ctx: DecoratorContext) => T
->(instance.decorate) : <T>(this: DecoratorProvider, v: T, ctx: DecoratorContext) => T
->instance.decorate : <T>(this: DecoratorProvider, v: T, ctx: DecoratorContext) => T
+>((instance.decorate)) : <T>(v: T, ctx: DecoratorContext) => T
+>(instance.decorate) : <T>(v: T, ctx: DecoratorContext) => T
+>instance.decorate : <T>(v: T, ctx: DecoratorContext) => T
 >instance : DecoratorProvider
->decorate : <T>(this: DecoratorProvider, v: T, ctx: DecoratorContext) => T
+>decorate : <T>(v: T, ctx: DecoratorContext) => T
 
     method3() { }
 >method3 : () => void
@@= skipped -22, +22 lines =@@
 >C : C
 
             @(super.decorate)
->(super.decorate) : <T>(this: DecoratorProvider, v: T, ctx: DecoratorContext) => T
->super.decorate : <T>(this: DecoratorProvider, v: T, ctx: DecoratorContext) => T
+>(super.decorate) : <T>(v: T, ctx: DecoratorContext) => T
+>super.decorate : <T>(v: T, ctx: DecoratorContext) => T
 >super : DecoratorProvider
->decorate : <T>(this: DecoratorProvider, v: T, ctx: DecoratorContext) => T
+>decorate : <T>(v: T, ctx: DecoratorContext) => T
 
             method1() { }
 >method1 : () => void
 
             @(super["decorate"])
->(super["decorate"]) : <T>(this: DecoratorProvider, v: T, ctx: DecoratorContext) => T
->super["decorate"] : <T>(this: DecoratorProvider, v: T, ctx: DecoratorContext) => T
+>(super["decorate"]) : <T>(v: T, ctx: DecoratorContext) => T
+>super["decorate"] : <T>(v: T, ctx: DecoratorContext) => T
 >super : DecoratorProvider
 >"decorate" : "decorate"
 
@@= skipped -18, +18 lines =@@
 >method2 : () => void
 
             @((super.decorate))
->((super.decorate)) : <T>(this: DecoratorProvider, v: T, ctx: DecoratorContext) => T
->(super.decorate) : <T>(this: DecoratorProvider, v: T, ctx: DecoratorContext) => T
->super.decorate : <T>(this: DecoratorProvider, v: T, ctx: DecoratorContext) => T
+>((super.decorate)) : <T>(v: T, ctx: DecoratorContext) => T
+>(super.decorate) : <T>(v: T, ctx: DecoratorContext) => T
+>super.decorate : <T>(v: T, ctx: DecoratorContext) => T
 >super : DecoratorProvider
->decorate : <T>(this: DecoratorProvider, v: T, ctx: DecoratorContext) => T
+>decorate : <T>(v: T, ctx: DecoratorContext) => T
 
             method3() { }
 >method3 : () => void
