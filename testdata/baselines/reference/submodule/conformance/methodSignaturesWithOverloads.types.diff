--- old.methodSignaturesWithOverloads.types
+++ new.methodSignaturesWithOverloads.types
@@= skipped -3, +3 lines =@@
 // Object type literals permit overloads with optionality but they must match
 
 var c: {
->c : { func4?(x: number): number; func4?(s: string): string; func5?: { (x: number): number; (s: string): string; }; }
+>c : { func4?: { (x: number): number; (s: string): string; }; func5?: { (x: number): number; (s: string): string; }; }
 
     func4?(x: number): number;
 >func4 : { (x: number): number; (s: string): string; }
@@= skipped -23, +23 lines =@@
 };
 
 var c2: {
->c2 : { func4?<T>(x: T): number; func4?<T>(s: T): string; func5?: { <T>(x: T): number; <T>(s: T): string; }; }
+>c2 : { func4?: { <T>(x: T): number; <T>(s: T): string; }; func5?: { <T>(x: T): number; <T>(s: T): string; }; }
 
     func4<T>(x: T): number;
->func4 : { <T>(x: T): number; <T_1>(s: T_1): string; }
+>func4 : { <T>(x: T): number; <T>(s: T): string; }
 >x : T
 
     func4? <T>(s: T): string; // error, mismatched optionality
->func4 : { <T_1>(x: T_1): number; <T>(s: T): string; }
+>func4 : { <T>(x: T): number; <T>(s: T): string; }
 >s : T
 
     func5?: {
