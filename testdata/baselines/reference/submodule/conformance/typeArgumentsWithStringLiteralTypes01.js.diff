--- old.typeArgumentsWithStringLiteralTypes01.js
+++ new.typeArgumentsWithStringLiteralTypes01.js
@@= skipped -119, +119 lines =@@
 function fun2(x, y) {
     return randBool() ? x : y;
 }
-function fun3() {
-    var args = [];
-    for (var _i = 0; _i < arguments.length; _i++) {
-        args[_i] = arguments[_i];
-    }
+function fun3(...args) {
     return args[+randBool()];
 }
 var n1;
@@= skipped -92, +88 lines =@@
     n3.d = takeReturnHelloWorld(n3.d);
     n3.e = takeReturnHelloWorld(n3.e);
 })(n3 || (n3 = {}));
-
-
-//// [typeArgumentsWithStringLiteralTypes01.d.ts]
-declare function randBool(): boolean;
-declare function takeReturnString(str: string): string;
-declare function takeReturnHello(str: "Hello"): "Hello";
-declare function takeReturnHelloWorld(str: "Hello" | "World"): "Hello" | "World";
-declare function fun1<T>(x: T, y: T): T;
-declare function fun2<T, U>(x: T, y: U): T | U;
-declare function fun3<T>(...args: T[]): T;
-declare namespace n1 {
-    let a: string;
-    let b: string;
-    let c: string;
-    let d: string;
-    let e: string;
-}
-declare namespace n2 {
-    let a: "Hello";
-    let b: "Hello";
-    let c: "Hello";
-    let d: "Hello";
-    let e: "Hello";
-}
-declare namespace n3 {
-    let a: "Hello" | "World";
-    let b: "Hello" | "World";
-    let c: "Hello" | "World";
-    let d: "Hello" | "World";
-    let e: "Hello" | "World";
-}
