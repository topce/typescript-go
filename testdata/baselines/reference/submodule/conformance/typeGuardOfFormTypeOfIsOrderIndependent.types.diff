--- old.typeGuardOfFormTypeOfIsOrderIndependent.types
+++ new.typeGuardOfFormTypeOfIsOrderIndependent.types
@@= skipped -27, +27 lines =@@
 if ("string" === typeof strOrNum) {
 >"string" === typeof strOrNum : boolean
 >"string" : "string"
->typeof strOrNum : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof strOrNum : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >strOrNum : string | number
 
     str = strOrNum;
@@= skipped -17, +17 lines =@@
 if ("function" === typeof strOrFunc) {
 >"function" === typeof strOrFunc : boolean
 >"function" : "function"
->typeof strOrFunc : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof strOrFunc : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >strOrFunc : string | (() => void)
 
     func = strOrFunc;
@@= skipped -17, +17 lines =@@
 if ("number" === typeof numOrBool) {
 >"number" === typeof numOrBool : boolean
 >"number" : "number"
->typeof numOrBool : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof numOrBool : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >numOrBool : number | boolean
 
     num = numOrBool;
@@= skipped -17, +17 lines =@@
 if ("boolean" === typeof strOrBool) {
 >"boolean" === typeof strOrBool : boolean
 >"boolean" : "boolean"
->typeof strOrBool : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof strOrBool : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >strOrBool : string | boolean
 
     bool = strOrBool;
