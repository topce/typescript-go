//// [tests/cases/conformance/jsx/checkJsxUnionSFXContextualTypeInferredCorrectly.tsx] ////

=== checkJsxUnionSFXContextualTypeInferredCorrectly.tsx ===
/// <reference path="react16.d.ts" />

import React from 'react';
>React : any

interface PS {
    multi: false
>multi : false
>false : false

    value: string | undefined
>value : string | undefined

    onChange: (selection: string | undefined) => void
>onChange : (selection: string | undefined) => void
>selection : string | undefined
}

interface PM {
    multi: true
>multi : true
>true : true

    value: string[]
>value : string[]

    onChange: (selection: string[]) => void
>onChange : (selection: string[]) => void
>selection : string[]
}

export function ComponentWithUnion(props: PM | PS) {
>ComponentWithUnion : (props: PM | PS) => any
>props : PM | PS

    return <h1></h1>;
><h1></h1> : any
>h1 : any
>h1 : any
}

// Usage with React tsx
export function HereIsTheError() {
>HereIsTheError : () => any

    return (
>(        <ComponentWithUnion            multi={false}            value={'s'}            onChange={val => console.log(val)} // <- this throws an error        />    ) : any

        <ComponentWithUnion
><ComponentWithUnion            multi={false}            value={'s'}            onChange={val => console.log(val)} // <- this throws an error        /> : any
>ComponentWithUnion : (props: PM | PS) => any

            multi={false}
>multi : any
>false : false

            value={'s'}
>value : any
>'s' : "s"

            onChange={val => console.log(val)} // <- this throws an error
>onChange : any
>val => console.log(val) : (val: any) => void
>val : any
>console.log(val) : void
>console.log : (...data: any[]) => void
>console : Console
>log : (...data: any[]) => void
>val : any

        />
    );
}

// Usage with pure TypeScript
ComponentWithUnion({
>ComponentWithUnion({    multi: false,    value: 's',    onChange: val => console.log(val) // <- this works fine}) : any
>ComponentWithUnion : (props: PM | PS) => any
>{    multi: false,    value: 's',    onChange: val => console.log(val) // <- this works fine} : { multi: false; value: string; onChange: (val: string | undefined) => void; }

    multi: false,
>multi : false
>false : false

    value: 's',
>value : string
>'s' : "s"

    onChange: val => console.log(val) // <- this works fine
>onChange : (val: string | undefined) => void
>val => console.log(val) : (val: string | undefined) => void
>val : string | undefined
>console.log(val) : void
>console.log : (...data: any[]) => void
>console : Console
>log : (...data: any[]) => void
>val : string | undefined

});

