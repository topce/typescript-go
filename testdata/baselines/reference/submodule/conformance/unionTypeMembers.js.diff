--- old.unionTypeMembers.js
+++ new.unionTypeMembers.js
@@= skipped -56, +56 lines =@@
 x.methodOnlyInI2(10); // error
 
 //// [unionTypeMembers.js]
-// a union type U has those members that are present in every one of its constituent types, 
-// with types that are unions of the respective members in the constituent types
 var x;
 var str;
 var num;
 var strOrNum;
-// If each type in U has a property P, U has a property P of a union type of the types of P from each type in U.
-str = x.commonPropertyType; // string
-str = x.commonMethodType(str); // (a: string) => string so result should be string
+str = x.commonPropertyType;
+str = x.commonMethodType(str);
 strOrNum = x.commonPropertyDifferenType;
-strOrNum = x.commonMethodDifferentReturnType(str); // string | union
-x.commonMethodDifferentParameterType; // No error - property exists
-x.commonMethodDifferentParameterType(strOrNum); // error - no call signatures because the type of this property is ((a: string) => string) | (a: number) => number
-// and the call signatures arent identical
+strOrNum = x.commonMethodDifferentReturnType(str);
+x.commonMethodDifferentParameterType;
+x.commonMethodDifferentParameterType(strOrNum);
 num = x.commonMethodWithTypeParameter(num);
 num = x.commonMethodWithOwnTypeParameter(num);
 str = x.commonMethodWithOwnTypeParameter(str);
 strOrNum = x.commonMethodWithOwnTypeParameter(strOrNum);
-x.propertyOnlyInI1; // error
-x.propertyOnlyInI2; // error
-x.methodOnlyInI1("hello"); // error
-x.methodOnlyInI2(10); // error
+x.propertyOnlyInI1;
+x.propertyOnlyInI2;
+x.methodOnlyInI1("hello");
+x.methodOnlyInI2(10);
