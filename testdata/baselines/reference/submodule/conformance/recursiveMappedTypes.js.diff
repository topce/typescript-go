--- old.recursiveMappedTypes.js
+++ new.recursiveMappedTypes.js
@@= skipped -95, +95 lines =@@
 
 //// [recursiveMappedTypes.js]
 "use strict";
-// Recursive mapped types simply appear empty
 Object.defineProperty(exports, "__esModule", { value: true });
 function foo(arg) {
     return arg;
 }
-product.users; // (Transform<User> | Transform<Guest>)[]
+product.users;
 x.type;
-
-
-//// [recursiveMappedTypes.d.ts]
-export type Circular<T> = {
-    [P in keyof T]: Circular<T>;
-};
-type NonOptionalKeys<T> = {
-    [P in keyof T]: undefined extends T[P] ? never : P;
-}[keyof T];
-type Child<T> = {
-    [P in NonOptionalKeys<T>]: T[P];
-};
-export interface ListWidget {
-    "type": "list";
-    "minimum_count": number;
-    "maximum_count": number;
-    "collapsable"?: boolean;
-    "each": Child<ListWidget>;
-}
-export type TV<T, K extends keyof T> = T[K] extends Record<infer E, any> ? E : never;
-export type ObjectOrArray<T, K extends keyof any = keyof any> = T[] | Record<K, T | Record<K, T> | T[]>;
-export type ThemeValue<K extends keyof ThemeType, ThemeType, TVal = any> = ThemeType[K] extends TVal[] ? number : ThemeType[K] extends Record<infer E, TVal> ? E : ThemeType[K] extends ObjectOrArray<infer F> ? F : never;
-export type Foo<T> = T extends {
-    [P in infer E]: any;
-} ? E : never;
-export {};
