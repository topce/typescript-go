--- old.objectTypesIdentityWithConstructSignaturesDifferingParamCounts.types
+++ new.objectTypesIdentityWithConstructSignaturesDifferingParamCounts.types
@@= skipped -34, +34 lines =@@
 >y : string
 
 var b = { new(x: string) { return ''; } }; // not a construct signature, function called new
->b : { "new"(x: string): string; }
->{ new(x: string) { return ''; } } : { "new"(x: string): string; }
+>b : { new: (x: string) => string; }
+>{ new(x: string) { return ''; } } : { new: (x: string) => string; }
 >new : (x: string) => string
 >x : string
 >'' : ""
@@= skipped -43, +43 lines =@@
 >x : any
 
 function foo3(x: typeof a);
->foo3 : { (x: typeof a): any; (x: typeof a): any; }
+>foo3 : { (x: new (x: string, y: string) => string): any; (x: new (x: string, y: string) => string): any; }
 >x : new (x: string, y: string) => string
 >a : new (x: string, y: string) => string
 
 function foo3(x: typeof a); // error
->foo3 : { (x: typeof a): any; (x: typeof a): any; }
+>foo3 : { (x: new (x: string, y: string) => string): any; (x: new (x: string, y: string) => string): any; }
 >x : new (x: string, y: string) => string
 >a : new (x: string, y: string) => string
 
 function foo3(x: any) { }
->foo3 : { (x: typeof a): any; (x: typeof a): any; }
+>foo3 : { (x: new (x: string, y: string) => string): any; (x: new (x: string, y: string) => string): any; }
 >x : any
 
 function foo4(x: typeof b);
->foo4 : { (x: typeof b): any; (x: typeof b): any; }
->x : { "new"(x: string): string; }
->b : { "new"(x: string): string; }
+>foo4 : { (x: { new: (x: string) => string; }): any; (x: { new: (x: string) => string; }): any; }
+>x : { new: (x: string) => string; }
+>b : { new: (x: string) => string; }
 
 function foo4(x: typeof b); // error
->foo4 : { (x: typeof b): any; (x: typeof b): any; }
->x : { "new"(x: string): string; }
->b : { "new"(x: string): string; }
+>foo4 : { (x: { new: (x: string) => string; }): any; (x: { new: (x: string) => string; }): any; }
+>x : { new: (x: string) => string; }
+>b : { new: (x: string) => string; }
 
 function foo4(x: any) { }
->foo4 : { (x: typeof b): any; (x: typeof b): any; }
+>foo4 : { (x: { new: (x: string) => string; }): any; (x: { new: (x: string) => string; }): any; }
 >x : any
 
 function foo8(x: B);
@@= skipped -52, +52 lines =@@
 >x : any
 
 function foo10(x: B);
->foo10 : { (x: B): any; (x: typeof a): any; }
+>foo10 : { (x: B): any; (x: new (x: string, y: string) => string): any; }
 >x : B
 
 function foo10(x: typeof a); // ok
->foo10 : { (x: B): any; (x: typeof a): any; }
+>foo10 : { (x: B): any; (x: new (x: string, y: string) => string): any; }
 >x : new (x: string, y: string) => string
 >a : new (x: string, y: string) => string
 
 function foo10(x: any) { }
->foo10 : { (x: B): any; (x: typeof a): any; }
+>foo10 : { (x: B): any; (x: new (x: string, y: string) => string): any; }
 >x : any
 
 function foo11(x: B);
->foo11 : { (x: B): any; (x: typeof b): any; }
+>foo11 : { (x: B): any; (x: { new: (x: string) => string; }): any; }
 >x : B
 
 function foo11(x: typeof b); // ok
->foo11 : { (x: B): any; (x: typeof b): any; }
->x : { "new"(x: string): string; }
->b : { "new"(x: string): string; }
+>foo11 : { (x: B): any; (x: { new: (x: string) => string; }): any; }
+>x : { new: (x: string) => string; }
+>b : { new: (x: string) => string; }
 
 function foo11(x: any) { }
->foo11 : { (x: B): any; (x: typeof b): any; }
+>foo11 : { (x: B): any; (x: { new: (x: string) => string; }): any; }
 >x : any
 
 function foo12(x: I);
@@= skipped -50, +50 lines =@@
 >x : any
 
 function foo13(x: I);
->foo13 : { (x: I): any; (x: typeof a): any; }
+>foo13 : { (x: I): any; (x: new (x: string, y: string) => string): any; }
 >x : I
 
 function foo13(x: typeof a); // ok
->foo13 : { (x: I): any; (x: typeof a): any; }
+>foo13 : { (x: I): any; (x: new (x: string, y: string) => string): any; }
 >x : new (x: string, y: string) => string
 >a : new (x: string, y: string) => string
 
 function foo13(x: any) { }
->foo13 : { (x: I): any; (x: typeof a): any; }
+>foo13 : { (x: I): any; (x: new (x: string, y: string) => string): any; }
 >x : any
 
 function foo14(x: I);
->foo14 : { (x: I): any; (x: typeof b): any; }
+>foo14 : { (x: I): any; (x: { new: (x: string) => string; }): any; }
 >x : I
 
 function foo14(x: typeof b); // ok
->foo14 : { (x: I): any; (x: typeof b): any; }
->x : { "new"(x: string): string; }
->b : { "new"(x: string): string; }
+>foo14 : { (x: I): any; (x: { new: (x: string) => string; }): any; }
+>x : { new: (x: string) => string; }
+>b : { new: (x: string) => string; }
 
 function foo14(x: any) { }
->foo14 : { (x: I): any; (x: typeof b): any; }
+>foo14 : { (x: I): any; (x: { new: (x: string) => string; }): any; }
 >x : any
 
 function foo15(x: I2<string>);
