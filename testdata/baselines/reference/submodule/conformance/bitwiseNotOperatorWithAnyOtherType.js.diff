--- old.bitwiseNotOperatorWithAnyOtherType.js
+++ new.bitwiseNotOperatorWithAnyOtherType.js
@@= skipped -64, +64 lines =@@
 ~~obj1.x;
 
 //// [bitwiseNotOperatorWithAnyOtherType.js]
-// ~ operator on any type
 var ANY;
 var ANY1;
 var ANY2 = ["", ""];
 var obj;
-var obj1 = { x: "", y: function () { } };
+var obj1 = { x: "", y: () => { } };
 function foo() {
     var a;
     return a;
 }
-var A = /** @class */ (function () {
-    function A() {
-    }
-    A.foo = function () {
+class A {
+    a;
+    static foo() {
         var a;
         return a;
-    };
-    return A;
-}());
+    }
+}
 var M;
 (function (M) {
 })(M || (M = {}));
 var objA = new A();
-// any other type var
 var ResultIsNumber = ~ANY1;
 var ResultIsNumber1 = ~ANY2;
 var ResultIsNumber2 = ~A;
 var ResultIsNumber3 = ~M;
 var ResultIsNumber4 = ~obj;
 var ResultIsNumber5 = ~obj1;
-// any type literal
 var ResultIsNumber6 = ~undefined;
 var ResultIsNumber7 = ~null;
-// any type expressions
 var ResultIsNumber8 = ~ANY2[0];
 var ResultIsNumber9 = ~obj1.x;
 var ResultIsNumber10 = ~obj1.y;
@@= skipped -45, +39 lines =@@
 var ResultIsNumber16 = ~(null + undefined);
 var ResultIsNumber17 = ~(null + null);
 var ResultIsNumber18 = ~(undefined + undefined);
-// multiple ~ operators
 var ResultIsNumber19 = ~~ANY;
 var ResultIsNumber20 = ~~~(ANY + ANY1);
-//miss assignment operators
 ~ANY;
 ~ANY1;
 ~ANY2[0];
