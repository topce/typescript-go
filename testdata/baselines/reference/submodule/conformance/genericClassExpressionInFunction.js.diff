--- old.genericClassExpressionInFunction.js
+++ new.genericClassExpressionInFunction.js
@@= skipped -33, +33 lines =@@
 
 
 //// [genericClassExpressionInFunction.js]
-var __extends = (this && this.__extends) || (function () {
-    var extendStatics = function (d, b) {
-        extendStatics = Object.setPrototypeOf ||
-            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
-            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
-        return extendStatics(d, b);
-    };
-    return function (d, b) {
-        if (typeof b !== "function" && b !== null)
-            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
-        extendStatics(d, b);
-        function __() { this.constructor = d; }
-        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-    };
-})();
-var A = /** @class */ (function () {
-    function A() {
-    }
-    return A;
-}());
+class A {
+    genericVar;
+}
 function B1() {
     // class expression can use T
-    return /** @class */ (function (_super) {
-        __extends(class_1, _super);
-        function class_1() {
-            return _super !== null && _super.apply(this, arguments) || this;
-        }
-        return class_1;
-    }(A));
+    return class extends A {
+    };
 }
-var B2 = /** @class */ (function () {
-    function B2() {
-        this.anon = /** @class */ (function (_super) {
-            __extends(class_2, _super);
-            function class_2() {
-                return _super !== null && _super.apply(this, arguments) || this;
-            }
-            return class_2;
-        }(A));
-    }
-    return B2;
-}());
+class B2 {
+    anon = class extends A {
+    };
+}
 function B3() {
-    return /** @class */ (function (_super) {
-        __extends(Inner, _super);
-        function Inner() {
-            return _super !== null && _super.apply(this, arguments) || this;
-        }
-        return Inner;
-    }(A));
+    return class Inner extends A {
+    };
 }
 // extends can call B
-var K = /** @class */ (function (_super) {
-    __extends(K, _super);
-    function K() {
-        return _super !== null && _super.apply(this, arguments) || this;
-    }
-    return K;
-}(B1()));
-var C = /** @class */ (function (_super) {
-    __extends(C, _super);
-    function C() {
-        return _super !== null && _super.apply(this, arguments) || this;
-    }
-    return C;
-}((new B2().anon)));
-var b3Number = B3();
-var S = /** @class */ (function (_super) {
-    __extends(S, _super);
-    function S() {
-        return _super !== null && _super.apply(this, arguments) || this;
-    }
-    return S;
-}(b3Number));
+class K extends B1() {
+    namae;
+}
+class C extends (new B2().anon) {
+    name;
+}
+let b3Number = B3();
+class S extends b3Number {
+    nom;
+}
 var c = new C();
 var k = new K();
 var s = new S();
