--- old.unknownControlFlow.types
+++ new.unknownControlFlow.types
@@= skipped -53, +53 lines =@@
 >u : unknown
 
     let x3: {} | { x: string } | null | undefined = u;
->x3 : {} | { x: string; } | null | undefined
+>x3 : { x: string; } | {} | null | undefined
 >x : string
 >u : unknown
 
@@= skipped -281, +281 lines =@@
 }
 
 function f23<T>(x: T | undefined | null) {
->f23 : <T>(x: T | undefined | null) => void
+>f23 : <T>(x: T | null | undefined) => void
 >x : T | null | undefined
 
     if (x !== undefined) {
@@= skipped -9, +9 lines =@@
 >undefined : undefined
 
         x;  // T & {} | null
->x : (T & {}) | null
+>x : T & {} | null
     }
     if (x !== null) {
 >x !== null : boolean
 >x : T | null | undefined
 
         x;  // T & {} | undefined
->x : (T & {}) | undefined
+>x : T & {} | undefined
     }
     if (x != undefined) {
 >x != undefined : boolean
@@= skipped -32, +32 lines =@@
 
     if (typeof x === "object") {
 >typeof x === "object" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : {}
 >"object" : "object"
 
@@= skipped -15, +15 lines =@@
 
     if (typeof x === "object") {
 >typeof x === "object" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : T
 >"object" : "object"
 
         x;  // T & object | T & null
->x : (T & object) | (T & null)
+>x : T & null | T & object
     }
     if (x && typeof x === "object") {
 >x && typeof x === "object" : boolean
 >x : T
 >typeof x === "object" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : NonNullable<T>
 >"object" : "object"
 
@@= skipped -19, +19 lines =@@
 >x : T & object
     }
     if (typeof x === "object" && x) {
->typeof x === "object" && x : false | (T & object) | (T & null)
+>typeof x === "object" && x : false | T & null | T & object
 >typeof x === "object" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : T
 >"object" : "object"
->x : (T & object) | (T & null)
+>x : T & null | T & object
 
         x;  // T & object
 >x : T & object
@@= skipped -18, +18 lines =@@
 
     if (typeof x === "object") {
 >typeof x === "object" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : T
 >"object" : "object"
 
@@= skipped -40, +40 lines =@@
 
     return possiblyUndefined(possiblyNull(x));  // T | null | undefined
 >possiblyUndefined(possiblyNull(x)) : T | null | undefined
->possiblyUndefined : <T_1>(x: T_1) => T_1 | undefined
+>possiblyUndefined : <T>(x: T) => T | undefined
 >possiblyNull(x) : T | null
->possiblyNull : <T_1>(x: T_1) => T_1 | null
+>possiblyNull : <T>(x: T) => T | null
 >x : T
 }
 
@@= skipped -41, +41 lines =@@
 
     return ensureNotUndefined(ensureNotNull(x));  // T & {}
 >ensureNotUndefined(ensureNotNull(x)) : T & {}
->ensureNotUndefined : <T_1>(x: T_1) => T_1 & ({} | null)
+>ensureNotUndefined : <T>(x: T) => T & ({} | null)
 >ensureNotNull(x) : T & ({} | undefined)
->ensureNotNull : <T_1>(x: T_1) => T_1 & ({} | undefined)
+>ensureNotNull : <T>(x: T) => T & ({} | undefined)
 >x : T
 }
 
@@= skipped -34, +34 lines =@@
     let a1 = ensureNotUndefined(ensureNotNull(a));  // T & {}
 >a1 : T & {}
 >ensureNotUndefined(ensureNotNull(a)) : T & {}
->ensureNotUndefined : <T_1>(x: T_1) => T_1 & ({} | null)
+>ensureNotUndefined : <T>(x: T) => T & ({} | null)
 >ensureNotNull(a) : T & ({} | undefined)
->ensureNotNull : <T_1>(x: T_1) => T_1 & ({} | undefined)
+>ensureNotNull : <T>(x: T) => T & ({} | undefined)
 >a : T
 
     let a2 = ensureNotNull(ensureNotUndefined(a));  // T & {}
 >a2 : T & {}
 >ensureNotNull(ensureNotUndefined(a)) : T & {}
->ensureNotNull : <T_1>(x: T_1) => T_1 & ({} | undefined)
+>ensureNotNull : <T>(x: T) => T & ({} | undefined)
 >ensureNotUndefined(a) : T & ({} | null)
->ensureNotUndefined : <T_1>(x: T_1) => T_1 & ({} | null)
+>ensureNotUndefined : <T>(x: T) => T & ({} | null)
 >a : T
 
     let a3 = ensureNotNull(ensureNotNull(a));  // T & {} | T & undefined
->a3 : (T & undefined) | (T & {})
->ensureNotNull(ensureNotNull(a)) : (T & undefined) | (T & {})
->ensureNotNull : <T_1>(x: T_1) => T_1 & ({} | undefined)
+>a3 : T & undefined | T & {}
+>ensureNotNull(ensureNotNull(a)) : T & undefined | T & {}
+>ensureNotNull : <T>(x: T) => T & ({} | undefined)
 >ensureNotNull(a) : T & ({} | undefined)
->ensureNotNull : <T_1>(x: T_1) => T_1 & ({} | undefined)
+>ensureNotNull : <T>(x: T) => T & ({} | undefined)
 >a : T
 
     let a4 = ensureNotUndefined(ensureNotUndefined(a));  // T & {} | T & null
->a4 : (T & {}) | (T & null)
->ensureNotUndefined(ensureNotUndefined(a)) : (T & {}) | (T & null)
->ensureNotUndefined : <T_1>(x: T_1) => T_1 & ({} | null)
+>a4 : T & null | T & {}
+>ensureNotUndefined(ensureNotUndefined(a)) : T & null | T & {}
+>ensureNotUndefined : <T>(x: T) => T & ({} | null)
 >ensureNotUndefined(a) : T & ({} | null)
->ensureNotUndefined : <T_1>(x: T_1) => T_1 & ({} | null)
+>ensureNotUndefined : <T>(x: T) => T & ({} | null)
 >a : T
 
     let a5 = ensureNotNullOrUndefined(ensureNotNullOrUndefined(a));  // T & {}
 >a5 : T & {}
 >ensureNotNullOrUndefined(ensureNotNullOrUndefined(a)) : T & {}
->ensureNotNullOrUndefined : <T_1>(x: T_1) => T_1 & {}
+>ensureNotNullOrUndefined : <T>(x: T) => T & {}
 >ensureNotNullOrUndefined(a) : T & {}
->ensureNotNullOrUndefined : <T_1>(x: T_1) => T_1 & {}
+>ensureNotNullOrUndefined : <T>(x: T) => T & {}
 >a : T
 
     let a6 = ensureNotNull(possiblyNullOrUndefined(a));  // T & {} | undefined
->a6 : (T & {}) | undefined
->ensureNotNull(possiblyNullOrUndefined(a)) : (T & {}) | undefined
->ensureNotNull : <T_1>(x: T_1) => T_1 & ({} | undefined)
+>a6 : T & {} | undefined
+>ensureNotNull(possiblyNullOrUndefined(a)) : T & {} | undefined
+>ensureNotNull : <T>(x: T) => T & ({} | undefined)
 >possiblyNullOrUndefined(a) : T | null | undefined
->possiblyNullOrUndefined : <T_1>(x: T_1) => T_1 | null | undefined
+>possiblyNullOrUndefined : <T>(x: T) => T | null | undefined
 >a : T
 
     let a7 = ensureNotUndefined(possiblyNullOrUndefined(a));  // T & {} | null
->a7 : (T & {}) | null
->ensureNotUndefined(possiblyNullOrUndefined(a)) : (T & {}) | null
->ensureNotUndefined : <T_1>(x: T_1) => T_1 & ({} | null)
+>a7 : T & {} | null
+>ensureNotUndefined(possiblyNullOrUndefined(a)) : T & {} | null
+>ensureNotUndefined : <T>(x: T) => T & ({} | null)
 >possiblyNullOrUndefined(a) : T | null | undefined
->possiblyNullOrUndefined : <T_1>(x: T_1) => T_1 | null | undefined
+>possiblyNullOrUndefined : <T>(x: T) => T | null | undefined
 >a : T
 
     let a8 = ensureNotNull(possiblyUndefined(a));  // T & {} | undefined
->a8 : (T & {}) | undefined
->ensureNotNull(possiblyUndefined(a)) : (T & {}) | undefined
->ensureNotNull : <T_1>(x: T_1) => T_1 & ({} | undefined)
+>a8 : T & {} | undefined
+>ensureNotNull(possiblyUndefined(a)) : T & {} | undefined
+>ensureNotNull : <T>(x: T) => T & ({} | undefined)
 >possiblyUndefined(a) : T | undefined
->possiblyUndefined : <T_1>(x: T_1) => T_1 | undefined
+>possiblyUndefined : <T>(x: T) => T | undefined
 >a : T
 
     let a9 = ensureNotUndefined(possiblyNull(a));  // T & {} | null
->a9 : (T & {}) | null
->ensureNotUndefined(possiblyNull(a)) : (T & {}) | null
->ensureNotUndefined : <T_1>(x: T_1) => T_1 & ({} | null)
+>a9 : T & {} | null
+>ensureNotUndefined(possiblyNull(a)) : T & {} | null
+>ensureNotUndefined : <T>(x: T) => T & ({} | null)
 >possiblyNull(a) : T | null
->possiblyNull : <T_1>(x: T_1) => T_1 | null
+>possiblyNull : <T>(x: T) => T | null
 >a : T
 }
 
@@= skipped -82, +82 lines =@@
 >typeof a !== 'object' || typeof b !== 'object' || !a : boolean
 >typeof a !== 'object' || typeof b !== 'object' : boolean
 >typeof a !== 'object' : boolean
->typeof a : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof a : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >a : T
 >'object' : "object"
 >typeof b !== 'object' : boolean
->typeof b : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof b : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >b : T
 >'object' : "object"
 >!a : boolean
->a : (T & object) | (T & null)
+>a : T & null | T & object
 >!b : boolean
->b : (T & object) | (T & null)
+>b : T & null | T & object
 
         return false;
 >false : false
@@= skipped -95, +95 lines =@@
 >k : keyof T
 
     t[k];
->t[k] : (T & {})[keyof T]
+>t[k] : T & {}[keyof T]
 >t : T & {}
 >k : keyof T
 }
@@= skipped -22, +22 lines =@@
 >k : keyof (T & {})
 
     t[k];
->t[k] : (T & {})[keyof (T & {})]
+>t[k] : T & {}[keyof (T & {})]
 >t : T & {}
 >k : keyof (T & {})
 }
@@= skipped -76, +76 lines =@@
 }
 
 function fx2<T extends {}>(value: T & ({} | null)) {
->fx2 : <T extends {}>(value: T & ({} | null)) => void
+>fx2 : <T extends {}>(value: T) => void
 >value : T
 
     if (value === 42) {
@@= skipped -18, +18 lines =@@
 }
 
 function fx3<T extends {} | undefined>(value: T & ({} | null)) {
->fx3 : <T extends {} | undefined>(value: T & ({} | null)) => void
+>fx3 : <T extends {} | undefined>(value: T & {}) => void
 >value : T & {}
 
     if (value === 42) {
@@= skipped -18, +18 lines =@@
 }
 
 function fx4<T extends {} | null>(value: T & ({} | null)) {
->fx4 : <T extends {} | null>(value: T & ({} | null)) => void
+>fx4 : <T extends {} | null>(value: T) => void
 >value : T
 
     if (value === 42) {
@@= skipped -181, +181 lines =@@
 >AB : AB
 
 function x<T_AB extends AB>(x: T_AB & undefined, y: any) {
->x : <T_AB extends AB>(x: T_AB & undefined, y: any) => void
+>x : <T_AB extends AB>(x: never, y: any) => void
 >x : never
 >y : any
 
