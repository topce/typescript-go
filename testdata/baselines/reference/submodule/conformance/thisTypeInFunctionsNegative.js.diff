--- old.thisTypeInFunctionsNegative.js
+++ new.thisTypeInFunctionsNegative.js
@@= skipped -187, +187 lines =@@
 
 
 //// [thisTypeInFunctionsNegative.js]
-var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
-    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
-    return new (P || (P = Promise))(function (resolve, reject) {
-        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
-        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
-        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
-        step((generator = generator.apply(thisArg, _arguments || [])).next());
-    });
-};
 class C {
+    n;
     explicitThis(m) {
         return this.n + m;
     }
@@= skipped -23, +15 lines =@@
         return this.n + m;
     }
     explicitVoid(m) {
-        return this.n + m; // 'n' doesn't exist on type 'void'.
+        return this.n + m;
     }
 }
 class D {
+    x;
     explicitThis(m) {
         return this.x + m;
     }
@@= skipped -14, +15 lines =@@
 let impl = {
     a: 12,
     explicitVoid1() {
-        return this.a; // error, no 'a' in 'void'
+        return this.a;
     },
-    explicitVoid2: () => this.a, // ok, `this:any` because it refers to an outer object
+    explicitVoid2: () => this.a,
     explicitStructural: () => 12,
     explicitInterface: () => 12,
     explicitThis() {
@@= skipped -10, +10 lines =@@
     },
 };
 let implExplicitStructural = impl.explicitStructural;
-implExplicitStructural(); // error, no 'a' in 'void'
+implExplicitStructural();
 let implExplicitInterface = impl.explicitInterface;
-implExplicitInterface(); // error, no 'a' in 'void' 
+implExplicitInterface();
 function explicitStructural(x) {
     return x + this.y;
 }
@@= skipped -15, +15 lines =@@
 let ok = { y: 12, explicitStructural };
 let wrongPropertyType = { y: 'foo', explicitStructural };
 let wrongPropertyName = { wrongName: 12, explicitStructural };
-ok.f(); // not enough arguments
+ok.f();
 ok.f('wrong type');
 ok.f(13, 'too many arguments');
 wrongPropertyType.f(13);
 wrongPropertyName.f(13);
 let c = new C();
-c.explicitC(); // not enough arguments
+c.explicitC();
 c.explicitC('wrong type');
 c.explicitC(13, 'too many arguments');
-c.explicitThis(); // not enough arguments
+c.explicitThis();
 c.explicitThis('wrong type 2');
 c.explicitThis(14, 'too many arguments 2');
-c.implicitThis(); // not enough arguments
+c.implicitThis();
 c.implicitThis('wrong type 2');
 c.implicitThis(14, 'too many arguments 2');
-c.explicitProperty(); // not enough arguments
+c.explicitProperty();
 c.explicitProperty('wrong type 3');
 c.explicitProperty(15, 'too many arguments 3');
-// oops, this triggers contextual typing, which needs to be updated to understand that =>'s `this` is void.
 let specifiedToVoid = explicitStructural;
 let reconstructed = {
     n: 12,
@@= skipped -28, +27 lines =@@
     explicitVoid: c.explicitVoid
 };
 ;
-// lambdas have this: void for assignability purposes (and this unbound (free) for body checking)
 let d = new D();
 let explicitXProperty;
-// from differing object types
 c.explicitC = function (m) { return this.x + m; };
 c.explicitProperty = explicitXProperty;
 c.explicitC = d.explicitD;
@@= skipped -14, +12 lines =@@
 c.explicitThis = d.explicitThis;
 c.explicitVoid = d.explicitD;
 c.explicitVoid = d.explicitThis;
-/// class-based polymorphic assignability (with inheritance!) ///
 class Base1 {
+    x;
     polymorphic() { return this.x; }
     explicit() { return this.x; }
     static explicitStatic() { return this.x; }
 }
 class Derived1 extends Base1 {
+    y;
 }
 class Base2 {
+    y;
     polymorphic() { return this.y; }
     explicit() { return this.x; }
 }
 class Derived2 extends Base2 {
+    x;
 }
 let b1 = new Base1();
 let d1 = new Derived1();
 let b2 = new Base2();
 let d2 = new Derived2();
-b1.polymorphic = b2.polymorphic; // error, 'this.y' not in Base1: { x }
-b1.explicit = b2.polymorphic; // error, 'y' not in Base1: { x }
-d1.explicit = b2.polymorphic; // error, 'y' not in Base1: { x }
-////// use this-type for construction with new ////
+b1.polymorphic = b2.polymorphic;
+b1.explicit = b2.polymorphic;
+d1.explicit = b2.polymorphic;
 function VoidThis() {
 }
 let voidThis = new VoidThis();
-///// syntax-ish errors /////
 class ThisConstructor {
+    n;
     constructor(n) {
         this.n = n;
     }
 }
 var thisConstructorType;
 function notFirst(a) { return this.n; }
-///// parse errors /////
 function modifiers() { return this.n; }
 function restParam(...) { return this.n; }
 function optional() { return this.n; }
 function decorated() { return this.n; }
+function initializer(, C) { }
 ();
 number;
 {
     return this.n;
 }
-// can't name parameters 'this' in a lambda.
 c.explicitProperty = (m) => m + this.n;
 const f2 = (m) => m + this.n;
-const f3 = (m) => __awaiter(this, void 0, void 0, function* () { return m + this.n; });
-const f4 = (m) => __awaiter(this, void 0, void 0, function* () { return m + this.n; });
+const f3 = async (m) => m + this.n;
+const f4 = async (m) => m + this.n;
 class Derived3 extends Base2 {
     f() {
         super.polymorphic();
