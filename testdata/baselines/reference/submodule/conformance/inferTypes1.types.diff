--- old.inferTypes1.types
+++ new.inferTypes1.types
@@= skipped -218, +218 lines =@@
 
 type X3<T> = T extends { a: (x: infer U) => void, b: (x: infer U) => void } ? U : never;
 >X3 : X3<T>
->a : (x: infer U) => void
+>a : (x: U) => void
 >x : U
->b : (x: infer U) => void
+>b : (x: U) => void
 >x : U
 
 type T50 = X3<{}>;  // never
@@= skipped -110, +110 lines =@@
     T extends string | number | boolean | null ? T
     : T extends undefined | Function ? never // undefined and functions are removed
     : T extends { toJSON(): infer R } ? R // toJSON is called if it exists (e.g. Date)
->toJSON : () => infer R
+>toJSON : () => R
 
     : T extends object ? JsonifiedObject<T>
     : "what is this";
@@= skipped -150, +150 lines =@@
 const result = invoker('test', true)({ test: (a: boolean) => 123 })
 >result : number
 >invoker('test', true)({ test: (a: boolean) => 123 }) : number
->invoker('test', true) : <T extends Record<"test", (args_0: boolean) => any>>(obj: T) => ReturnType<T["test"]>
+>invoker('test', true) : <T extends Record<"test", (...args: [boolean]) => any>>(obj: T) => ReturnType<T["test"]>
 >invoker : <K extends string | number | symbol, A extends any[]>(key: K, ...args: A) => <T extends Record<K, (...args: A) => any>>(obj: T) => ReturnType<T[K]>
 >'test' : "test"
 >true : true
