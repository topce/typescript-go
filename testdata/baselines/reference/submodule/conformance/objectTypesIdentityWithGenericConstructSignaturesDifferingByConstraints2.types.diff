--- old.objectTypesIdentityWithGenericConstructSignaturesDifferingByConstraints2.types
+++ new.objectTypesIdentityWithGenericConstructSignaturesDifferingByConstraints2.types
@@= skipped -41, +41 lines =@@
 }
 
 var a: { new<T extends U, U extends Array<string>>(x: T, y: U): string }
->a : new <T extends U, U extends Array<string>>(x: T, y: U) => string
+>a : new <T extends U, U extends string[]>(x: T, y: U) => string
 >x : T
 >y : U
 
 var b = { new<T extends U, U extends RegExp>(x: T, y: U) { return ''; } }; // not a construct signature, function called new
->b : { "new"<T extends U, U extends RegExp>(x: T, y: U): string; }
->{ new<T extends U, U extends RegExp>(x: T, y: U) { return ''; } } : { "new"<T extends U, U extends RegExp>(x: T, y: U): string; }
+>b : { new: <T extends U, U extends RegExp>(x: T, y: U) => string; }
+>{ new<T extends U, U extends RegExp>(x: T, y: U) { return ''; } } : { new: <T extends U, U extends RegExp>(x: T, y: U) => string; }
 >new : <T extends U, U extends RegExp>(x: T, y: U) => string
 >x : T
 >y : U
 >'' : ""
 
 function foo1b(x: B<Array<number>, Array<number>>);
->foo1b : { (x: B<Array<number>, Array<number>>): any; (x: B<Array<number>, Array<number>>): any; }
+>foo1b : { (x: B<number[], number[]>): any; (x: B<number[], number[]>): any; }
 >x : B<number[], number[]>
 
 function foo1b(x: B<Array<number>, Array<number>>); // error
->foo1b : { (x: B<Array<number>, Array<number>>): any; (x: B<Array<number>, Array<number>>): any; }
+>foo1b : { (x: B<number[], number[]>): any; (x: B<number[], number[]>): any; }
 >x : B<number[], number[]>
 
 function foo1b(x: any) { }
->foo1b : { (x: B<Array<number>, Array<number>>): any; (x: B<Array<number>, Array<number>>): any; }
+>foo1b : { (x: B<number[], number[]>): any; (x: B<number[], number[]>): any; }
 >x : any
 
 function foo1c(x: C<String, String>);
@@= skipped -49, +49 lines =@@
 >x : any
 
 function foo3(x: typeof a);
->foo3 : { (x: typeof a): any; (x: typeof a): any; }
->x : new <T extends U, U extends Array<string>>(x: T, y: U) => string
->a : new <T extends U, U extends Array<string>>(x: T, y: U) => string
+>foo3 : { (x: new <T extends U, U extends string[]>(x: T, y: U) => string): any; (x: new <T extends U, U extends string[]>(x: T, y: U) => string): any; }
+>x : new <T extends U, U extends string[]>(x: T, y: U) => string
+>a : new <T extends U, U extends string[]>(x: T, y: U) => string
 
 function foo3(x: typeof a); // error
->foo3 : { (x: typeof a): any; (x: typeof a): any; }
->x : new <T extends U, U extends Array<string>>(x: T, y: U) => string
->a : new <T extends U, U extends Array<string>>(x: T, y: U) => string
+>foo3 : { (x: new <T extends U, U extends string[]>(x: T, y: U) => string): any; (x: new <T extends U, U extends string[]>(x: T, y: U) => string): any; }
+>x : new <T extends U, U extends string[]>(x: T, y: U) => string
+>a : new <T extends U, U extends string[]>(x: T, y: U) => string
 
 function foo3(x: any) { }
->foo3 : { (x: typeof a): any; (x: typeof a): any; }
+>foo3 : { (x: new <T extends U, U extends string[]>(x: T, y: U) => string): any; (x: new <T extends U, U extends string[]>(x: T, y: U) => string): any; }
 >x : any
 
 function foo4(x: typeof b);
->foo4 : { (x: typeof b): any; (x: typeof b): any; }
->x : { "new"<T extends U, U extends RegExp>(x: T, y: U): string; }
->b : { "new"<T extends U, U extends RegExp>(x: T, y: U): string; }
+>foo4 : { (x: { new: <T extends U, U extends RegExp>(x: T, y: U) => string; }): any; (x: { new: <T extends U, U extends RegExp>(x: T, y: U) => string; }): any; }
+>x : { new: <T extends U, U extends RegExp>(x: T, y: U) => string; }
+>b : { new: <T extends U, U extends RegExp>(x: T, y: U) => string; }
 
 function foo4(x: typeof b); // error
->foo4 : { (x: typeof b): any; (x: typeof b): any; }
->x : { "new"<T extends U, U extends RegExp>(x: T, y: U): string; }
->b : { "new"<T extends U, U extends RegExp>(x: T, y: U): string; }
+>foo4 : { (x: { new: <T extends U, U extends RegExp>(x: T, y: U) => string; }): any; (x: { new: <T extends U, U extends RegExp>(x: T, y: U) => string; }): any; }
+>x : { new: <T extends U, U extends RegExp>(x: T, y: U) => string; }
+>b : { new: <T extends U, U extends RegExp>(x: T, y: U) => string; }
 
 function foo4(x: any) { }
->foo4 : { (x: typeof b): any; (x: typeof b): any; }
+>foo4 : { (x: { new: <T extends U, U extends RegExp>(x: T, y: U) => string; }): any; (x: { new: <T extends U, U extends RegExp>(x: T, y: U) => string; }): any; }
 >x : any
 
 function foo5c(x: C<String, String>);
@@= skipped -52, +52 lines =@@
 >x : any
 
 function foo8(x: B<Array<number>, Array<number>>);
->foo8 : { (x: B<Array<number>, Array<number>>): any; (x: I<Number, Number>): any; }
+>foo8 : { (x: B<number[], number[]>): any; (x: I<Number, Number>): any; }
 >x : B<number[], number[]>
 
 function foo8(x: I<Number, Number>); // ok
->foo8 : { (x: B<Array<number>, Array<number>>): any; (x: I<Number, Number>): any; }
+>foo8 : { (x: B<number[], number[]>): any; (x: I<Number, Number>): any; }
 >x : I<Number, Number>
 
 function foo8(x: any) { }
->foo8 : { (x: B<Array<number>, Array<number>>): any; (x: I<Number, Number>): any; }
+>foo8 : { (x: B<number[], number[]>): any; (x: I<Number, Number>): any; }
 >x : any
 
 function foo9(x: B<Array<number>, Array<number>>);
->foo9 : { (x: B<Array<number>, Array<number>>): any; (x: C<String, String>): any; }
+>foo9 : { (x: B<number[], number[]>): any; (x: C<String, String>): any; }
 >x : B<number[], number[]>
 
 function foo9(x: C<String, String>); // error, types are structurally equal
->foo9 : { (x: B<Array<number>, Array<number>>): any; (x: C<String, String>): any; }
+>foo9 : { (x: B<number[], number[]>): any; (x: C<String, String>): any; }
 >x : C<String, String>
 
 function foo9(x: any) { }
->foo9 : { (x: B<Array<number>, Array<number>>): any; (x: C<String, String>): any; }
+>foo9 : { (x: B<number[], number[]>): any; (x: C<String, String>): any; }
 >x : any
 
 function foo10(x: B<Array<number>, Array<number>>);
->foo10 : { (x: B<Array<number>, Array<number>>): any; (x: typeof a): any; }
+>foo10 : { (x: B<number[], number[]>): any; (x: new <T extends U, U extends string[]>(x: T, y: U) => string): any; }
 >x : B<number[], number[]>
 
 function foo10(x: typeof a); // ok
->foo10 : { (x: B<Array<number>, Array<number>>): any; (x: typeof a): any; }
->x : new <T extends U, U extends Array<string>>(x: T, y: U) => string
->a : new <T extends U, U extends Array<string>>(x: T, y: U) => string
+>foo10 : { (x: B<number[], number[]>): any; (x: new <T extends U, U extends string[]>(x: T, y: U) => string): any; }
+>x : new <T extends U, U extends string[]>(x: T, y: U) => string
+>a : new <T extends U, U extends string[]>(x: T, y: U) => string
 
 function foo10(x: any) { }
->foo10 : { (x: B<Array<number>, Array<number>>): any; (x: typeof a): any; }
+>foo10 : { (x: B<number[], number[]>): any; (x: new <T extends U, U extends string[]>(x: T, y: U) => string): any; }
 >x : any
 
 function foo11(x: B<Array<number>, Array<number>>);
->foo11 : { (x: B<Array<number>, Array<number>>): any; (x: typeof b): any; }
+>foo11 : { (x: B<number[], number[]>): any; (x: { new: <T extends U, U extends RegExp>(x: T, y: U) => string; }): any; }
 >x : B<number[], number[]>
 
 function foo11(x: typeof b); // ok
->foo11 : { (x: B<Array<number>, Array<number>>): any; (x: typeof b): any; }
->x : { "new"<T extends U, U extends RegExp>(x: T, y: U): string; }
->b : { "new"<T extends U, U extends RegExp>(x: T, y: U): string; }
+>foo11 : { (x: B<number[], number[]>): any; (x: { new: <T extends U, U extends RegExp>(x: T, y: U) => string; }): any; }
+>x : { new: <T extends U, U extends RegExp>(x: T, y: U) => string; }
+>b : { new: <T extends U, U extends RegExp>(x: T, y: U) => string; }
 
 function foo11(x: any) { }
->foo11 : { (x: B<Array<number>, Array<number>>): any; (x: typeof b): any; }
+>foo11 : { (x: B<number[], number[]>): any; (x: { new: <T extends U, U extends RegExp>(x: T, y: U) => string; }): any; }
 >x : any
 
 function foo12(x: I<Number, Number>);
@@= skipped -74, +74 lines =@@
 >x : any
 
 function foo13(x: I<Number, Number>);
->foo13 : { (x: I<Number, Number>): any; (x: typeof a): any; }
+>foo13 : { (x: I<Number, Number>): any; (x: new <T extends U, U extends string[]>(x: T, y: U) => string): any; }
 >x : I<Number, Number>
 
 function foo13(x: typeof a); // ok
->foo13 : { (x: I<Number, Number>): any; (x: typeof a): any; }
->x : new <T extends U, U extends Array<string>>(x: T, y: U) => string
->a : new <T extends U, U extends Array<string>>(x: T, y: U) => string
+>foo13 : { (x: I<Number, Number>): any; (x: new <T extends U, U extends string[]>(x: T, y: U) => string): any; }
+>x : new <T extends U, U extends string[]>(x: T, y: U) => string
+>a : new <T extends U, U extends string[]>(x: T, y: U) => string
 
 function foo13(x: any) { }
->foo13 : { (x: I<Number, Number>): any; (x: typeof a): any; }
+>foo13 : { (x: I<Number, Number>): any; (x: new <T extends U, U extends string[]>(x: T, y: U) => string): any; }
 >x : any
 
 function foo14(x: I<Number, Number>);
->foo14 : { (x: I<Number, Number>): any; (x: typeof b): any; }
+>foo14 : { (x: I<Number, Number>): any; (x: { new: <T extends U, U extends RegExp>(x: T, y: U) => string; }): any; }
 >x : I<Number, Number>
 
 function foo14(x: typeof b); // ok
->foo14 : { (x: I<Number, Number>): any; (x: typeof b): any; }
->x : { "new"<T extends U, U extends RegExp>(x: T, y: U): string; }
->b : { "new"<T extends U, U extends RegExp>(x: T, y: U): string; }
+>foo14 : { (x: I<Number, Number>): any; (x: { new: <T extends U, U extends RegExp>(x: T, y: U) => string; }): any; }
+>x : { new: <T extends U, U extends RegExp>(x: T, y: U) => string; }
+>b : { new: <T extends U, U extends RegExp>(x: T, y: U) => string; }
 
 function foo14(x: any) { }
->foo14 : { (x: I<Number, Number>): any; (x: typeof b): any; }
+>foo14 : { (x: I<Number, Number>): any; (x: { new: <T extends U, U extends RegExp>(x: T, y: U) => string; }): any; }
 >x : any
 
