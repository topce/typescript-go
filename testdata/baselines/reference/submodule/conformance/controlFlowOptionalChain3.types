//// [tests/cases/conformance/controlFlow/controlFlowOptionalChain3.tsx] ////

=== controlFlowOptionalChain3.tsx ===
/// <reference path="react16.d.ts" />

// https://github.com/microsoft/TypeScript/issues/56482

import React from "react";
>React : any

interface Foo {
  bar: boolean;
>bar : boolean
}

function test1(foo: Foo | undefined) {
>test1 : (foo: Foo | undefined) => void
>foo : Foo | undefined

  if (foo?.bar === false) {
>foo?.bar === false : boolean
>foo?.bar : boolean | undefined
>foo : Foo | undefined
>bar : boolean | undefined
>false : false

    foo;
>foo : Foo
  }
  foo;
>foo : Foo | undefined
}

function test2(foo: Foo | undefined) {
>test2 : (foo: Foo | undefined) => void
>foo : Foo | undefined

  if (foo?.bar === false) {
>foo?.bar === false : boolean
>foo?.bar : boolean | undefined
>foo : Foo | undefined
>bar : boolean | undefined
>false : false

    foo;
>foo : Foo

  } else {
    foo;
>foo : Foo | undefined
  }
}

function Test3({ foo }: { foo: Foo | undefined }) {
>Test3 : (__0: { foo: Foo | undefined; }) => any
>foo : Foo | undefined
>foo : Foo | undefined

  return (
>(    <div>      {foo?.bar === false && "foo"}      {foo.bar ? "true" : "false"}    </div>  ) : any

    <div>
><div>      {foo?.bar === false && "foo"}      {foo.bar ? "true" : "false"}    </div> : any
>div : any

      {foo?.bar === false && "foo"}
>foo?.bar === false && "foo" : "foo" | false
>foo?.bar === false : boolean
>foo?.bar : boolean | undefined
>foo : Foo | undefined
>bar : boolean | undefined
>false : false
>"foo" : "foo"

      {foo.bar ? "true" : "false"}
>foo.bar ? "true" : "false" : "false" | "true"
>foo.bar : boolean
>foo : Foo | undefined
>bar : boolean
>"true" : "true"
>"false" : "false"

    </div>
>div : any

  );
}

function test4(options?: { a?: boolean; b?: boolean }) {
>test4 : (options?: { a?: boolean | undefined; b?: boolean | undefined; } | undefined) => void
>options : { a?: boolean | undefined; b?: boolean | undefined; } | undefined
>a : boolean | undefined
>b : boolean | undefined

  if (options?.a === false || options.b) {
>options?.a === false || options.b : boolean | undefined
>options?.a === false : boolean
>options?.a : boolean | undefined
>options : { a?: boolean | undefined; b?: boolean | undefined; } | undefined
>a : boolean | undefined
>false : false
>options.b : boolean | undefined
>options : { a?: boolean | undefined; b?: boolean | undefined; } | undefined
>b : boolean | undefined

    options;
>options : { a?: boolean | undefined; b?: boolean | undefined; } | undefined
  }
}

