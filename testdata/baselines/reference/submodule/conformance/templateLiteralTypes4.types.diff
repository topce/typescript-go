--- old.templateLiteralTypes4.types
+++ new.templateLiteralTypes4.types
@@= skipped -0, +0 lines =@@
 //// [tests/cases/conformance/types/literal/templateLiteralTypes4.ts] ////
 
-=== Performance Stats ===
-Assignability cache: 1,000
-Instantiation count: 1,000
-
 === templateLiteralTypes4.ts ===
 // infer from number
 type TNumber0 = "100" extends `${infer N extends number}` ? N : never; // 100
@@= skipped -441, +437 lines =@@
 >name : string
 
     readonly type: "i8" | "i16" | "i32" | "i64" | "u8" | "u16" | "u32" | "u64" | "f32" | "f64";
->type : "i8" | "i16" | "i32" | "i64" | "u8" | "u16" | "u32" | "u64" | "f32" | "f64"
+>type : "f32" | "f64" | "i16" | "i32" | "i64" | "i8" | "u16" | "u32" | "u64" | "u8"
 }
 
 type FieldType<T extends FieldDefinition["type"]> =
@@= skipped -42, +42 lines =@@
 
     // get/set a field by index
     getIndex<I extends IndicesOf<TDef>>(index: I): FieldType<Extract<TDef[I], FieldDefinition>["type"]>;
->getIndex : <I extends IndicesOf<TDef>>(index: I) => FieldType<Extract<TDef[I], FieldDefinition>["type"]>
+>getIndex : <I extends IndexFor<Extract<keyof TDef, string>>>(index: I) => FieldType<Extract<TDef[I], FieldDefinition>["type"]>
 >index : I
 
     setIndex<I extends IndicesOf<TDef>>(index: I, value: FieldType<Extract<TDef[I], FieldDefinition>["type"]>): void;
->setIndex : <I extends IndicesOf<TDef>>(index: I, value: FieldType<Extract<TDef[I], FieldDefinition>["type"]>) => void
+>setIndex : <I extends IndexFor<Extract<keyof TDef, string>>>(index: I, value: FieldType<Extract<TDef[I], FieldDefinition>["type"]>) => void
 >index : I
 >value : FieldType<Extract<TDef[I], FieldDefinition>["type"]>
 }
