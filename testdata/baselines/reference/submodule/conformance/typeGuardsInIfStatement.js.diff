--- old.typeGuardsInIfStatement.js
+++ new.typeGuardsInIfStatement.js
@@= skipped -143, +143 lines =@@
 }
 
 //// [typeGuardsInIfStatement.js]
-// In the true branch statement of an 'if' statement, 
-// the type of a variable or parameter is narrowed by any type guard in the 'if' condition when true.
-// In the false branch statement of an 'if' statement, 
-// the type of a variable or parameter is narrowed by any type guard in the 'if' condition when false.
 function foo(x) {
     if (typeof x === "string") {
-        return x.length; // string
+        return x.length;
     }
     else {
-        return x++; // number
+        return x++;
     }
 }
 function foo2(x) {
     if (typeof x === "string") {
         x = 10;
-        return x; // number
+        return x;
     }
     else {
-        return x; // number
+        return x;
     }
 }
 function foo3(x) {
     if (typeof x === "string") {
         x = "Hello";
-        return x; // string
+        return x;
     }
     else {
-        return x; // number
+        return x;
     }
 }
 function foo4(x) {
     if (typeof x === "string") {
-        return x; // string
+        return x;
     }
     else {
         x = 10;
-        return x; // number
+        return x;
     }
 }
 function foo5(x) {
     if (typeof x === "string") {
-        return x; // string
+        return x;
     }
     else {
         x = "hello";
-        return x; // string
+        return x;
     }
 }
 function foo6(x) {
     if (typeof x === "string") {
         x = 10;
-        return x; // number
+        return x;
     }
     else {
         x = "hello";
-        return x; // string
+        return x;
     }
 }
 function foo7(x) {
     if (typeof x === "string") {
-        return x === "hello"; // string
+        return x === "hello";
     }
     else if (typeof x === "boolean") {
-        return x; // boolean
+        return x;
     }
     else {
-        return x == 10; // number
+        return x == 10;
     }
 }
 function foo8(x) {
     if (typeof x === "string") {
-        return x === "hello"; // string
+        return x === "hello";
     }
     else {
-        var b = x; //  number | boolean
+        var b = x;
         if (typeof x === "boolean") {
-            return x; // boolean
+            return x;
         }
         else {
-            return x == 10; // number
+            return x == 10;
         }
     }
 }
 function foo9(x) {
     var y = 10;
     if (typeof x === "string") {
-        // usage of x or assignment to separate variable shouldn't cause narrowing of type to stop
         y = x.length;
-        return x === "hello"; // string
+        return x === "hello";
     }
     else {
-        return x == 10; // number
+        return x == 10;
     }
 }
 function foo10(x) {
-    // Mixing typeguard narrowing in if statement with conditional expression typeguard
     if (typeof x === "string") {
-        return x === "hello"; // string
+        return x === "hello";
     }
     else {
         var y;
-        var b = x; // number | boolean
+        var b = x;
         return typeof x === "number"
-            ? x === 10 // number
-            : x; // x should be boolean
+            ? x === 10
+            : x;
     }
 }
 function foo11(x) {
-    // Mixing typeguard narrowing in if statement with conditional expression typeguard
-    // Assigning value to x deep inside another guard stops narrowing of type too
     if (typeof x === "string") {
-        return x; // string | number | boolean - x changed in else branch
+        return x;
     }
     else {
         var y;
-        var b = x; // number | boolean | string - because below we are changing value of x in if statement
+        var b = x;
         return typeof x === "number"
-            ? (
-            // change value of x
-            x = 10 && x.toString() // number | boolean | string
-            )
-            : (
-            // do not change value
-            y = x && x.toString() // number | boolean | string
-            );
+            ? (x = 10 && x.toString())
+            : (y = x && x.toString());
     }
 }
 function foo12(x) {
-    // Mixing typeguard narrowing in if statement with conditional expression typeguard
-    // Assigning value to x in outer guard shouldn't stop narrowing in the inner expression
     if (typeof x === "string") {
-        return x.toString(); // string | number | boolean - x changed in else branch
+        return x.toString();
     }
     else {
         x = 10;
-        var b = x; // number | boolean | string
+        var b = x;
         return typeof x === "number"
-            ? x.toString() // number
-            : x.toString(); // boolean | string
+            ? x.toString()
+            : x.toString();
     }
 }
