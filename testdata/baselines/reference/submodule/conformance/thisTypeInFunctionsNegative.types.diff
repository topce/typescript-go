--- old.thisTypeInFunctionsNegative.types
+++ new.thisTypeInFunctionsNegative.types
@@= skipped -125, +125 lines =@@
 }
 let impl: I = {
 >impl : I
->{    a: 12,    explicitVoid1() {        return this.a; // error, no 'a' in 'void'    },    explicitVoid2: () => this.a, // ok, `this:any` because it refers to an outer object    explicitStructural: () => 12,    explicitInterface: () => 12,    explicitThis() {        return this.a;    },} : { a: number; explicitVoid1(this: void): any; explicitVoid2: () => any; explicitStructural: () => number; explicitInterface: () => number; explicitThis(this: I): number; }
+>{    a: 12,    explicitVoid1() {        return this.a; // error, no 'a' in 'void'    },    explicitVoid2: () => this.a, // ok, `this:any` because it refers to an outer object    explicitStructural: () => 12,    explicitInterface: () => 12,    explicitThis() {        return this.a;    },} : { a: number; explicitVoid1: (this: void) => any; explicitVoid2: () => any; explicitStructural: () => number; explicitInterface: () => number; explicitThis: (this: I) => number; }
 
     a: 12,
 >a : number
@@= skipped -268, +268 lines =@@
 >explicitStructural : (this: { y: number; }, x: number) => number
 
 let reconstructed: { 
->reconstructed : { n: number; explicitThis(this: C, m: number): number; explicitC(this: C, m: number): number; explicitProperty: (this: { n: number; }, m: number) => number; explicitVoid(this: void, m: number): number; }
+>reconstructed : { n: number; explicitThis: (this: C, m: number) => number; explicitC: (this: C, m: number) => number; explicitProperty: (this: { n: number; }, m: number) => number; explicitVoid: (this: void, m: number) => number; }
 
     n: number,
 >n : number
@@= skipped -324, +324 lines =@@
 >n : number
 
 function restParam(...this: C): number { return this.n; }
->restParam : (...: any[], this: C) => number
+>restParam : (: any[], this: C) => number
 > : any[]
 >this : C
 >this.n : any
