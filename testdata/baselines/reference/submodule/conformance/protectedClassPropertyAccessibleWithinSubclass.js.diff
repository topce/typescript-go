--- old.protectedClassPropertyAccessibleWithinSubclass.js
+++ new.protectedClassPropertyAccessibleWithinSubclass.js
@@= skipped -22, +22 lines =@@
 
 //// [protectedClassPropertyAccessibleWithinSubclass.js]
 // no errors
-var __extends = (this && this.__extends) || (function () {
-    var extendStatics = function (d, b) {
-        extendStatics = Object.setPrototypeOf ||
-            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
-            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
-        return extendStatics(d, b);
-    };
-    return function (d, b) {
-        if (typeof b !== "function" && b !== null)
-            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
-        extendStatics(d, b);
-        function __() { this.constructor = d; }
-        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-    };
-})();
-var B = /** @class */ (function () {
-    function B() {
-    }
-    return B;
-}());
-var C = /** @class */ (function (_super) {
-    __extends(C, _super);
-    function C() {
-        return _super !== null && _super.apply(this, arguments) || this;
-    }
-    Object.defineProperty(C.prototype, "y", {
-        get: function () { return this.x; },
-        set: function (x) { this.y = this.x; },
-        enumerable: false,
-        configurable: true
-    });
-    C.prototype.foo = function () { return this.x; };
-    C.prototype.bar = function () { return this.foo(); };
-    Object.defineProperty(C, "y", {
-        get: function () { return this.x; },
-        set: function (x) { this.y = this.x; },
-        enumerable: false,
-        configurable: true
-    });
-    C.foo = function () { return this.x; };
-    C.bar = function () { this.foo(); };
-    return C;
-}(B));
+class B {
+    x;
+    static x;
+}
+class C extends B {
+    get y() { return this.x; }
+    set y(x) { this.y = this.x; }
+    foo() { return this.x; }
+    bar() { return this.foo(); }
+    static get y() { return this.x; }
+    static set y(x) { this.y = this.x; }
+    static foo() { return this.x; }
+    static bar() { this.foo(); }
+}
