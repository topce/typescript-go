--- old.assignmentCompatWithConstructSignatures4.js
+++ new.assignmentCompatWithConstructSignatures4.js
@@= skipped -100, +100 lines =@@
 }
 
 //// [assignmentCompatWithConstructSignatures4.js]
-// checking assignment compatibility relations for function types.
-var __extends = (this && this.__extends) || (function () {
-    var extendStatics = function (d, b) {
-        extendStatics = Object.setPrototypeOf ||
-            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
-            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
-        return extendStatics(d, b);
-    };
-    return function (d, b) {
-        if (typeof b !== "function" && b !== null)
-            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
-        extendStatics(d, b);
-        function __() { this.constructor = d; }
-        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-    };
-})();
 var Errors;
 (function (Errors) {
-    var Base = /** @class */ (function () {
-        function Base() {
-        }
-        return Base;
-    }());
-    var Derived = /** @class */ (function (_super) {
-        __extends(Derived, _super);
-        function Derived() {
-            return _super !== null && _super.apply(this, arguments) || this;
-        }
-        return Derived;
-    }(Base));
-    var Derived2 = /** @class */ (function (_super) {
-        __extends(Derived2, _super);
-        function Derived2() {
-            return _super !== null && _super.apply(this, arguments) || this;
-        }
-        return Derived2;
-    }(Derived));
-    var OtherDerived = /** @class */ (function (_super) {
-        __extends(OtherDerived, _super);
-        function OtherDerived() {
-            return _super !== null && _super.apply(this, arguments) || this;
-        }
-        return OtherDerived;
-    }(Base));
-    var WithNonGenericSignaturesInBaseType;
+    class Base {
+        foo;
+    }
+    class Derived extends Base {
+        bar;
+    }
+    class Derived2 extends Derived {
+        baz;
+    }
+    class OtherDerived extends Base {
+        bing;
+    }
+    let WithNonGenericSignaturesInBaseType;
     (function (WithNonGenericSignaturesInBaseType) {
-        // target type with non-generic call signatures
         var a2;
         var a7;
         var a8;
@@= skipped -58, +27 lines =@@
         var a16;
         var a17;
         var b2;
-        a2 = b2; // ok
-        b2 = a2; // ok
+        a2 = b2;
+        b2 = a2;
         var b7;
-        a7 = b7; // ok
-        b7 = a7; // ok
+        a7 = b7;
+        b7 = a7;
         var b8;
-        a8 = b8; // error, type mismatch
-        b8 = a8; // error
+        a8 = b8;
+        b8 = a8;
         var b10;
-        a10 = b10; // ok
-        b10 = a10; // ok
+        a10 = b10;
+        b10 = a10;
         var b11;
-        a11 = b11; // ok
-        b11 = a11; // ok
+        a11 = b11;
+        b11 = a11;
         var b12;
-        a12 = b12; // ok
-        b12 = a12; // ok
+        a12 = b12;
+        b12 = a12;
         var b15;
-        a15 = b15; // ok
-        b15 = a15; // ok
+        a15 = b15;
+        b15 = a15;
         var b15a;
-        a15 = b15a; // ok
-        b15a = a15; // ok
+        a15 = b15a;
+        b15a = a15;
         var b16;
-        a16 = b16; // error
-        b16 = a16; // error
+        a16 = b16;
+        b16 = a16;
         var b17;
-        a17 = b17; // error
-        b17 = a17; // error
+        a17 = b17;
+        b17 = a17;
     })(WithNonGenericSignaturesInBaseType || (WithNonGenericSignaturesInBaseType = {}));
-    var WithGenericSignaturesInBaseType;
+    let WithGenericSignaturesInBaseType;
     (function (WithGenericSignaturesInBaseType) {
-        // target type has generic call signature
         var a2;
         var b2;
-        a2 = b2; // ok
-        b2 = a2; // ok
-        // target type has generic call signature
+        a2 = b2;
+        b2 = a2;
         var a3;
         var b3;
-        a3 = b3; // ok
-        b3 = a3; // ok
+        a3 = b3;
+        b3 = a3;
     })(WithGenericSignaturesInBaseType || (WithGenericSignaturesInBaseType = {}));
 })(Errors || (Errors = {}));
