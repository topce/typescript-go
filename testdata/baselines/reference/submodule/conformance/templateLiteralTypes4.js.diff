--- old.templateLiteralTypes4.js
+++ new.templateLiteralTypes4.js
@@= skipped -306, +306 lines =@@
 
 
 //// [templateLiteralTypes4.js]
-"use strict";
+// infer from literal enums
+var StringLiteralEnum;
+(function (StringLiteralEnum) {
+    StringLiteralEnum["Zero"] = "0";
+    StringLiteralEnum["True"] = "true";
+    StringLiteralEnum["False"] = "false";
+    StringLiteralEnum["Undefined"] = "undefined";
+    StringLiteralEnum["Null"] = "null";
+})(StringLiteralEnum || (StringLiteralEnum = {}));
+var NumberLiteralEnum;
+(function (NumberLiteralEnum) {
+    NumberLiteralEnum[NumberLiteralEnum["Zero"] = 0] = "Zero";
+    NumberLiteralEnum[NumberLiteralEnum["One"] = 1] = "One";
+})(NumberLiteralEnum || (NumberLiteralEnum = {}));
+// infer from non-literal enums
+var NonLiteralEnum;
+(function (NonLiteralEnum) {
+    NonLiteralEnum["Zero"] = NumberLiteralEnum.Zero;
+    if (typeof NonLiteralEnum.Zero !== "string") NonLiteralEnum[NonLiteralEnum.Zero] = "Zero";
+    NonLiteralEnum["One"] = NumberLiteralEnum.One;
+    if (typeof NonLiteralEnum.One !== "string") NonLiteralEnum[NonLiteralEnum.One] = "One";
+})(NonLiteralEnum || (NonLiteralEnum = {}));
 p.getIndex(0); // ok, 0 is a valid index
 p.getIndex(1); // ok, 1 is a valid index
 p.getIndex(2); // error, 2 is not a valid index
@@= skipped -12, +33 lines =@@
 f3("**123**"); // 123n
 f4("**true**"); // true | "true"
 f4("**false**"); // false | "false"
-
-
-//// [templateLiteralTypes4.d.ts]
-type TNumber0 = "100" extends `${infer N extends number}` ? N : never;
-type TNumber1 = "-100" extends `${infer N extends number}` ? N : never;
-type TNumber2 = "1.1" extends `${infer N extends number}` ? N : never;
-type TNumber3 = "8e-11" extends `${infer N extends number}` ? N : never;
-type TNumber4 = "0x10" extends `${infer N extends number}` ? N : never;
-type TNumber5 = "0o10" extends `${infer N extends number}` ? N : never;
-type TNumber6 = "0b10" extends `${infer N extends number}` ? N : never;
-type TNumber7 = "10e2" extends `${infer N extends number}` ? N : never;
-type TNumber8 = "abcd" extends `${infer N extends number}` ? N : never;
-type TBigInt0 = "100" extends `${infer N extends bigint}` ? N : never;
-type TBigInt1 = "-100" extends `${infer N extends bigint}` ? N : never;
-type TBigInt2 = "0x10" extends `${infer N extends bigint}` ? N : never;
-type TBigInt3 = "0o10" extends `${infer N extends bigint}` ? N : never;
-type TBigInt4 = "0b10" extends `${infer N extends bigint}` ? N : never;
-type TBigInt5 = "1.1" extends `${infer N extends bigint}` ? N : never;
-type TBigInt6 = "10e2" extends `${infer N extends bigint}` ? N : never;
-type TBigInt7 = "abcd" extends `${infer N extends bigint}` ? N : never;
-type TBoolean0 = "true" extends `${infer T extends boolean}` ? T : never;
-type TBoolean1 = "false" extends `${infer T extends boolean}` ? T : never;
-type TBoolean2 = "abcd" extends `${infer T extends boolean}` ? T : never;
-type TNull0 = "null" extends `${infer T extends null}` ? T : never;
-type TNull1 = "abcd" extends `${infer T extends null}` ? T : never;
-type TUndefined0 = "undefined" extends `${infer T extends undefined}` ? T : never;
-type TUndefined1 = "abcd" extends `${infer T extends undefined}` ? T : never;
-declare const enum StringLiteralEnum {
-    Zero = "0",
-    True = "true",
-    False = "false",
-    Undefined = "undefined",
-    Null = "null"
-}
-type TStringLiteralEnum0 = "0" extends `${infer T extends StringLiteralEnum}` ? T : never;
-declare const enum NumberLiteralEnum {
-    Zero = 0,
-    One = 1
-}
-type TNumberLiteralEnum0 = "0" extends `${infer T extends NumberLiteralEnum}` ? T : never;
-declare const enum NonLiteralEnum {
-    Zero = 0,
-    One = 1
-}
-type TNonLiteralEnum0 = "0" extends `${infer T extends NonLiteralEnum}` ? T : never;
-type PString00 = "0" extends `${infer T extends string | StringLiteralEnum}` ? T : never;
-type PString01 = "0" extends `${infer T extends string | number}` ? T : never;
-type PString02 = "0" extends `${infer T extends string | NonLiteralEnum}` ? T : never;
-type PString03 = "0" extends `${infer T extends string | 0}` ? T : never;
-type PString04 = "0" extends `${infer T extends string | NumberLiteralEnum}` ? T : never;
-type PString05 = "0" extends `${infer T extends string | bigint}` ? T : never;
-type PString06 = "0" extends `${infer T extends string | 0n}` ? T : never;
-type PString07 = "true" extends `${infer T extends string | boolean}` ? T : never;
-type PString08 = "false" extends `${infer T extends string | boolean}` ? T : never;
-type PString09 = "true" extends `${infer T extends string | true}` ? T : never;
-type PString10 = "false" extends `${infer T extends string | false}` ? T : never;
-type PString11 = "undefined" extends `${infer T extends string | undefined}` ? T : never;
-type PString12 = "null" extends `${infer T extends string | null}` ? T : never;
-type PTemplate00 = "10" extends `${infer T extends `1${string}` | number}` ? T : never;
-type PTemplate01 = "10" extends `${infer T extends `1${string}` | NonLiteralEnum}` ? T : never;
-type PTemplate02 = "10" extends `${infer T extends `1${string}` | 10}` ? T : never;
-type PTemplate03 = "10" extends `${infer T extends `1${string}` | NumberLiteralEnum}` ? T : never;
-type PTemplate04 = "10" extends `${infer T extends `1${string}` | bigint}` ? T : never;
-type PTemplate05 = "10" extends `${infer T extends `1${string}` | 10n}` ? T : never;
-type PTemplate06 = "true" extends `${infer T extends `${string}e` | boolean}` ? T : never;
-type PTemplate07 = "false" extends `${infer T extends `${string}e` | boolean}` ? T : never;
-type PTemplate08 = "true" extends `${infer T extends `${"t"}${string}` | true}` ? T : never;
-type PTemplate09 = "false" extends `${infer T extends `${"f"}${string}` | false}` ? T : never;
-type PTemplate10 = "undefined" extends `${infer T extends `${"u"}${string}` | undefined}` ? T : never;
-type PTemplate11 = "null" extends `${infer T extends `${"n"}${string}` | null}` ? T : never;
-type PStringLiteral00 = "0" extends `${infer T extends "0" | number}` ? T : never;
-type PStringLiteral01 = "0" extends `${infer T extends "0" | NonLiteralEnum}` ? T : never;
-type PStringLiteral02 = "0" extends `${infer T extends "0" | 0}` ? T : never;
-type PStringLiteral03 = "0" extends `${infer T extends "0" | NumberLiteralEnum}` ? T : never;
-type PStringLiteral04 = "0" extends `${infer T extends "0" | bigint}` ? T : never;
-type PStringLiteral05 = "0" extends `${infer T extends "0" | 0n}` ? T : never;
-type PStringLiteral06 = "true" extends `${infer T extends "true" | "false" | boolean}` ? T : never;
-type PStringLiteral07 = "false" extends `${infer T extends "true" | "false" | boolean}` ? T : never;
-type PStringLiteral08 = "true" extends `${infer T extends "true" | true}` ? T : never;
-type PStringLiteral09 = "false" extends `${infer T extends "false" | false}` ? T : never;
-type PStringLiteral10 = "undefined" extends `${infer T extends "undefined" | undefined}` ? T : never;
-type PStringLiteral11 = "null" extends `${infer T extends "null" | null}` ? T : never;
-type PStringLiteralEnum00 = "0" extends `${infer T extends StringLiteralEnum | number}` ? T : never;
-type PStringLiteralEnum01 = "0" extends `${infer T extends StringLiteralEnum | NonLiteralEnum}` ? T : never;
-type PStringLiteralEnum02 = "0" extends `${infer T extends StringLiteralEnum | 0}` ? T : never;
-type PStringLiteralEnum03 = "0" extends `${infer T extends StringLiteralEnum | NumberLiteralEnum}` ? T : never;
-type PStringLiteralEnum04 = "0" extends `${infer T extends StringLiteralEnum | bigint}` ? T : never;
-type PStringLiteralEnum05 = "0" extends `${infer T extends StringLiteralEnum | 0n}` ? T : never;
-type PStringLiteralEnum06 = "true" extends `${infer T extends StringLiteralEnum | boolean}` ? T : never;
-type PStringLiteralEnum07 = "false" extends `${infer T extends StringLiteralEnum | boolean}` ? T : never;
-type PStringLiteralEnum08 = "true" extends `${infer T extends StringLiteralEnum | true}` ? T : never;
-type PStringLiteralEnum09 = "false" extends `${infer T extends StringLiteralEnum | false}` ? T : never;
-type PStringLiteralEnum10 = "undefined" extends `${infer T extends StringLiteralEnum | undefined}` ? T : never;
-type PStringLiteralEnum11 = "null" extends `${infer T extends StringLiteralEnum | null}` ? T : never;
-type PNumber0 = "0" extends `${infer T extends number | NonLiteralEnum}` ? T : never;
-type PNumber1 = "0" extends `${infer T extends number | NumberLiteralEnum}` ? T : never;
-type PNumber2 = "0" extends `${infer T extends number | bigint}` ? T : never;
-type PNumber3 = "0" extends `${infer T extends number | 0n}` ? T : never;
-type PEnum0 = "0" extends `${infer T extends NonLiteralEnum | NumberLiteralEnum}` ? T : never;
-type PEnum1 = "0" extends `${infer T extends NonLiteralEnum | bigint}` ? T : never;
-type PEnum2 = "0" extends `${infer T extends NonLiteralEnum | 0n}` ? T : never;
-type PNumberLiteral0 = "0" extends `${infer T extends 0 | bigint}` ? T : never;
-type PNumberLiteral1 = "0" extends `${infer T extends 0 | 0n}` ? T : never;
-type PNumberLiteralEnum0 = "0" extends `${infer T extends NumberLiteralEnum | bigint}` ? T : never;
-type PNumberLiteralEnum1 = "0" extends `${infer T extends NumberLiteralEnum | 0n}` ? T : never;
-type PExclude0 = "0" extends `${infer T extends "1" | number}` ? T : never;
-type PExclude1 = "0" extends `${infer T extends `1${string}` | number}` ? T : never;
-type PExclude2 = "0" extends `${infer T extends 1 | bigint}` ? T : never;
-type PExclude3 = "0" extends `${infer T extends NumberLiteralEnum.One | bigint}` ? T : never;
-type PExclude4 = "100000000000000000000000" extends `${infer T extends number | bigint}` ? T : never;
-type TPrefix0 = "100" extends `${infer T extends number}${string}` ? T : never;
-type TPrefix1 = "trueabc" extends `${infer T extends boolean}${string}` ? T : never;
-type TPrefix2 = `100:${string}` extends `${infer T extends number}:${string}` ? T : never;
-type ExtractPrimitives<T extends string> = T | (T extends `${infer U extends number}` ? U : never) | (T extends `${infer U extends bigint}` ? U : never) | (T extends `${infer U extends boolean | null | undefined}` ? U : never);
-type TExtract0 = ExtractPrimitives<"100">;
-type TExtract1 = ExtractPrimitives<"1.1">;
-type TExtract2 = ExtractPrimitives<"true">;
-type IndexFor<S extends string> = S extends `${infer N extends number}` ? N : never;
-type IndicesOf<T> = IndexFor<Extract<keyof T, string>>;
-interface FieldDefinition {
-    readonly name: string;
-    readonly type: "i8" | "i16" | "i32" | "i64" | "u8" | "u16" | "u32" | "u64" | "f32" | "f64";
-}
-type FieldType<T extends FieldDefinition["type"]> = T extends "i8" | "i16" | "i32" | "u8" | "u16" | "u32" | "f32" | "f64" ? number : T extends "f32" | "f64" ? bigint : never;
-type TypedObjectNamedMembers<TDef extends readonly FieldDefinition[]> = {
-    [P in TDef[number]["name"]]: FieldType<Extract<TDef[number], {
-        readonly name: P;
-    }>["type"]>;
-};
-type TypedObjectOrdinalMembers<TDef extends readonly FieldDefinition[]> = {
-    [I in Extract<keyof TDef, `${number}`>]: FieldType<Extract<TDef[I], FieldDefinition>["type"]>;
-};
-interface TypedObjectMembers<TDef extends readonly FieldDefinition[]> {
-    get<K extends TDef[number]["name"]>(key: K): FieldType<Extract<TDef[number], {
-        readonly name: K;
-    }>["type"]>;
-    set<K extends TDef[number]["name"]>(key: K, value: FieldType<Extract<TDef[number], {
-        readonly name: K;
-    }>["type"]>): void;
-    getIndex<I extends IndicesOf<TDef>>(index: I): FieldType<Extract<TDef[I], FieldDefinition>["type"]>;
-    setIndex<I extends IndicesOf<TDef>>(index: I, value: FieldType<Extract<TDef[I], FieldDefinition>["type"]>): void;
-}
-type TypedObject<TDef extends readonly FieldDefinition[]> = TypedObjectMembers<TDef> & TypedObjectNamedMembers<TDef> & TypedObjectOrdinalMembers<TDef>;
-type Point = TypedObject<[
-    {
-        name: "x";
-        type: "f64";
-    },
-    {
-        name: "y";
-        type: "f64";
-    }
-]>;
-declare const p: Point;
-declare function f1<T extends string | number>(s: `**${T}**`): T;
-declare function f2<T extends number>(s: `**${T}**`): T;
-declare function f3<T extends bigint>(s: `**${T}**`): T;
-declare function f4<T extends boolean>(s: `**${T}**`): T;
