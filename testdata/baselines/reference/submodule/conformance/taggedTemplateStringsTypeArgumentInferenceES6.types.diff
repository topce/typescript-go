--- old.taggedTemplateStringsTypeArgumentInferenceES6.types
+++ new.taggedTemplateStringsTypeArgumentInferenceES6.types
@@= skipped -321, +321 lines =@@
 }
 
 var a9e = someGenerics9 `${ undefined }${ { x: 6, z: new Date() } }${ { x: 6, y: '' } }`;
->a9e : { x: number; z: Date; y?: undefined; } | { x: number; y: string; z?: undefined; }
->someGenerics9 `${ undefined }${ { x: 6, z: new Date() } }${ { x: 6, y: '' } }` : { x: number; z: Date; y?: undefined; } | { x: number; y: string; z?: undefined; }
+>a9e : { x: number; z: Date; y?: undefined; } | { z?: undefined; x: number; y: string; }
+>someGenerics9 `${ undefined }${ { x: 6, z: new Date() } }${ { x: 6, y: '' } }` : { x: number; z: Date; y?: undefined; } | { z?: undefined; x: number; y: string; }
 >someGenerics9 : <T>(strs: TemplateStringsArray, a: T, b: T, c: T) => T
 >`${ undefined }${ { x: 6, z: new Date() } }${ { x: 6, y: '' } }` : string
 >undefined : undefined
@@= skipped -18, +18 lines =@@
 >'' : ""
 
 var a9e: {};
->a9e : { x: number; z: Date; y?: undefined; } | { x: number; y: string; z?: undefined; }
+>a9e : { x: number; z: Date; y?: undefined; } | { z?: undefined; x: number; y: string; }
 
 // Generic tag with multiple parameters of generic type passed arguments with a single best common type
 var a9d = someGenerics9 `${ { x: 3 }}${ { x: 6 }}${ { x: 6 } }`;
