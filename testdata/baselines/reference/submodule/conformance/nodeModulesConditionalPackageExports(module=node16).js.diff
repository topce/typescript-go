--- old.nodeModulesConditionalPackageExports(module=node16).js
+++ new.nodeModulesConditionalPackageExports(module=node16).js
@@= skipped -122, +122 lines =@@
 }
 
 //// [index.mjs]
-// esm format file
 import * as cjs from "package/cjs";
 import * as mjs from "package/mjs";
 import * as type from "package";
@@= skipped -16, +15 lines =@@
 typei.mjsSource;
 ts.mjsSource;
 //// [index.cjs]
-"use strict";
-var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
-    if (k2 === undefined) k2 = k;
-    var desc = Object.getOwnPropertyDescriptor(m, k);
-    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
-      desc = { enumerable: true, get: function() { return m[k]; } };
-    }
-    Object.defineProperty(o, k2, desc);
-}) : (function(o, m, k, k2) {
-    if (k2 === undefined) k2 = k;
-    o[k2] = m[k];
-}));
-var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
-    Object.defineProperty(o, "default", { enumerable: true, value: v });
-}) : function(o, v) {
-    o["default"] = v;
-});
-var __importStar = (this && this.__importStar) || function (mod) {
-    if (mod && mod.__esModule) return mod;
-    var result = {};
-    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
-    __setModuleDefault(result, mod);
-    return result;
-};
-Object.defineProperty(exports, "__esModule", { value: true });
-// cjs format file
-const cjs = __importStar(require("package/cjs"));
-const mjs = __importStar(require("package/mjs"));
-const type = __importStar(require("package"));
+import * as cjs from "package/cjs";
+import * as mjs from "package/mjs";
+import * as type from "package";
 cjs;
 mjs;
 type;
-const cjsi = __importStar(require("inner/a"));
-const mjsi = __importStar(require("inner/b"));
-const typei = __importStar(require("inner"));
-const ts = __importStar(require("inner/types"));
+import * as cjsi from "inner/a";
+import * as mjsi from "inner/b";
+import * as typei from "inner";
+import * as ts from "inner/types";
 cjsi.cjsSource;
 mjsi.cjsSource;
 typei.implicitCjsSource;
 ts.cjsSource;
 //// [index.js]
-// esm format file
 import * as cjs from "package/cjs";
 import * as mjs from "package/mjs";
 import * as type from "package";
@@= skipped -56, +29 lines =@@
 mjsi.mjsSource;
 typei.mjsSource;
 ts.mjsSource;
-
-
-//// [index.d.mts]
-export {};
-//// [index.d.cts]
-export {};
-//// [index.d.ts]
-export {};
