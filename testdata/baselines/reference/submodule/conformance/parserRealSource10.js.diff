--- old.parserRealSource10.js
+++ new.parserRealSource10.js
@@= skipped -456, +456 lines =@@
     }
 }
 
+//// [typescript.js]
 //// [parserRealSource10.js]
 // Copyright (c) Microsoft. All rights reserved. Licensed under the Apache License, Version 2.0. 
 // See LICENSE.txt in the project root for complete license information.
-var __extends = (this && this.__extends) || (function () {
-    var extendStatics = function (d, b) {
-        extendStatics = Object.setPrototypeOf ||
-            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
-            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
-        return extendStatics(d, b);
-    };
-    return function (d, b) {
-        if (typeof b !== "function" && b !== null)
-            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
-        extendStatics(d, b);
-        function __() { this.constructor = d; }
-        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-    };
-})();
 ///<reference path='typescript.ts' />
 var TypeScript;
 (function (TypeScript) {
-    var TokenID;
+    let TokenID;
     (function (TokenID) {
         // Keywords
         TokenID[TokenID["Any"] = 0] = "Any";
@@= skipped -157, +143 lines =@@
     TypeScript.noRegexTable[TokenID.CloseBrace] = true;
     TypeScript.noRegexTable[TokenID.True] = true;
     TypeScript.noRegexTable[TokenID.False] = true;
-    var OperatorPrecedence;
+    let OperatorPrecedence;
     (function (OperatorPrecedence) {
         OperatorPrecedence[OperatorPrecedence["None"] = 0] = "None";
         OperatorPrecedence[OperatorPrecedence["Comma"] = 1] = "Comma";
@@= skipped -19, +19 lines =@@
         OperatorPrecedence[OperatorPrecedence["Unary"] = 14] = "Unary";
         OperatorPrecedence[OperatorPrecedence["Lim"] = 15] = "Lim";
     })(OperatorPrecedence = TypeScript.OperatorPrecedence || (TypeScript.OperatorPrecedence = {}));
-    var Reservation;
+    let Reservation;
     (function (Reservation) {
         Reservation[Reservation["None"] = 0] = "None";
         Reservation[Reservation["Javascript"] = 1] = "Javascript";
@@= skipped -11, +11 lines =@@
         Reservation[Reservation["TypeScriptAndJSFuture"] = 6] = "TypeScriptAndJSFuture";
         Reservation[Reservation["TypeScriptAndJSFutureStrict"] = 12] = "TypeScriptAndJSFutureStrict";
     })(Reservation = TypeScript.Reservation || (TypeScript.Reservation = {}));
-    var TokenInfo = /** @class */ (function () {
-        function TokenInfo(tokenId, reservation, binopPrecedence, binopNodeType, unopPrecedence, unopNodeType, text, ers) {
+    class TokenInfo {
+        tokenId;
+        reservation;
+        binopPrecedence;
+        binopNodeType;
+        unopPrecedence;
+        unopNodeType;
+        text;
+        ers;
+        constructor(tokenId, reservation, binopPrecedence, binopNodeType, unopPrecedence, unopNodeType, text, ers) {
             this.tokenId = tokenId;
             this.reservation = reservation;
             this.binopPrecedence = binopPrecedence;
@@= skipped -11, +19 lines =@@
             this.text = text;
             this.ers = ers;
         }
-        return TokenInfo;
-    }());
+    }
     TypeScript.TokenInfo = TokenInfo;
     function setTokenInfo(tokenId, reservation, binopPrecedence, binopNodeType, unopPrecedence, unopNodeType, text, ers) {
         if (tokenId !== undefined) {
@@= skipped -130, +129 lines =@@
         return TypeScript.tokenTable[tokenId];
     }
     TypeScript.lookupToken = lookupToken;
-    var TokenClass;
+    let TokenClass;
     (function (TokenClass) {
         TokenClass[TokenClass["Punctuation"] = 0] = "Punctuation";
         TokenClass[TokenClass["Keyword"] = 1] = "Keyword";
@@= skipped -10, +10 lines =@@
         TokenClass[TokenClass["Identifier"] = 5] = "Identifier";
         TokenClass[TokenClass["Literal"] = 6] = "Literal";
     })(TokenClass = TypeScript.TokenClass || (TypeScript.TokenClass = {}));
-    var SavedToken = /** @class */ (function () {
-        function SavedToken(tok, minChar, limChar) {
+    class SavedToken {
+        tok;
+        minChar;
+        limChar;
+        constructor(tok, minChar, limChar) {
             this.tok = tok;
             this.minChar = minChar;
             this.limChar = limChar;
         }
-        return SavedToken;
-    }());
+    }
     TypeScript.SavedToken = SavedToken;
-    var Token = /** @class */ (function () {
-        function Token(tokenId) {
+    class Token {
+        tokenId;
+        constructor(tokenId) {
             this.tokenId = tokenId;
         }
-        Token.prototype.toString = function () {
+        toString() {
             return "token: " + this.tokenId + " " + this.getText() + " (" + TokenID._map[this.tokenId] + ")";
-        };
-        Token.prototype.print = function (line, outfile) {
+        }
+        print(line, outfile) {
             outfile.WriteLine(this.toString() + ",on line" + line);
-        };
-        Token.prototype.getText = function () {
+        }
+        getText() {
             return TypeScript.tokenTable[this.tokenId].text;
-        };
-        Token.prototype.classification = function () {
+        }
+        classification() {
             if (this.tokenId <= TokenID.LimKeyword) {
                 return TokenClass.Keyword;
             }
@@= skipped -36, +39 lines =@@
                 }
             }
             return TokenClass.Punctuation;
-        };
-        return Token;
-    }());
+        }
+    }
     TypeScript.Token = Token;
-    var NumberLiteralToken = /** @class */ (function (_super) {
-        __extends(NumberLiteralToken, _super);
-        function NumberLiteralToken(value, hasEmptyFraction) {
-            var _this = _super.call(this, TokenID.NumberLiteral) || this;
-            _this.value = value;
-            _this.hasEmptyFraction = hasEmptyFraction;
-            return _this;
+    class NumberLiteralToken extends Token {
+        value;
+        hasEmptyFraction;
+        constructor(value, hasEmptyFraction) {
+            super(TokenID.NumberLiteral);
+            this.value = value;
+            this.hasEmptyFraction = hasEmptyFraction;
         }
-        NumberLiteralToken.prototype.getText = function () {
+        getText() {
             return this.hasEmptyFraction ? this.value.toString() + ".0" : this.value.toString();
-        };
-        NumberLiteralToken.prototype.classification = function () {
+        }
+        classification() {
             return TokenClass.Literal;
-        };
-        return NumberLiteralToken;
-    }(Token));
+        }
+    }
     TypeScript.NumberLiteralToken = NumberLiteralToken;
-    var StringLiteralToken = /** @class */ (function (_super) {
-        __extends(StringLiteralToken, _super);
-        function StringLiteralToken(value) {
-            var _this = _super.call(this, TokenID.StringLiteral) || this;
-            _this.value = value;
-            return _this;
+    class StringLiteralToken extends Token {
+        value;
+        constructor(value) {
+            super(TokenID.StringLiteral);
+            this.value = value;
         }
-        StringLiteralToken.prototype.getText = function () {
+        getText() {
             return this.value;
-        };
-        StringLiteralToken.prototype.classification = function () {
+        }
+        classification() {
             return TokenClass.Literal;
-        };
-        return StringLiteralToken;
-    }(Token));
+        }
+    }
     TypeScript.StringLiteralToken = StringLiteralToken;
-    var IdentifierToken = /** @class */ (function (_super) {
-        __extends(IdentifierToken, _super);
-        function IdentifierToken(value, hasEscapeSequence) {
-            var _this = _super.call(this, TokenID.Identifier) || this;
-            _this.value = value;
-            _this.hasEscapeSequence = hasEscapeSequence;
-            return _this;
+    class IdentifierToken extends Token {
+        value;
+        hasEscapeSequence;
+        constructor(value, hasEscapeSequence) {
+            super(TokenID.Identifier);
+            this.value = value;
+            this.hasEscapeSequence = hasEscapeSequence;
         }
-        IdentifierToken.prototype.getText = function () {
+        getText() {
             return this.value;
-        };
-        IdentifierToken.prototype.classification = function () {
+        }
+        classification() {
             return TokenClass.Identifier;
-        };
-        return IdentifierToken;
-    }(Token));
+        }
+    }
     TypeScript.IdentifierToken = IdentifierToken;
-    var WhitespaceToken = /** @class */ (function (_super) {
-        __extends(WhitespaceToken, _super);
-        function WhitespaceToken(tokenId, value) {
-            var _this = _super.call(this, tokenId) || this;
-            _this.value = value;
-            return _this;
+    class WhitespaceToken extends Token {
+        value;
+        constructor(tokenId, value) {
+            super(tokenId);
+            this.value = value;
         }
-        WhitespaceToken.prototype.getText = function () {
+        getText() {
             return this.value;
-        };
-        WhitespaceToken.prototype.classification = function () {
+        }
+        classification() {
             return TokenClass.Whitespace;
-        };
-        return WhitespaceToken;
-    }(Token));
+        }
+    }
     TypeScript.WhitespaceToken = WhitespaceToken;
-    var CommentToken = /** @class */ (function (_super) {
-        __extends(CommentToken, _super);
-        function CommentToken(tokenID, value, isBlock, startPos, line, endsLine) {
-            var _this = _super.call(this, tokenID) || this;
-            _this.value = value;
-            _this.isBlock = isBlock;
-            _this.startPos = startPos;
-            _this.line = line;
-            _this.endsLine = endsLine;
-            return _this;
+    class CommentToken extends Token {
+        value;
+        isBlock;
+        startPos;
+        line;
+        endsLine;
+        constructor(tokenID, value, isBlock, startPos, line, endsLine) {
+            super(tokenID);
+            this.value = value;
+            this.isBlock = isBlock;
+            this.startPos = startPos;
+            this.line = line;
+            this.endsLine = endsLine;
         }
-        CommentToken.prototype.getText = function () {
+        getText() {
             return this.value;
-        };
-        CommentToken.prototype.classification = function () {
+        }
+        classification() {
             return TokenClass.Comment;
-        };
-        return CommentToken;
-    }(Token));
+        }
+    }
     TypeScript.CommentToken = CommentToken;
-    var RegularExpressionLiteralToken = /** @class */ (function (_super) {
-        __extends(RegularExpressionLiteralToken, _super);
-        function RegularExpressionLiteralToken(regex) {
-            var _this = _super.call(this, TokenID.RegularExpressionLiteral) || this;
-            _this.regex = regex;
-            return _this;
+    class RegularExpressionLiteralToken extends Token {
+        regex;
+        constructor(regex) {
+            super(TokenID.RegularExpressionLiteral);
+            this.regex = regex;
         }
-        RegularExpressionLiteralToken.prototype.getText = function () {
+        getText() {
             return this.regex.toString();
-        };
-        RegularExpressionLiteralToken.prototype.classification = function () {
+        }
+        classification() {
             return TokenClass.Literal;
-        };
-        return RegularExpressionLiteralToken;
-    }(Token));
+        }
+    }
     TypeScript.RegularExpressionLiteralToken = RegularExpressionLiteralToken;
     // TODO: new with length TokenID.LimFixed
     TypeScript.staticTokens = new Token[];
