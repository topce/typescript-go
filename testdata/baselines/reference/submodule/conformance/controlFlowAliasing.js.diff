--- old.controlFlowAliasing.js
+++ new.controlFlowAliasing.js
@@= skipped -303, +303 lines =@@
 }
 
 //// [controlFlowAliasing.js]
-"use strict";
-// Narrowing by aliased conditional expressions
 function f10(x) {
-    var isString = typeof x === "string";
+    const isString = typeof x === "string";
     if (isString) {
-        var t = x;
+        let t = x;
     }
     else {
-        var t = x;
+        let t = x;
     }
 }
 function f11(x) {
-    var isString = typeof x === "string";
+    const isString = typeof x === "string";
     if (isString) {
-        var t = x;
+        let t = x;
     }
 }
 function f12(x) {
-    var isString = typeof x === "string";
-    var isNumber = typeof x === "number";
+    const isString = typeof x === "string";
+    const isNumber = typeof x === "number";
     if (isString || isNumber) {
-        var t = x;
+        let t = x;
     }
     else {
-        var t = x;
+        let t = x;
     }
 }
 function f13(x) {
-    var isString = typeof x === "string";
-    var isNumber = typeof x === "number";
-    var isStringOrNumber = isString || isNumber;
+    const isString = typeof x === "string";
+    const isNumber = typeof x === "number";
+    const isStringOrNumber = isString || isNumber;
     if (isStringOrNumber) {
-        var t = x;
+        let t = x;
     }
     else {
-        var t = x;
+        let t = x;
     }
 }
 function f14(x) {
-    var notUndefined = x !== undefined;
+    const notUndefined = x !== undefined;
     return notUndefined ? x : 0;
 }
 function f15(obj) {
-    var isString = typeof obj.x === 'string';
+    const isString = typeof obj.x === 'string';
     if (isString) {
-        var s = obj.x;
+        let s = obj.x;
     }
 }
 function f16(obj) {
-    var isString = typeof obj.x === 'string';
+    const isString = typeof obj.x === 'string';
     obj = { x: 42 };
     if (isString) {
-        var s = obj.x; // Not narrowed because of is assigned in function body
+        let s = obj.x;
     }
 }
 function f17(obj) {
-    var isString = typeof obj[0] === 'string';
+    const isString = typeof obj[0] === 'string';
     if (isString) {
-        var s = obj[0];
+        let s = obj[0];
     }
 }
 function f18(obj) {
-    var isString = typeof obj[0] === 'string';
+    const isString = typeof obj[0] === 'string';
     obj = [42];
     if (isString) {
-        var s = obj[0]; // Not narrowed because of is assigned in function body
+        let s = obj[0];
     }
 }
 function f20(obj) {
-    var isFoo = obj.kind === 'foo';
+    const isFoo = obj.kind === 'foo';
     if (isFoo) {
         obj.foo;
     }
@@= skipped -78, +76 lines =@@
     }
 }
 function f21(obj) {
-    var isFoo = obj.kind === 'foo';
+    const isFoo = obj.kind === 'foo';
     if (isFoo) {
-        obj.foo; // Not narrowed because isFoo has type annotation
+        obj.foo;
     }
     else {
-        obj.bar; // Not narrowed because isFoo has type annotation
+        obj.bar;
     }
 }
 function f22(obj) {
-    var isFoo = obj.kind === 'foo';
+    let isFoo = obj.kind === 'foo';
     if (isFoo) {
-        obj.foo; // Not narrowed because isFoo is mutable
+        obj.foo;
     }
     else {
-        obj.bar; // Not narrowed because isFoo is mutable
+        obj.bar;
     }
 }
 function f23(obj) {
-    var isFoo = obj.kind === 'foo';
+    const isFoo = obj.kind === 'foo';
     obj = obj;
     if (isFoo) {
-        obj.foo; // Not narrowed because obj is assigned in function body
+        obj.foo;
     }
     else {
-        obj.bar; // Not narrowed because obj is assigned in function body
+        obj.bar;
     }
 }
 function f24(arg) {
-    var obj = arg;
-    var isFoo = obj.kind === 'foo';
+    const obj = arg;
+    const isFoo = obj.kind === 'foo';
     if (isFoo) {
         obj.foo;
     }
@@= skipped -38, +38 lines =@@
     }
 }
 function f25(arg) {
-    var obj = arg;
-    var isFoo = obj.kind === 'foo';
+    let obj = arg;
+    const isFoo = obj.kind === 'foo';
     if (isFoo) {
         obj.foo;
     }
@@= skipped -10, +10 lines =@@
     }
 }
 function f26(outer) {
-    var isFoo = outer.obj.kind === 'foo';
+    const isFoo = outer.obj.kind === 'foo';
     if (isFoo) {
         outer.obj.foo;
     }
@@= skipped -9, +9 lines =@@
     }
 }
 function f27(outer) {
-    var isFoo = outer.obj.kind === 'foo';
+    const isFoo = outer.obj.kind === 'foo';
     if (isFoo) {
-        outer.obj.foo; // Not narrowed because obj is mutable
+        outer.obj.foo;
     }
     else {
-        outer.obj.bar; // Not narrowed because obj is mutable
+        outer.obj.bar;
     }
 }
 function f28(obj) {
-    var isFoo = obj && obj.kind === 'foo';
-    var isBar = obj && obj.kind === 'bar';
+    const isFoo = obj && obj.kind === 'foo';
+    const isBar = obj && obj.kind === 'bar';
     if (isFoo) {
         obj.foo;
     }
@@= skipped -18, +18 lines =@@
         obj.bar;
     }
 }
-// Narrowing by aliased discriminant property access
 function f30(obj) {
-    var kind = obj.kind;
+    const kind = obj.kind;
     if (kind === 'foo') {
         obj.foo;
     }
@@= skipped -11, +10 lines =@@
     }
 }
 function f31(obj) {
-    var kind = obj.kind;
+    const { kind } = obj;
     if (kind === 'foo') {
         obj.foo;
     }
@@= skipped -9, +9 lines =@@
     }
 }
 function f32(obj) {
-    var k = obj.kind;
+    const { kind: k } = obj;
     if (k === 'foo') {
         obj.foo;
     }
@@= skipped -9, +9 lines =@@
     }
 }
 function f33(obj) {
-    var kind = obj.kind;
+    const { kind } = obj;
     switch (kind) {
         case 'foo':
             obj.foo;
@@= skipped -10, +10 lines =@@
             break;
     }
 }
-var C10 = /** @class */ (function () {
-    function C10(x) {
+class C10 {
+    x;
+    constructor(x) {
         this.x = x;
-        var thisX_isString = typeof this.x === 'string';
-        var xIsString = typeof x === 'string';
+        const thisX_isString = typeof this.x === 'string';
+        const xIsString = typeof x === 'string';
         if (thisX_isString && xIsString) {
-            var s = void 0;
+            let s;
             s = this.x;
             s = x;
         }
     }
-    return C10;
-}());
-var C11 = /** @class */ (function () {
-    function C11(x) {
+}
+class C11 {
+    x;
+    constructor(x) {
         this.x = x;
-        var thisX_isString = typeof this.x === 'string';
-        var xIsString = typeof x === 'string';
+        const thisX_isString = typeof this.x === 'string';
+        const xIsString = typeof x === 'string';
         if (thisX_isString && xIsString) {
-            // Some narrowings may be invalidated due to later assignments.
-            var s = void 0;
+            let s;
             s = this.x;
             s = x;
         }
@@= skipped -29, +29 lines =@@
             x = 10;
         }
     }
-    return C11;
-}());
-// Mixing of aliased discriminants and conditionals
+}
 function f40(obj) {
-    var kind = obj.kind;
-    var isFoo = kind == 'foo';
+    const { kind } = obj;
+    const isFoo = kind == 'foo';
     if (isFoo && obj.foo) {
-        var t = obj.foo;
+        let t = obj.foo;
     }
 }
 function gg2(obj) {
     if (obj.kind === 'str') {
-        var t = obj.payload;
+        let t = obj.payload;
     }
     else {
-        var t = obj.payload;
+        let t = obj.payload;
     }
 }
-function foo(_a) {
-    var kind = _a.kind, payload = _a.payload;
+function foo({ kind, payload }) {
     if (kind === 'str') {
-        var t = payload;
+        let t = payload;
     }
     else {
-        var t = payload;
+        let t = payload;
     }
 }
-// Repro from #45830
-var obj = {
-    fn: function () { return true; }
+const obj = {
+    fn: () => true
 };
 if (a) { }
-var a = obj.fn();
-// repro from https://github.com/microsoft/TypeScript/issues/53267
-var Utils = /** @class */ (function () {
-    function Utils() {
-    }
-    Utils.isDefined = function (value) {
+const a = obj.fn();
+class Utils {
+    static isDefined(value) {
         return value != null;
-    };
-    return Utils;
-}());
-var A53267 = /** @class */ (function () {
-    function A53267() {
     }
-    A53267.prototype.foo = function () {
-        var isNumber = Utils.isDefined(this.testNumber);
+}
+class A53267 {
+    testNumber;
+    foo() {
+        const isNumber = Utils.isDefined(this.testNumber);
         if (isNumber) {
-            var x = this.testNumber;
+            const x = this.testNumber;
         }
-    };
-    return A53267;
-}());
-
-
-//// [controlFlowAliasing.d.ts]
-declare function f10(x: string | number): void;
-declare function f11(x: unknown): void;
-declare function f12(x: string | number | boolean): void;
-declare function f13(x: string | number | boolean): void;
-declare function f14(x: number | null | undefined): number | null;
-declare function f15(obj: {
-    readonly x: string | number;
-}): void;
-declare function f16(obj: {
-    readonly x: string | number;
-}): void;
-declare function f17(obj: readonly [string | number]): void;
-declare function f18(obj: readonly [string | number]): void;
-declare function f20(obj: {
-    kind: 'foo';
-    foo: string;
-} | {
-    kind: 'bar';
-    bar: number;
-}): void;
-declare function f21(obj: {
-    kind: 'foo';
-    foo: string;
-} | {
-    kind: 'bar';
-    bar: number;
-}): void;
-declare function f22(obj: {
-    kind: 'foo';
-    foo: string;
-} | {
-    kind: 'bar';
-    bar: number;
-}): void;
-declare function f23(obj: {
-    kind: 'foo';
-    foo: string;
-} | {
-    kind: 'bar';
-    bar: number;
-}): void;
-declare function f24(arg: {
-    kind: 'foo';
-    foo: string;
-} | {
-    kind: 'bar';
-    bar: number;
-}): void;
-declare function f25(arg: {
-    kind: 'foo';
-    foo: string;
-} | {
-    kind: 'bar';
-    bar: number;
-}): void;
-declare function f26(outer: {
-    readonly obj: {
-        kind: 'foo';
-        foo: string;
-    } | {
-        kind: 'bar';
-        bar: number;
-    };
-}): void;
-declare function f27(outer: {
-    obj: {
-        kind: 'foo';
-        foo: string;
-    } | {
-        kind: 'bar';
-        bar: number;
-    };
-}): void;
-declare function f28(obj?: {
-    kind: 'foo';
-    foo: string;
-} | {
-    kind: 'bar';
-    bar: number;
-}): void;
-declare function f30(obj: {
-    kind: 'foo';
-    foo: string;
-} | {
-    kind: 'bar';
-    bar: number;
-}): void;
-declare function f31(obj: {
-    kind: 'foo';
-    foo: string;
-} | {
-    kind: 'bar';
-    bar: number;
-}): void;
-declare function f32(obj: {
-    kind: 'foo';
-    foo: string;
-} | {
-    kind: 'bar';
-    bar: number;
-}): void;
-declare function f33(obj: {
-    kind: 'foo';
-    foo: string;
-} | {
-    kind: 'bar';
-    bar: number;
-}): void;
-declare class C10 {
-    readonly x: string | number;
-    constructor(x: string | number);
+    }
 }
-declare class C11 {
-    readonly x: string | number;
-    constructor(x: string | number);
-}
-declare function f40(obj: {
-    kind: 'foo';
-    foo?: string;
-} | {
-    kind: 'bar';
-    bar?: number;
-}): void;
-type Data = {
-    kind: 'str';
-    payload: string;
-} | {
-    kind: 'num';
-    payload: number;
-};
-declare function gg2(obj: Data): void;
-declare function foo({ kind, payload }: Data): void;
-declare const obj: {
-    fn: () => boolean;
-};
-declare const a: boolean;
-declare class Utils {
-    static isDefined<T>(value: T): value is NonNullable<T>;
-}
-declare class A53267 {
-    readonly testNumber: number | undefined;
-    foo(): void;
-}
