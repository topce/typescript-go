--- old.asyncMethodWithSuper_es5.js
+++ new.asyncMethodWithSuper_es5.js
@@= skipped -57, +57 lines =@@
 
 
 //// [asyncMethodWithSuper_es5.js]
-var A = /** @class */ (function () {
-    function A() {
+class A {
+    x() {
     }
-    A.prototype.x = function () {
-    };
-    A.prototype.y = function () {
-    };
-    return A;
-}());
-var B = /** @class */ (function (_super) {
-    __extends(B, _super);
-    function B() {
-        return _super !== null && _super.apply(this, arguments) || this;
+    y() {
     }
-    // async method with only call/get on 'super' does not require a binding
-    B.prototype.simple = function () {
-        return __awaiter(this, void 0, void 0, function () {
-            var a, b;
-            return __generator(this, function (_a) {
-                // call with property access
-                _super.prototype.x.call(this);
-                // call additional property.
-                _super.prototype.y.call(this);
-                // call with element access
-                _super.prototype["x"].call(this);
-                a = _super.prototype.x;
-                b = _super.prototype["x"];
-                return [2 /*return*/];
-            });
-        });
-    };
-    // async method with assignment/destructuring on 'super' requires a binding
-    B.prototype.advanced = function () {
-        return __awaiter(this, void 0, void 0, function () {
-            var f, a, b;
-            return __generator(this, function (_a) {
-                f = function () { };
-                // call with property access
-                _super.prototype.x.call(this);
-                // call with element access
-                _super.prototype["x"].call(this);
-                a = _super.prototype.x;
-                b = _super.prototype["x"];
-                // property access (assign)
-                _super.prototype.x = f;
-                // element access (assign)
-                _super.prototype["x"] = f;
-                // destructuring assign with property access
-                (_super.prototype.x = { f: f }.f);
-                // destructuring assign with element access
-                (_super.prototype["x"] = { f: f }.f);
-                return [2 /*return*/];
-            });
-        });
-    };
-    return B;
-}(A));
+}
+class B extends A {
+    async simple() {
+        super.x();
+        super.y();
+        super["x"]();
+        const a = super.x;
+        const b = super["x"];
+    }
+    async advanced() {
+        const f = () => { };
+        super.x();
+        super["x"]();
+        const a = super.x;
+        const b = super["x"];
+        super.x = f;
+        super["x"] = f;
+        ({ f: super.x } = { f });
+        ({ f: super["x"] } = { f });
+    }
+}
