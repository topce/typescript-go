//// [tests/cases/conformance/jsdoc/declarations/jsDeclarationsFunctionLikeClasses2.ts] ////

=== source.js ===
/**
 * @param {number} len
 */
export function Vec(len) {
>Vec : { (len: any): void; prototype: { dot: (other: any) => number; magnitude: () => number; }; }
>len : any

    /**
     * @type {number[]}
     */
    this.storage = new Array(len);
>this.storage = new Array(len) : any[]
>this.storage : any
>this : any
>storage : any
>new Array(len) : any[]
>Array : ArrayConstructor
>len : any
}

Vec.prototype = {
>Vec.prototype = {    /**     * @param {Vec} other     */    dot(other) {        if (other.storage.length !== this.storage.length) {            throw new Error(`Dot product only applicable for vectors of equal length`);        }        let sum = 0;        for (let i = 0; i < this.storage.length; i++) {            sum += (this.storage[i] * other.storage[i]);        }        return sum;    },    magnitude() {        let sum = 0;        for (let i = 0; i < this.storage.length; i++) {            sum += (this.storage[i] ** 2);        }        return Math.sqrt(sum);    }} : { dot: (other: any) => number; magnitude: () => number; }
>Vec.prototype : { dot: (other: any) => number; magnitude: () => number; }
>Vec : { (len: any): void; prototype: { dot: (other: any) => number; magnitude: () => number; }; }
>prototype : { dot: (other: any) => number; magnitude: () => number; }
>{    /**     * @param {Vec} other     */    dot(other) {        if (other.storage.length !== this.storage.length) {            throw new Error(`Dot product only applicable for vectors of equal length`);        }        let sum = 0;        for (let i = 0; i < this.storage.length; i++) {            sum += (this.storage[i] * other.storage[i]);        }        return sum;    },    magnitude() {        let sum = 0;        for (let i = 0; i < this.storage.length; i++) {            sum += (this.storage[i] ** 2);        }        return Math.sqrt(sum);    }} : { dot: (other: any) => number; magnitude: () => number; }

    /**
     * @param {Vec} other
     */
    dot(other) {
>dot : (other: any) => number
>other : any

        if (other.storage.length !== this.storage.length) {
>other.storage.length !== this.storage.length : boolean
>other.storage.length : any
>other.storage : any
>other : any
>storage : any
>length : any
>this.storage.length : any
>this.storage : any
>this : any
>storage : any
>length : any

            throw new Error(`Dot product only applicable for vectors of equal length`);
>new Error(`Dot product only applicable for vectors of equal length`) : Error
>Error : ErrorConstructor
>`Dot product only applicable for vectors of equal length` : "Dot product only applicable for vectors of equal length"
        }
        let sum = 0;
>sum : number
>0 : 0

        for (let i = 0; i < this.storage.length; i++) {
>i : number
>0 : 0
>i < this.storage.length : boolean
>i : number
>this.storage.length : any
>this.storage : any
>this : any
>storage : any
>length : any
>i++ : number
>i : number

            sum += (this.storage[i] * other.storage[i]);
>sum += (this.storage[i] * other.storage[i]) : number
>sum : number
>(this.storage[i] * other.storage[i]) : number
>this.storage[i] * other.storage[i] : number
>this.storage[i] : any
>this.storage : any
>this : any
>storage : any
>i : number
>other.storage[i] : any
>other.storage : any
>other : any
>storage : any
>i : number
        }
        return sum;
>sum : number

    },
    magnitude() {
>magnitude : () => number

        let sum = 0;
>sum : number
>0 : 0

        for (let i = 0; i < this.storage.length; i++) {
>i : number
>0 : 0
>i < this.storage.length : boolean
>i : number
>this.storage.length : any
>this.storage : any
>this : any
>storage : any
>length : any
>i++ : number
>i : number

            sum += (this.storage[i] ** 2);
>sum += (this.storage[i] ** 2) : number
>sum : number
>(this.storage[i] ** 2) : number
>this.storage[i] ** 2 : number
>this.storage[i] : any
>this.storage : any
>this : any
>storage : any
>i : number
>2 : 2
        }
        return Math.sqrt(sum);
>Math.sqrt(sum) : number
>Math.sqrt : (x: number) => number
>Math : Math
>sqrt : (x: number) => number
>sum : number
    }
}

/**
 * @param {number} x
 * @param {number} y
 */
export function Point2D(x, y) {
>Point2D : { (x: any, y: any): any; prototype: { __proto__: { (len: any): void; prototype: { dot: (other: any) => number; magnitude: () => number; }; }; x: any; y: any; }; }
>x : any
>y : any

    if (!(this instanceof Point2D)) {
>!(this instanceof Point2D) : boolean
>(this instanceof Point2D) : boolean
>this instanceof Point2D : boolean
>this : any
>Point2D : { (x: any, y: any): any; prototype: { __proto__: { (len: any): void; prototype: { dot: (other: any) => number; magnitude: () => number; }; }; x: any; y: any; }; }

        return new Point2D(x, y);
>new Point2D(x, y) : any
>Point2D : { (x: any, y: any): any; prototype: { __proto__: { (len: any): void; prototype: { dot: (other: any) => number; magnitude: () => number; }; }; x: any; y: any; }; }
>x : any
>y : any
    }
    Vec.call(this, 2);
>Vec.call(this, 2) : any
>Vec.call : (this: Function, thisArg: any, ...argArray: any[]) => any
>Vec : { (len: any): void; prototype: { dot: (other: any) => number; magnitude: () => number; }; }
>call : (this: Function, thisArg: any, ...argArray: any[]) => any
>this : any
>2 : 2

    this.x = x;
>this.x = x : any
>this.x : any
>this : any
>x : any
>x : any

    this.y = y;
>this.y = y : any
>this.y : any
>this : any
>y : any
>y : any
}

Point2D.prototype = {
>Point2D.prototype = {    __proto__: Vec,    get x() {        return this.storage[0];    },    /**     * @param {number} x     */    set x(x) {        this.storage[0] = x;    },    get y() {        return this.storage[1];    },    /**     * @param {number} y     */    set y(y) {        this.storage[1] = y;    }} : { __proto__: { (len: any): void; prototype: { dot: (other: any) => number; magnitude: () => number; }; }; x: any; y: any; }
>Point2D.prototype : { __proto__: { (len: any): void; prototype: { dot: (other: any) => number; magnitude: () => number; }; }; x: any; y: any; }
>Point2D : { (x: any, y: any): any; prototype: { __proto__: { (len: any): void; prototype: { dot: (other: any) => number; magnitude: () => number; }; }; x: any; y: any; }; }
>prototype : { __proto__: { (len: any): void; prototype: { dot: (other: any) => number; magnitude: () => number; }; }; x: any; y: any; }
>{    __proto__: Vec,    get x() {        return this.storage[0];    },    /**     * @param {number} x     */    set x(x) {        this.storage[0] = x;    },    get y() {        return this.storage[1];    },    /**     * @param {number} y     */    set y(y) {        this.storage[1] = y;    }} : { __proto__: { (len: any): void; prototype: { dot: (other: any) => number; magnitude: () => number; }; }; x: any; y: any; }

    __proto__: Vec,
>__proto__ : { (len: any): void; prototype: { dot: (other: any) => number; magnitude: () => number; }; }
>Vec : { (len: any): void; prototype: { dot: (other: any) => number; magnitude: () => number; }; }

    get x() {
>x : any

        return this.storage[0];
>this.storage[0] : any
>this.storage : any
>this : any
>storage : any
>0 : 0

    },
    /**
     * @param {number} x
     */
    set x(x) {
>x : any
>x : any

        this.storage[0] = x;
>this.storage[0] = x : any
>this.storage[0] : any
>this.storage : any
>this : any
>storage : any
>0 : 0
>x : any

    },
    get y() {
>y : any

        return this.storage[1];
>this.storage[1] : any
>this.storage : any
>this : any
>storage : any
>1 : 1

    },
    /**
     * @param {number} y
     */
    set y(y) {
>y : any
>y : any

        this.storage[1] = y;
>this.storage[1] = y : any
>this.storage[1] : any
>this.storage : any
>this : any
>storage : any
>1 : 1
>y : any
    }
};

=== referencer.js ===
import {Point2D} from "./source";
>Point2D : { (x: any, y: any): any; prototype: { __proto__: { (len: any): void; prototype: { dot: (other: any) => number; magnitude: () => number; }; }; x: any; y: any; }; }

export const origin = new Point2D(0, 0);
>origin : any
>new Point2D(0, 0) : any
>Point2D : { (x: any, y: any): any; prototype: { __proto__: { (len: any): void; prototype: { dot: (other: any) => number; magnitude: () => number; }; }; x: any; y: any; }; }
>0 : 0
>0 : 0

// export const res = Point2D(2, 3).dot(origin); // TODO: when __proto__ works, validate this

