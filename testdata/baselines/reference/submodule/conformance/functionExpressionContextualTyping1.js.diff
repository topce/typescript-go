--- old.functionExpressionContextualTyping1.js
+++ new.functionExpressionContextualTyping1.js
@@= skipped -67, +67 lines =@@
 })(E || (E = {}));
 // A contextual signature S is extracted from a function type T as follows:
 //      If T is a function type with exactly one call signature, and if that call signature is non- generic, S is that signature.
-var a0 = function (num, str) {
+var a0 = (num, str) => {
     num.toExponential();
     return 0;
 };
-var Class = /** @class */ (function () {
-    function Class() {
-    }
-    Class.prototype.foo = function () { };
-    return Class;
-}());
-var a1 = function (a1) {
+class Class {
+    foo() { }
+}
+var a1 = (a1) => {
     a1.foo();
     return 1;
 };
@@= skipped -20, +17 lines =@@
 //        and if all of the signatures are identical ignoring return types,
 //        then S is a signature with the same parameters and a union of the return types.
 var b1;
-b1 = function (k, h) { };
+b1 = (k, h) => { };
 var b2;
-b2 = function (foo, bar) { return foo + 1; };
-b2 = function (foo, bar) { return "hello"; };
+b2 = (foo, bar) => { return foo + 1; };
+b2 = (foo, bar) => { return "hello"; };
 var b3;
-b3 = function (name, number) { };
-var b4 = function (number) {
-    if (number === void 0) { number = 1; }
-    return "hello";
-};
-var b5 = function (number) {
-    if (number === void 0) { number = "string"; }
-    return "hello";
-};
+b3 = (name, number) => { };
+var b4 = (number = 1) => { return "hello"; };
+var b5 = (number = "string") => { return "hello"; };
 // A contextual signature S is extracted from a function type T as follows:
 //      Otherwise, no contextual signature can be extracted from T and S is undefined.
 var b6;
 var b7;
-b6 = function (k) { k.toLowerCase(); };
-b6 = function (i) {
+b6 = (k) => { k.toLowerCase(); };
+b6 = (i) => {
     i.toExponential();
     return i;
 }; // Per spec, no contextual signature can be extracted in this case. (Otherwise clause)
-b7 = function (j, m) { }; // Per spec, no contextual signature can be extracted in this case. (Otherwise clause)
-var C = /** @class */ (function () {
-    function C() {
-        var k = function (j, k) {
+b7 = (j, m) => { }; // Per spec, no contextual signature can be extracted in this case. (Otherwise clause)
+class C {
+    constructor() {
+        var k = (j, k) => {
             return [j, k];
         }; // Per spec, no contextual signature can be extracted in this case.
     }
-    return C;
-}());
+}
