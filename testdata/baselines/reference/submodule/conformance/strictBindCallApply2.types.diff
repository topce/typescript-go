--- old.strictBindCallApply2.types
+++ new.strictBindCallApply2.types
@@= skipped -6, +6 lines =@@
 >blub : string
 
 function fn(this: Foo) {}
->fn : (this: Foo) => void
+>fn : () => void
 >this : Foo
 
 type Test = ThisParameterType<typeof fn>; 
 >Test : Foo
->fn : (this: Foo) => void
+>fn : () => void
 
 const fb = fn.bind({ blub: "blub" });
->fb : () => void
->fn.bind({ blub: "blub" }) : () => void
->fn.bind : { <T>(this: T, thisArg: ThisParameterType<T>): OmitThisParameter<T>; <T, A extends any[], B extends any[], R>(this: (this: T, ...args: [...A, ...B]) => R, thisArg: T, ...args: A): (...args: B) => R; }
->fn : (this: Foo) => void
->bind : { <T>(this: T, thisArg: ThisParameterType<T>): OmitThisParameter<T>; <T, A extends any[], B extends any[], R>(this: (this: T, ...args: [...A, ...B]) => R, thisArg: T, ...args: A): (...args: B) => R; }
+>fb : (...args: []) => void
+>fn.bind({ blub: "blub" }) : (...args: []) => void
+>fn.bind : { <T>(thisArg: ThisParameterType<T>): OmitThisParameter<T>; <T, A extends any[], B extends any[], R>(thisArg: T, ...args: A): (...args: B) => R; }
+>fn : () => void
+>bind : { <T>(thisArg: ThisParameterType<T>): OmitThisParameter<T>; <T, A extends any[], B extends any[], R>(thisArg: T, ...args: A): (...args: B) => R; }
 >{ blub: "blub" } : { blub: string; }
 >blub : string
 >"blub" : "blub"
