--- old.privateNamesAndGenericClasses-2.js
+++ new.privateNamesAndGenericClasses-2.js
@@= skipped -29, +29 lines =@@
 
 
 //// [privateNamesAndGenericClasses-2.js]
-"use strict";
-var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
-    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
-    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
-    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
-};
-var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
-    if (kind === "m") throw new TypeError("Private method is not writable");
-    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
-    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
-    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
-};
-var _C_instances, _C_foo, _C_bar;
 class C {
+    #foo;
+    #bar() {
+        return this.#foo;
+    }
     constructor(t) {
-        _C_instances.add(this);
-        _C_foo.set(this, void 0);
-        __classPrivateFieldSet(this, _C_foo, t, "f");
-        t = __classPrivateFieldGet(this, _C_instances, "m", _C_bar).call(this);
+        this.#foo = t;
+        t = this.#bar();
     }
     set baz(t) {
-        __classPrivateFieldSet(this, _C_foo, t, "f");
+        this.#foo = t;
     }
     get baz() {
-        return __classPrivateFieldGet(this, _C_foo, "f");
+        return this.#foo;
     }
 }
-_C_foo = new WeakMap(), _C_instances = new WeakSet(), _C_bar = function _C_bar() {
-    return __classPrivateFieldGet(this, _C_foo, "f");
-};
 let a = new C(3);
 let b = new C("hello");
-a.baz = 5; // OK
-const x = a.baz; // OK
-a.; // Error
-a = b; // Error
-b = a; // Error
+a.baz = 5;
+const x = a.baz;
+a.#foo;
+a = b;
+b = a;
