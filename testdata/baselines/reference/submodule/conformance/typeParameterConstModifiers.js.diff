--- old.typeParameterConstModifiers.js
+++ new.typeParameterConstModifiers.js
@@= skipped -186, +186 lines =@@
 
 
 //// [typeParameterConstModifiers.js]
-"use strict";
-var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
-    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
-        if (ar || !(i in from)) {
-            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
-            ar[i] = from[i];
-        }
-    }
-    return to.concat(ar || Array.prototype.slice.call(from));
+const x11 = f1('a');
+const x12 = f1(['a', ['b', 'c']]);
+const x13 = f1({ a: 1, b: "c", d: ["e", 2, true, { f: "g" }] });
+const x21 = f2('a');
+const x22 = f2(['a', ['b', 'c']]);
+const x23 = f2({ a: 1, b: "c", d: ["e", 2, true, { f: "g" }] });
+const x31 = f3("hello");
+const x32 = f3("hello");
+const x41 = f4([[1, 'x'], [2, 'y']]);
+const x42 = f4([{ a: 1, b: 'x' }, { a: 2, b: 'y' }]);
+const x51 = f5({ x: [1, 'x'], y: [2, 'y'] });
+const x52 = f5({ x: { a: 1, b: 'x' }, y: { a: 2, b: 'y' } });
+const x61 = f6(1, 'b', { a: 1, b: 'x' });
+const x62 = f6(...[1, 'b']);
+const x63 = f6(true, ...[1, 'b']);
+const x64 = f6(...([1, 'b']));
+const x65 = f6(true, ...([1, 'b']));
+class C1 {
+    constructor(x) { }
+    foo(x) { return x; }
+}
+const c71 = new C1({ a: 1, b: "c", d: ["e", 2, true, { f: "g" }] });
+const c72 = c71.foo(['a', ['b', 'c']]);
+const C2 = class {
 };
-var x11 = f1('a');
-var x12 = f1(['a', ['b', 'c']]);
-var x13 = f1({ a: 1, b: "c", d: ["e", 2, true, { f: "g" }] });
-var x21 = f2('a');
-var x22 = f2(['a', ['b', 'c']]);
-var x23 = f2({ a: 1, b: "c", d: ["e", 2, true, { f: "g" }] });
-var x31 = f3("hello");
-var x32 = f3("hello");
-var x41 = f4([[1, 'x'], [2, 'y']]);
-var x42 = f4([{ a: 1, b: 'x' }, { a: 2, b: 'y' }]);
-var x51 = f5({ x: [1, 'x'], y: [2, 'y'] });
-var x52 = f5({ x: { a: 1, b: 'x' }, y: { a: 2, b: 'y' } });
-var x61 = f6(1, 'b', { a: 1, b: 'x' });
-var x62 = f6.apply(void 0, [1, 'b']);
-var x63 = f6.apply(void 0, __spreadArray([true], [1, 'b'], false));
-var x64 = f6.apply(void 0, ([1, 'b']));
-var x65 = f6.apply(void 0, __spreadArray([true], ([1, 'b']), false));
-var C1 = /** @class */ (function () {
-    function C1(x) {
-    }
-    C1.prototype.foo = function (x) { return x; };
-    return C1;
-}());
-var c71 = new C1({ a: 1, b: "c", d: ["e", 2, true, { f: "g" }] });
-var c72 = c71.foo(['a', ['b', 'c']]);
-var C2 = /** @class */ (function () {
-    function class_1() {
-    }
-    return class_1;
-}());
-var fx1 = function (x) { return x; };
-var fx2 = function (x) { return x; };
+const fx1 = (x) => x;
+const fx2 = (x) => x;
 function set(obj, path, value) { }
 set(obj, ['a', 'b', 'c'], value);
-var test = inners(1, 2, 3, 4, 5);
-var test2 = inners2([1, 2, 3, 4, 5]);
-var thing = function (o) { return o; };
-var t = thing({ foo: '' }); // readonly { foo: "" }
-var thingMapped = function (o) { return o; };
-var tMapped = thingMapped({ foo: '' }); // { foo: "" }
+const test = inners(1, 2, 3, 4, 5);
+const test2 = inners2([1, 2, 3, 4, 5]);
+const thing = (o) => o;
+const t = thing({ foo: '' }); // readonly { foo: "" }
+const thingMapped = (o) => o;
+const tMapped = thingMapped({ foo: '' }); // { foo: "" }
 // repro from https://github.com/microsoft/TypeScript/issues/55033
 function factory_55033_minimal(cb) {
     return {};
 }
-var test_55033_minimal = factory_55033_minimal(function (b) { });
+const test_55033_minimal = factory_55033_minimal((b) => { });
 function factory_55033(cb) {
-    return function call() {
-        var args = [];
-        for (var _i = 0; _i < arguments.length; _i++) {
-            args[_i] = arguments[_i];
-        }
+    return function call(...args) {
         return {};
     };
 }
-var t1_55033 = factory_55033(function (a, b) { })({ test: 123 }, "some string");
-var t2_55033 = factory_55033(function (a, b) { })({ test: 123 }, "some string");
+const t1_55033 = factory_55033((a, b) => { })({ test: 123 }, "some string");
+const t2_55033 = factory_55033((a, b) => { })({ test: 123 }, "some string");
 // Same with non-readonly constraint
 function factory_55033_2(cb) {
-    return function call() {
-        var args = [];
-        for (var _i = 0; _i < arguments.length; _i++) {
-            args[_i] = arguments[_i];
-        }
+    return function call(...args) {
         return {};
     };
 }
-var t1_55033_2 = factory_55033_2(function (a, b) { })({ test: 123 }, "some string");
-var t2_55033_2 = factory_55033_2(function (a, b) { })({ test: 123 }, "some string");
-var a = fn("a", false);
+const t1_55033_2 = factory_55033_2((a, b) => { })({ test: 123 }, "some string");
+const t2_55033_2 = factory_55033_2((a, b) => { })({ test: 123 }, "some string");
+const a = fn("a", false);
 fa1(["hello", 42]);
 fa2(["hello", 42]);
 fb1("hello", 42);
 fb2("hello", 42);
-fc1(function (a, b) { }, "hello", 42);
-fc2(function (a, b) { }, "hello", 42);
+fc1((a, b) => { }, "hello", 42);
+fc2((a, b) => { }, "hello", 42);
 fd1(["hello", "world"]);
 fd1([1, 2, 3]);
 fd2(["hello", "world"]);
