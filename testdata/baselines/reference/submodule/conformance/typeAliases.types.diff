--- old.typeAliases.types
+++ new.typeAliases.types
@@= skipped -123, +123 lines =@@
 >x13_2 : I13
 
 declare function foo13<T1 extends I13, T2 extends T13>(t1: T1, t2: T13): void;
->foo13 : <T1 extends I13, T2 extends T13>(t1: T1, t2: T13) => void
+>foo13 : <T1 extends I13, T2 extends I13>(t1: T1, t2: I13) => void
 >t1 : T1
 >t2 : I13
 
 foo13(x13_1, x13_2);
 >foo13(x13_1, x13_2) : void
->foo13 : <T1 extends I13, T2 extends T13>(t1: T1, t2: T13) => void
+>foo13 : <T1 extends I13, T2 extends I13>(t1: T1, t2: I13) => void
 >x13_1 : I13
 >x13_2 : I13
 
 foo13(x13_2, x13_1);
 >foo13(x13_2, x13_1) : void
->foo13 : <T1 extends I13, T2 extends T13>(t1: T1, t2: T13) => void
+>foo13 : <T1 extends I13, T2 extends I13>(t1: T1, t2: I13) => void
 >x13_2 : I13
 >x13_1 : I13
 
@@= skipped -23, +23 lines =@@
 >x14 : string
 
 declare function foo14_1(x: T14): void;
->foo14_1 : (x: T14) => void
+>foo14_1 : (x: string) => void
 >x : string
 
 declare function foo14_2(x: "click"): void;
->foo14_2 : { (x: "click"): void; (x: T14): void; }
+>foo14_2 : { (x: "click"): void; (x: string): void; }
 >x : "click"
 
 declare function foo14_2(x: T14): void;
->foo14_2 : { (x: "click"): void; (x: T14): void; }
+>foo14_2 : { (x: "click"): void; (x: string): void; }
 >x : string
 
 type Meters = number
@@= skipped -20, +20 lines =@@
 >10 : 10
 
 declare function f15(a: string): boolean;
->f15 : { (a: string): boolean; (a: Meters): string; }
+>f15 : { (a: string): boolean; (a: number): string; }
 >a : string
 
 declare function f15(a: Meters): string;
->f15 : { (a: string): boolean; (a: Meters): string; }
+>f15 : { (a: string): boolean; (a: number): string; }
 >a : number
 
 f15(E.x).toLowerCase();
 >f15(E.x).toLowerCase() : string
 >f15(E.x).toLowerCase : () => string
 >f15(E.x) : string
->f15 : { (a: string): boolean; (a: Meters): string; }
+>f15 : { (a: string): boolean; (a: number): string; }
 >E.x : E
 >E : typeof E
 >x : E
