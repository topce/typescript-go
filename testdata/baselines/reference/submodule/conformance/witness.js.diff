--- old.witness.js
+++ new.witness.js
@@= skipped -138, +138 lines =@@
 
 
 //// [witness.js]
-// Initializers
-var varInit = varInit; // any
+var varInit = varInit;
 var pInit;
-function fn(pInit) {
-    if (pInit === void 0) { pInit = pInit; }
+function fn(pInit = pInit) {
     var pInit;
 }
-var InitClass = /** @class */ (function () {
-    function InitClass() {
-        this.x = this.x;
-    }
-    InitClass.prototype.fn = function () {
+class InitClass {
+    x = this.x;
+    fn() {
         var y = this.x;
         var y;
-    };
-    return InitClass;
-}());
-// Return type
+    }
+}
 function fnReturn1() {
     return fnReturn1();
 }
@@= skipped -27, +21 lines =@@
     return fnReturn2;
 }
 var fnr2 = fnReturn2();
-// Comma
 var co1 = (co1, 3);
 var co1;
 var co2 = (3, 4, co2);
 var co2;
 var co3 = (co1, co2, co3, co1);
 var co3;
-// Assignment
 var as1 = (as1 = 2);
 var as1;
 var as2 = (as2 = as2 = 2);
 var as2;
-// Conditional
 var cnd1 = cnd1 ? 0 : 1;
 var cnd1;
 var cnd2 = cnd1 ? cnd1 ? '' : "" : '';
 var cnd2;
-// ||
 var or1 = or1 || '';
 var or1;
 var or2 = '' || or2;
 var or2;
 var or3 = or3 || or3;
 var or3;
-// &&
 var and1 = and1 && '';
 var and1;
 var and2 = '' && and2;
 var and2;
 var and3 = and3 && and3;
 var and3;
-// function call return type
 function fnCall() {
     return fnCall();
 }
 var fnCallResult = fnCall();
 var fnCallResult;
-// Call argument
 function fnArg1(x, y) {
     var x;
     fnArg1(fnArg1, 0);
@@= skipped -47, +40 lines =@@
 function fnArg2() {
     return overload1(fnArg2);
 }
-var t = fnArg2(); // t: should be 'any', but is 'string'
-// New operator
-var C = /** @class */ (function () {
-    function C() {
-    }
-    C.prototype.fn1 = function () {
+var t = fnArg2();
+class C {
+    fn1() {
         return new (this.fn1())();
-    };
-    C.prototype.fn2 = function () {
+    }
+    fn2() {
         return new (this.fn2());
-    };
-    C.prototype.fn3 = function () {
+    }
+    fn3() {
         var a;
         return new a(this.fn3);
-    };
-    return C;
-}());
+    }
+}
 function fn5() {
     var a;
     return new a(fn5);
 }
-var fn5r = fn5(); // fn5r: should be 'any', but is 'number'
-// Property access
+var fn5r = fn5();
 var propAcc1 = {
     m: propAcc1.m
 };
 var propAcc1;
-// Property access of module member
 var M2;
 (function (M2) {
     M2.x = M2.x;
     var y = M2.x;
     var y;
 })(M2 || (M2 = {}));
-// Property access of class instance type
-var C2 = /** @class */ (function () {
-    function C2() {
-        this.n = this.n; // n: any
-    }
-    return C2;
-}());
+class C2 {
+    n = this.n;
+}
 var c2inst = new C2().n;
 var c2inst;
-// Constructor function property access
-var C3 = /** @class */ (function () {
-    function C3() {
-    }
-    C3.q = C3.q;
-    return C3;
-}());
+class C3 {
+    static q = C3.q;
+}
 var qq = C3.q;
 var qq;
-// Parentheses - tested a bunch above
