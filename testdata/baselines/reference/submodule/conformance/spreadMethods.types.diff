--- old.spreadMethods.types
+++ new.spreadMethods.types
@@= skipped -75, +75 lines =@@
 
 let i: I = { p: 12, m() { }, get g() { return 0; } };
 >i : I
->{ p: 12, m() { }, get g() { return 0; } } : { p: number; m(): void; readonly g: number; }
+>{ p: 12, m() { }, get g() { return 0; } } : { p: number; m: () => void; readonly g: number; }
 >p : number
 >12 : 12
 >m : () => void
@@= skipped -8, +8 lines =@@
 >0 : 0
 
 let si = { ...i };
->si : { p: number; m(): void; g: number; }
->{ ...i } : { p: number; m(): void; g: number; }
+>si : { p: number; m: () => void; g: number; }
+>{ ...i } : { p: number; m: () => void; g: number; }
 >i : I
 
 let ssi = { ...i, ...i };
->ssi : { p: number; m(): void; g: number; }
->{ ...i, ...i } : { p: number; m(): void; g: number; }
+>ssi : { p: number; m: () => void; g: number; }
+>{ ...i, ...i } : { p: number; m: () => void; g: number; }
 >i : I
 >i : I
 
 si.p;
 >si.p : number
->si : { p: number; m(): void; g: number; }
+>si : { p: number; m: () => void; g: number; }
 >p : number
 
 si.m(); // ok
 >si.m() : void
 >si.m : () => void
->si : { p: number; m(): void; g: number; }
+>si : { p: number; m: () => void; g: number; }
 >m : () => void
 
 si.g; // ok
 >si.g : number
->si : { p: number; m(): void; g: number; }
+>si : { p: number; m: () => void; g: number; }
 >g : number
 
 ssi.p;
 >ssi.p : number
->ssi : { p: number; m(): void; g: number; }
+>ssi : { p: number; m: () => void; g: number; }
 >p : number
 
 ssi.m(); // ok
 >ssi.m() : void
 >ssi.m : () => void
->ssi : { p: number; m(): void; g: number; }
+>ssi : { p: number; m: () => void; g: number; }
 >m : () => void
 
 ssi.g; // ok
 >ssi.g : number
->ssi : { p: number; m(): void; g: number; }
+>ssi : { p: number; m: () => void; g: number; }
 >g : number
 
 let o = { p: 12, m() { }, get g() { return 0; } };
->o : { p: number; m(): void; readonly g: number; }
->{ p: 12, m() { }, get g() { return 0; } } : { p: number; m(): void; readonly g: number; }
+>o : { p: number; m: () => void; readonly g: number; }
+>{ p: 12, m() { }, get g() { return 0; } } : { p: number; m: () => void; readonly g: number; }
 >p : number
 >12 : 12
 >m : () => void
@@= skipped -52, +52 lines =@@
 >0 : 0
 
 let so = { ...o };
->so : { p: number; m(): void; g: number; }
->{ ...o } : { p: number; m(): void; g: number; }
->o : { p: number; m(): void; readonly g: number; }
+>so : { p: number; m: () => void; g: number; }
+>{ ...o } : { p: number; m: () => void; g: number; }
+>o : { p: number; m: () => void; readonly g: number; }
 
 let sso = { ...o, ...o };
->sso : { p: number; m(): void; g: number; }
->{ ...o, ...o } : { p: number; m(): void; g: number; }
->o : { p: number; m(): void; readonly g: number; }
->o : { p: number; m(): void; readonly g: number; }
+>sso : { p: number; m: () => void; g: number; }
+>{ ...o, ...o } : { p: number; m: () => void; g: number; }
+>o : { p: number; m: () => void; readonly g: number; }
+>o : { p: number; m: () => void; readonly g: number; }
 
 so.p;
 >so.p : number
->so : { p: number; m(): void; g: number; }
+>so : { p: number; m: () => void; g: number; }
 >p : number
 
 so.m(); // ok
 >so.m() : void
 >so.m : () => void
->so : { p: number; m(): void; g: number; }
+>so : { p: number; m: () => void; g: number; }
 >m : () => void
 
 so.g; // ok
 >so.g : number
->so : { p: number; m(): void; g: number; }
+>so : { p: number; m: () => void; g: number; }
 >g : number
 
 sso.p;
 >sso.p : number
->sso : { p: number; m(): void; g: number; }
+>sso : { p: number; m: () => void; g: number; }
 >p : number
 
 sso.m(); // ok
 >sso.m() : void
 >sso.m : () => void
->sso : { p: number; m(): void; g: number; }
+>sso : { p: number; m: () => void; g: number; }
 >m : () => void
 
 sso.g; // ok
 >sso.g : number
->sso : { p: number; m(): void; g: number; }
+>sso : { p: number; m: () => void; g: number; }
 >g : number
 
