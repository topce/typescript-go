--- old.mappedTypeWithAny.js
+++ new.mappedTypeWithAny.js
@@= skipped -65, +65 lines =@@
 
 
 //// [mappedTypeWithAny.js]
-"use strict";
-for (var id in z) {
-    var data = z[id];
-    var x = data.notAValue; // Error
+for (let id in z) {
+    let data = z[id];
+    let x = data.notAValue; // Error
 }
 function bar(arrayish, objectish, indirectArrayish) {
-    var arr;
+    let arr;
     arr = arrayish;
     arr = objectish;
     arr = indirectArrayish;
 }
-var abc = stringifyArray(void 0);
-var def = stringifyPair(void 0);
-
-
-//// [mappedTypeWithAny.d.ts]
-type Item = {
-    value: string;
-};
-type ItemMap<T> = {
-    [P in keyof T]: Item;
-};
-declare let x0: keyof any;
-declare let x1: {
-    [P in any]: Item;
-};
-declare let x2: {
-    [P in string]: Item;
-};
-declare let x3: {
-    [P in keyof any]: Item;
-};
-declare let x4: ItemMap<any>;
-type Data = {
-    value: string;
-};
-type StrictDataMap<T> = {
-    [P in keyof T]: Data;
-};
-declare let z: StrictDataMap<any>;
-type Arrayish<T extends unknown[]> = {
-    [K in keyof T]: T[K];
-};
-type Objectish<T extends unknown> = {
-    [K in keyof T]: T[K];
-};
-type IndirectArrayish<U extends unknown[]> = Objectish<U>;
-declare function bar(arrayish: Arrayish<any>, objectish: Objectish<any>, indirectArrayish: IndirectArrayish<any>): void;
-declare function stringifyArray<T extends readonly any[]>(arr: T): {
-    -readonly [K in keyof T]: string;
-};
-declare let abc: any[];
-declare function stringifyPair<T extends readonly [any, any]>(arr: T): {
-    -readonly [K in keyof T]: string;
-};
-declare let def: [any, any];
-type Evolvable<E extends Evolver> = {
-    [P in keyof E]: never;
-};
-type Evolver<T extends Evolvable<any> = any> = {
-    [key in keyof Partial<T>]: never;
-};
+let abc = stringifyArray(void 0);
+let def = stringifyPair(void 0);
