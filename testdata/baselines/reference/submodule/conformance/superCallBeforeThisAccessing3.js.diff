--- old.superCallBeforeThisAccessing3.js
+++ new.superCallBeforeThisAccessing3.js
@@= skipped -15, +15 lines =@@
 
 
 //// [superCallBeforeThisAccessing3.js]
-var __extends = (this && this.__extends) || (function () {
-    var extendStatics = function (d, b) {
-        extendStatics = Object.setPrototypeOf ||
-            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
-            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
-        return extendStatics(d, b);
-    };
-    return function (d, b) {
-        if (typeof b !== "function" && b !== null)
-            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
-        extendStatics(d, b);
-        function __() { this.constructor = d; }
-        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-    };
-})();
-var Base = /** @class */ (function () {
-    function Base(c) {
-    }
-    return Base;
-}());
-var D = /** @class */ (function (_super) {
-    __extends(D, _super);
-    function D() {
-        var _this = this;
-        var x = function () { _this._t; };
+class Base {
+    constructor(c) { }
+}
+class D extends Base {
+    _t;
+    constructor() {
+        let x = () => { this._t; };
         x(); // no error; we only check super is called before this when the container is a constructor
-        _this._t; // error
-        return _this = _super.call(this, undefined) || this;
+        this._t; // error
+        super(undefined);
     }
-    return D;
-}(Base));
+}
