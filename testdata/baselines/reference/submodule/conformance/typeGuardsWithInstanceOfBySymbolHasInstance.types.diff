--- old.typeGuardsWithInstanceOfBySymbolHasInstance.types
+++ new.typeGuardsWithInstanceOfBySymbolHasInstance.types
@@= skipped -228, +228 lines =@@
 >foo : string
 }
 declare var D: {
->D : { new (): D; [Symbol.hasInstance](value: unknown): value is D; }
+>D : { new (): D; [Symbol.hasInstance]: (value: unknown) => value is D; }
 
     new (): D;
     [Symbol.hasInstance](value: unknown): value is D;
@@= skipped -18, +18 lines =@@
 if (obj7 instanceof D) { // narrowed to D.
 >obj7 instanceof D : boolean
 >obj7 : string | D
->D : { new (): D; [Symbol.hasInstance](value: unknown): value is D; }
+>D : { new (): D; [Symbol.hasInstance]: (value: unknown) => value is D; }
 
     obj7.foo;
 >obj7.foo : string
@@= skipped -19, +19 lines =@@
 if (obj8 instanceof D) {
 >obj8 instanceof D : boolean
 >obj8 : any
->D : { new (): D; [Symbol.hasInstance](value: unknown): value is D; }
+>D : { new (): D; [Symbol.hasInstance]: (value: unknown) => value is D; }
 
     obj8.foo;
 >obj8.foo : string
