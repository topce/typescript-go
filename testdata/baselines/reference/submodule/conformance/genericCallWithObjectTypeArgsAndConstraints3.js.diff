--- old.genericCallWithObjectTypeArgsAndConstraints3.js
+++ new.genericCallWithObjectTypeArgsAndConstraints3.js
@@= skipped -40, +40 lines =@@
 
 //// [genericCallWithObjectTypeArgsAndConstraints3.js]
 // Generic call with constraints infering type parameter from object member properties
-var __extends = (this && this.__extends) || (function () {
-    var extendStatics = function (d, b) {
-        extendStatics = Object.setPrototypeOf ||
-            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
-            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
-        return extendStatics(d, b);
-    };
-    return function (d, b) {
-        if (typeof b !== "function" && b !== null)
-            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
-        extendStatics(d, b);
-        function __() { this.constructor = d; }
-        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-    };
-})();
-var Base = /** @class */ (function () {
-    function Base() {
-    }
-    return Base;
-}());
-var Derived = /** @class */ (function (_super) {
-    __extends(Derived, _super);
-    function Derived() {
-        return _super !== null && _super.apply(this, arguments) || this;
-    }
-    return Derived;
-}(Base));
-var Derived2 = /** @class */ (function (_super) {
-    __extends(Derived2, _super);
-    function Derived2() {
-        return _super !== null && _super.apply(this, arguments) || this;
-    }
-    return Derived2;
-}(Base));
+class Base {
+    x;
+}
+class Derived extends Base {
+    y;
+}
+class Derived2 extends Base {
+    z;
+}
 function f(a) {
     var r;
     return r;
@@= skipped -49, +24 lines =@@
     return y(null);
 }
 // all ok - second argument is processed before x is fixed
-var r4 = f3(function (x) { return x; }, new Base());
-var r5 = f3(function (x) { return x; }, new Derived());
-var r6 = f3(function (x) { return x; }, null);
+var r4 = f3(x => x, new Base());
+var r5 = f3(x => x, new Derived());
+var r6 = f3(x => x, null);
