--- old.superCalls.js
+++ new.superCalls.js
@@= skipped -32, +32 lines =@@
 
 
 //// [superCalls.js]
-var __extends = (this && this.__extends) || (function () {
-    var extendStatics = function (d, b) {
-        extendStatics = Object.setPrototypeOf ||
-            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
-            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
-        return extendStatics(d, b);
-    };
-    return function (d, b) {
-        if (typeof b !== "function" && b !== null)
-            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
-        extendStatics(d, b);
-        function __() { this.constructor = d; }
-        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-    };
-})();
-var Base = /** @class */ (function () {
-    function Base(n) {
-        this.x = 43;
+class Base {
+    x = 43;
+    constructor(n) {
     }
-    return Base;
-}());
+}
 function v() { }
-var Derived = /** @class */ (function (_super) {
-    __extends(Derived, _super);
+class Derived extends Base {
+    q;
     //super call in class constructor of derived type
-    function Derived(q) {
-        var _this = _super.call(this, '') || this;
-        _this.q = q;
+    constructor(q) {
+        super('');
+        this.q = q;
         //type of super call expression is void
-        var p = _this = _super.call(this, '') || this;
+        var p = super('');
         var p = v();
-        return _this;
     }
-    return Derived;
-}(Base));
-var OtherBase = /** @class */ (function () {
-    function OtherBase() {
-    }
-    return OtherBase;
-}());
-var OtherDerived = /** @class */ (function (_super) {
-    __extends(OtherDerived, _super);
-    function OtherDerived() {
+}
+class OtherBase {
+}
+class OtherDerived extends OtherBase {
+    constructor() {
         var p = '';
-        return _super.call(this) || this;
+        super();
     }
-    return OtherDerived;
-}(OtherBase));
+}
