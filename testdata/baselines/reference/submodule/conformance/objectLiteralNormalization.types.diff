--- old.objectLiteralNormalization.types
+++ new.objectLiteralNormalization.types
@@= skipped -68, +68 lines =@@
 >true : true
 
 let a2 = [{ a: 1, b: 2 }, { a: "abc" }, {}][0];
->a2 : { a: number; b: number; } | { a: string; b?: undefined; } | { a?: undefined; b?: undefined; }
+>a2 : { a: number; b: number; } | { b?: undefined; a: string; } | { b?: undefined; a?: undefined; }
 >[{ a: 1, b: 2 }, { a: "abc" }, {}][0] : { a: number; b: number; } | { a: string; } | {}
 >[{ a: 1, b: 2 }, { a: "abc" }, {}] : ({ a: number; b: number; } | { a: string; } | {})[]
 >{ a: 1, b: 2 } : { a: number; b: number; }
@@= skipped -16, +16 lines =@@
 
 a2.a;  // string | number | undefined
 >a2.a : string | number | undefined
->a2 : { a: number; b: number; } | { a: string; b?: undefined; } | { a?: undefined; b?: undefined; }
+>a2 : { a: number; b: number; } | { b?: undefined; a: string; } | { b?: undefined; a?: undefined; }
 >a : string | number | undefined
 
 a2.b;  // number | undefined
 >a2.b : number | undefined
->a2 : { a: number; b: number; } | { a: string; b?: undefined; } | { a?: undefined; b?: undefined; }
+>a2 : { a: number; b: number; } | { b?: undefined; a: string; } | { b?: undefined; a?: undefined; }
 >b : number | undefined
 
 a2 = { a: 10, b: 20 };
 >a2 = { a: 10, b: 20 } : { a: number; b: number; }
->a2 : { a: number; b: number; } | { a: string; b?: undefined; } | { a?: undefined; b?: undefined; }
+>a2 : { a: number; b: number; } | { b?: undefined; a: string; } | { b?: undefined; a?: undefined; }
 >{ a: 10, b: 20 } : { a: number; b: number; }
 >a : number
 >10 : 10
@@= skipped -19, +19 lines =@@
 
 a2 = { a: "def" };
 >a2 = { a: "def" } : { a: string; }
->a2 : { a: number; b: number; } | { a: string; b?: undefined; } | { a?: undefined; b?: undefined; }
+>a2 : { a: number; b: number; } | { b?: undefined; a: string; } | { b?: undefined; a?: undefined; }
 >{ a: "def" } : { a: string; }
 >a : string
 >"def" : "def"
 
 a2 = {};
 >a2 = {} : {}
->a2 : { a: number; b: number; } | { a: string; b?: undefined; } | { a?: undefined; b?: undefined; }
+>a2 : { a: number; b: number; } | { b?: undefined; a: string; } | { b?: undefined; a?: undefined; }
 >{} : {}
 
 a2 = { a: "def", b: 20 };  // Error
 >a2 = { a: "def", b: 20 } : { a: string; b: number; }
->a2 : { a: number; b: number; } | { a: string; b?: undefined; } | { a?: undefined; b?: undefined; }
+>a2 : { a: number; b: number; } | { b?: undefined; a: string; } | { b?: undefined; a?: undefined; }
 >{ a: "def", b: 20 } : { a: string; b: number; }
 >a : string
 >"def" : "def"
@@= skipped -21, +21 lines =@@
 
 a2 = { a: 1 };  // Error
 >a2 = { a: 1 } : { a: number; }
->a2 : { a: number; b: number; } | { a: string; b?: undefined; } | { a?: undefined; b?: undefined; }
+>a2 : { a: number; b: number; } | { b?: undefined; a: string; } | { b?: undefined; a?: undefined; }
 >{ a: 1 } : { a: number; }
 >a : number
 >1 : 1
@@= skipped -14, +14 lines =@@
 >c : string
 
 let b2 = { ...b1, z: 55 };
->b2 : { z: number; a: string; b: string; } | { z: number; b: string; c: string; }
->{ ...b1, z: 55 } : { z: number; a: string; b: string; } | { z: number; b: string; c: string; }
+>b2 : { a: string; b: string; z: number; } | { b: string; c: string; z: number; }
+>{ ...b1, z: 55 } : { a: string; b: string; z: number; } | { b: string; c: string; z: number; }
 >b1 : { a: string; b: string; } | { b: string; c: string; }
 >z : number
 >55 : 55
 
 let b3 = { ...b2 };
->b3 : { z: number; a: string; b: string; } | { z: number; b: string; c: string; }
->{ ...b2 } : { z: number; a: string; b: string; } | { z: number; b: string; c: string; }
->b2 : { z: number; a: string; b: string; } | { z: number; b: string; c: string; }
+>b3 : { a: string; b: string; z: number; } | { b: string; c: string; z: number; }
+>{ ...b2 } : { a: string; b: string; z: number; } | { b: string; c: string; z: number; }
+>b2 : { a: string; b: string; z: number; } | { b: string; c: string; z: number; }
 
 // Before widening {} acts like { [x: string]: undefined }, which is a
 // subtype of types with all optional properties
 declare let opts: { foo?: string, bar?: string, baz?: boolean };
->opts : { foo?: string; bar?: string; baz?: boolean; }
+>opts : { foo?: string | undefined; bar?: string | undefined; baz?: boolean | undefined; }
 >foo : string | undefined
 >bar : string | undefined
 >baz : boolean | undefined
 
 let c1 = !true ? {} : opts;
->c1 : { foo?: string; bar?: string; baz?: boolean; }
->!true ? {} : opts : { foo?: string; bar?: string; baz?: boolean; }
+>c1 : { foo?: string | undefined; bar?: string | undefined; baz?: boolean | undefined; }
+>!true ? {} : opts : { foo?: string | undefined; bar?: string | undefined; baz?: boolean | undefined; }
 >!true : false
 >true : true
 >{} : {}
->opts : { foo?: string; bar?: string; baz?: boolean; }
+>opts : { foo?: string | undefined; bar?: string | undefined; baz?: boolean | undefined; }
 
 let c2 = !true ? opts : {};
->c2 : { foo?: string; bar?: string; baz?: boolean; }
->!true ? opts : {} : { foo?: string; bar?: string; baz?: boolean; }
+>c2 : { foo?: string | undefined; bar?: string | undefined; baz?: boolean | undefined; }
+>!true ? opts : {} : { foo?: string | undefined; bar?: string | undefined; baz?: boolean | undefined; }
 >!true : false
 >true : true
->opts : { foo?: string; bar?: string; baz?: boolean; }
+>opts : { foo?: string | undefined; bar?: string | undefined; baz?: boolean | undefined; }
 >{} : {}
 
 let c3 = !true ? { a: 0, b: 0 } : {};
->c3 : { a: number; b: number; } | { a?: undefined; b?: undefined; }
+>c3 : { a: number; b: number; } | { b?: undefined; a?: undefined; }
 >!true ? { a: 0, b: 0 } : {} : { a: number; b: number; } | {}
 >!true : false
 >true : true
@@= skipped -48, +48 lines =@@
 >{} : {}
 
 let c4 = !true ? {} : { a: 0, b: 0 };
->c4 : { a?: undefined; b?: undefined; } | { a: number; b: number; }
+>c4 : { b?: undefined; a?: undefined; } | { a: number; b: number; }
 >!true ? {} : { a: 0, b: 0 } : {} | { a: number; b: number; }
 >!true : false
 >true : true
@@= skipped -13, +13 lines =@@
 
 // Normalization applies to nested properties
 let d1 = [{ kind: 'a', pos: { x: 0, y: 0 } }, { kind: 'b', pos: !true ? { a: "x" } : { b: 0 } }][0];
->d1 : { kind: string; pos: { x: number; y: number; a?: undefined; b?: undefined; }; } | { kind: string; pos: { a: string; x?: undefined; y?: undefined; b?: undefined; } | { b: number; x?: undefined; y?: undefined; a?: undefined; }; }
+>d1 : { kind: string; pos: { b?: undefined; a?: undefined; x: number; y: number; }; } | { kind: string; pos: { b?: undefined; x?: undefined; y?: undefined; a: string; } | { a?: undefined; x?: undefined; y?: undefined; b: number; }; }
 >[{ kind: 'a', pos: { x: 0, y: 0 } }, { kind: 'b', pos: !true ? { a: "x" } : { b: 0 } }][0] : { kind: string; pos: { x: number; y: number; }; } | { kind: string; pos: { a: string; } | { b: number; }; }
 >[{ kind: 'a', pos: { x: 0, y: 0 } }, { kind: 'b', pos: !true ? { a: "x" } : { b: 0 } }] : ({ kind: string; pos: { x: number; y: number; }; } | { kind: string; pos: { a: string; } | { b: number; }; })[]
 >{ kind: 'a', pos: { x: 0, y: 0 } } : { kind: string; pos: { x: number; y: number; }; }
@@= skipped -29, +29 lines =@@
 
 d1.kind;
 >d1.kind : string
->d1 : { kind: string; pos: { x: number; y: number; a?: undefined; b?: undefined; }; } | { kind: string; pos: { a: string; x?: undefined; y?: undefined; b?: undefined; } | { b: number; x?: undefined; y?: undefined; a?: undefined; }; }
+>d1 : { kind: string; pos: { b?: undefined; a?: undefined; x: number; y: number; }; } | { kind: string; pos: { b?: undefined; x?: undefined; y?: undefined; a: string; } | { a?: undefined; x?: undefined; y?: undefined; b: number; }; }
 >kind : string
 
 d1.pos;
->d1.pos : { x: number; y: number; a?: undefined; b?: undefined; } | { a: string; x?: undefined; y?: undefined; b?: undefined; } | { b: number; x?: undefined; y?: undefined; a?: undefined; }
->d1 : { kind: string; pos: { x: number; y: number; a?: undefined; b?: undefined; }; } | { kind: string; pos: { a: string; x?: undefined; y?: undefined; b?: undefined; } | { b: number; x?: undefined; y?: undefined; a?: undefined; }; }
->pos : { x: number; y: number; a?: undefined; b?: undefined; } | { a: string; x?: undefined; y?: undefined; b?: undefined; } | { b: number; x?: undefined; y?: undefined; a?: undefined; }
+>d1.pos : { b?: undefined; a?: undefined; x: number; y: number; } | { b?: undefined; x?: undefined; y?: undefined; a: string; } | { a?: undefined; x?: undefined; y?: undefined; b: number; }
+>d1 : { kind: string; pos: { b?: undefined; a?: undefined; x: number; y: number; }; } | { kind: string; pos: { b?: undefined; x?: undefined; y?: undefined; a: string; } | { a?: undefined; x?: undefined; y?: undefined; b: number; }; }
+>pos : { b?: undefined; a?: undefined; x: number; y: number; } | { b?: undefined; x?: undefined; y?: undefined; a: string; } | { a?: undefined; x?: undefined; y?: undefined; b: number; }
 
 d1.pos.x;
 >d1.pos.x : number | undefined
->d1.pos : { x: number; y: number; a?: undefined; b?: undefined; } | { a: string; x?: undefined; y?: undefined; b?: undefined; } | { b: number; x?: undefined; y?: undefined; a?: undefined; }
->d1 : { kind: string; pos: { x: number; y: number; a?: undefined; b?: undefined; }; } | { kind: string; pos: { a: string; x?: undefined; y?: undefined; b?: undefined; } | { b: number; x?: undefined; y?: undefined; a?: undefined; }; }
->pos : { x: number; y: number; a?: undefined; b?: undefined; } | { a: string; x?: undefined; y?: undefined; b?: undefined; } | { b: number; x?: undefined; y?: undefined; a?: undefined; }
+>d1.pos : { b?: undefined; a?: undefined; x: number; y: number; } | { b?: undefined; x?: undefined; y?: undefined; a: string; } | { a?: undefined; x?: undefined; y?: undefined; b: number; }
+>d1 : { kind: string; pos: { b?: undefined; a?: undefined; x: number; y: number; }; } | { kind: string; pos: { b?: undefined; x?: undefined; y?: undefined; a: string; } | { a?: undefined; x?: undefined; y?: undefined; b: number; }; }
+>pos : { b?: undefined; a?: undefined; x: number; y: number; } | { b?: undefined; x?: undefined; y?: undefined; a: string; } | { a?: undefined; x?: undefined; y?: undefined; b: number; }
 >x : number | undefined
 
 d1.pos.y;
 >d1.pos.y : number | undefined
->d1.pos : { x: number; y: number; a?: undefined; b?: undefined; } | { a: string; x?: undefined; y?: undefined; b?: undefined; } | { b: number; x?: undefined; y?: undefined; a?: undefined; }
->d1 : { kind: string; pos: { x: number; y: number; a?: undefined; b?: undefined; }; } | { kind: string; pos: { a: string; x?: undefined; y?: undefined; b?: undefined; } | { b: number; x?: undefined; y?: undefined; a?: undefined; }; }
->pos : { x: number; y: number; a?: undefined; b?: undefined; } | { a: string; x?: undefined; y?: undefined; b?: undefined; } | { b: number; x?: undefined; y?: undefined; a?: undefined; }
+>d1.pos : { b?: undefined; a?: undefined; x: number; y: number; } | { b?: undefined; x?: undefined; y?: undefined; a: string; } | { a?: undefined; x?: undefined; y?: undefined; b: number; }
+>d1 : { kind: string; pos: { b?: undefined; a?: undefined; x: number; y: number; }; } | { kind: string; pos: { b?: undefined; x?: undefined; y?: undefined; a: string; } | { a?: undefined; x?: undefined; y?: undefined; b: number; }; }
+>pos : { b?: undefined; a?: undefined; x: number; y: number; } | { b?: undefined; x?: undefined; y?: undefined; a: string; } | { a?: undefined; x?: undefined; y?: undefined; b: number; }
 >y : number | undefined
 
 d1.pos.a;
 >d1.pos.a : string | undefined
->d1.pos : { x: number; y: number; a?: undefined; b?: undefined; } | { a: string; x?: undefined; y?: undefined; b?: undefined; } | { b: number; x?: undefined; y?: undefined; a?: undefined; }
->d1 : { kind: string; pos: { x: number; y: number; a?: undefined; b?: undefined; }; } | { kind: string; pos: { a: string; x?: undefined; y?: undefined; b?: undefined; } | { b: number; x?: undefined; y?: undefined; a?: undefined; }; }
->pos : { x: number; y: number; a?: undefined; b?: undefined; } | { a: string; x?: undefined; y?: undefined; b?: undefined; } | { b: number; x?: undefined; y?: undefined; a?: undefined; }
+>d1.pos : { b?: undefined; a?: undefined; x: number; y: number; } | { b?: undefined; x?: undefined; y?: undefined; a: string; } | { a?: undefined; x?: undefined; y?: undefined; b: number; }
+>d1 : { kind: string; pos: { b?: undefined; a?: undefined; x: number; y: number; }; } | { kind: string; pos: { b?: undefined; x?: undefined; y?: undefined; a: string; } | { a?: undefined; x?: undefined; y?: undefined; b: number; }; }
+>pos : { b?: undefined; a?: undefined; x: number; y: number; } | { b?: undefined; x?: undefined; y?: undefined; a: string; } | { a?: undefined; x?: undefined; y?: undefined; b: number; }
 >a : string | undefined
 
 d1.pos.b;
 >d1.pos.b : number | undefined
->d1.pos : { x: number; y: number; a?: undefined; b?: undefined; } | { a: string; x?: undefined; y?: undefined; b?: undefined; } | { b: number; x?: undefined; y?: undefined; a?: undefined; }
->d1 : { kind: string; pos: { x: number; y: number; a?: undefined; b?: undefined; }; } | { kind: string; pos: { a: string; x?: undefined; y?: undefined; b?: undefined; } | { b: number; x?: undefined; y?: undefined; a?: undefined; }; }
->pos : { x: number; y: number; a?: undefined; b?: undefined; } | { a: string; x?: undefined; y?: undefined; b?: undefined; } | { b: number; x?: undefined; y?: undefined; a?: undefined; }
+>d1.pos : { b?: undefined; a?: undefined; x: number; y: number; } | { b?: undefined; x?: undefined; y?: undefined; a: string; } | { a?: undefined; x?: undefined; y?: undefined; b: number; }
+>d1 : { kind: string; pos: { b?: undefined; a?: undefined; x: number; y: number; }; } | { kind: string; pos: { b?: undefined; x?: undefined; y?: undefined; a: string; } | { a?: undefined; x?: undefined; y?: undefined; b: number; }; }
+>pos : { b?: undefined; a?: undefined; x: number; y: number; } | { b?: undefined; x?: undefined; y?: undefined; a: string; } | { a?: undefined; x?: undefined; y?: undefined; b: number; }
 >b : number | undefined
 
 declare function f<T>(...items: T[]): T;
@@= skipped -49, +49 lines =@@
 
 // Object literals are inferred as a single normalized union type
 let e1 = f({ a: 1, b: 2 }, { a: "abc" }, {});
->e1 : { a: number; b: number; } | { a: string; b?: undefined; } | { a?: undefined; b?: undefined; }
->f({ a: 1, b: 2 }, { a: "abc" }, {}) : { a: number; b: number; } | { a: string; b?: undefined; } | { a?: undefined; b?: undefined; }
+>e1 : { a: number; b: number; } | { b?: undefined; a: string; } | { b?: undefined; a?: undefined; }
+>f({ a: 1, b: 2 }, { a: "abc" }, {}) : { a: number; b: number; } | { b?: undefined; a: string; } | { b?: undefined; a?: undefined; }
 >f : <T>(...items: T[]) => T
 >{ a: 1, b: 2 } : { a: number; b: number; }
 >a : number
@@= skipped -14, +14 lines =@@
 >{} : {}
 
 let e2 = f({}, { a: "abc" }, { a: 1, b: 2 });
->e2 : { a?: undefined; b?: undefined; } | { a: string; b?: undefined; } | { a: number; b: number; }
->f({}, { a: "abc" }, { a: 1, b: 2 }) : { a?: undefined; b?: undefined; } | { a: string; b?: undefined; } | { a: number; b: number; }
+>e2 : { b?: undefined; a?: undefined; } | { b?: undefined; a: string; } | { a: number; b: number; }
+>f({}, { a: "abc" }, { a: 1, b: 2 }) : { b?: undefined; a?: undefined; } | { b?: undefined; a: string; } | { a: number; b: number; }
 >f : <T>(...items: T[]) => T
 >{} : {}
 >{ a: "abc" } : { a: string; }
