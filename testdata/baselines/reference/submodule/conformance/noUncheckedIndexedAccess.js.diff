--- old.noUncheckedIndexedAccess.js
+++ new.noUncheckedIndexedAccess.js
@@= skipped -104, +104 lines =@@
 
 
 //// [noUncheckedIndexedAccess.js]
-"use strict";
 var NumericEnum1;
 (function (NumericEnum1) {
     NumericEnum1[NumericEnum1["A"] = 0] = "A";
@@= skipped -18, +17 lines =@@
     StringEnum1["A"] = "Alpha";
     StringEnum1["B"] = "Beta";
 })(StringEnum1 || (StringEnum1 = {}));
-// All of these should be errors
-var e1 = strMap["foo"];
-var e2 = strMap.bar;
-var e3 = strMap[0];
-var e4 = strMap[0];
-var e5 = strMap[0];
-var e6 = strMap[0];
-var e7 = strMap["foo"];
-var e8 = strMap[NumericEnum1.A];
-var e9 = strMap[NumericEnum2.A];
-var e10 = strMap[StringEnum1.A];
-var e11 = strMap[StringEnum1.A];
-var e12 = strMap[NumericEnum1.A];
-var e13 = strMap[NumericEnum2.A];
-var e14 = strMap[null];
-// Should be OK
-var ok1 = strMap["foo"];
-var ok2 = strMap.bar;
-// Writes don't allow 'undefined'; all should be errors
+const e1 = strMap["foo"];
+const e2 = strMap.bar;
+const e3 = strMap[0];
+const e4 = strMap[0];
+const e5 = strMap[0];
+const e6 = strMap[0];
+const e7 = strMap["foo"];
+const e8 = strMap[NumericEnum1.A];
+const e9 = strMap[NumericEnum2.A];
+const e10 = strMap[StringEnum1.A];
+const e11 = strMap[StringEnum1.A];
+const e12 = strMap[NumericEnum1.A];
+const e13 = strMap[NumericEnum2.A];
+const e14 = strMap[null];
+const ok1 = strMap["foo"];
+const ok2 = strMap.bar;
 strMap["baz"] = undefined;
 strMap.qua = undefined;
 strMap[0] = undefined;
 strMap[null] = undefined;
-// All of these should be ok
-var num_ok1 = numMap[0];
-var num_ok2 = numMap[0];
-var num_ok3 = numMap[0];
-var num_ok4 = numMap[NumericEnum1.A];
-var num_ok5 = numMap[NumericEnum2.A];
-// Generics
+const num_ok1 = numMap[0];
+const num_ok2 = numMap[0];
+const num_ok3 = numMap[0];
+const num_ok4 = numMap[NumericEnum1.A];
+const num_ok5 = numMap[NumericEnum2.A];
 function generic1(arg) {
-    // Should error
     return arg["blah"];
 }
 function generic2(arg) {
-    // Should OK
     return arg["blah"];
 }
 function generic3(arg) {
-    // Should error
     return strMap[arg];
 }
 obj1["x"];
-var y = "y";
+const y = "y";
 obj1[y];
-var yy = "y";
+let yy = "y";
 obj1[yy];
-var z = "z";
+let z = "z";
 obj1[z];
-// Should error
-var f1 = strMapUnion["foo"];
-var e15 = symbolMap[s]; // Should OK
-symbolMap[s] = undefined; // Should error
-var variadicOk1 = nonEmptyStringArray[0]; // Should OK
-var variadicError1 = nonEmptyStringArray[1]; // Should error
-var fn1 = function (key) { return myRecord1[key]; }; // Should OK
-var fn2 = function (key) { return myRecord2[key]; }; // Should OK
-var fn3 = function (key) {
-    myRecord2[key] = undefined; // Should error
-    var v = myRecord2[key]; // Should error
+const f1 = strMapUnion["foo"];
+const e15 = symbolMap[s];
+symbolMap[s] = undefined;
+const variadicOk1 = nonEmptyStringArray[0];
+const variadicError1 = nonEmptyStringArray[1];
+const fn1 = (key) => myRecord1[key];
+const fn2 = (key) => myRecord2[key];
+const fn3 = (key) => {
+    myRecord2[key] = undefined;
+    const v = myRecord2[key];
 };
