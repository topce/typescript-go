--- old.protectedStaticClassPropertyAccessibleWithinSubclass2.js
+++ new.protectedStaticClassPropertyAccessibleWithinSubclass2.js
@@= skipped -23, +23 lines =@@
 }
 
 //// [protectedStaticClassPropertyAccessibleWithinSubclass2.js]
-var __extends = (this && this.__extends) || (function () {
-    var extendStatics = function (d, b) {
-        extendStatics = Object.setPrototypeOf ||
-            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
-            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
-        return extendStatics(d, b);
-    };
-    return function (d, b) {
-        if (typeof b !== "function" && b !== null)
-            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
-        extendStatics(d, b);
-        function __() { this.constructor = d; }
-        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-    };
-})();
-var Base = /** @class */ (function () {
-    function Base() {
-    }
-    Base.staticMethod = function () {
+class Base {
+    static x;
+    static staticMethod() {
         this.x; // OK, accessed within their declaring class
-    };
-    return Base;
-}());
-var Derived1 = /** @class */ (function (_super) {
-    __extends(Derived1, _super);
-    function Derived1() {
-        return _super !== null && _super.apply(this, arguments) || this;
     }
-    Derived1.staticMethod1 = function () {
+}
+class Derived1 extends Base {
+    static staticMethod1() {
         this.x; // OK, accessed within a class derived from their declaring class
-        _super.x; // Error, x is not public
-    };
-    return Derived1;
-}(Base));
-var Derived2 = /** @class */ (function (_super) {
-    __extends(Derived2, _super);
-    function Derived2() {
-        return _super !== null && _super.apply(this, arguments) || this;
+        super.x; // Error, x is not public
     }
-    Derived2.staticMethod3 = function () {
+}
+class Derived2 extends Derived1 {
+    static x;
+    static staticMethod3() {
         this.x; // OK, accessed within a class derived from their declaring class
-        _super.x; // Error, x is not public
-    };
-    return Derived2;
-}(Derived1));
+        super.x; // Error, x is not public
+    }
+}
