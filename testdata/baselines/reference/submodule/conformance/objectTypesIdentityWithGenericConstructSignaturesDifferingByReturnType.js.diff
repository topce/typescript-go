--- old.objectTypesIdentityWithGenericConstructSignaturesDifferingByReturnType.js
+++ new.objectTypesIdentityWithGenericConstructSignaturesDifferingByReturnType.js
@@= skipped -87, +87 lines =@@
 // Two call or construct signatures are considered identical when they have the same number of type parameters and, considering those 
 // parameters pairwise identical, have identical type parameter constraints, identical number of parameters with identical kind(required, 
 // optional or rest) and types, and identical return types.
-var B = /** @class */ (function () {
-    function B(x) {
-        return null;
-    }
-    return B;
-}());
-var C = /** @class */ (function () {
-    function C(x) {
-        return null;
-    }
-    return C;
-}());
+class B {
+    constructor(x) { return null; }
+}
+class C {
+    constructor(x) { return null; }
+}
 var a;
-var b = { new: function (x) { return null; } }; // not a construct signature, function called new
+var b = { new(x) { return null; } }; // not a construct signature, function called new
 function foo1b(x) { }
 function foo1c(x) { }
 function foo2(x) { }
