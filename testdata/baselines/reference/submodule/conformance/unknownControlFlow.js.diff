--- old.unknownControlFlow.js
+++ new.unknownControlFlow.js
@@= skipped -453, +453 lines =@@
 
 
 //// [unknownControlFlow.js]
-"use strict";
 function f01(u) {
-    var x1 = u; // Error
-    var x2 = u;
-    var x3 = u;
-    var x4 = u;
+    let x1 = u;
+    let x2 = u;
+    let x3 = u;
+    let x4 = u;
 }
 function f10(x) {
     if (x) {
-        x; // {}
+        x;
     }
     else {
-        x; // unknown
+        x;
     }
     if (!x) {
-        x; // unknown
+        x;
     }
     else {
-        x; // {}
+        x;
     }
 }
 function f11(x) {
     if (x) {
-        x; // T & {}
+        x;
     }
     else {
-        x; // T
+        x;
     }
     if (!x) {
-        x; // T
+        x;
     }
     else {
-        x; // T & {}
+        x;
     }
 }
 function f12(x) {
     if (x) {
-        x; // T
+        x;
     }
     else {
-        x; // T
+        x;
     }
 }
 function f20(x) {
     if (x !== undefined) {
-        x; // {} | null
+        x;
     }
     else {
-        x; // undefined
+        x;
     }
     if (x !== null) {
-        x; // {} | undefined
+        x;
     }
     else {
-        x; // null
+        x;
     }
     if (x !== undefined && x !== null) {
-        x; // {}
+        x;
     }
     else {
-        x; // null | undefined
+        x;
     }
     if (x != undefined) {
-        x; // {}
+        x;
     }
     else {
-        x; // null | undefined
+        x;
     }
     if (x != null) {
-        x; // {}
+        x;
     }
     else {
-        x; // null | undefined
+        x;
     }
 }
 function f21(x) {
     if (x !== undefined) {
-        x; // T & ({} | null)
+        x;
     }
     else {
-        x; // T
+        x;
     }
     if (x !== null) {
-        x; // T & ({} | undefined)
+        x;
     }
     else {
-        x; // T
+        x;
     }
     if (x !== undefined && x !== null) {
-        x; // T & {}
+        x;
     }
     else {
-        x; // T
+        x;
     }
     if (x != undefined) {
-        x; // T & {}
+        x;
     }
     else {
-        x; // T
+        x;
     }
     if (x != null) {
-        x; // T & {}
+        x;
     }
     else {
-        x; // T
+        x;
     }
 }
 function f22(x) {
     if (x !== undefined) {
-        x; // T & {}
+        x;
     }
     else {
-        x; // T
+        x;
     }
     if (x !== null) {
-        x; // T
+        x;
     }
     else {
-        x; // T
+        x;
     }
     if (x !== undefined && x !== null) {
-        x; // T & {}
+        x;
     }
     else {
-        x; // T
+        x;
     }
     if (x != undefined) {
-        x; // T & {}
+        x;
     }
     else {
-        x; // T
+        x;
     }
     if (x != null) {
-        x; // T & {}
+        x;
     }
     else {
-        x; // T
+        x;
     }
 }
 function f23(x) {
     if (x !== undefined) {
-        x; // T & {} | null
+        x;
     }
     if (x !== null) {
-        x; // T & {} | undefined
+        x;
     }
     if (x != undefined) {
-        x; // T & {}
+        x;
     }
     if (x != null) {
-        x; // T & {}
+        x;
     }
 }
 function f30(x) {
     if (typeof x === "object") {
-        x; // object
+        x;
     }
 }
 function f31(x) {
     if (typeof x === "object") {
-        x; // T & object | T & null
+        x;
     }
     if (x && typeof x === "object") {
-        x; // T & object
+        x;
     }
     if (typeof x === "object" && x) {
-        x; // T & object
+        x;
     }
 }
 function f32(x) {
     if (typeof x === "object") {
-        x; // T & object
+        x;
     }
 }
 function possiblyNull(x) {
-    return !!true ? x : null; // T | null
+    return !!true ? x : null;
 }
 function possiblyUndefined(x) {
-    return !!true ? x : undefined; // T | undefined
+    return !!true ? x : undefined;
 }
 function possiblyNullOrUndefined(x) {
-    return possiblyUndefined(possiblyNull(x)); // T | null | undefined
+    return possiblyUndefined(possiblyNull(x));
 }
 function ensureNotNull(x) {
     if (x === null)
         throw Error();
-    return x; // T & ({} | undefined)
+    return x;
 }
 function ensureNotUndefined(x) {
     if (x === undefined)
         throw Error();
-    return x; // T & ({} | null)
+    return x;
 }
 function ensureNotNullOrUndefined(x) {
-    return ensureNotUndefined(ensureNotNull(x)); // T & {}
+    return ensureNotUndefined(ensureNotNull(x));
 }
 function f40(a, b) {
-    var a1 = ensureNotNullOrUndefined(a); // string
-    var b1 = ensureNotNullOrUndefined(b); // number
+    let a1 = ensureNotNullOrUndefined(a);
+    let b1 = ensureNotNullOrUndefined(b);
 }
 function f41(a) {
-    var a1 = ensureNotUndefined(ensureNotNull(a)); // T & {}
-    var a2 = ensureNotNull(ensureNotUndefined(a)); // T & {}
-    var a3 = ensureNotNull(ensureNotNull(a)); // T & {} | T & undefined
-    var a4 = ensureNotUndefined(ensureNotUndefined(a)); // T & {} | T & null
-    var a5 = ensureNotNullOrUndefined(ensureNotNullOrUndefined(a)); // T & {}
-    var a6 = ensureNotNull(possiblyNullOrUndefined(a)); // T & {} | undefined
-    var a7 = ensureNotUndefined(possiblyNullOrUndefined(a)); // T & {} | null
-    var a8 = ensureNotNull(possiblyUndefined(a)); // T & {} | undefined
-    var a9 = ensureNotUndefined(possiblyNull(a)); // T & {} | null
+    let a1 = ensureNotUndefined(ensureNotNull(a));
+    let a2 = ensureNotNull(ensureNotUndefined(a));
+    let a3 = ensureNotNull(ensureNotNull(a));
+    let a4 = ensureNotUndefined(ensureNotUndefined(a));
+    let a5 = ensureNotNullOrUndefined(ensureNotNullOrUndefined(a));
+    let a6 = ensureNotNull(possiblyNullOrUndefined(a));
+    let a7 = ensureNotUndefined(possiblyNullOrUndefined(a));
+    let a8 = ensureNotNull(possiblyUndefined(a));
+    let a9 = ensureNotUndefined(possiblyNull(a));
 }
-// Repro from #48468
 function deepEquals(a, b) {
     if (typeof a !== 'object' || typeof b !== 'object' || !a || !b) {
         return false;
@@= skipped -219, +217 lines =@@
     if (Array.isArray(a) || Array.isArray(b)) {
         return false;
     }
-    if (Object.keys(a).length !== Object.keys(b).length) { // Error here
+    if (Object.keys(a).length !== Object.keys(b).length) {
         return false;
     }
     return true;
 }
-// Repro from #49386
 function foo(x) {
-    var y = x;
+    let y = x;
     if (y !== null) {
         y;
     }
 }
-// We allow an unconstrained object of a generic type `T` to be indexed by a key of type `keyof T`
-// without a check that the object is non-undefined and non-null. This is safe because `keyof T`
-// is `never` (meaning no possible keys) for any `T` that includes `undefined` or `null`.
 function ff1(t, k) {
     t[k];
 }
@@= skipped -22, +18 lines =@@
     t[k];
 }
 function ff3(t, k) {
-    t[k]; // Error
+    t[k];
 }
 function ff4(t, k) {
     t[k];
 }
-ff1(null, 'foo'); // Error
-ff2(null, 'foo'); // Error
+ff1(null, 'foo');
+ff2(null, 'foo');
 ff3(null, 'foo');
-ff4(null, 'foo'); // Error
-// Generics and intersections with {}
+ff4(null, 'foo');
 function fx0(value) {
     if (value === 42) {
-        value; // T & {}
+        value;
     }
     else {
-        value; // T & ({} | null)
+        value;
     }
 }
 function fx1(value) {
     if (value === 42) {
-        value; // T & {}
+        value;
     }
     else {
-        value; // T & ({} | null)
+        value;
     }
 }
 function fx2(value) {
     if (value === 42) {
-        value; // T & {}
+        value;
     }
     else {
-        value; // T & ({} | null)
+        value;
     }
 }
 function fx3(value) {
     if (value === 42) {
-        value; // T & {}
+        value;
     }
     else {
-        value; // T & ({} | null)
+        value;
     }
 }
 function fx4(value) {
     if (value === 42) {
-        value; // T & {}
+        value;
     }
     else {
-        value; // T & ({} | null)
+        value;
     }
 }
 function fx5(value) {
     if (value === 42) {
-        value; // T & {}
+        value;
     }
     else {
-        value; // T & ({} | null)
+        value;
     }
 }
-// Double-equals narrowing
 function fx10(x, y) {
     if (x == y) {
-        x; // string | number
+        x;
     }
     else {
-        x; // string | number
+        x;
     }
     if (x != y) {
-        x; // string | number
+        x;
     }
     else {
-        x; // string | number
+        x;
     }
 }
-// Repros from #50706
 function SendBlob(encoding) {
     if (encoding !== undefined && encoding !== 'utf8') {
         throw new Error('encoding');
@@= skipped -99, +96 lines =@@
     }
 }
 function x(x, y) {
-    var r2 = y;
+    let r2 = y;
 }
 function assertNever(v) {
     throw new Error('never');
 }
 function fx20(value) {
     if (value === 'left') {
-        var foo_1 = value;
+        const foo = value;
     }
     else if (value === 'right') {
-        var bar = value;
+        const bar = value;
     }
     else {
         assertNever(value);
     }
 }
-
-
-//// [unknownControlFlow.d.ts]
-type T01 = {} & string;
-type T02 = {} & 'a';
-type T03 = {} & object;
-type T04 = {} & {
-    x: number;
-};
-type T05 = {} & null;
-type T06 = {} & undefined;
-type T07 = undefined & void;
-type T10 = string & {};
-type T11 = number & {};
-type T12 = bigint & {};
-type ThisNode = {};
-type ThatNode = {};
-type ThisOrThatNode = ThisNode | ThatNode;
-declare function f01(u: unknown): void;
-declare function f10(x: unknown): void;
-declare function f11<T>(x: T): void;
-declare function f12<T extends {}>(x: T): void;
-declare function f20(x: unknown): void;
-declare function f21<T>(x: T): void;
-declare function f22<T extends {} | undefined>(x: T): void;
-declare function f23<T>(x: T | undefined | null): void;
-declare function f30(x: {}): void;
-declare function f31<T>(x: T): void;
-declare function f32<T extends {} | undefined>(x: T): void;
-declare function possiblyNull<T>(x: T): T | null;
-declare function possiblyUndefined<T>(x: T): T | undefined;
-declare function possiblyNullOrUndefined<T>(x: T): T | null | undefined;
-declare function ensureNotNull<T>(x: T): T & ({} | undefined);
-declare function ensureNotUndefined<T>(x: T): T & ({} | null);
-declare function ensureNotNullOrUndefined<T>(x: T): T & {};
-declare function f40(a: string | undefined, b: number | null | undefined): void;
-type QQ<T> = NonNullable<NonNullable<NonNullable<T>>>;
-declare function f41<T>(a: T): void;
-declare function deepEquals<T>(a: T, b: T): boolean;
-declare function foo<T>(x: T | null): void;
-declare function ff1<T>(t: T, k: keyof T): void;
-declare function ff2<T>(t: T & {}, k: keyof T): void;
-declare function ff3<T>(t: T, k: keyof (T & {})): void;
-declare function ff4<T>(t: T & {}, k: keyof (T & {})): void;
-type Foo = {
-    [key: string]: unknown;
-};
-type NullableFoo = Foo | undefined;
-type Bar<T extends NullableFoo> = NonNullable<T>[string];
-declare function fx0<T>(value: T & ({} | null)): void;
-declare function fx1<T extends unknown>(value: T & ({} | null)): void;
-declare function fx2<T extends {}>(value: T & ({} | null)): void;
-declare function fx3<T extends {} | undefined>(value: T & ({} | null)): void;
-declare function fx4<T extends {} | null>(value: T & ({} | null)): void;
-declare function fx5<T extends {} | null | undefined>(value: T & ({} | null)): void;
-declare function fx10(x: string | number, y: number): void;
-declare function SendBlob(encoding: unknown): void;
-declare function doSomething1<T extends unknown>(value: T): T;
-declare function doSomething2(value: unknown): void;
-type TypeA = {
-    A: 'A';
-    B: 'B';
-};
-type TypeB = {
-    A: 'A';
-    B: 'B';
-    C: 'C';
-};
-type R<T extends keyof TypeA> = T extends keyof TypeB ? [TypeA[T], TypeB[T]] : never;
-type R2<T extends PropertyKey> = T extends keyof TypeA ? T extends keyof TypeB ? [TypeA[T], TypeB[T]] : never : never;
-type AB = "A" | "B";
-declare function x<T_AB extends AB>(x: T_AB & undefined, y: any): void;
-type Left = 'left';
-type Right = 'right' & {
-    right: 'right';
-};
-type Either = Left | Right;
-declare function assertNever(v: never): never;
-declare function fx20(value: Either): void;
