--- old.unionTypeCallSignatures3.types
+++ new.unionTypeCallSignatures3.types
@@= skipped -33, +33 lines =@@
 >sRest : string[]
 
 var fUnion: typeof f1 | typeof f2 | typeof f3 | typeof f4 | typeof f5 | typeof f6 | typeof f7;
->fUnion : ((s: string) => void) | ((s?: string) => void) | ((...s: string[]) => void) | ((s: string, s2?: string) => void) | ((s?: string, n?: number) => void) | ((s?: string, ...n: number[]) => void) | ((s: string, ...sRest: string[]) => void)
+>fUnion : (s: string) => void | (s?: string) => void | (...s: string[]) => void | (s: string, s2?: string) => void | (s?: string, n?: number) => void | (s?: string, ...n: number[]) => void | (s: string, ...sRest: string[]) => void
 >f1 : (s: string) => void
 >f2 : (s?: string) => void
 >f3 : (...s: string[]) => void
@@= skipped -11, +11 lines =@@
 
 fUnion(""); // All constituents can be called by passing a single string.
 >fUnion("") : void
->fUnion : ((s: string) => void) | ((s?: string) => void) | ((...s: string[]) => void) | ((s: string, s2?: string) => void) | ((s?: string, n?: number) => void) | ((s?: string, ...n: number[]) => void) | ((s: string, ...sRest: string[]) => void)
+>fUnion : (s: string) => void | (s?: string) => void | (...s: string[]) => void | (s: string, s2?: string) => void | (s?: string, n?: number) => void | (s?: string, ...n: number[]) => void | (s: string, ...sRest: string[]) => void
 >"" : ""
 
