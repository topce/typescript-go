--- old.assertionTypePredicates1.js
+++ new.assertionTypePredicates1.js
@@= skipped -260, +260 lines =@@
 
 
 //// [assertionTypePredicates1.js]
-"use strict";
-var __extends = (this && this.__extends) || (function () {
-    var extendStatics = function (d, b) {
-        extendStatics = Object.setPrototypeOf ||
-            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
-            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
-        return extendStatics(d, b);
-    };
-    return function (d, b) {
-        if (typeof b !== "function" && b !== null)
-            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
-        extendStatics(d, b);
-        function __() { this.constructor = d; }
-        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
-    };
-})();
-var assert = function (value) { };
+const assert = value => { };
 function f01(x) {
     if (!!true) {
         assert(typeof x === "string");
@@= skipped -96, +80 lines =@@
         x; // Unreachable
     }
 }
-var Test = /** @class */ (function () {
-    function Test() {
-    }
-    Test.prototype.assert = function (value) {
+class Test {
+    assert(value) {
         if (value)
             return;
         throw new Error();
-    };
-    Test.prototype.isTest2 = function () {
+    }
+    isTest2() {
         return this instanceof Test2;
-    };
-    Test.prototype.assertIsTest2 = function () {
+    }
+    assertIsTest2() {
         if (this instanceof Test2)
             return;
         throw new Error();
-    };
-    Test.prototype.assertThis = function () {
+    }
+    assertThis() {
         if (!this)
             return;
         throw new Error();
-    };
-    Test.prototype.bar = function () {
+    }
+    bar() {
         this.assertThis();
         this;
-    };
-    Test.prototype.foo = function (x) {
+    }
+    foo(x) {
         this.assert(typeof x === "string");
         x.length;
         if (this.isTest2()) {
@@= skipped -33, +31 lines =@@
         }
         this.assertIsTest2();
         this.z;
-    };
-    Test.prototype.baz = function (x) {
+    }
+    baz(x) {
         this.assert(false);
         x; // Unreachable
-    };
-    return Test;
-}());
-var Test2 = /** @class */ (function (_super) {
-    __extends(Test2, _super);
-    function Test2() {
-        var _this = _super !== null && _super.apply(this, arguments) || this;
-        _this.z = 0;
-        return _this;
     }
-    return Test2;
-}(Test));
-var Derived = /** @class */ (function (_super) {
-    __extends(Derived, _super);
-    function Derived() {
-        return _super !== null && _super.apply(this, arguments) || this;
-    }
-    Derived.prototype.foo = function (x) {
-        _super.prototype.assert.call(this, typeof x === "string");
+}
+class Test2 extends Test {
+    z = 0;
+}
+class Derived extends Test {
+    foo(x) {
+        super.assert(typeof x === "string");
         x.length;
-    };
-    Derived.prototype.baz = function (x) {
-        _super.prototype.assert.call(this, false);
+    }
+    baz(x) {
+        super.assert(false);
         x; // Unreachable
-    };
-    return Derived;
-}(Test));
+    }
+}
 function f11(items) {
-    for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
-        var item = items_1[_i];
+    for (let item of items) {
         if (item.isTest2()) {
             item.z;
         }
@@= skipped -42, +29 lines =@@
     }
 }
 function f20(x) {
-    var assert = function (value) { };
+    const assert = (value) => { };
     assert(typeof x === "string"); // Error
-    var a = [assert];
+    const a = [assert];
     a[0](typeof x === "string"); // Error
-    var t1 = new Test();
+    const t1 = new Test();
     t1.assert(typeof x === "string"); // Error
-    var t2 = new Test();
+    const t2 = new Test();
     t2.assert(typeof x === "string");
 }
 function example1(things) {
-    for (var _i = 0, things_1 = things; _i < things_1.length; _i++) {
-        var thing = things_1[_i];
+    for (let thing of things) {
         thing.isGood();
         thing.good;
     }
 }
-var TestPropertyDeclaration1 = /** @class */ (function () {
-    function TestPropertyDeclaration1() {
-        this.assert = function (value) { };
-    }
-    TestPropertyDeclaration1.prototype.other = function (x) {
+class TestPropertyDeclaration1 {
+    assert = (value) => { };
+    other(x) {
         this.assert(x); // error
         x;
-    };
-    return TestPropertyDeclaration1;
-}());
-var TestPropertyDeclaration2 = /** @class */ (function () {
-    function TestPropertyDeclaration2() {
-        this.assert = function (value) { };
     }
-    TestPropertyDeclaration2.prototype.other = function (x) {
+}
+class TestPropertyDeclaration2 {
+    assert = (value) => { };
+    other(x) {
         this.assert(x); // ok
         x;
-    };
-    return TestPropertyDeclaration2;
-}());
-var ChildInheritedPropertyDeclaration = /** @class */ (function (_super) {
-    __extends(ChildInheritedPropertyDeclaration, _super);
-    function ChildInheritedPropertyDeclaration() {
-        return _super !== null && _super.apply(this, arguments) || this;
     }
-    ChildInheritedPropertyDeclaration.prototype.other = function (x) {
+}
+class ChildInheritedPropertyDeclaration extends ParentInheritedPropertyDeclaration {
+    other(x) {
         this.assert(x); // ok
         x;
-    };
-    return ChildInheritedPropertyDeclaration;
-}(ParentInheritedPropertyDeclaration));
+    }
+}
 function testPropertySignature(x, y) {
     x.assert(y); // ok
     x;
@@= skipped -63, +51 lines =@@
     this.assert(x); // ok
     x;
 }
-
-
-//// [assertionTypePredicates1.d.ts]
-declare function isString(value: unknown): value is string;
-declare function isArrayOfStrings(value: unknown): value is string[];
-declare const assert: (value: unknown) => asserts value;
-declare function assertIsString(value: unknown): asserts value is string;
-declare function assertIsArrayOfStrings(value: unknown): asserts value is string[];
-declare function assertDefined<T>(value: T): asserts value is NonNullable<T>;
-declare function f01(x: unknown): void;
-declare function f02(x: string | undefined): void;
-declare function f03(x: string | undefined, assert: (value: unknown) => asserts value): void;
-declare namespace Debug {
-    function assert(value: unknown, message?: string): asserts value;
-    function assertDefined<T>(value: T): asserts value is NonNullable<T>;
-}
-declare function f10(x: string | undefined): void;
-declare class Test {
-    assert(value: unknown): asserts value;
-    isTest2(): this is Test2;
-    assertIsTest2(): asserts this is Test2;
-    assertThis(): asserts this;
-    bar(): void;
-    foo(x: unknown): void;
-    baz(x: number): void;
-}
-declare class Test2 extends Test {
-    z: number;
-}
-declare class Derived extends Test {
-    foo(x: unknown): void;
-    baz(x: number): void;
-}
-declare function f11(items: Test[]): void;
-declare let Q1: new (x: unknown) => x is string;
-declare let Q2: new (x: boolean) => asserts x;
-declare let Q3: new (x: unknown) => asserts x is string;
-declare class Wat {
-    get p1(): this is string;
-    set p1(x: this is string);
-    get p2(): asserts this is string;
-    set p2(x: asserts this is string);
-}
-declare function f20(x: unknown): void;
-interface Thing {
-    good: boolean;
-    isGood(): asserts this is GoodThing;
-}
-interface GoodThing {
-    good: true;
-}
-declare function example1(things: Thing[]): void;
-declare class TestPropertyDeclaration1 {
-    assert: (value: unknown) => asserts value;
-    other(x: unknown): void;
-}
-declare class TestPropertyDeclaration2 {
-    assert: (v: unknown) => asserts v;
-    other(x: unknown): void;
-}
-declare class ParentInheritedPropertyDeclaration {
-    assert: (value: unknown) => asserts value;
-}
-declare class ChildInheritedPropertyDeclaration extends ParentInheritedPropertyDeclaration {
-    other(x: unknown): void;
-}
-interface TestPropertySignature {
-    assert: (value: unknown) => asserts value;
-}
-declare function testPropertySignature(x: TestPropertySignature, y: unknown): void;
-declare function testFunctionThisParameter1(this: TestPropertySignature, x: unknown): void;
-interface TestMethodSignature {
-    assert(value: unknown): asserts value;
-}
-declare function testMethodSignature(x: TestMethodSignature, y: unknown): void;
-declare function testFunctionThisParameter2(this: TestMethodSignature, x: unknown): void;
