--- old.argumentsReferenceInFunction1_Js.types
+++ new.argumentsReferenceInFunction1_Js.types
@@= skipped -1, +1 lines =@@
 
 === index.js ===
 const format = function(f) {
->format : (f: any, ...args: any[]) => string
->function(f) {  var str = '';  var i = 1;  var args = arguments;  var len = args.length;  for (var x = args[i]; i < len; x = args[++i]) {    str += ' ' + x;  }  return str;} : (f: any, ...args: any[]) => string
+>format : (f: any) => string
+>function(f) {  var str = '';  var i = 1;  var args = arguments;  var len = args.length;  for (var x = args[i]; i < len; x = args[++i]) {    str += ' ' + x;  }  return str;} : (f: any) => string
 >f : any
 
   var str = '';
@@= skipped -50, +50 lines =@@
 };
 
 const debuglog = function() {
->debuglog : (...args: any[]) => string
->function() {  return format.apply(null, arguments);} : (...args: any[]) => string
+>debuglog : () => string
+>function() {  return format.apply(null, arguments);} : () => string
 
   return format.apply(null, arguments);
 >format.apply(null, arguments) : string
 >format.apply : { <T, R>(this: (this: T) => R, thisArg: T): R; <T, A extends any[], R>(this: (this: T, ...args: A) => R, thisArg: T, args: A): R; }
->format : (f: any, ...args: any[]) => string
+>format : (f: any) => string
 >apply : { <T, R>(this: (this: T) => R, thisArg: T): R; <T, A extends any[], R>(this: (this: T, ...args: A) => R, thisArg: T, args: A): R; }
 >arguments : IArguments
 
