--- old.fillInMissingTypeArgsOnJSConstructCalls.types
+++ new.fillInMissingTypeArgsOnJSConstructCalls.types
@@= skipped -1, +1 lines =@@
 
 === BaseA.js ===
 export default class BaseA {
->BaseA : BaseA
+>BaseA : default
 }
 === SubA.js ===
 import BaseA from './BaseA';
->BaseA : typeof BaseA
+>BaseA : typeof default
 
 export default class SubA extends BaseA {
->SubA : SubA
->BaseA : BaseA
+>SubA : default
+>BaseA : default
 }
 === BaseB.js ===
 import BaseA from './BaseA';
->BaseA : typeof BaseA
+>BaseA : typeof default
 
 export default class B<T: BaseA> {
->B : B<T, BaseA>
+>B : default<T, BaseA>
 
     _AClass: Class<T>;
 >_AClass : Class<T>
@@= skipped -33, +33 lines =@@
 }
 === SubB.js ===
 import SubA from './SubA';
->SubA : typeof SubA
+>SubA : typeof default
 
 import BaseB from './BaseB';
->BaseB : typeof BaseB
+>BaseB : typeof default
 
 export default class SubB extends BaseB<SubA> {
->SubB : SubB
->BaseB : BaseB<SubA, any>
+>SubB : default
+>BaseB : typeof default
 
     constructor() {
         super(SubA);
 >super(SubA) : void
->super : typeof BaseB
->SubA : typeof SubA
+>super : any
+>SubA : typeof default
     }
 }
 
