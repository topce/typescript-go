--- old.jsxChildrenGenericContextualTypes.types
+++ new.jsxChildrenGenericContextualTypes.types
@@= skipped -13, +13 lines =@@
 >key : string
 }
 const Elem = <T,U=never>(p: { prop: T, children: (t: T) => T }) => <div></div>;
->Elem : <T, U = never>(p: { prop: T; children: (t: T) => T; }) => JSX.Element
-><T,U=never>(p: { prop: T, children: (t: T) => T }) => <div></div> : <T, U = never>(p: { prop: T; children: (t: T) => T; }) => JSX.Element
+>Elem : <T, U>(p: { prop: T; children: (t: T) => T; }) => any
+><T,U=never>(p: { prop: T, children: (t: T) => T }) => <div></div> : <T, U>(p: { prop: T; children: (t: T) => T; }) => any
 >p : { prop: T; children: (t: T) => T; }
 >prop : T
 >children : (t: T) => T
 >t : T
-><div></div> : JSX.Element
+><div></div> : any
 >div : any
 >div : any
 
 Elem({prop: {a: "x"}, children: i => ({a: "z"})});
->Elem({prop: {a: "x"}, children: i => ({a: "z"})}) : JSX.Element
->Elem : <T, U = never>(p: { prop: T; children: (t: T) => T; }) => JSX.Element
+>Elem({prop: {a: "x"}, children: i => ({a: "z"})}) : any
+>Elem : <T, U>(p: { prop: T; children: (t: T) => T; }) => any
 >{prop: {a: "x"}, children: i => ({a: "z"})} : { prop: { a: string; }; children: (i: { a: string; }) => { a: string; }; }
 >prop : { a: string; }
 >{a: "x"} : { a: string; }
@@= skipped -27, +27 lines =@@
 >"z" : "z"
 
 const q = <Elem prop={{a: "x"}} children={i => ({a: "z"})} />
->q : JSX.Element
-><Elem prop={{a: "x"}} children={i => ({a: "z"})} /> : JSX.Element
->Elem : <T, U = never>(p: { prop: T; children: (t: T) => T; }) => JSX.Element
->prop : { a: string; }
+>q : any
+><Elem prop={{a: "x"}} children={i => ({a: "z"})} /> : any
+>Elem : <T, U>(p: { prop: T; children: (t: T) => T; }) => any
+>prop : any
 >{a: "x"} : { a: string; }
 >a : string
 >"x" : "x"
->children : (i: { a: string; }) => { a: string; }
->i => ({a: "z"}) : (i: { a: string; }) => { a: string; }
->i : { a: string; }
+>children : any
+>i => ({a: "z"}) : (i: any) => { a: string; }
+>i : any
 >({a: "z"}) : { a: string; }
 >{a: "z"} : { a: string; }
 >a : string
 >"z" : "z"
 
 const qq = <Elem prop={{a: "x"}}>{i => ({a: "z"})}</Elem>
->qq : JSX.Element
-><Elem prop={{a: "x"}}>{i => ({a: "z"})}</Elem> : JSX.Element
->Elem : <T, U = never>(p: { prop: T; children: (t: T) => T; }) => JSX.Element
->prop : { a: string; }
+>qq : any
+><Elem prop={{a: "x"}}>{i => ({a: "z"})}</Elem> : any
+>Elem : <T, U>(p: { prop: T; children: (t: T) => T; }) => any
+>prop : any
 >{a: "x"} : { a: string; }
 >a : string
 >"x" : "x"
->i => ({a: "z"}) : (i: { a: string; }) => { a: string; }
->i : { a: string; }
+>i => ({a: "z"}) : (i: any) => { a: string; }
+>i : any
 >({a: "z"}) : { a: string; }
 >{a: "z"} : { a: string; }
 >a : string
 >"z" : "z"
->Elem : <T, U = never>(p: { prop: T; children: (t: T) => T; }) => JSX.Element
+>Elem : <T, U>(p: { prop: T; children: (t: T) => T; }) => any
 
 interface LitProps<T> { prop: T, children: (x: this) => T }
 >prop : T
@@= skipped -37, +37 lines =@@
 >x : this
 
 const ElemLit = <T extends string>(p: LitProps<T>) => <div></div>;
->ElemLit : <T extends string>(p: LitProps<T>) => JSX.Element
-><T extends string>(p: LitProps<T>) => <div></div> : <T extends string>(p: LitProps<T>) => JSX.Element
+>ElemLit : <T extends string>(p: LitProps<T>) => any
+><T extends string>(p: LitProps<T>) => <div></div> : <T extends string>(p: LitProps<T>) => any
 >p : LitProps<T>
-><div></div> : JSX.Element
+><div></div> : any
 >div : any
 >div : any
 
 ElemLit({prop: "x", children: () => "x"});
->ElemLit({prop: "x", children: () => "x"}) : JSX.Element
->ElemLit : <T extends string>(p: LitProps<T>) => JSX.Element
+>ElemLit({prop: "x", children: () => "x"}) : any
+>ElemLit : <T extends string>(p: LitProps<T>) => any
 >{prop: "x", children: () => "x"} : { prop: "x"; children: () => "x"; }
 >prop : "x"
 >"x" : "x"
@@= skipped -18, +18 lines =@@
 >"x" : "x"
 
 const j = <ElemLit prop="x" children={() => "x"} />
->j : JSX.Element
-><ElemLit prop="x" children={() => "x"} /> : JSX.Element
->ElemLit : <T extends string>(p: LitProps<T>) => JSX.Element
->prop : "x"
->children : () => "x"
->() => "x" : () => "x"
+>j : any
+><ElemLit prop="x" children={() => "x"} /> : any
+>ElemLit : <T extends string>(p: LitProps<T>) => any
+>prop : any
+>children : any
+>() => "x" : () => string
 >"x" : "x"
 
 const jj = <ElemLit prop="x">{() => "x"}</ElemLit>
->jj : JSX.Element
-><ElemLit prop="x">{() => "x"}</ElemLit> : JSX.Element
->ElemLit : <T extends string>(p: LitProps<T>) => JSX.Element
->prop : "x"
->() => "x" : () => "x"
+>jj : any
+><ElemLit prop="x">{() => "x"}</ElemLit> : any
+>ElemLit : <T extends string>(p: LitProps<T>) => any
+>prop : any
+>() => "x" : () => string
 >"x" : "x"
->ElemLit : <T extends string>(p: LitProps<T>) => JSX.Element
+>ElemLit : <T extends string>(p: LitProps<T>) => any
 
 // Should error
 const arg = <ElemLit prop="x" children={p => "y"} />
->arg : JSX.Element
-><ElemLit prop="x" children={p => "y"} /> : JSX.Element
->ElemLit : <T extends string>(p: LitProps<T>) => JSX.Element
->prop : "x"
->children : (p: JSX.IntrinsicAttributes & LitProps<"x">) => "y"
->p => "y" : (p: JSX.IntrinsicAttributes & LitProps<"x">) => "y"
->p : JSX.IntrinsicAttributes & LitProps<"x">
+>arg : any
+><ElemLit prop="x" children={p => "y"} /> : any
+>ElemLit : <T extends string>(p: LitProps<T>) => any
+>prop : any
+>children : any
+>p => "y" : (p: any) => string
+>p : any
 >"y" : "y"
 
 const argchild = <ElemLit prop="x">{p => "y"}</ElemLit>
->argchild : JSX.Element
-><ElemLit prop="x">{p => "y"}</ElemLit> : JSX.Element
->ElemLit : <T extends string>(p: LitProps<T>) => JSX.Element
->prop : "x"
->p => "y" : (p: JSX.IntrinsicAttributes & LitProps<"x">) => "y"
->p : JSX.IntrinsicAttributes & LitProps<"x">
+>argchild : any
+><ElemLit prop="x">{p => "y"}</ElemLit> : any
+>ElemLit : <T extends string>(p: LitProps<T>) => any
+>prop : any
+>p => "y" : (p: any) => string
+>p : any
 >"y" : "y"
->ElemLit : <T extends string>(p: LitProps<T>) => JSX.Element
+>ElemLit : <T extends string>(p: LitProps<T>) => any
 
 const mismatched = <ElemLit prop="x">{() => 12}</ElemLit>
->mismatched : JSX.Element
-><ElemLit prop="x">{() => 12}</ElemLit> : JSX.Element
->ElemLit : <T extends string>(p: LitProps<T>) => JSX.Element
->prop : "x"
+>mismatched : any
+><ElemLit prop="x">{() => 12}</ElemLit> : any
+>ElemLit : <T extends string>(p: LitProps<T>) => any
+>prop : any
 >() => 12 : () => number
 >12 : 12
->ElemLit : <T extends string>(p: LitProps<T>) => JSX.Element
+>ElemLit : <T extends string>(p: LitProps<T>) => any
 
