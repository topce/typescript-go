--- old.reactReadonlyHOCAssignabilityReal.types
+++ new.reactReadonlyHOCAssignabilityReal.types
@@= skipped -2, +2 lines =@@
 === reactReadonlyHOCAssignabilityReal.tsx ===
 /// <reference path="react16.d.ts" />
 import * as React from "react";
->React : typeof React
+>React : any
 
 function myHigherOrderComponent<P>(Inner: React.ComponentClass<P & {name: string}>): React.ComponentClass<P> {
->myHigherOrderComponent : <P>(Inner: React.ComponentClass<P & { name: string; }>) => React.ComponentClass<P>
->Inner : React.ComponentClass<P & { name: string; }, any>
+>myHigherOrderComponent : <P>(Inner: ComponentClass<P & { name: string; }>) => ComponentClass<P>
+>Inner : ComponentClass<P & { name: string; }>
 >React : any
 >name : string
 >React : any
@@= skipped -12, +12 lines =@@
     return class OuterComponent extends React.Component<P> {
 >class OuterComponent extends React.Component<P> {        render() {            return <Inner {...this.props} name="Matt"/>;        }    } : typeof OuterComponent
 >OuterComponent : typeof OuterComponent
->React.Component : React.Component<P, {}, any>
->React : typeof React
->Component : typeof React.Component
+>React.Component : any
+>React : any
+>Component : any
 
         render() {
->render : () => JSX.Element
+>render : () => any
 
             return <Inner {...this.props} name="Matt"/>;
-><Inner {...this.props} name="Matt"/> : JSX.Element
->Inner : React.ComponentClass<P & { name: string; }, any>
->this.props : Readonly<{ children?: React.ReactNode; }> & Readonly<P>
+><Inner {...this.props} name="Matt"/> : any
+>Inner : ComponentClass<P & { name: string; }>
+>this.props : any
 >this : this
->props : Readonly<{ children?: React.ReactNode; }> & Readonly<P>
->name : "Matt"
+>props : any
+>name : any
         }
     };
 }
