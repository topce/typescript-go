--- old.reactHOCSpreadprops.types
+++ new.reactHOCSpreadprops.types
@@= skipped -2, +2 lines =@@
 === reactHOCSpreadprops.tsx ===
 /// <reference path="react16.d.ts" />
 import React = require("react");
->React : typeof React
+>React : any
 
 function f<P>(App: React.ComponentClass<P> | React.StatelessComponent<P>): void {
->f : <P>(App: React.ComponentClass<P> | React.StatelessComponent<P>) => void
->App : React.ComponentClass<P, any> | React.StatelessComponent<P>
+>f : <P>(App: any) => void
+>App : any
 >React : any
 >React : any
 
     class C extends React.Component<P & { x: number }> {
->C : C
->React.Component : React.Component<P & { x: number; }, {}, any>
->React : typeof React
->Component : typeof React.Component
+>C : C<P>
+>React.Component : any
+>React : any
+>Component : any
 >x : number
 
         render() {
->render : () => JSX.Element
+>render : () => any
 
             return <App {...this.props} />;
-><App {...this.props} /> : JSX.Element
->App : React.ComponentClass<P, any> | React.StatelessComponent<P>
->this.props : Readonly<{ children?: React.ReactNode; }> & Readonly<P & { x: number; }>
+><App {...this.props} /> : any
+>App : any
+>this.props : any
 >this : this
->props : Readonly<{ children?: React.ReactNode; }> & Readonly<P & { x: number; }>
+>props : any
         }
     }
 }
