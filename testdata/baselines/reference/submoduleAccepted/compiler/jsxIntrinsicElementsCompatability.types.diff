--- old.jsxIntrinsicElementsCompatability.types
+++ new.jsxIntrinsicElementsCompatability.types
@@= skipped -2, +2 lines =@@
 === jsxIntrinsicElementsCompatability.tsx ===
 /// <reference path="react16.d.ts" />
 import * as React from "react";
->React : typeof React
+>React : any
 
 function SomeComponent<T extends 'button' | 'a'>(props: { element?: T } & JSX.IntrinsicElements[T]): JSX.Element {
->SomeComponent : <T extends "button" | "a">(props: { element?: T; } & JSX.IntrinsicElements[T]) => JSX.Element
->props : { element?: T; } & JSX.IntrinsicElements[T]
+>SomeComponent : <T extends "a" | "button">(props: any) => Element
+>props : any
 >element : T | undefined
 >JSX : any
 >JSX : any
 
     // Just so the return value is RectElement, the rendered element doesnt matter
     return <div />
-><div /> : JSX.Element
+><div /> : any
 >div : any
 }
 
 function Test<T extends 'button' | 'a'>(el: T) {
->Test : <T extends "button" | "a">(el: T) => JSX.Element
+>Test : <T extends "a" | "button">(el: T) => any
 >el : T
 
     return <SomeComponent element={el} />
-><SomeComponent element={el} /> : JSX.Element
->SomeComponent : <T_1 extends "button" | "a">(props: { element?: T_1; } & JSX.IntrinsicElements[T_1]) => JSX.Element
->element : T
+><SomeComponent element={el} /> : any
+>SomeComponent : <T extends "a" | "button">(props: any) => Element
+>element : any
 >el : T
 }
