--- old.jsdocArrayObjectPromiseImplicitAny.types
+++ new.jsdocArrayObjectPromiseImplicitAny.types
@@= skipped -2, +2 lines =@@
 === jsdocArrayObjectPromiseImplicitAny.js ===
 /** @type {Array} */
 var anyArray = [5];
->anyArray : any[]
+>anyArray : number[]
 >[5] : number[]
 >5 : 5
 
@@= skipped -15, +15 lines =@@
  * @return {Array}
  */
 function returnAnyArray(arr) {
->returnAnyArray : (arr: any[]) => any[]
->arr : any[]
+>returnAnyArray : (arr: any) => any
+>arr : any
 
   return arr;
->arr : any[]
+>arr : any
 }
 
 /** @type {Promise} */
 var anyPromise = Promise.resolve(5);
->anyPromise : Promise<any>
+>anyPromise : Promise<number>
 >Promise.resolve(5) : Promise<number>
 >Promise.resolve : { (): Promise<void>; <T>(value: T): Promise<Awaited<T>>; <T>(value: T | PromiseLike<T>): Promise<Awaited<T>>; }
 >Promise : PromiseConstructor
@@= skipped -30, +30 lines =@@
  * @return {Promise}
  */
 function returnAnyPromise(pr) {
->returnAnyPromise : (pr: Promise<any>) => Promise<any>
->pr : Promise<any>
+>returnAnyPromise : (pr: any) => any
+>pr : any
 
   return pr;
->pr : Promise<any>
+>pr : any
 }
 
 /** @type {Object} */
 var anyObject = {valueOf: 1}; // not an error since assigning to any.
->anyObject : any
+>anyObject : { valueOf: number; }
 >{valueOf: 1} : { valueOf: number; }
 >valueOf : number
 >1 : 1
 
 /** @type {Object<string, number>} */
 var paramedObject = {valueOf: 1};
->paramedObject : { [x: string]: number; }
+>paramedObject : { valueOf: number; }
 >{valueOf: 1} : { valueOf: number; }
 >valueOf : number
 >1 : 1
