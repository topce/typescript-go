--- old.jsEnumTagOnObjectFrozen.types
+++ new.jsEnumTagOnObjectFrozen.types
@@= skipped -1, +1 lines =@@
 
 === usage.js ===
 const { Thing, useThing, cbThing } = require("./index");
->Thing : Readonly<{ a: "thing"; b: "chill"; }>
->useThing : (x: Thing) => void
->cbThing : (x: (x: Thing) => void) => void
->require("./index") : typeof import("index")
+>Thing : any
+>useThing : any
+>cbThing : any
+>require("./index") : any
 >require : any
 >"./index" : "./index"
 
 useThing(Thing.a);
->useThing(Thing.a) : void
->useThing : (x: Thing) => void
->Thing.a : "thing"
->Thing : Readonly<{ a: "thing"; b: "chill"; }>
->a : "thing"
+>useThing(Thing.a) : any
+>useThing : any
+>Thing.a : any
+>Thing : any
+>a : any
 
 /**
  * @typedef {Object} LogEntry
@@= skipped -21, +21 lines =@@
  */
 
 cbThing(type => {
->cbThing(type => {    /** @type {LogEntry} */    const logEntry = {        time: Date.now(),        type,    };}) : void
->cbThing : (x: (x: Thing) => void) => void
->type => {    /** @type {LogEntry} */    const logEntry = {        time: Date.now(),        type,    };} : (type: string) => void
->type : string
+>cbThing(type => {    /** @type {LogEntry} */    const logEntry = {        time: Date.now(),        type,    };}) : any
+>cbThing : any
+>type => {    /** @type {LogEntry} */    const logEntry = {        time: Date.now(),        type,    };} : (type: any) => void
+>type : any
 
     /** @type {LogEntry} */
     const logEntry = {
->logEntry : LogEntry
->{        time: Date.now(),        type,    } : { time: number; type: string; }
+>logEntry : { time: number; type: any; }
+>{        time: Date.now(),        type,    } : { time: number; type: any; }
 
         time: Date.now(),
 >time : number
@@= skipped -18, +18 lines =@@
 >now : () => number
 
         type,
->type : string
+>type : any
 
     };
 });
 
-=== index.js ===
-/** @enum {string} */
-const Thing = Object.freeze({
->Thing : Readonly<{ a: "thing"; b: "chill"; }>
->Object.freeze({    a: "thing",    b: "chill"}) : Readonly<{ a: "thing"; b: "chill"; }>
->Object.freeze : { <T extends Function>(f: T): T; <T extends { [idx: string]: U | null | undefined | object; }, U extends string | bigint | number | boolean | symbol>(o: T): Readonly<T>; <T>(o: T): Readonly<T>; }
->Object : ObjectConstructor
->freeze : { <T extends Function>(f: T): T; <T extends { [idx: string]: U | null | undefined | object; }, U extends string | bigint | number | boolean | symbol>(o: T): Readonly<T>; <T>(o: T): Readonly<T>; }
->{    a: "thing",    b: "chill"} : { a: "thing"; b: "chill"; }
-
-    a: "thing",
->a : "thing"
->"thing" : "thing"
-
-    b: "chill"
->b : "chill"
->"chill" : "chill"
-
-});
-
-exports.Thing = Thing;
->exports.Thing = Thing : Readonly<{ a: "thing"; b: "chill"; }>
->exports.Thing : Readonly<{ a: "thing"; b: "chill"; }>
->exports : typeof import("index")
->Thing : Readonly<{ a: "thing"; b: "chill"; }>
->Thing : Readonly<{ a: "thing"; b: "chill"; }>
-
-/**
- * @param {Thing} x
- */
-function useThing(x) {}
->useThing : (x: Thing) => void
->x : string
-
-exports.useThing = useThing;
->exports.useThing = useThing : (x: Thing) => void
->exports.useThing : (x: Thing) => void
->exports : typeof import("index")
->useThing : (x: Thing) => void
->useThing : (x: Thing) => void
-
-/**
- * @param {(x: Thing) => void} x
- */
-function cbThing(x) {}
->cbThing : (x: (x: Thing) => void) => void
->x : (x: Thing) => void
-
-exports.cbThing = cbThing;
->exports.cbThing = cbThing : (x: (x: Thing) => void) => void
->exports.cbThing : (x: (x: Thing) => void) => void
->exports : typeof import("index")
->cbThing : (x: (x: Thing) => void) => void
->cbThing : (x: (x: Thing) => void) => void
-
