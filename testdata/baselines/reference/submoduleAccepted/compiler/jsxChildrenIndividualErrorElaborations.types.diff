--- old.jsxChildrenIndividualErrorElaborations.types
+++ new.jsxChildrenIndividualErrorElaborations.types
@@= skipped -2, +2 lines =@@
 === index.tsx ===
 /// <reference path="react16.d.ts" />
 import * as React from "react";
->React : typeof React
+>React : any
 
 interface Props {
   children: (x: number) => string;
@@= skipped -9, +9 lines =@@
 }
 
 export function Blah(props: Props) {
->Blah : (props: Props) => JSX.Element
+>Blah : (props: Props) => any
 >props : Props
 
   return <></>;
-><></> : JSX.Element
+><></> : any
 }
 
 // Incompatible child.
 var a = <Blah>
->a : JSX.Element
-><Blah>  {x => x}</Blah> : JSX.Element
->Blah : (props: Props) => JSX.Element
+>a : any
+><Blah>  {x => x}</Blah> : any
+>Blah : (props: Props) => any
 
   {x => x}
->x => x : (x: number) => number
->x : number
->x : number
+>x => x : (x: any) => any
+>x : any
+>x : any
 
 </Blah>
->Blah : (props: Props) => JSX.Element
+>Blah : (props: Props) => any
 
 // Blah components don't accept text as child elements
 var a = <Blah>
->a : JSX.Element
-><Blah>  Hello unexpected text!</Blah> : JSX.Element
->Blah : (props: Props) => JSX.Element
+>a : any
+><Blah>  Hello unexpected text!</Blah> : any
+>Blah : (props: Props) => any
 
   Hello unexpected text!
 </Blah>
->Blah : (props: Props) => JSX.Element
+>Blah : (props: Props) => any
 
 // Blah components don't accept multiple children.
 var a = <Blah>
->a : JSX.Element
-><Blah>  {x => "" + x}  {x => "" + x}</Blah> : JSX.Element
->Blah : (props: Props) => JSX.Element
+>a : any
+><Blah>  {x => "" + x}  {x => "" + x}</Blah> : any
+>Blah : (props: Props) => any
 
   {x => "" + x}
->x => "" + x : (x: number) => string
->x : number
+>x => "" + x : (x: any) => string
+>x : any
 >"" + x : string
 >"" : ""
->x : number
+>x : any
 
   {x => "" + x}
->x => "" + x : (x: number) => string
->x : number
+>x => "" + x : (x: any) => string
+>x : any
 >"" + x : string
 >"" : ""
->x : number
+>x : any
 
 </Blah>
->Blah : (props: Props) => JSX.Element
+>Blah : (props: Props) => any
 
 interface PropsArr {
   children: ((x: number) => string)[];
@@= skipped -61, +61 lines =@@
 }
 
 export function Blah2(props: PropsArr) {
->Blah2 : (props: PropsArr) => JSX.Element
+>Blah2 : (props: PropsArr) => any
 >props : PropsArr
 
   return <></>;
-><></> : JSX.Element
+><></> : any
 }
 
 // Incompatible child.
 var a = <Blah2>
->a : JSX.Element
-><Blah2>  {x => x}</Blah2> : JSX.Element
->Blah2 : (props: PropsArr) => JSX.Element
+>a : any
+><Blah2>  {x => x}</Blah2> : any
+>Blah2 : (props: PropsArr) => any
 
   {x => x}
 >x => x : (x: any) => any
@@= skipped -19, +19 lines =@@
 >x : any
 
 </Blah2>
->Blah2 : (props: PropsArr) => JSX.Element
+>Blah2 : (props: PropsArr) => any
 
 // Blah2 components don't accept text as child elements
 var a = <Blah2>
->a : JSX.Element
-><Blah2>  Hello unexpected text!</Blah2> : JSX.Element
->Blah2 : (props: PropsArr) => JSX.Element
+>a : any
+><Blah2>  Hello unexpected text!</Blah2> : any
+>Blah2 : (props: PropsArr) => any
 
   Hello unexpected text!
 </Blah2>
->Blah2 : (props: PropsArr) => JSX.Element
+>Blah2 : (props: PropsArr) => any
 
 // Blah2 components don't accept multiple children of the wrong type.
 var a = <Blah2>
->a : JSX.Element
-><Blah2>  {x => x}  {x => x}</Blah2> : JSX.Element
->Blah2 : (props: PropsArr) => JSX.Element
+>a : any
+><Blah2>  {x => x}  {x => x}</Blah2> : any
+>Blah2 : (props: PropsArr) => any
 
   {x => x}
->x => x : (x: number) => number
->x : number
->x : number
+>x => x : (x: any) => any
+>x : any
+>x : any
 
   {x => x}
->x => x : (x: number) => number
->x : number
->x : number
+>x => x : (x: any) => any
+>x : any
+>x : any
 
 </Blah2>
->Blah2 : (props: PropsArr) => JSX.Element
+>Blah2 : (props: PropsArr) => any
 
 type Cb = (x: number) => string;
 >Cb : Cb
@@= skipped -37, +37 lines =@@
 
 interface PropsMixed {
   children: Cb | Cb[];
->children : Cb | Cb[]
+>children : Cb[] | Cb
 }
 
 export function Blah3(props: PropsMixed) {
->Blah3 : (props: PropsMixed) => JSX.Element
+>Blah3 : (props: PropsMixed) => any
 >props : PropsMixed
 
   return <></>;
-><></> : JSX.Element
+><></> : any
 }
 
 // Incompatible child.
 var a = <Blah3>
->a : JSX.Element
-><Blah3>  {x => x}</Blah3> : JSX.Element
->Blah3 : (props: PropsMixed) => JSX.Element
+>a : any
+><Blah3>  {x => x}</Blah3> : any
+>Blah3 : (props: PropsMixed) => any
 
   {x => x}
->x => x : (x: number) => number
->x : number
->x : number
+>x => x : (x: any) => any
+>x : any
+>x : any
 
 </Blah3>
->Blah3 : (props: PropsMixed) => JSX.Element
+>Blah3 : (props: PropsMixed) => any
 
 // Blah3 components don't accept text as child elements
 var a = <Blah3>
->a : JSX.Element
-><Blah3>  Hello unexpected text!</Blah3> : JSX.Element
->Blah3 : (props: PropsMixed) => JSX.Element
+>a : any
+><Blah3>  Hello unexpected text!</Blah3> : any
+>Blah3 : (props: PropsMixed) => any
 
   Hello unexpected text!
 </Blah3>
->Blah3 : (props: PropsMixed) => JSX.Element
+>Blah3 : (props: PropsMixed) => any
 
 // Blah3 components don't accept multiple children of the wrong type.
 var a = <Blah3>
->a : JSX.Element
-><Blah3>  {x => x}  {x => x}</Blah3> : JSX.Element
->Blah3 : (props: PropsMixed) => JSX.Element
+>a : any
+><Blah3>  {x => x}  {x => x}</Blah3> : any
+>Blah3 : (props: PropsMixed) => any
 
   {x => x}
->x => x : (x: number) => number
->x : number
->x : number
+>x => x : (x: any) => any
+>x : any
+>x : any
 
   {x => x}
->x => x : (x: number) => number
->x : number
->x : number
+>x => x : (x: any) => any
+>x : any
+>x : any
 
 </Blah3>
->Blah3 : (props: PropsMixed) => JSX.Element
+>Blah3 : (props: PropsMixed) => any
 
