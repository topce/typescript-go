--- old.reactSFCAndFunctionResolvable.types
+++ new.reactSFCAndFunctionResolvable.types
@@= skipped -0, +0 lines =@@
 //// [tests/cases/compiler/reactSFCAndFunctionResolvable.tsx] ////
 
-=== Performance Stats ===
-Assignability cache: 2,500
-Type Count: 5,000
-Instantiation count: 50,000
-Symbol count: 50,000
-
 === reactSFCAndFunctionResolvable.tsx ===
 /// <reference path="react16.d.ts" />
 
 import * as React from 'react';
->React : typeof React
+>React : any
 
 declare const Radio: (props: {}) => React.ReactElement<{}>;
->Radio : (props: {}) => React.ReactElement<{}>
+>Radio : (props: {}) => ReactElement<{}>
 >props : {}
 >React : any
 
 declare const OtherRadio: () => React.ReactElement<{}>;
->OtherRadio : () => React.ReactElement<{}>
+>OtherRadio : () => ReactElement<{}>
 >React : any
 
 declare const Checkbox: React.SFC;
->Checkbox : React.SFC<{}>
+>Checkbox : SFC
 >React : any
 
 declare const condition1: boolean;
@@= skipped -34, +28 lines =@@
 >condition3 : boolean
 
 const RandomComponent: React.SFC = () => {
->RandomComponent : React.SFC<{}>
+>RandomComponent : SFC
 >React : any
->() => {  const Component =    condition1      ? Radio      : Checkbox;  const OtherComponent =    condition2      ? OtherRadio      : Checkbox;  return condition1 ? <Component /> : <OtherComponent />;} : () => JSX.Element
+>() => {  const Component =    condition1      ? Radio      : Checkbox;  const OtherComponent =    condition2      ? OtherRadio      : Checkbox;  return condition1 ? <Component /> : <OtherComponent />;} : () => any
 
   const Component =
->Component : ((props: {}) => React.ReactElement<{}>) | React.SFC<{}>
+>Component : any
 
     condition1
->condition1      ? Radio      : Checkbox : ((props: {}) => React.ReactElement<{}>) | React.SFC<{}>
+>condition1      ? Radio      : Checkbox : any
 >condition1 : boolean
 
       ? Radio
->Radio : (props: {}) => React.ReactElement<{}>
+>Radio : (props: {}) => ReactElement<{}>
 
       : Checkbox;
->Checkbox : React.SFC<{}>
+>Checkbox : SFC
 
   const OtherComponent =
->OtherComponent : (() => React.ReactElement<{}>) | React.SFC<{}>
+>OtherComponent : any
 
     condition2
->condition2      ? OtherRadio      : Checkbox : (() => React.ReactElement<{}>) | React.SFC<{}>
+>condition2      ? OtherRadio      : Checkbox : any
 >condition2 : boolean
 
       ? OtherRadio
->OtherRadio : () => React.ReactElement<{}>
+>OtherRadio : () => ReactElement<{}>
 
       : Checkbox;
->Checkbox : React.SFC<{}>
+>Checkbox : SFC
 
   return condition1 ? <Component /> : <OtherComponent />;
->condition1 ? <Component /> : <OtherComponent /> : JSX.Element
+>condition1 ? <Component /> : <OtherComponent /> : any
 >condition1 : boolean
-><Component /> : JSX.Element
->Component : ((props: {}) => React.ReactElement<{}>) | React.SFC<{}>
-><OtherComponent /> : JSX.Element
->OtherComponent : (() => React.ReactElement<{}>) | React.SFC<{}>
+><Component /> : any
+>Component : any
+><OtherComponent /> : any
+>OtherComponent : any
 
 };
 
