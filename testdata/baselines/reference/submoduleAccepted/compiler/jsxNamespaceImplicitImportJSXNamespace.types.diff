--- old.jsxNamespaceImplicitImportJSXNamespace.types
+++ new.jsxNamespaceImplicitImportJSXNamespace.types
@@= skipped -91, +91 lines =@@
 >JSXInternal : any
 
 export function jsx(
->jsx : { (type: string, props: JSXInternal.HTMLAttributes & JSXInternal.SVGAttributes & Record<string, any> & { children?: ComponentChild; }, key?: string): VNode<any>; <P>(type: ComponentType<P>, props: Attributes & P & { children?: ComponentChild; }, key?: string): VNode<any>; }
+>jsx : { (type: string, props: HTMLAttributes<{}> & SVGAttributes<{}> & Record<string, any> & { children?: ComponentChild | undefined; }, key?: string | undefined): VNode<any>; <P>(type: ComponentType<P>, props: P & { children?: ComponentChild | undefined; }, key?: string | undefined): VNode<any>; }
 
     type: string,
 >type : string
 
     props: JSXInternal.HTMLAttributes &
->props : JSXInternal.HTMLAttributes<{}> & JSXInternal.SVGAttributes<{}> & Record<string, any> & { children?: ComponentChild; }
+>props : HTMLAttributes<{}> & SVGAttributes<{}> & Record<string, any> & { children?: ComponentChild | undefined; }
 >JSXInternal : any
 
         JSXInternal.SVGAttributes &
@@= skipped -20, +20 lines =@@
 
 ): VNode<any>;
 export function jsx<P>(
->jsx : { (type: string, props: JSXInternal.HTMLAttributes & JSXInternal.SVGAttributes & Record<string, any> & { children?: ComponentChild; }, key?: string): VNode<any>; <P>(type: ComponentType<P>, props: Attributes & P & { children?: ComponentChild; }, key?: string): VNode<any>; }
+>jsx : { (type: string, props: HTMLAttributes<{}> & SVGAttributes<{}> & Record<string, any> & { children?: ComponentChild | undefined; }, key?: string | undefined): VNode<any>; <P>(type: ComponentType<P>, props: P & { children?: ComponentChild | undefined; }, key?: string | undefined): VNode<any>; }
 
     type: ComponentType<P>,
 >type : ComponentType<P>
 
     props: Attributes & P & { children?: ComponentChild },
->props : P & { children?: ComponentChild; }
+>props : P & { children?: ComponentChild | undefined; }
 >children : ComponentChild | undefined
 
     key?: string
@@= skipped -16, +16 lines =@@
 
 
 export function jsxs(
->jsxs : { (type: string, props: JSXInternal.HTMLAttributes & JSXInternal.SVGAttributes & Record<string, any> & { children?: ComponentChild[]; }, key?: string): VNode<any>; <P>(type: ComponentType<P>, props: Attributes & P & { children?: ComponentChild[]; }, key?: string): VNode<any>; }
+>jsxs : { (type: string, props: HTMLAttributes<{}> & SVGAttributes<{}> & Record<string, any> & { children?: ComponentChild[] | undefined; }, key?: string | undefined): VNode<any>; <P>(type: ComponentType<P>, props: P & { children?: ComponentChild[] | undefined; }, key?: string | undefined): VNode<any>; }
 
     type: string,
 >type : string
 
     props: JSXInternal.HTMLAttributes &
->props : JSXInternal.HTMLAttributes<{}> & JSXInternal.SVGAttributes<{}> & Record<string, any> & { children?: ComponentChild[]; }
+>props : HTMLAttributes<{}> & SVGAttributes<{}> & Record<string, any> & { children?: ComponentChild[] | undefined; }
 >JSXInternal : any
 
         JSXInternal.SVGAttributes &
@@= skipped -20, +20 lines =@@
 
 ): VNode<any>;
 export function jsxs<P>(
->jsxs : { (type: string, props: JSXInternal.HTMLAttributes & JSXInternal.SVGAttributes & Record<string, any> & { children?: ComponentChild[]; }, key?: string): VNode<any>; <P>(type: ComponentType<P>, props: Attributes & P & { children?: ComponentChild[]; }, key?: string): VNode<any>; }
+>jsxs : { (type: string, props: HTMLAttributes<{}> & SVGAttributes<{}> & Record<string, any> & { children?: ComponentChild[] | undefined; }, key?: string | undefined): VNode<any>; <P>(type: ComponentType<P>, props: P & { children?: ComponentChild[] | undefined; }, key?: string | undefined): VNode<any>; }
 
     type: ComponentType<P>,
 >type : ComponentType<P>
 
     props: Attributes & P & { children?: ComponentChild[] },
->props : P & { children?: ComponentChild[]; }
+>props : P & { children?: ComponentChild[] | undefined; }
 >children : ComponentChild[] | undefined
 
     key?: string
@@= skipped -16, +16 lines =@@
 
 
 export function jsxDEV(
->jsxDEV : { (type: string, props: JSXInternal.HTMLAttributes & JSXInternal.SVGAttributes & Record<string, any> & { children?: ComponentChildren; }, key?: string): VNode<any>; <P>(type: ComponentType<P>, props: Attributes & P & { children?: ComponentChildren; }, key?: string): VNode<any>; }
+>jsxDEV : { (type: string, props: HTMLAttributes<{}> & SVGAttributes<{}> & Record<string, any> & { children?: ComponentChildren | undefined; }, key?: string | undefined): VNode<any>; <P>(type: ComponentType<P>, props: P & { children?: ComponentChildren | undefined; }, key?: string | undefined): VNode<any>; }
 
     type: string,
 >type : string
 
     props: JSXInternal.HTMLAttributes &
->props : JSXInternal.HTMLAttributes<{}> & JSXInternal.SVGAttributes<{}> & Record<string, any> & { children?: ComponentChildren; }
+>props : HTMLAttributes<{}> & SVGAttributes<{}> & Record<string, any> & { children?: ComponentChildren | undefined; }
 >JSXInternal : any
 
         JSXInternal.SVGAttributes &
@@= skipped -20, +20 lines =@@
 
 ): VNode<any>;
 export function jsxDEV<P>(
->jsxDEV : { (type: string, props: JSXInternal.HTMLAttributes & JSXInternal.SVGAttributes & Record<string, any> & { children?: ComponentChildren; }, key?: string): VNode<any>; <P>(type: ComponentType<P>, props: Attributes & P & { children?: ComponentChildren; }, key?: string): VNode<any>; }
+>jsxDEV : { (type: string, props: HTMLAttributes<{}> & SVGAttributes<{}> & Record<string, any> & { children?: ComponentChildren | undefined; }, key?: string | undefined): VNode<any>; <P>(type: ComponentType<P>, props: P & { children?: ComponentChildren | undefined; }, key?: string | undefined): VNode<any>; }
 
     type: ComponentType<P>,
 >type : ComponentType<P>
 
     props: Attributes & P & { children?: ComponentChildren },
->props : P & { children?: ComponentChildren; }
+>props : P & { children?: ComponentChildren | undefined; }
 >children : ComponentChildren | undefined
 
     key?: string
@@= skipped -16, +16 lines =@@
 
 export import JSX = JSXInternal;
 >JSX : any
->JSXInternal : error
+>JSXInternal : any
 
 === /index.tsx ===
 export const Comp = () => <div></div>;
->Comp : () => import("/node_modules/preact/index").JSXInternal.Element
->() => <div></div> : () => import("/node_modules/preact/index").JSXInternal.Element
-><div></div> : import("/node_modules/preact/index").JSXInternal.Element
+>Comp : () => any
+>() => <div></div> : () => any
+><div></div> : any
 >div : any
 >div : any
 
