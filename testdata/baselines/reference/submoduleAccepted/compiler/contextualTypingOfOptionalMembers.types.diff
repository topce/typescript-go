--- old.contextualTypingOfOptionalMembers.types
+++ new.contextualTypingOfOptionalMembers.types
@@= skipped -11, +11 lines =@@
 >state : State | undefined
 
     view?: (state: State, actions: Actions) => any;
->view : ((state: State, actions: Actions) => any) | undefined
+>view : (state: State, actions: Actions) => any | undefined
 >state : State
 >actions : Actions
 
@@= skipped -54, +54 lines =@@
 >x : string | T
 
 const y = foo({
->y : { bar(x: number): void; }
->foo({    bar(x) { // Should be typed number => void    }}) : { bar(x: number): void; }
+>y : { bar: (x: number) => void; }
+>foo({    bar(x) { // Should be typed number => void    }}) : { bar: (x: number) => void; }
 >foo : <T extends Bar>(x: string | T) => T
->{    bar(x) { // Should be typed number => void    }} : { bar(x: number): void; }
+>{    bar(x) { // Should be typed number => void    }} : { bar: (x: number) => void; }
 
     bar(x) { // Should be typed number => void
 >bar : (x: number) => void
@@= skipped -16, +16 lines =@@
 >state : State | undefined
 
     view?: (state: State, actions: Actions) => any;
->view : ((state: State, actions: Actions) => any) | undefined
+>view : (state: State, actions: Actions) => any | undefined
 >state : State
 >actions : Actions
 
@@= skipped -54, +54 lines =@@
 app3({
 >app3({    state: 100,    actions: [        s => s // Should be typed number => number    ],    view: (s, a) => undefined as any,}) : void
 >app3 : <State, Actions extends ActionsArray<State>>(obj: Options<State, Actions>) => void
->{    state: 100,    actions: [        s => s // Should be typed number => number    ],    view: (s, a) => undefined as any,} : { state: number; actions: ((s: number) => number)[]; view: (s: number, a: ((s: number) => number)[]) => any; }
+>{    state: 100,    actions: [        s => s // Should be typed number => number    ],    view: (s, a) => undefined as any,} : { state: number; actions: (s: number) => number[]; view: (s: number, a: (s: number) => number[]) => any; }
 
     state: 100,
 >state : number
 >100 : 100
 
     actions: [
->actions : ((s: number) => number)[]
->[        s => s // Should be typed number => number    ] : ((s: number) => number)[]
+>actions : (s: number) => number[]
+>[        s => s // Should be typed number => number    ] : (s: number) => number[]
 
         s => s // Should be typed number => number
 >s => s : (s: number) => number
@@= skipped -17, +17 lines =@@
 
     ],
     view: (s, a) => undefined as any,
->view : (s: number, a: ((s: number) => number)[]) => any
->(s, a) => undefined as any : (s: number, a: ((s: number) => number)[]) => any
+>view : (s: number, a: (s: number) => number[]) => any
+>(s, a) => undefined as any : (s: number, a: (s: number) => number[]) => any
 >s : number
->a : ((s: number) => number)[]
+>a : (s: number) => number[]
 >undefined as any : any
 >undefined : undefined
 
@@= skipped -21, +21 lines =@@
 }
 
 declare function App4<State, Actions extends ActionsObjectOr<State>>(props: Options<State, Actions>["actions"] & { state: State }): JSX.Element;
->App4 : <State, Actions extends ActionsObjectOr<State>>(props: Options<State, Actions>["actions"] & { state: State; }) => JSX.Element
+>App4 : <State, Actions extends ActionsObjectOr<State>>(props: (string | Actions) & { state: State; }) => Element
 >props : (string | Actions) & { state: State; }
 >state : State
 >JSX : any
 
 const a = <App4 state={100} foo={s => s} />; // TODO: should be number => number, but JSX resolution is missing an inferential pass
->a : JSX.Element
-><App4 state={100} foo={s => s} /> : JSX.Element
->App4 : <State, Actions extends ActionsObjectOr<State>>(props: Options<State, Actions>["actions"] & { state: State; }) => JSX.Element
->state : number
+>a : any
+><App4 state={100} foo={s => s} /> : any
+>App4 : <State, Actions extends ActionsObjectOr<State>>(props: (string | Actions) & { state: State; }) => Element
+>state : any
 >100 : 100
->foo : (s: number) => number
->s => s : (s: number) => number
->s : number
->s : number
+>foo : any
+>s => s : (s: any) => any
+>s : any
+>s : any
 
