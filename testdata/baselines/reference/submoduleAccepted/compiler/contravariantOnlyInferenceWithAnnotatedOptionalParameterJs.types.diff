--- old.contravariantOnlyInferenceWithAnnotatedOptionalParameterJs.types
+++ new.contravariantOnlyInferenceWithAnnotatedOptionalParameterJs.types
@@= skipped -6, +6 lines =@@
  * @returns {T}
  */
 function filter(predicate) {
->filter : <T>(predicate: (value: T, index: number) => boolean) => T
->predicate : (value: T, index: number) => boolean
+>filter : (predicate: any) => null
+>predicate : any
 
   return /** @type {any} */ (null);
->(null) : any
+>(null) : null
 }
 
 const a = filter(
->a : number | undefined
->filter(  /**   * @param {number} [pose]   */  (pose) => true) : number | undefined
->filter : <T>(predicate: (value: T, index: number) => boolean) => T
+>a : null
+>filter(  /**   * @param {number} [pose]   */  (pose) => true) : null
+>filter : (predicate: any) => null
 
   /**
    * @param {number} [pose]
    */
   (pose) => true
->(pose) => true : (pose?: number) => true
->pose : number | undefined
+>(pose) => true : (pose: any) => boolean
+>pose : any
 >true : true
 
 );
 
 const b = filter(
->b : number | undefined
->filter(  /**   * @param {number} [pose]   * @param {number} [_]   */  (pose, _) => true) : number | undefined
->filter : <T>(predicate: (value: T, index: number) => boolean) => T
+>b : null
+>filter(  /**   * @param {number} [pose]   * @param {number} [_]   */  (pose, _) => true) : null
+>filter : (predicate: any) => null
 
   /**
    * @param {number} [pose]
    * @param {number} [_]
    */
   (pose, _) => true
->(pose, _) => true : (pose?: number, _?: number) => true
->pose : number | undefined
->_ : number | undefined
+>(pose, _) => true : (pose: any, _: any) => boolean
+>pose : any
+>_ : any
 >true : true
 
 );
