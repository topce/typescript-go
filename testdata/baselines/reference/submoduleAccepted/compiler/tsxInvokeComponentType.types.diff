--- old.tsxInvokeComponentType.types
+++ new.tsxInvokeComponentType.types
@@= skipped -2, +2 lines =@@
 === tsxInvokeComponentType.tsx ===
 /// <reference path="react16.d.ts" />
 import React, { ComponentType } from "react";
->React : typeof React
+>React : any
 >ComponentType : any
 
 declare const Elem: ComponentType<{ someKey: string }>;
->Elem : React.ComponentType<{ someKey: string; }>
+>Elem : ComponentType<{ someKey: string; }>
 >someKey : string
 
 const bad = <Elem />;
->bad : JSX.Element
-><Elem /> : JSX.Element
->Elem : React.ComponentType<{ someKey: string; }>
+>bad : any
+><Elem /> : any
+>Elem : ComponentType<{ someKey: string; }>
 
 const good = <Elem someKey="ok" />;
->good : JSX.Element
-><Elem someKey="ok" /> : JSX.Element
->Elem : React.ComponentType<{ someKey: string; }>
->someKey : string
+>good : any
+><Elem someKey="ok" /> : any
+>Elem : ComponentType<{ someKey: string; }>
+>someKey : any
 
 declare const Elem2: ComponentType<{ opt?: number }>;
->Elem2 : React.ComponentType<{ opt?: number; }>
+>Elem2 : ComponentType<{ opt?: number | undefined; }>
 >opt : number | undefined
 
 const alsoOk = <Elem2>text</Elem2>;
->alsoOk : JSX.Element
-><Elem2>text</Elem2> : JSX.Element
->Elem2 : React.ComponentType<{ opt?: number; }>
->Elem2 : React.ComponentType<{ opt?: number; }>
+>alsoOk : any
+><Elem2>text</Elem2> : any
+>Elem2 : ComponentType<{ opt?: number | undefined; }>
+>Elem2 : ComponentType<{ opt?: number | undefined; }>
 
