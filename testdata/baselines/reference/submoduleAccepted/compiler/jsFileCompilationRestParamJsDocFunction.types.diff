--- old.jsFileCompilationRestParamJsDocFunction.types
+++ new.jsFileCompilationRestParamJsDocFunction.types
@@= skipped -11, +11 lines =@@
  * @returns {*} Returns the result of `func`.
  */
 function apply(func, thisArg, ...args) {
->apply : (func: Function, thisArg: any, ...args: any[]) => any
->func : Function
+>apply : (func: any, thisArg: any, ...args: any[]) => any
+>func : any
 >thisArg : any
 >args : any[]
 
@@= skipped -17, +17 lines =@@
         case 0: return func.call(thisArg);
 >0 : 0
 >func.call(thisArg) : any
->func.call : (this: Function, thisArg: any, ...argArray: any[]) => any
->func : Function
->call : (this: Function, thisArg: any, ...argArray: any[]) => any
+>func.call : any
+>func : any
+>call : any
 >thisArg : any
 
         case 1: return func.call(thisArg, args[0]);
 >1 : 1
 >func.call(thisArg, args[0]) : any
->func.call : (this: Function, thisArg: any, ...argArray: any[]) => any
->func : Function
->call : (this: Function, thisArg: any, ...argArray: any[]) => any
+>func.call : any
+>func : any
+>call : any
 >thisArg : any
 >args[0] : any
 >args : any[]
@@= skipped -19, +19 lines =@@
         case 2: return func.call(thisArg, args[0], args[1]);
 >2 : 2
 >func.call(thisArg, args[0], args[1]) : any
->func.call : (this: Function, thisArg: any, ...argArray: any[]) => any
->func : Function
->call : (this: Function, thisArg: any, ...argArray: any[]) => any
+>func.call : any
+>func : any
+>call : any
 >thisArg : any
 >args[0] : any
 >args : any[]
@@= skipped -14, +14 lines =@@
         case 3: return func.call(thisArg, args[0], args[1], args[2]);
 >3 : 3
 >func.call(thisArg, args[0], args[1], args[2]) : any
->func.call : (this: Function, thisArg: any, ...argArray: any[]) => any
->func : Function
->call : (this: Function, thisArg: any, ...argArray: any[]) => any
+>func.call : any
+>func : any
+>call : any
 >thisArg : any
 >args[0] : any
 >args : any[]
@@= skipped -16, +16 lines =@@
     }
     return func.apply(thisArg, args);
 >func.apply(thisArg, args) : any
->func.apply : (this: Function, thisArg: any, argArray?: any) => any
->func : Function
->apply : (this: Function, thisArg: any, argArray?: any) => any
+>func.apply : any
+>func : any
+>apply : any
 >thisArg : any
 >args : any[]
 }
 
 export default apply;
->apply : (func: Function, thisArg: any, ...args: any[]) => any
+>apply : (func: any, thisArg: any, ...args: any[]) => any
 
