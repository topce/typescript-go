--- old.argumentsSpreadRestIterables(target=esnext).types
+++ new.argumentsSpreadRestIterables(target=esnext).types
@@= skipped -1, +1 lines =@@
 
 === argumentsSpreadRestIterables.tsx ===
 declare const itNum: Iterable<number>
->itNum : Iterable<number>
+>itNum : Iterable<number, any, any>
 
 ;(function(...rest) {})(...itNum)
 >(function(...rest) {})(...itNum) : void
@@= skipped -8, +8 lines =@@
 >function(...rest) {} : (...rest: number[]) => void
 >rest : number[]
 >...itNum : number
->itNum : Iterable<number>
+>itNum : Iterable<number, any, any>
 
 ;(function(a, ...rest) {})('', ...itNum)
 >(function(a, ...rest) {})('', ...itNum) : void
@@= skipped -10, +10 lines =@@
 >rest : number[]
 >'' : ""
 >...itNum : number
->itNum : Iterable<number>
+>itNum : Iterable<number, any, any>
 
 ;(function(a, ...rest) {})('', true, ...itNum)
 >(function(a, ...rest) {})('', true, ...itNum) : void
->(function(a, ...rest) {}) : (a: string, rest_0: boolean, ...rest: number[]) => void
->function(a, ...rest) {} : (a: string, rest_0: boolean, ...rest: number[]) => void
+>(function(a, ...rest) {}) : (a: string, ...rest: [boolean, ...number[]]) => void
+>function(a, ...rest) {} : (a: string, ...rest: [boolean, ...number[]]) => void
 >a : string
 >rest : [boolean, ...number[]]
 >'' : ""
 >true : true
 >...itNum : number
->itNum : Iterable<number>
+>itNum : Iterable<number, any, any>
 
 declare function fn1<const T extends readonly unknown[]>(...args: T): T;
->fn1 : <const T extends readonly unknown[]>(...args: T) => T
+>fn1 : <T extends readonly unknown[]>(...args: T) => T
 >args : T
 
 const res1 = fn1(..."hello");
 >res1 : readonly string[]
 >fn1(..."hello") : readonly string[]
->fn1 : <const T extends readonly unknown[]>(...args: T) => T
+>fn1 : <T extends readonly unknown[]>(...args: T) => T
 >..."hello" : string
 >"hello" : "hello"
 
 const res2 = fn1(...itNum);
 >res2 : readonly number[]
 >fn1(...itNum) : readonly number[]
->fn1 : <const T extends readonly unknown[]>(...args: T) => T
+>fn1 : <T extends readonly unknown[]>(...args: T) => T
 >...itNum : number
->itNum : Iterable<number>
+>itNum : Iterable<number, any, any>
 
 const res3 = fn1(true, ..."hello");
 >res3 : readonly [true, ...string[]]
 >fn1(true, ..."hello") : readonly [true, ...string[]]
->fn1 : <const T extends readonly unknown[]>(...args: T) => T
+>fn1 : <T extends readonly unknown[]>(...args: T) => T
 >true : true
 >..."hello" : string
 >"hello" : "hello"
@@= skipped -42, +42 lines =@@
 const res4 = fn1(true, ...itNum);
 >res4 : readonly [true, ...number[]]
 >fn1(true, ...itNum) : readonly [true, ...number[]]
->fn1 : <const T extends readonly unknown[]>(...args: T) => T
+>fn1 : <T extends readonly unknown[]>(...args: T) => T
 >true : true
 >...itNum : number
->itNum : Iterable<number>
+>itNum : Iterable<number, any, any>
 
 // repro from #52781
 declare function foo<T extends unknown[]>(...args: T): T;
@@= skipped -22, +22 lines =@@
 >foo(...itNum) : number[]
 >foo : <T extends unknown[]>(...args: T) => T
 >...itNum : number
->itNum : Iterable<number>
+>itNum : Iterable<number, any, any>
 
 const p3 = foo(true, ..."hello");
 >p3 : [boolean, ...string[]]
@@= skipped -16, +16 lines =@@
 >foo : <T extends unknown[]>(...args: T) => T
 >true : true
 >...itNum : number
->itNum : Iterable<number>
+>itNum : Iterable<number, any, any>
 
