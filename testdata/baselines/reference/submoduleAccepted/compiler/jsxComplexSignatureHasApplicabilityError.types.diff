--- old.jsxComplexSignatureHasApplicabilityError.types
+++ new.jsxComplexSignatureHasApplicabilityError.types
@@= skipped -3, +3 lines =@@
 /// <reference path="react16.d.ts" />
 
 import * as React from "react";
->React : typeof React
+>React : any
 
 
 interface Props<T extends OptionValues> {
@@= skipped -25, +25 lines =@@
 >;
 
 export function createReactSingleSelect<
->createReactSingleSelect : <WrappedProps extends ReactSelectProps<any>>(WrappedComponent: React.ComponentType<WrappedProps>) => React.ComponentType<ReactSingleSelectProps<WrappedProps>>
+>createReactSingleSelect : <WrappedProps extends ReactSelectProps<any>>(WrappedComponent: ComponentType<WrappedProps>) => ComponentType<ReactSingleSelectProps<WrappedProps>>
 
     WrappedProps extends ReactSelectProps<any>
 >(
     WrappedComponent: React.ComponentType<WrappedProps>
->WrappedComponent : React.ComponentType<WrappedProps>
+>WrappedComponent : ComponentType<WrappedProps>
 >React : any
 
 ): React.ComponentType<ReactSingleSelectProps<WrappedProps>> {
 >React : any
 
     return (props) => {
->(props) => {        return (            <ReactSelectClass<ExtractValueType<WrappedProps>>                {...props}                multi={false}                autosize={false}                value={props.value}                onChange={(value) => {                    if (props.onChange) {                        props.onChange(value === null ? undefined : value);                    }                }}            />        );    } : (props: Omit<Omit<WrappedProps, "multi">, keyof Omit<WrappedProps, "multi"> & keyof Props<ExtractValueType<WrappedProps_1>>> & Props<ExtractValueType<WrappedProps>> & { children?: React.ReactNode; }) => JSX.Element
->props : Omit<Omit<WrappedProps, "multi">, keyof Omit<WrappedProps, "multi"> & keyof Props<ExtractValueType<WrappedProps_1>>> & Props<ExtractValueType<WrappedProps>> & { children?: React.ReactNode; }
+>(props) => {        return (            <ReactSelectClass<ExtractValueType<WrappedProps>>                {...props}                multi={false}                autosize={false}                value={props.value}                onChange={(value) => {                    if (props.onChange) {                        props.onChange(value === null ? undefined : value);                    }                }}            />        );    } : (props: any) => any
+>props : any
 
         return (
->(            <ReactSelectClass<ExtractValueType<WrappedProps>>                {...props}                multi={false}                autosize={false}                value={props.value}                onChange={(value) => {                    if (props.onChange) {                        props.onChange(value === null ? undefined : value);                    }                }}            />        ) : JSX.Element
+>(            <ReactSelectClass<ExtractValueType<WrappedProps>>                {...props}                multi={false}                autosize={false}                value={props.value}                onChange={(value) => {                    if (props.onChange) {                        props.onChange(value === null ? undefined : value);                    }                }}            />        ) : any
 
             <ReactSelectClass<ExtractValueType<WrappedProps>>
-><ReactSelectClass<ExtractValueType<WrappedProps>>                {...props}                multi={false}                autosize={false}                value={props.value}                onChange={(value) => {                    if (props.onChange) {                        props.onChange(value === null ? undefined : value);                    }                }}            /> : JSX.Element
+><ReactSelectClass<ExtractValueType<WrappedProps>>                {...props}                multi={false}                autosize={false}                value={props.value}                onChange={(value) => {                    if (props.onChange) {                        props.onChange(value === null ? undefined : value);                    }                }}            /> : any
 >ReactSelectClass : typeof ReactSelectClass
 
                 {...props}
->props : Omit<Omit<WrappedProps, "multi">, keyof Omit<WrappedProps, "multi"> & keyof Props<ExtractValueType<WrappedProps_1>>> & Props<ExtractValueType<WrappedProps>> & { children?: React.ReactNode; }
+>props : any
 
                 multi={false}
->multi : false
+>multi : any
 >false : false
 
                 autosize={false}
->autosize : false
+>autosize : any
 >false : false
 
                 value={props.value}
->value : ExtractValueType<WrappedProps> | Option<ExtractValueType<WrappedProps>> | undefined
->props.value : ExtractValueType<WrappedProps> | Option<ExtractValueType<WrappedProps>> | undefined
->props : Omit<Omit<WrappedProps, "multi">, keyof Omit<WrappedProps, "multi"> & keyof Props<ExtractValueType<WrappedProps_1>>> & Props<ExtractValueType<WrappedProps>> & { children?: React.ReactNode; }
->value : ExtractValueType<WrappedProps> | Option<ExtractValueType<WrappedProps>> | undefined
+>value : any
+>props.value : any
+>props : any
+>value : any
 
                 onChange={(value) => {
->onChange : (value: Option<ExtractValueType<WrappedProps>> | Options<ExtractValueType<WrappedProps>> | null) => void
->(value) => {                    if (props.onChange) {                        props.onChange(value === null ? undefined : value);                    }                } : (value: Option<ExtractValueType<WrappedProps>> | Options<ExtractValueType<WrappedProps>> | null) => void
->value : Option<ExtractValueType<WrappedProps>> | Options<ExtractValueType<WrappedProps>> | null
+>onChange : any
+>(value) => {                    if (props.onChange) {                        props.onChange(value === null ? undefined : value);                    }                } : (value: any) => void
+>value : any
 
                     if (props.onChange) {
->props.onChange : ((value: Option<ExtractValueType<WrappedProps>> | undefined) => void) | undefined
->props : Omit<Omit<WrappedProps, "multi">, keyof Omit<WrappedProps, "multi"> & keyof Props<ExtractValueType<WrappedProps_1>>> & Props<ExtractValueType<WrappedProps>> & { children?: React.ReactNode; }
->onChange : ((value: Option<ExtractValueType<WrappedProps>> | undefined) => void) | undefined
+>props.onChange : any
+>props : any
+>onChange : any
 
                         props.onChange(value === null ? undefined : value);
->props.onChange(value === null ? undefined : value) : void
->props.onChange : (value: Option<ExtractValueType<WrappedProps>> | undefined) => void
->props : Omit<Omit<WrappedProps, "multi">, keyof Omit<WrappedProps, "multi"> & keyof Props<ExtractValueType<WrappedProps_1>>> & Props<ExtractValueType<WrappedProps>> & { children?: React.ReactNode; }
->onChange : (value: Option<ExtractValueType<WrappedProps>> | undefined) => void
->value === null ? undefined : value : Option<ExtractValueType<WrappedProps>> | Options<ExtractValueType<WrappedProps>> | undefined
+>props.onChange(value === null ? undefined : value) : any
+>props.onChange : any
+>props : any
+>onChange : any
+>value === null ? undefined : value : any
 >value === null : boolean
->value : Option<ExtractValueType<WrappedProps>> | Options<ExtractValueType<WrappedProps>> | null
+>value : any
 >undefined : undefined
->value : Option<ExtractValueType<WrappedProps>> | Options<ExtractValueType<WrappedProps>>
+>value : any
                     }
                 }}
             />
@@= skipped -77, +77 lines =@@
 // Everything below here copied from "@types/react-select" version 1.3.4
 declare class ReactSelectClass<TValue = OptionValues> extends React.Component<ReactSelectProps<TValue>> {
 >ReactSelectClass : ReactSelectClass<TValue>
->React.Component : React.Component<ReactSelectProps<TValue>, {}, any>
->React : typeof React
->Component : typeof React.Component
+>React.Component : any
+>React : any
+>Component : any
 
     focus(): void;
 >focus : () => void
@@= skipped -13, +13 lines =@@
 }
 
 export type OptionComponentType<TValue = OptionValues> = React.ComponentType<OptionComponentProps<TValue>>;
->OptionComponentType : OptionComponentType<TValue>
+>OptionComponentType : ComponentType<OptionComponentProps<TValue>>
 >React : any
 
 export type ValueComponentType<TValue = OptionValues> =  React.ComponentType<ValueComponentProps<TValue>>;
->ValueComponentType : ValueComponentType<TValue>
+>ValueComponentType : ComponentType<ValueComponentProps<TValue>>
 >React : any
 
 export type HandlerRendererResult = JSX.Element | null | false;
->HandlerRendererResult : HandlerRendererResult
+>HandlerRendererResult : any
 >JSX : any
 >false : false
 
@@= skipped -56, +56 lines =@@
 >inputValue : string
 
 export type OnInputKeyDownHandler = React.KeyboardEventHandler<HTMLDivElement | HTMLInputElement>;
->OnInputKeyDownHandler : OnInputKeyDownHandler
+>OnInputKeyDownHandler : KeyboardEventHandler<HTMLDivElement | HTMLInputElement>
 >React : any
 
 export type OnMenuScrollToBottomHandler = () => void;
@@= skipped -10, +10 lines =@@
 >OnOpenHandler : OnOpenHandler
 
 export type OnFocusHandler = React.FocusEventHandler<HTMLDivElement | HTMLInputElement>;
->OnFocusHandler : OnFocusHandler
+>OnFocusHandler : FocusEventHandler<HTMLDivElement | HTMLInputElement>
 >React : any
 
 export type OnBlurHandler = React.FocusEventHandler<HTMLDivElement | HTMLInputElement>;
->OnBlurHandler : OnBlurHandler
+>OnBlurHandler : FocusEventHandler<HTMLDivElement | HTMLInputElement>
 >React : any
 
 export type OptionRendererHandler<TValue = OptionValues> = (option: Option<TValue>) => HandlerRendererResult;
@@= skipped -19, +19 lines =@@
 export type OnValueClickHandler<TValue = OptionValues> = (option: Option<TValue>, event: React.MouseEvent<HTMLAnchorElement>) => void;
 >OnValueClickHandler : OnValueClickHandler<TValue>
 >option : Option<TValue>
->event : React.MouseEvent<HTMLAnchorElement>
+>event : MouseEvent<HTMLAnchorElement>
 >React : any
 
 export type IsOptionUniqueHandler<TValue = OptionValues> = (arg: { option: Option<TValue>, options: Options<TValue>, labelKey: string, valueKey: string }) => boolean;
@@= skipped -248, +248 lines =@@
      * Arrow mouse down event handler.
      */
     onMouseDown: React.MouseEventHandler<any>;
->onMouseDown : React.MouseEventHandler<any>
+>onMouseDown : MouseEventHandler<any>
 >React : any
 
     /**
@@= skipped -27, +27 lines =@@
 >onRemove : SelectValueHandler<TValue> | undefined
 
     placeholder: ReactSelectProps<TValue>['placeholder'];
->placeholder : string | JSX.Element | undefined
+>placeholder : any
 
     value: Option<TValue>;
 >value : Option<TValue>
@@= skipped -10, +10 lines =@@
 }
 
 export interface ReactSelectProps<TValue = OptionValues> extends React.Props<ReactSelectClass<TValue>> {
->React : typeof React
+>React : any
 
     /**
      * text to display when `allowCreate` is true.
@@= skipped -235, +235 lines =@@
      * optional style to apply to the menu container
      */
     menuContainerStyle?: React.CSSProperties;
->menuContainerStyle : React.CSSProperties | undefined
+>menuContainerStyle : any
 >React : any
 
     /**
@@= skipped -13, +13 lines =@@
      * optional style to apply to the menu
      */
     menuStyle?: React.CSSProperties;
->menuStyle : React.CSSProperties | undefined
+>menuStyle : any
 >React : any
 
     /**
@@= skipped -21, +21 lines =@@
      * @default "No results found"
      */
     noResultsText?: string | JSX.Element;
->noResultsText : string | JSX.Element | undefined
+>noResultsText : any
 >JSX : any
 
     /**
      * onBlur handler: function (event) {}
      */
     onBlur?: OnBlurHandler;
->onBlur : OnBlurHandler | undefined
+>onBlur : any
 
     /**
      * whether to clear input on blur or not
@@= skipped -48, +48 lines =@@
      * onFocus handler: function (event) {}
      */
     onFocus?: OnFocusHandler;
->onFocus : OnFocusHandler | undefined
+>onFocus : any
 
     /**
      * onInputChange handler: function (inputValue) {}
@@= skipped -12, +12 lines =@@
      * onInputKeyDown handler: function (keyboardEvent) {}
      */
     onInputKeyDown?: OnInputKeyDownHandler;
->onInputKeyDown : OnInputKeyDownHandler | undefined
+>onInputKeyDown : any
 
     /**
      * fires when the menu is scrolled to the bottom; can be used to paginate options
@@= skipped -38, +38 lines =@@
      * option component to render in dropdown
      */
     optionComponent?: OptionComponentType<TValue>;
->optionComponent : OptionComponentType<TValue> | undefined
+>optionComponent : any
 
     /**
      * function which returns a custom way to render the options in the menu
@@= skipped -27, +27 lines =@@
      * @default "Select..."
      */
     placeholder?: string | JSX.Element;
->placeholder : string | JSX.Element | undefined
+>placeholder : any
 >JSX : any
 
     /**
@@= skipped -54, +54 lines =@@
      * initial field value
      */
     value?: Option<TValue> | Options<TValue> | string | string[] | number | number[] | boolean;
->value : string | number | boolean | Option<TValue> | Options<TValue> | string[] | number[] | undefined
+>value : string | number | boolean | string[] | number[] | Option<TValue> | Options<TValue> | undefined
 
     /**
      * the option property to use for the value
@@= skipped -20, +20 lines =@@
      *  optional style to apply to the control
      */
     style?: React.CSSProperties;
->style : React.CSSProperties | undefined
+>style : any
 >React : any
 
     /**
@@= skipped -13, +13 lines =@@
      *  value component to render
      */
     valueComponent?: ValueComponentType<TValue>;
->valueComponent : ValueComponentType<TValue> | undefined
+>valueComponent : any
 
     /**
      *  optional style to apply to the component wrapper
      */
     wrapperStyle?: React.CSSProperties;
->wrapperStyle : React.CSSProperties | undefined
+>wrapperStyle : any
 >React : any
 
     /**
