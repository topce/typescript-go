--- old.parenthesizedJSDocCastAtReturnStatement.types
+++ new.parenthesizedJSDocCastAtReturnStatement.types
@@= skipped -0, +0 lines =@@
 //// [tests/cases/compiler/parenthesizedJSDocCastAtReturnStatement.ts] ////
 
-=== Performance Stats ===
-Type Count: 1,000
-Instantiation count: 2,500
-
 === index.js ===
 /** @type {Map<string, string | Set<string>>} */
 const cache = new Map()
->cache : Map<string, string | Set<string>>
+>cache : Map<any, any>
 >new Map() : Map<any, any>
 >Map : MapConstructor
 
@@= skipped -15, +11 lines =@@
  * @returns {() => string}
  */
 const getStringGetter = (key) => {
->getStringGetter : (key: string) => () => string
->(key) => {  return () => {    return /** @type {string} */ (cache.get(key))  }} : (key: string) => () => string
->key : string
+>getStringGetter : (key: any) => () => any
+>(key) => {  return () => {    return /** @type {string} */ (cache.get(key))  }} : (key: any) => () => any
+>key : any
 
   return () => {
->() => {    return /** @type {string} */ (cache.get(key))  } : () => string
+>() => {    return /** @type {string} */ (cache.get(key))  } : () => any
 
     return /** @type {string} */ (cache.get(key))
->(cache.get(key)) : string
->cache.get(key) : string | Set<string> | undefined
->cache.get : (key: string) => string | Set<string> | undefined
->cache : Map<string, string | Set<string>>
->get : (key: string) => string | Set<string> | undefined
->key : string
+>(cache.get(key)) : any
+>cache.get(key) : any
+>cache.get : (key: any) => any
+>cache : Map<any, any>
+>get : (key: any) => any
+>key : any
   }
 }
 
