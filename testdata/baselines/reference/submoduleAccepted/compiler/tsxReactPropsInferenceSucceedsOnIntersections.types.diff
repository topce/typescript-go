--- old.tsxReactPropsInferenceSucceedsOnIntersections.types
+++ new.tsxReactPropsInferenceSucceedsOnIntersections.types
@@= skipped -3, +3 lines =@@
 /// <reference path="react16.d.ts" />
 
 import React from "react";
->React : typeof React
+>React : any
 
 export type ButtonProps<T = {}> = React.ButtonHTMLAttributes<HTMLButtonElement> & {
->ButtonProps : ButtonProps<T>
+>ButtonProps : any
 >React : any
 
     outline?: boolean;
@@= skipped -13, +13 lines =@@
 
 declare class Button<T = {}> extends React.Component<ButtonProps<T>> { }
 >Button : Button<T>
->React.Component : React.Component<ButtonProps<T>, {}, any>
->React : typeof React
->Component : typeof React.Component
+>React.Component : any
+>React : any
+>Component : any
 
 interface CustomButtonProps extends ButtonProps {
     customProp: string;
@@= skipped -10, +10 lines =@@
 }
 
 const CustomButton: React.SFC<CustomButtonProps> = props => <Button {...props} />;
->CustomButton : React.SFC<CustomButtonProps>
+>CustomButton : SFC<CustomButtonProps>
 >React : any
->props => <Button {...props} /> : (props: CustomButtonProps & { children?: React.ReactNode; }) => JSX.Element
->props : CustomButtonProps & { children?: React.ReactNode; }
-><Button {...props} /> : JSX.Element
+>props => <Button {...props} /> : (props: any) => any
+>props : any
+><Button {...props} /> : any
 >Button : typeof Button
->props : CustomButtonProps & { children?: React.ReactNode; }
+>props : any
 
