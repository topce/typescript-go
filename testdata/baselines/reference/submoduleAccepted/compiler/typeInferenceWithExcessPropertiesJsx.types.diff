--- old.typeInferenceWithExcessPropertiesJsx.types
+++ new.typeInferenceWithExcessPropertiesJsx.types
@@= skipped -3, +3 lines =@@
 /// <reference path="react16.d.ts" />
 
 import React = require('react');
->React : typeof React
+>React : any
 
 type TranslationEntry = {
 >TranslationEntry : TranslationEntry
@@= skipped -33, +33 lines =@@
 } : {});
 
 declare function T<Entry extends TranslationEntry>(
->T : <Entry extends TranslationEntry>(props: TProps<Entry>) => JSX.Element
+>T : <Entry extends TranslationEntry>(props: TProps<Entry>) => Element
 
     props: TProps<Entry>
 >props : TProps<Entry>
@@= skipped -9, +9 lines =@@
 >JSX : any
 
 <T getTranslationEntry={(allTranslations) => allTranslations.a} args="a" />
-><T getTranslationEntry={(allTranslations) => allTranslations.a} args="a" /> : JSX.Element
->T : <Entry extends TranslationEntry>(props: TProps<Entry>) => JSX.Element
->getTranslationEntry : (allTranslations: Translations) => { args: [string]; }
->(allTranslations) => allTranslations.a : (allTranslations: Translations) => { args: [string]; }
->allTranslations : Translations
->allTranslations.a : { args: [string]; }
->allTranslations : Translations
->a : { args: [string]; }
->args : string
+><T getTranslationEntry={(allTranslations) => allTranslations.a} args="a" /> : any
+>T : <Entry extends TranslationEntry>(props: TProps<Entry>) => Element
+>getTranslationEntry : any
+>(allTranslations) => allTranslations.a : (allTranslations: any) => any
+>allTranslations : any
+>allTranslations.a : any
+>allTranslations : any
+>a : any
+>args : any
 
