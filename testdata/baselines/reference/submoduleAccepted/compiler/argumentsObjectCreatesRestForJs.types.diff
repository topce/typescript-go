--- old.argumentsObjectCreatesRestForJs.types
+++ new.argumentsObjectCreatesRestForJs.types
@@= skipped -1, +1 lines =@@
 
 === main.js ===
 function allRest() { arguments; }
->allRest : (...args: any[]) => void
+>allRest : () => void
 >arguments : IArguments
 
 allRest();
 >allRest() : void
->allRest : (...args: any[]) => void
+>allRest : () => void
 
 allRest(1, 2, 3);
 >allRest(1, 2, 3) : void
->allRest : (...args: any[]) => void
+>allRest : () => void
 >1 : 1
 >2 : 2
 >3 : 3
 
 function someRest(x, y) { arguments; }
->someRest : (x: any, y: any, ...args: any[]) => void
+>someRest : (x: any, y: any) => void
 >x : any
 >y : any
 >arguments : IArguments
 
 someRest(); // x and y are still optional because they are in a JS file
 >someRest() : void
->someRest : (x: any, y: any, ...args: any[]) => void
+>someRest : (x: any, y: any) => void
 
 someRest(1, 2, 3);
 >someRest(1, 2, 3) : void
->someRest : (x: any, y: any, ...args: any[]) => void
+>someRest : (x: any, y: any) => void
 >1 : 1
 >2 : 2
 >3 : 3
@@= skipped -35, +35 lines =@@
  * @param {number} x - a thing
  */
 function jsdocced(x) { arguments; }
->jsdocced : (x: number, ...args: any[]) => void
->x : number
+>jsdocced : (x: any) => void
+>x : any
 >arguments : IArguments
 
 jsdocced(1);
 >jsdocced(1) : void
->jsdocced : (x: number, ...args: any[]) => void
+>jsdocced : (x: any) => void
 >1 : 1
 
 function dontDoubleRest(x, ...y) { arguments; }
