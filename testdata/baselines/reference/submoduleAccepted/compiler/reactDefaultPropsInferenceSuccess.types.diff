--- old.reactDefaultPropsInferenceSuccess.types
+++ new.reactDefaultPropsInferenceSuccess.types
@@= skipped -3, +3 lines =@@
 /// <reference path="react16.d.ts" />
 
 import React from 'react';
->React : typeof React
+>React : any
 
 interface BaseProps {
   when?: ((value: string) => boolean) | "a" | "b";
->when : "a" | "b" | ((value: string) => boolean) | undefined
+>when : "a" | "b" | (value: string) => boolean | undefined
 >value : string
 
   error?: boolean;
@@= skipped -16, +16 lines =@@
 
 class FieldFeedback<P extends Props = BaseProps> extends React.Component<P> {
 >FieldFeedback : FieldFeedback<P>
->React.Component : React.Component<P, {}, any>
->React : typeof React
->Component : typeof React.Component
+>React.Component : any
+>React : any
+>Component : any
 
   static defaultProps = {
 >defaultProps : { when: () => boolean; }
@@= skipped -16, +16 lines =@@
   };
 
   render() {
->render : () => JSX.Element
+>render : () => any
 
     return <div>Hello</div>;
-><div>Hello</div> : JSX.Element
+><div>Hello</div> : any
 >div : any
 >div : any
   }
@@= skipped -11, +11 lines =@@
 
 // OK
 const Test1 = () => <FieldFeedback when={value => !!value} />;
->Test1 : () => JSX.Element
->() => <FieldFeedback when={value => !!value} /> : () => JSX.Element
-><FieldFeedback when={value => !!value} /> : JSX.Element
+>Test1 : () => any
+>() => <FieldFeedback when={value => !!value} /> : () => any
+><FieldFeedback when={value => !!value} /> : any
 >FieldFeedback : typeof FieldFeedback
->when : (value: string) => boolean
->value => !!value : (value: string) => boolean
->value : string
+>when : any
+>value => !!value : (value: any) => boolean
+>value : any
 >!!value : boolean
 >!value : boolean
->value : string
+>value : any
 
 // Error: Void not assignable to boolean
 const Test2 = () => <FieldFeedback when={value => console.log(value)} />;
->Test2 : () => JSX.Element
->() => <FieldFeedback when={value => console.log(value)} /> : () => JSX.Element
-><FieldFeedback when={value => console.log(value)} /> : JSX.Element
+>Test2 : () => any
+>() => <FieldFeedback when={value => console.log(value)} /> : () => any
+><FieldFeedback when={value => console.log(value)} /> : any
 >FieldFeedback : typeof FieldFeedback
->when : (value: string) => void
->value => console.log(value) : (value: string) => void
->value : string
+>when : any
+>value => console.log(value) : (value: any) => void
+>value : any
 >console.log(value) : void
 >console.log : (...data: any[]) => void
 >console : Console
 >log : (...data: any[]) => void
->value : string
+>value : any
 
 class FieldFeedbackBeta<P extends Props = BaseProps> extends React.Component<P> {
 >FieldFeedbackBeta : FieldFeedbackBeta<P>
->React.Component : React.Component<P, {}, any>
->React : typeof React
->Component : typeof React.Component
+>React.Component : any
+>React : any
+>Component : any
 
   static defaultProps: BaseProps = {
 >defaultProps : BaseProps
@@= skipped -44, +44 lines =@@
   };
 
   render() {
->render : () => JSX.Element
+>render : () => any
 
     return <div>Hello</div>;
-><div>Hello</div> : JSX.Element
+><div>Hello</div> : any
 >div : any
 >div : any
   }
@@= skipped -11, +11 lines =@@
 
 // OK
 const Test1a = () => <FieldFeedbackBeta when={value => !!value} error>Hah</FieldFeedbackBeta>;
->Test1a : () => JSX.Element
->() => <FieldFeedbackBeta when={value => !!value} error>Hah</FieldFeedbackBeta> : () => JSX.Element
-><FieldFeedbackBeta when={value => !!value} error>Hah</FieldFeedbackBeta> : JSX.Element
+>Test1a : () => any
+>() => <FieldFeedbackBeta when={value => !!value} error>Hah</FieldFeedbackBeta> : () => any
+><FieldFeedbackBeta when={value => !!value} error>Hah</FieldFeedbackBeta> : any
 >FieldFeedbackBeta : typeof FieldFeedbackBeta
->when : (value: string) => boolean
->value => !!value : (value: string) => boolean
->value : string
+>when : any
+>value => !!value : (value: any) => boolean
+>value : any
 >!!value : boolean
 >!value : boolean
->value : string
->error : true
+>value : any
+>error : any
 >FieldFeedbackBeta : typeof FieldFeedbackBeta
 
 // Error: Void not assignable to boolean
 const Test2a = () => <FieldFeedbackBeta when={value => console.log(value)} error>Hah</FieldFeedbackBeta>;
->Test2a : () => JSX.Element
->() => <FieldFeedbackBeta when={value => console.log(value)} error>Hah</FieldFeedbackBeta> : () => JSX.Element
-><FieldFeedbackBeta when={value => console.log(value)} error>Hah</FieldFeedbackBeta> : JSX.Element
+>Test2a : () => any
+>() => <FieldFeedbackBeta when={value => console.log(value)} error>Hah</FieldFeedbackBeta> : () => any
+><FieldFeedbackBeta when={value => console.log(value)} error>Hah</FieldFeedbackBeta> : any
 >FieldFeedbackBeta : typeof FieldFeedbackBeta
->when : (value: string) => void
->value => console.log(value) : (value: string) => void
->value : string
+>when : any
+>value => console.log(value) : (value: any) => void
+>value : any
 >console.log(value) : void
 >console.log : (...data: any[]) => void
 >console : Console
 >log : (...data: any[]) => void
->value : string
->error : true
+>value : any
+>error : any
 >FieldFeedbackBeta : typeof FieldFeedbackBeta
 
 interface MyPropsProps extends Props {
@@= skipped -52, +52 lines =@@
   };
 
   render() {
->render : () => JSX.Element
+>render : () => any
 
     this.props.when("now"); // OK, always defined
->this.props.when("now") : boolean
->this.props.when : P["when"]
->this.props : Readonly<{ children?: React.ReactNode; }> & Readonly<P>
+>this.props.when("now") : any
+>this.props.when : any
+>this.props : any
 >this : this
->props : Readonly<{ children?: React.ReactNode; }> & Readonly<P>
->when : P["when"]
+>props : any
+>when : any
 >"now" : "now"
 
     return <div>Hello</div>;
-><div>Hello</div> : JSX.Element
+><div>Hello</div> : any
 >div : any
 >div : any
   }
@@= skipped -20, +20 lines =@@
 
 // OK
 const Test3 = () => <FieldFeedback2 when={value => !!value} />;
->Test3 : () => JSX.Element
->() => <FieldFeedback2 when={value => !!value} /> : () => JSX.Element
-><FieldFeedback2 when={value => !!value} /> : JSX.Element
+>Test3 : () => any
+>() => <FieldFeedback2 when={value => !!value} /> : () => any
+><FieldFeedback2 when={value => !!value} /> : any
 >FieldFeedback2 : typeof FieldFeedback2
->when : (value: string) => boolean
->value => !!value : (value: string) => boolean
->value : string
+>when : any
+>value => !!value : (value: any) => boolean
+>value : any
 >!!value : boolean
 >!value : boolean
->value : string
+>value : any
 
 // Error: Void not assignable to boolean
 const Test4 = () => <FieldFeedback2 when={value => console.log(value)} />;
->Test4 : () => JSX.Element
->() => <FieldFeedback2 when={value => console.log(value)} /> : () => JSX.Element
-><FieldFeedback2 when={value => console.log(value)} /> : JSX.Element
+>Test4 : () => any
+>() => <FieldFeedback2 when={value => console.log(value)} /> : () => any
+><FieldFeedback2 when={value => console.log(value)} /> : any
 >FieldFeedback2 : typeof FieldFeedback2
->when : (value: string) => void
->value => console.log(value) : (value: string) => void
->value : string
+>when : any
+>value => console.log(value) : (value: any) => void
+>value : any
 >console.log(value) : void
 >console.log : (...data: any[]) => void
 >console : Console
 >log : (...data: any[]) => void
->value : string
+>value : any
 
 // OK
 const Test5 = () => <FieldFeedback2 />;
->Test5 : () => JSX.Element
->() => <FieldFeedback2 /> : () => JSX.Element
-><FieldFeedback2 /> : JSX.Element
+>Test5 : () => any
+>() => <FieldFeedback2 /> : () => any
+><FieldFeedback2 /> : any
 >FieldFeedback2 : typeof FieldFeedback2
 
