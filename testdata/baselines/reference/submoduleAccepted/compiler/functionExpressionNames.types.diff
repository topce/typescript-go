--- old.functionExpressionNames.types
+++ new.functionExpressionNames.types
@@= skipped -1, +1 lines =@@
 
 === b.js ===
 exports.E = function() {
->exports.E = function() {    this.e = 'exported'} : typeof E
->exports.E : typeof E
->exports : typeof import("b")
->E : typeof E
->function() {    this.e = 'exported'} : typeof E
+>exports.E = function() {    this.e = 'exported'} : () => void
+>exports.E : any
+>exports : any
+>E : any
+>function() {    this.e = 'exported'} : () => void
 
     this.e = 'exported'
 >this.e = 'exported' : "exported"
 >this.e : any
->this : this
+>this : any
 >e : any
 >'exported' : "exported"
 }
 var e = new exports.E();
->e : E
->new exports.E() : E
->exports.E : typeof E
->exports : typeof import("b")
->E : typeof E
+>e : any
+>new exports.E() : any
+>exports.E : any
+>exports : any
+>E : any
 
 var o = {
->o : { C: typeof C; }
->{    C: function () {        this.c = 'nested object'    }} : { C: typeof C; }
+>o : { C: () => void; }
+>{    C: function () {        this.c = 'nested object'    }} : { C: () => void; }
 
     C: function () {
->C : typeof C
->function () {        this.c = 'nested object'    } : typeof C
+>C : () => void
+>function () {        this.c = 'nested object'    } : () => void
 
         this.c = 'nested object'
 >this.c = 'nested object' : "nested object"
 >this.c : any
->this : { C: typeof C; }
+>this : any
 >c : any
 >'nested object' : "nested object"
     }
 }
 var og = new o.C();
->og : C
->new o.C() : C
->o.C : typeof C
->o : { C: typeof C; }
->C : typeof C
+>og : any
+>new o.C() : any
+>o.C : () => void
+>o : { C: () => void; }
+>C : () => void
 
 var V = function () {
->V : typeof V
->function () {    this.v = 'simple'} : typeof V
+>V : () => void
+>function () {    this.v = 'simple'} : () => void
 
     this.v = 'simple'
 >this.v = 'simple' : "simple"
 >this.v : any
->this : this
+>this : any
 >v : any
 >'simple' : "simple"
 }
 var v = new V();
->v : V
->new V() : V
->V : typeof V
+>v : any
+>new V() : any
+>V : () => void
 
 var A;
 >A : any
 
 A = function () {
->A = function () {    this.a = 'assignment'} : typeof A
+>A = function () {    this.a = 'assignment'} : () => void
 >A : any
->function () {    this.a = 'assignment'} : typeof A
+>function () {    this.a = 'assignment'} : () => void
 
     this.a = 'assignment'
 >this.a = 'assignment' : "assignment"
 >this.a : any
->this : this
+>this : any
 >a : any
 >'assignment' : "assignment"
 }
 var a = new A();
->a : A
->new A() : A
->A : typeof A
+>a : any
+>new A() : any
+>A : any
 
 const {
     B = function() {
->B : typeof B
->function() {        this.b = 'binding pattern'    } : typeof B
+>B : () => void
+>function() {        this.b = 'binding pattern'    } : () => void
 
         this.b = 'binding pattern'
 >this.b = 'binding pattern' : "binding pattern"
 >this.b : any
->this : this
+>this : any
 >b : any
 >'binding pattern' : "binding pattern"
     }
@@= skipped -97, +97 lines =@@
 >undefined : undefined
 
 var b = new B();
->b : B
->new B() : B
->B : typeof B
+>b : any
+>new B() : any
+>B : () => void
 
