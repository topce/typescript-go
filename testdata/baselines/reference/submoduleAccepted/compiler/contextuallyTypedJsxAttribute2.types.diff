--- old.contextuallyTypedJsxAttribute2.types
+++ new.contextuallyTypedJsxAttribute2.types
@@= skipped -3, +3 lines =@@
 /// <reference path="react16.d.ts" />
 
 import React from "react";
->React : typeof React
+>React : any
 
 import { ComponentPropsWithRef, ElementType } from "react";
 >ComponentPropsWithRef : any
 >ElementType : any
 
 function UnwrappedLink<T extends ElementType = ElementType>(
->UnwrappedLink : <T extends ElementType = React.ElementType>(props: Omit<ComponentPropsWithRef<ElementType extends T ? "a" : T>, "as">) => JSX.Element
+>UnwrappedLink : <T extends ElementType>(props: Omit<ComponentPropsWithRef<ElementType extends T ? "a" : T>, "as">) => any
 
   props: Omit<ComponentPropsWithRef<ElementType extends T ? "a" : T>, "as">,
->props : Omit<React.ComponentPropsWithRef<React.ElementType extends T ? "a" : T>, "as">
+>props : Omit<ComponentPropsWithRef<ElementType extends T ? "a" : T>, "as">
 
 ) {
   return <a></a>;
-><a></a> : JSX.Element
+><a></a> : any
 >a : any
 >a : any
 }
 
 <UnwrappedLink onClick={(e) => {}} />;
-><UnwrappedLink onClick={(e) => {}} /> : JSX.Element
->UnwrappedLink : <T extends ElementType = React.ElementType>(props: Omit<ComponentPropsWithRef<ElementType extends T ? "a" : T>, "as">) => JSX.Element
->onClick : (e: React.MouseEvent<HTMLAnchorElement>) => void
->(e) => {} : (e: React.MouseEvent<HTMLAnchorElement>) => void
->e : React.MouseEvent<HTMLAnchorElement>
+><UnwrappedLink onClick={(e) => {}} /> : any
+>UnwrappedLink : <T extends ElementType>(props: Omit<ComponentPropsWithRef<ElementType extends T ? "a" : T>, "as">) => any
+>onClick : any
+>(e) => {} : (e: any) => void
+>e : any
 
 function UnwrappedLink2<T extends ElementType = ElementType>(
->UnwrappedLink2 : <T extends ElementType = React.ElementType>(props: Omit<ComponentPropsWithRef<ElementType extends T ? "a" : T>, "as"> & { as?: T; }) => JSX.Element
+>UnwrappedLink2 : <T extends ElementType>(props: Omit<ComponentPropsWithRef<ElementType extends T ? "a" : T>, "as"> & { as?: T | undefined; }) => any
 
   props: Omit<ComponentPropsWithRef<ElementType extends T ? "a" : T>, "as"> & {
->props : Omit<React.ComponentPropsWithRef<React.ElementType extends T ? "a" : T>, "as"> & { as?: T; }
+>props : Omit<ComponentPropsWithRef<ElementType extends T ? "a" : T>, "as"> & { as?: T | undefined; }
 
     as?: T;
 >as : T | undefined
@@= skipped -38, +38 lines =@@
   },
 ) {
   return <a></a>;
-><a></a> : JSX.Element
+><a></a> : any
 >a : any
 >a : any
 }
 
 <UnwrappedLink2 onClick={(e) => {}} />;
-><UnwrappedLink2 onClick={(e) => {}} /> : JSX.Element
->UnwrappedLink2 : <T extends ElementType = React.ElementType>(props: Omit<ComponentPropsWithRef<ElementType extends T ? "a" : T>, "as"> & { as?: T; }) => JSX.Element
->onClick : (e: React.MouseEvent<HTMLAnchorElement>) => void
->(e) => {} : (e: React.MouseEvent<HTMLAnchorElement>) => void
->e : React.MouseEvent<HTMLAnchorElement>
+><UnwrappedLink2 onClick={(e) => {}} /> : any
+>UnwrappedLink2 : <T extends ElementType>(props: Omit<ComponentPropsWithRef<ElementType extends T ? "a" : T>, "as"> & { as?: T | undefined; }) => any
+>onClick : any
+>(e) => {} : (e: any) => void
+>e : any
 
 <UnwrappedLink2 as="button" onClick={(e) => {}} />;
-><UnwrappedLink2 as="button" onClick={(e) => {}} /> : JSX.Element
->UnwrappedLink2 : <T extends ElementType = React.ElementType>(props: Omit<ComponentPropsWithRef<ElementType extends T ? "a" : T>, "as"> & { as?: T; }) => JSX.Element
->as : "button"
->onClick : (e: React.MouseEvent<HTMLButtonElement>) => void
->(e) => {} : (e: React.MouseEvent<HTMLButtonElement>) => void
->e : React.MouseEvent<HTMLButtonElement>
+><UnwrappedLink2 as="button" onClick={(e) => {}} /> : any
+>UnwrappedLink2 : <T extends ElementType>(props: Omit<ComponentPropsWithRef<ElementType extends T ? "a" : T>, "as"> & { as?: T | undefined; }) => any
+>as : any
+>onClick : any
+>(e) => {} : (e: any) => void
+>e : any
 
