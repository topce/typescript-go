--- old.expandoFunctionContextualTypesJs.types
+++ new.expandoFunctionContextualTypesJs.types
@@= skipped -10, +10 lines =@@
   * @type {StatelessComponent<MyComponentProps>}
   */
 const MyComponent = () => /* @type {any} */(null);
->MyComponent : StatelessComponent<MyComponentProps>
->() => /* @type {any} */(null) : { (): any; defaultProps: Partial<MyComponentProps>; }
+>MyComponent : { (): any; defaultProps: { color: string; }; }
+>() => /* @type {any} */(null) : { (): any; defaultProps: { color: string; }; }
 >(null) : null
 
 MyComponent.defaultProps = {
->MyComponent.defaultProps = {    color: "red"} : { color: "red"; }
->MyComponent.defaultProps : Partial<MyComponentProps>
->MyComponent : StatelessComponent<MyComponentProps>
->defaultProps : Partial<MyComponentProps>
->{    color: "red"} : { color: "red"; }
+>MyComponent.defaultProps = {    color: "red"} : { color: string; }
+>MyComponent.defaultProps : { color: string; }
+>MyComponent : { (): any; defaultProps: { color: string; }; }
+>defaultProps : { color: string; }
+>{    color: "red"} : { color: string; }
 
     color: "red"
->color : "red"
+>color : string
 >"red" : "red"
 
 };
 
 const MyComponent2 = () => null;
->MyComponent2 : { (): any; defaultProps: MyComponentProps; }
->() => null : { (): any; defaultProps: MyComponentProps; }
+>MyComponent2 : { (): any; defaultProps: { color: string; }; }
+>() => null : { (): any; defaultProps: { color: string; }; }
 
 /**
  * @type {MyComponentProps}
  */
 MyComponent2.defaultProps = {
->MyComponent2.defaultProps = {    color: "red"} : { color: "red"; }
->MyComponent2.defaultProps : MyComponentProps
->MyComponent2 : { (): any; defaultProps: MyComponentProps; }
->defaultProps : MyComponentProps
->{    color: "red"} : { color: "red"; }
+>MyComponent2.defaultProps = {    color: "red"} : { color: string; }
+>MyComponent2.defaultProps : { color: string; }
+>MyComponent2 : { (): any; defaultProps: { color: string; }; }
+>defaultProps : { color: string; }
+>{    color: "red"} : { color: string; }
 
     color: "red"
->color : "red"
+>color : string
 >"red" : "red"
 }
 
@@= skipped -40, +40 lines =@@
   * @type {StatelessComponent<MyComponentProps>}
  */
 const check = MyComponent2;
->check : StatelessComponent<MyComponentProps>
->MyComponent2 : { (): any; defaultProps: MyComponentProps; }
+>check : { (): any; defaultProps: { color: string; }; }
+>MyComponent2 : { (): any; defaultProps: { color: string; }; }
 
 /**
  * 
  * @param {{ props: MyComponentProps }} p 
  */
 function expectLiteral(p) {}
->expectLiteral : (p: { props: MyComponentProps; }) => void
->p : { props: MyComponentProps; }
+>expectLiteral : (p: any) => void
+>p : any
 
 function foo() {
->foo : typeof foo
+>foo : () => void
 
     /**
      * @type {MyComponentProps}
      */
     this.props = { color: "red" };
->this.props = { color: "red" } : { color: "red"; }
->this.props : MyComponentProps
->this : this
->props : MyComponentProps
->{ color: "red" } : { color: "red"; }
->color : "red"
+>this.props = { color: "red" } : { color: string; }
+>this.props : any
+>this : any
+>props : any
+>{ color: "red" } : { color: string; }
+>color : string
 >"red" : "red"
 
     expectLiteral(this);
 >expectLiteral(this) : void
->expectLiteral : (p: { props: MyComponentProps; }) => void
->this : this
+>expectLiteral : (p: any) => void
+>this : any
 }
 
 /**
  * @type {MyComponentProps}
  */
 module.exports = {
->module.exports = {    color: "red"} : MyComponentProps
->module.exports : MyComponentProps
->module : { exports: MyComponentProps; }
->exports : MyComponentProps
->{    color: "red"} : { color: "red"; }
+>module.exports = {    color: "red"} : { color: string; }
+>module.exports : any
+>module : any
+>exports : any
+>{    color: "red"} : { color: string; }
 
     color: "red"
->color : "red"
+>color : string
 >"red" : "red"
 }
 
 expectLiteral({ props: module.exports });
 >expectLiteral({ props: module.exports }) : void
->expectLiteral : (p: { props: MyComponentProps; }) => void
->{ props: module.exports } : { props: MyComponentProps; }
->props : MyComponentProps
->module.exports : MyComponentProps
->module : { exports: MyComponentProps; }
->exports : MyComponentProps
+>expectLiteral : (p: any) => void
+>{ props: module.exports } : { props: any; }
+>props : any
+>module.exports : any
+>module : any
+>exports : any
 
