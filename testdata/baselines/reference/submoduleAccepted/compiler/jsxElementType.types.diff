--- old.jsxElementType.types
+++ new.jsxElementType.types
@@= skipped -2, +2 lines =@@
 === jsxElementType.tsx ===
 /// <reference path="react16.d.ts" />
 import * as React from "react";
->React : typeof React
+>React : any
 
 type React18ReactFragment = ReadonlyArray<React18ReactNode>;
 >React18ReactFragment : React18ReactFragment
 
 type React18ReactNode =
->React18ReactNode : React18ReactNode
+>React18ReactNode : any
 
   | React.ReactElement<any>
 >React : any
@@= skipped -42, +42 lines =@@
 
     interface IntrinsicElements {
       ['my-custom-element']: React.DOMAttributes<unknown>;
->['my-custom-element'] : React.DOMAttributes<unknown>
+>['my-custom-element'] : DOMAttributes<unknown>
 >'my-custom-element' : "my-custom-element"
 >React : any
     }
@@= skipped -12, +12 lines =@@
 >title : string
 
 const RenderElement = ({ title }: { title: string }) => <div>{title}</div>;
->RenderElement : ({ title }: { title: string; }) => JSX.Element
->({ title }: { title: string }) => <div>{title}</div> : ({ title }: { title: string; }) => JSX.Element
+>RenderElement : (__0: { title: string; }) => any
+>({ title }: { title: string }) => <div>{title}</div> : (__0: { title: string; }) => any
 >title : string
 >title : string
-><div>{title}</div> : JSX.Element
+><div>{title}</div> : any
 >div : any
 >title : string
 >div : any
 
 Component = RenderElement;
->Component = RenderElement : ({ title }: { title: string; }) => JSX.Element
+>Component = RenderElement : (__0: { title: string; }) => any
 >Component : NewReactJSXElementConstructor<{ title: string; }>
->RenderElement : ({ title }: { title: string; }) => JSX.Element
+>RenderElement : (__0: { title: string; }) => any
 
 <RenderElement />;
-><RenderElement /> : JSX.Element
->RenderElement : ({ title }: { title: string; }) => JSX.Element
+><RenderElement /> : any
+>RenderElement : (__0: { title: string; }) => any
 
 <RenderElement title="react" />;
-><RenderElement title="react" /> : JSX.Element
->RenderElement : ({ title }: { title: string; }) => JSX.Element
->title : string
+><RenderElement title="react" /> : any
+>RenderElement : (__0: { title: string; }) => any
+>title : any
 
 <RenderElement excessProp />;
-><RenderElement excessProp /> : JSX.Element
->RenderElement : ({ title }: { title: string; }) => JSX.Element
->excessProp : true
+><RenderElement excessProp /> : any
+>RenderElement : (__0: { title: string; }) => any
+>excessProp : any
 
 const RenderString = ({ title }: { title: string }) => title;
->RenderString : ({ title }: { title: string; }) => string
->({ title }: { title: string }) => title : ({ title }: { title: string; }) => string
+>RenderString : (__0: { title: string; }) => string
+>({ title }: { title: string }) => title : (__0: { title: string; }) => string
 >title : string
 >title : string
 >title : string
 
 Component = RenderString;
->Component = RenderString : ({ title }: { title: string; }) => string
+>Component = RenderString : (__0: { title: string; }) => string
 >Component : NewReactJSXElementConstructor<{ title: string; }>
->RenderString : ({ title }: { title: string; }) => string
+>RenderString : (__0: { title: string; }) => string
 
 <RenderString />;
-><RenderString /> : JSX.Element
->RenderString : ({ title }: { title: string; }) => string
+><RenderString /> : any
+>RenderString : (__0: { title: string; }) => string
 
 <RenderString title="react" />;
-><RenderString title="react" /> : JSX.Element
->RenderString : ({ title }: { title: string; }) => string
->title : string
+><RenderString title="react" /> : any
+>RenderString : (__0: { title: string; }) => string
+>title : any
 
 <RenderString excessProp />;
-><RenderString excessProp /> : JSX.Element
->RenderString : ({ title }: { title: string; }) => string
->excessProp : true
+><RenderString excessProp /> : any
+>RenderString : (__0: { title: string; }) => string
+>excessProp : any
 
 const RenderNumber = ({ title }: { title: string }) => title.length;
->RenderNumber : ({ title }: { title: string; }) => number
->({ title }: { title: string }) => title.length : ({ title }: { title: string; }) => number
+>RenderNumber : (__0: { title: string; }) => number
+>({ title }: { title: string }) => title.length : (__0: { title: string; }) => number
 >title : string
 >title : string
 >title.length : number
@@= skipped -64, +64 lines =@@
 >length : number
 
 Component = RenderNumber;
->Component = RenderNumber : ({ title }: { title: string; }) => number
+>Component = RenderNumber : (__0: { title: string; }) => number
 >Component : NewReactJSXElementConstructor<{ title: string; }>
->RenderNumber : ({ title }: { title: string; }) => number
+>RenderNumber : (__0: { title: string; }) => number
 
 <RenderNumber />;
-><RenderNumber /> : JSX.Element
->RenderNumber : ({ title }: { title: string; }) => number
+><RenderNumber /> : any
+>RenderNumber : (__0: { title: string; }) => number
 
 <RenderNumber title="react" />;
-><RenderNumber title="react" /> : JSX.Element
->RenderNumber : ({ title }: { title: string; }) => number
->title : string
+><RenderNumber title="react" /> : any
+>RenderNumber : (__0: { title: string; }) => number
+>title : any
 
 <RenderNumber excessProp />;
-><RenderNumber excessProp /> : JSX.Element
->RenderNumber : ({ title }: { title: string; }) => number
->excessProp : true
+><RenderNumber excessProp /> : any
+>RenderNumber : (__0: { title: string; }) => number
+>excessProp : any
 
 const RenderArray = ({ title }: { title: string }) => [title];
->RenderArray : ({ title }: { title: string; }) => string[]
->({ title }: { title: string }) => [title] : ({ title }: { title: string; }) => string[]
+>RenderArray : (__0: { title: string; }) => string[]
+>({ title }: { title: string }) => [title] : (__0: { title: string; }) => string[]
 >title : string
 >title : string
 >[title] : string[]
 >title : string
 
 Component = RenderArray;
->Component = RenderArray : ({ title }: { title: string; }) => string[]
+>Component = RenderArray : (__0: { title: string; }) => string[]
 >Component : NewReactJSXElementConstructor<{ title: string; }>
->RenderArray : ({ title }: { title: string; }) => string[]
+>RenderArray : (__0: { title: string; }) => string[]
 
 <RenderArray />;
-><RenderArray /> : JSX.Element
->RenderArray : ({ title }: { title: string; }) => string[]
+><RenderArray /> : any
+>RenderArray : (__0: { title: string; }) => string[]
 
 <RenderArray title="react" />;
-><RenderArray title="react" /> : JSX.Element
->RenderArray : ({ title }: { title: string; }) => string[]
->title : string
+><RenderArray title="react" /> : any
+>RenderArray : (__0: { title: string; }) => string[]
+>title : any
 
 <RenderArray excessProp />;
-><RenderArray excessProp /> : JSX.Element
->RenderArray : ({ title }: { title: string; }) => string[]
->excessProp : true
+><RenderArray excessProp /> : any
+>RenderArray : (__0: { title: string; }) => string[]
+>excessProp : any
 
 // React Server Component
 const RenderPromise = async ({ title }: { title: string }) => "react";
->RenderPromise : ({ title }: { title: string; }) => Promise<string>
->async ({ title }: { title: string }) => "react" : ({ title }: { title: string; }) => Promise<string>
+>RenderPromise : (__0: { title: string; }) => Promise<string>
+>async ({ title }: { title: string }) => "react" : (__0: { title: string; }) => Promise<string>
 >title : string
 >title : string
 >"react" : "react"
 
 Component = RenderPromise;
->Component = RenderPromise : ({ title }: { title: string; }) => Promise<string>
+>Component = RenderPromise : (__0: { title: string; }) => Promise<string>
 >Component : NewReactJSXElementConstructor<{ title: string; }>
->RenderPromise : ({ title }: { title: string; }) => Promise<string>
+>RenderPromise : (__0: { title: string; }) => Promise<string>
 
 <RenderPromise />;
-><RenderPromise /> : JSX.Element
->RenderPromise : ({ title }: { title: string; }) => Promise<string>
+><RenderPromise /> : any
+>RenderPromise : (__0: { title: string; }) => Promise<string>
 
 <RenderPromise title="react" />;
-><RenderPromise title="react" /> : JSX.Element
->RenderPromise : ({ title }: { title: string; }) => Promise<string>
->title : string
+><RenderPromise title="react" /> : any
+>RenderPromise : (__0: { title: string; }) => Promise<string>
+>title : any
 
 <RenderPromise excessProp />;
-><RenderPromise excessProp /> : JSX.Element
->RenderPromise : ({ title }: { title: string; }) => Promise<string>
->excessProp : true
+><RenderPromise excessProp /> : any
+>RenderPromise : (__0: { title: string; }) => Promise<string>
+>excessProp : any
 
 // Class components still work
 class RenderStringClass extends React.Component<{ title: string }> {
 >RenderStringClass : RenderStringClass
->React.Component : React.Component<{ title: string; }, {}, any>
->React : typeof React
->Component : typeof React.Component
+>React.Component : any
+>React : any
+>Component : any
 >title : string
 
   render() {
->render : () => string
+>render : () => any
 
     return this.props.title;
->this.props.title : string
->this.props : Readonly<{ children?: React.ReactNode; }> & Readonly<{ title: string; }>
+>this.props.title : any
+>this.props : any
 >this : this
->props : Readonly<{ children?: React.ReactNode; }> & Readonly<{ title: string; }>
->title : string
+>props : any
+>title : any
   }
 }
 Component = RenderStringClass;
@@= skipped -97, +97 lines =@@
 >RenderStringClass : typeof RenderStringClass
 
 <RenderStringClass />;
-><RenderStringClass /> : JSX.Element
+><RenderStringClass /> : any
 >RenderStringClass : typeof RenderStringClass
 
 <RenderStringClass title="react" />;
-><RenderStringClass title="react" /> : JSX.Element
+><RenderStringClass title="react" /> : any
 >RenderStringClass : typeof RenderStringClass
->title : string
+>title : any
 
 <RenderStringClass excessProp />;
-><RenderStringClass excessProp /> : JSX.Element
+><RenderStringClass excessProp /> : any
 >RenderStringClass : typeof RenderStringClass
->excessProp : true
+>excessProp : any
 
 // Host element types still work
 <div />;
-><div /> : JSX.Element
+><div /> : any
 >div : any
 
 <my-custom-element />;
-><my-custom-element /> : JSX.Element
+><my-custom-element /> : any
 >my-custom-element : any
 
 // Undeclared host element types are still rejected
 <boop />;
-><boop /> : JSX.Element
+><boop /> : any
 >boop : any
 
 <my-undeclared-custom-element />;
-><my-undeclared-custom-element /> : JSX.Element
+><my-undeclared-custom-element /> : any
 >my-undeclared-custom-element : any
 
 // Highlighting various ecosystem compat issues
@@= skipped -36, +36 lines =@@
 // https://github.com/software-mansion/react-native-gesture-handler/blob/79017e5e7cc2e82e6467851f870920ff836ee04f/src/components/GestureComponents.tsx#L139-L146
 interface ReactNativeFlatListProps<Item> {}
 function ReactNativeFlatList(
->ReactNativeFlatList : (props: {}, ref: React.ForwardedRef<typeof ReactNativeFlatList>) => null
+>ReactNativeFlatList : (props: {}, ref: ForwardedRef<???>) => null
 
   props: {},
 >props : {}
 
   ref: React.ForwardedRef<typeof ReactNativeFlatList>
->ref : React.ForwardedRef<(props: {}, ref: React.ForwardedRef<typeof ReactNativeFlatList>) => null>
+>ref : ForwardedRef<(props: {}, ref: ForwardedRef<???>) => null>
 >React : any
->ReactNativeFlatList : (props: {}, ref: React.ForwardedRef<typeof ReactNativeFlatList>) => null
+>ReactNativeFlatList : (props: {}, ref: ForwardedRef<???>) => null
 
 ) {
   return null;
 }
 <ReactNativeFlatList />;
-><ReactNativeFlatList /> : JSX.Element
->ReactNativeFlatList : (props: {}, ref: React.ForwardedRef<typeof ReactNativeFlatList>) => null
+><ReactNativeFlatList /> : any
+>ReactNativeFlatList : (props: {}, ref: ForwardedRef<???>) => null
 
 // testing higher-order component compat
 function f1<T extends (props: {}) => React.ReactElement<any>>(Component: T) {
->f1 : <T extends (props: {}) => React.ReactElement<any>>(Component: T) => JSX.Element
+>f1 : <T extends (props: {}) => ReactElement<any>>(Component: T) => any
 >props : {}
 >React : any
 >Component : T
 
   return <Component />;
-><Component /> : JSX.Element
+><Component /> : any
 >Component : T
 }
 
 <Unresolved />;
-><Unresolved /> : JSX.Element
+><Unresolved /> : any
 >Unresolved : any
 
 <Unresolved foo="abc" />;
-><Unresolved foo="abc" /> : JSX.Element
+><Unresolved foo="abc" /> : any
 >Unresolved : any
->foo : string
+>foo : any
 
 declare global {
 >global : any
@@= skipped -52, +52 lines =@@
 }
 
 <a:b a="accepted" />;
-><a:b a="accepted" /> : JSX.Element
+><a:b a="accepted" /> : any
 >a : any
 >b : any
->a : string
+>a : any
 
 <a:b b="rejected" />;
-><a:b b="rejected" /> : JSX.Element
+><a:b b="rejected" /> : any
 >a : any
 >b : any
->b : string
+>b : any
 
 <a:b a="accepted" b="rejected" />;
-><a:b a="accepted" b="rejected" /> : JSX.Element
+><a:b a="accepted" b="rejected" /> : any
 >a : any
 >b : any
->a : string
->b : string
+>a : any
+>b : any
 
