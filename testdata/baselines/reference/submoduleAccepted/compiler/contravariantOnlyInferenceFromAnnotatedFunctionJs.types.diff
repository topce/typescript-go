--- old.contravariantOnlyInferenceFromAnnotatedFunctionJs.types
+++ new.contravariantOnlyInferenceFromAnnotatedFunctionJs.types
@@= skipped -13, +13 lines =@@
  * @returns {[A, B]}
  */
 function foo(fns) {
->foo : <A, B extends Record<string, unknown>>(fns: Funcs<A, B>) => [A, B]
->fns : Funcs<A, B>
+>foo : (fns: any) => null
+>fns : any
 
   return /** @type {any} */ (null);
->(null) : any
+>(null) : null
 }
 
 const result = foo({
->result : [string, { bar: string; }]
->foo({  bar: {    fn:      /** @param {string} a */      (a) => {},    thing: "asd",  },}) : [string, { bar: string; }]
->foo : <A, B extends Record<string, unknown>>(fns: Funcs<A, B>) => [A, B]
->{  bar: {    fn:      /** @param {string} a */      (a) => {},    thing: "asd",  },} : { bar: { fn: (a: string) => void; thing: string; }; }
+>result : null
+>foo({  bar: {    fn:      /** @param {string} a */      (a) => {},    thing: "asd",  },}) : null
+>foo : (fns: any) => null
+>{  bar: {    fn:      /** @param {string} a */      (a) => {},    thing: "asd",  },} : { bar: { fn: (a: any) => void; thing: string; }; }
 
   bar: {
->bar : { fn: (a: string) => void; thing: string; }
->{    fn:      /** @param {string} a */      (a) => {},    thing: "asd",  } : { fn: (a: string) => void; thing: string; }
+>bar : { fn: (a: any) => void; thing: string; }
+>{    fn:      /** @param {string} a */      (a) => {},    thing: "asd",  } : { fn: (a: any) => void; thing: string; }
 
     fn:
->fn : (a: string) => void
+>fn : (a: any) => void
 
       /** @param {string} a */
       (a) => {},
->(a) => {} : (a: string) => void
->a : string
+>(a) => {} : (a: any) => void
+>a : any
 
     thing: "asd",
 >thing : string
