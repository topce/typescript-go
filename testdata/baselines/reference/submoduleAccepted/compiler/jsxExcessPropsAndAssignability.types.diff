--- old.jsxExcessPropsAndAssignability.types
+++ new.jsxExcessPropsAndAssignability.types
@@= skipped -3, +3 lines =@@
 /// <reference path="react16.d.ts" />
 
 import * as React from 'react';
->React : typeof React
+>React : any
 
 const myHoc = <ComposedComponentProps extends any>(
->myHoc : <ComposedComponentProps extends unknown>(ComposedComponent: React.ComponentClass<ComposedComponentProps>) => void
-><ComposedComponentProps extends any>(    ComposedComponent: React.ComponentClass<ComposedComponentProps>,) => {    type WrapperComponentProps = ComposedComponentProps & { myProp: string };    const WrapperComponent: React.ComponentClass<WrapperComponentProps> = null as any;    const props: ComposedComponentProps = null as any;    <WrapperComponent {...props} myProp={'1000000'} />;    <WrapperComponent {...props} myProp={1000000} />;} : <ComposedComponentProps extends unknown>(ComposedComponent: React.ComponentClass<ComposedComponentProps>) => void
+>myHoc : <ComposedComponentProps extends unknown>(ComposedComponent: ComponentClass<ComposedComponentProps>) => void
+><ComposedComponentProps extends any>(    ComposedComponent: React.ComponentClass<ComposedComponentProps>,) => {    type WrapperComponentProps = ComposedComponentProps & { myProp: string };    const WrapperComponent: React.ComponentClass<WrapperComponentProps> = null as any;    const props: ComposedComponentProps = null as any;    <WrapperComponent {...props} myProp={'1000000'} />;    <WrapperComponent {...props} myProp={1000000} />;} : <ComposedComponentProps extends unknown>(ComposedComponent: ComponentClass<ComposedComponentProps>) => void
 
     ComposedComponent: React.ComponentClass<ComposedComponentProps>,
->ComposedComponent : React.ComponentClass<ComposedComponentProps, any>
+>ComposedComponent : ComponentClass<ComposedComponentProps>
 >React : any
 
 ) => {
     type WrapperComponentProps = ComposedComponentProps & { myProp: string };
->WrapperComponentProps : ComposedComponentProps & { myProp: string; }
+>WrapperComponentProps : WrapperComponentProps
 >myProp : string
 
     const WrapperComponent: React.ComponentClass<WrapperComponentProps> = null as any;
->WrapperComponent : React.ComponentClass<ComposedComponentProps & { myProp: string; }, any>
+>WrapperComponent : ComponentClass<WrapperComponentProps>
 >React : any
 >null as any : any
 
@@= skipped -25, +25 lines =@@
 >null as any : any
 
     <WrapperComponent {...props} myProp={'1000000'} />;
-><WrapperComponent {...props} myProp={'1000000'} /> : JSX.Element
->WrapperComponent : React.ComponentClass<ComposedComponentProps & { myProp: string; }, any>
+><WrapperComponent {...props} myProp={'1000000'} /> : any
+>WrapperComponent : ComponentClass<WrapperComponentProps>
 >props : ComposedComponentProps
->myProp : "1000000"
+>myProp : any
 >'1000000' : "1000000"
 
     <WrapperComponent {...props} myProp={1000000} />;
-><WrapperComponent {...props} myProp={1000000} /> : JSX.Element
->WrapperComponent : React.ComponentClass<ComposedComponentProps & { myProp: string; }, any>
+><WrapperComponent {...props} myProp={1000000} /> : any
+>WrapperComponent : ComponentClass<WrapperComponentProps>
 >props : ComposedComponentProps
->myProp : number
+>myProp : any
 >1000000 : 1000000
 
 };
