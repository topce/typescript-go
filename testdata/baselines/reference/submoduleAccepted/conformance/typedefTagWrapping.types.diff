--- old.typedefTagWrapping.types
+++ new.typedefTagWrapping.types
@@= skipped -13, +13 lines =@@
  * @returns {boolean} The return.
  */
 function callIt(func, arg) {
->callIt : (func: Type1, arg: string) => boolean
->func : Type1
->arg : string
+>callIt : (func: any, arg: any) => any
+>func : any
+>arg : any
 
   return func(arg);
->func(arg) : boolean
->func : Type1
->arg : string
+>func(arg) : any
+>func : any
+>arg : any
 }
 
 === mod2.js ===
@@= skipped -25, +25 lines =@@
  * @returns {string|number} The return.
  */
 function check(obj) {
->check : (obj: Type2) => string | number
->obj : Type2
+>check : (obj: any) => any
+>obj : any
 
   return obj.boo ? obj.num : obj.str;
->obj.boo ? obj.num : obj.str : string | number
->obj.boo : boolean
->obj : Type2
->boo : boolean
->obj.num : number
->obj : Type2
->num : number
->obj.str : string
->obj : Type2
->str : string
+>obj.boo ? obj.num : obj.str : any
+>obj.boo : any
+>obj : any
+>boo : any
+>obj.num : any
+>obj : any
+>num : any
+>obj.str : any
+>obj : any
+>str : any
 }
 
 === mod3.js ===
@@= skipped -33, +33 lines =@@
  * @returns {string|number} The return.
  */
 function use1(func, bool, str, num) {
->use1 : (func: StringOrNumber1, bool: boolean, str: string, num: number) => string | number
->func : StringOrNumber1
->bool : boolean
->str : string
->num : number
+>use1 : (func: any, bool: any, str: any, num: any) => any
+>func : any
+>bool : any
+>str : any
+>num : any
 
   return func(bool, str, num)
->func(bool, str, num) : string | number
->func : StringOrNumber1
->bool : boolean
->str : string
->num : number
+>func(bool, str, num) : any
+>func : any
+>bool : any
+>str : any
+>num : any
 }
 
 === mod4.js ===
@@= skipped -32, +32 lines =@@
  * @returns {string|number} The return.
  */
 function use2(func, bool, str, num) {
->use2 : (func: StringOrNumber2, bool: boolean, str: string, num: number) => string | number
->func : StringOrNumber2
->bool : boolean
->str : string
->num : number
+>use2 : (func: any, bool: any, str: any, num: any) => any
+>func : any
+>bool : any
+>str : any
+>num : any
 
   return func(bool, str, num)
->func(bool, str, num) : string | number
->func : StringOrNumber2
->bool : boolean
->str : string
->num : number
+>func(bool, str, num) : any
+>func : any
+>bool : any
+>str : any
+>num : any
 }
 
 === mod5.js ===
@@= skipped -32, +32 lines =@@
  * @returns {string|number} The return.
  */
 function check5(obj) {
->check5 : (obj: Type5) => string | number
->obj : Type5
+>check5 : (obj: any) => any
+>obj : any
 
   return obj.boo ? obj.num : obj.str;
->obj.boo ? obj.num : obj.str : string | number
->obj.boo : boolean
->obj : Type5
->boo : boolean
->obj.num : number
->obj : Type5
->num : number
->obj.str : string
->obj : Type5
->str : string
+>obj.boo ? obj.num : obj.str : any
+>obj.boo : any
+>obj : any
+>boo : any
+>obj.num : any
+>obj : any
+>num : any
+>obj.str : any
+>obj : any
+>str : any
 }
 
 === mod6.js ===
@@= skipped -32, +32 lines =@@
  * @returns {*} The return.
  */
 function check6(obj) {
->check6 : (obj: Type6) => any
->obj : Type6
+>check6 : (obj: any) => any
+>obj : any
 
   return obj.foo;
 >obj.foo : any
->obj : Type6
+>obj : any
 >foo : any
 }
 
