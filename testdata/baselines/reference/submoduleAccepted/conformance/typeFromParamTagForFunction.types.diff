--- old.typeFromParamTagForFunction.types
+++ new.typeFromParamTagForFunction.types
@@= skipped -10, +10 lines =@@
 
 === a-ext.js ===
 exports.A = function () {
->exports.A = function () {    this.x = 1;} : typeof A
->exports.A : typeof A
->exports : typeof import("a-ext")
->A : typeof A
->function () {    this.x = 1;} : typeof A
+>exports.A = function () {    this.x = 1;} : () => void
+>exports.A : any
+>exports : any
+>A : any
+>function () {    this.x = 1;} : () => void
 
     this.x = 1;
 >this.x = 1 : 1
 >this.x : any
->this : this
+>this : any
 >x : any
 >1 : 1
 
@@= skipped -17, +17 lines =@@
 
 === a.js ===
 const { A } = require("./a-ext");
->A : typeof A
->require("./a-ext") : typeof import("a-ext")
+>A : any
+>require("./a-ext") : any
 >require : (id: string) => any
 >"./a-ext" : "./a-ext"
 
 /** @param {A} p */
 function a(p) { p.x; }
->a : (p: A) => void
->p : A
->p.x : number
->p : A
->x : number
+>a : (p: any) => void
+>p : any
+>p.x : any
+>p : any
+>x : any
 
 === b-ext.js ===
 exports.B = class {
 >exports.B = class {    constructor() {        this.x = 1;    }} : typeof B
->exports.B : typeof B
->exports : typeof import("b-ext")
->B : typeof B
+>exports.B : any
+>exports : any
+>B : any
 >class {    constructor() {        this.x = 1;    }} : typeof B
 
     constructor() {
@@= skipped -33, +33 lines =@@
 
 === b.js ===
 const { B } = require("./b-ext");
->B : typeof B
->require("./b-ext") : typeof import("b-ext")
+>B : any
+>require("./b-ext") : any
 >require : (id: string) => any
 >"./b-ext" : "./b-ext"
 
 /** @param {B} p */
 function b(p) { p.x; }
->b : (p: B) => void
->p : B
->p.x : number
->p : B
->x : number
+>b : (p: any) => void
+>p : any
+>p.x : any
+>p : any
+>x : any
 
 === c-ext.js ===
 export function C() {
->C : typeof C
+>C : () => void
 
     this.x = 1;
 >this.x = 1 : 1
 >this.x : any
->this : this
+>this : any
 >x : any
 >1 : 1
 }
 
 === c.js ===
 const { C } = require("./c-ext");
->C : typeof C
->require("./c-ext") : typeof import("c-ext")
+>C : any
+>require("./c-ext") : any
 >require : (id: string) => any
 >"./c-ext" : "./c-ext"
 
 /** @param {C} p */
 function c(p) { p.x; }
->c : (p: C) => void
->p : C
->p.x : number
->p : C
->x : number
+>c : (p: any) => void
+>p : any
+>p.x : any
+>p : any
+>x : any
 
 === d-ext.js ===
 export var D = function() {
->D : typeof D
->function() {    this.x = 1;} : typeof D
+>D : () => void
+>function() {    this.x = 1;} : () => void
 
     this.x = 1;
 >this.x = 1 : 1
 >this.x : any
->this : this
+>this : any
 >x : any
 >1 : 1
 
@@= skipped -56, +56 lines =@@
 
 === d.js ===
 const { D } = require("./d-ext");
->D : typeof D
->require("./d-ext") : typeof import("d-ext")
+>D : any
+>require("./d-ext") : any
 >require : (id: string) => any
 >"./d-ext" : "./d-ext"
 
 /** @param {D} p */
 function d(p) { p.x; }
->d : (p: D) => void
->p : D
->p.x : number
->p : D
->x : number
+>d : (p: any) => void
+>p : any
+>p.x : any
+>p : any
+>x : any
 
 === e-ext.js ===
 export class E {
@@= skipped -29, +29 lines =@@
 
 === e.js ===
 const { E } = require("./e-ext");
->E : typeof E
->require("./e-ext") : typeof import("e-ext")
+>E : any
+>require("./e-ext") : any
 >require : (id: string) => any
 >"./e-ext" : "./e-ext"
 
 /** @param {E} p */
 function e(p) { p.x; }
->e : (p: E) => void
->p : E
->p.x : number
->p : E
->x : number
+>e : (p: any) => void
+>p : any
+>p.x : any
+>p : any
+>x : any
 
 === f.js ===
 var F = function () {
->F : typeof F
->function () {    this.x = 1;} : typeof F
+>F : () => void
+>function () {    this.x = 1;} : () => void
 
     this.x = 1;
 >this.x = 1 : 1
 >this.x : any
->this : this
+>this : any
 >x : any
 >1 : 1
 
@@= skipped -29, +29 lines =@@
 
 /** @param {F} p */
 function f(p) { p.x; }
->f : (p: F) => void
->p : F
->p.x : number
->p : F
->x : number
+>f : (p: any) => void
+>p : any
+>p.x : any
+>p : any
+>x : any
 
 === g.js ===
 function G() {
->G : typeof G
+>G : () => void
 
     this.x = 1;
 >this.x = 1 : 1
 >this.x : any
->this : this
+>this : any
 >x : any
 >1 : 1
 }
 
 /** @param {G} p */
 function g(p) { p.x; }
->g : (p: G) => void
->p : G
->p.x : number
->p : G
->x : number
+>g : (p: any) => void
+>p : any
+>p.x : any
+>p : any
+>x : any
 
 === h.js ===
 class H {
@@= skipped -42, +42 lines =@@
 
 /** @param {H} p */
 function h(p) { p.x; }
->h : (p: H) => void
->p : H
->p.x : number
->p : H
->x : number
+>h : (p: any) => void
+>p : any
+>p.x : any
+>p : any
+>x : any
 
