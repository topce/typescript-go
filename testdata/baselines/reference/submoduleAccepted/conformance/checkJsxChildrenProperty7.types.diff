--- old.checkJsxChildrenProperty7.types
+++ new.checkJsxChildrenProperty7.types
@@= skipped -1, +1 lines =@@
 
 === file.tsx ===
 import React = require('react');
->React : typeof React
+>React : any
 
 interface Prop {
     a: number,
@@= skipped -10, +10 lines =@@
 >b : string
 
     children: JSX.Element | JSX.Element[];
->children : JSX.Element | JSX.Element[]
+>children : any
 >JSX : any
 >JSX : any
 }
 
 class Button extends React.Component<any, any> {
 >Button : Button
->React.Component : React.Component<any, any>
->React : typeof React
->Component : typeof React.Component
+>React.Component : any
+>React : any
+>Component : any
 
     render() {
->render : () => JSX.Element
+>render : () => any
 
         return (<div>My Button</div>)
->(<div>My Button</div>) : JSX.Element
-><div>My Button</div> : JSX.Element
+>(<div>My Button</div>) : any
+><div>My Button</div> : any
 >div : any
 >div : any
     }
 }
 
 function AnotherButton(p: any) {
->AnotherButton : (p: any) => JSX.Element
+>AnotherButton : (p: any) => any
 >p : any
 
     return <h1>Just Another Button</h1>;
-><h1>Just Another Button</h1> : JSX.Element
+><h1>Just Another Button</h1> : any
 >h1 : any
 >h1 : any
 }
 
 function Comp(p: Prop) {
->Comp : (p: Prop) => JSX.Element
+>Comp : (p: Prop) => any
 >p : Prop
 
     return <div>{p.b}</div>;
-><div>{p.b}</div> : JSX.Element
+><div>{p.b}</div> : any
 >div : any
 >p.b : string
 >p : Prop
@@= skipped -47, +47 lines =@@
 
 // Error: whitespaces matters
 let k1 = <Comp a={10} b="hi"><Button />  <AnotherButton /></Comp>;
->k1 : JSX.Element
-><Comp a={10} b="hi"><Button />  <AnotherButton /></Comp> : JSX.Element
->Comp : (p: Prop) => JSX.Element
->a : number
+>k1 : any
+><Comp a={10} b="hi"><Button />  <AnotherButton /></Comp> : any
+>Comp : (p: Prop) => any
+>a : any
 >10 : 10
->b : string
-><Button /> : JSX.Element
+>b : any
+><Button /> : any
 >Button : typeof Button
-><AnotherButton /> : JSX.Element
->AnotherButton : (p: any) => JSX.Element
->Comp : (p: Prop) => JSX.Element
+><AnotherButton /> : any
+>AnotherButton : (p: any) => any
+>Comp : (p: Prop) => any
 
 let k2 = <Comp a={10} b="hi"><Button />
->k2 : JSX.Element
-><Comp a={10} b="hi"><Button />    <AnotherButton />  </Comp> : JSX.Element
->Comp : (p: Prop) => JSX.Element
->a : number
+>k2 : any
+><Comp a={10} b="hi"><Button />    <AnotherButton />  </Comp> : any
+>Comp : (p: Prop) => any
+>a : any
 >10 : 10
->b : string
-><Button /> : JSX.Element
+>b : any
+><Button /> : any
 >Button : typeof Button
 
     <AnotherButton />  </Comp>;
-><AnotherButton /> : JSX.Element
->AnotherButton : (p: any) => JSX.Element
->Comp : (p: Prop) => JSX.Element
+><AnotherButton /> : any
+>AnotherButton : (p: any) => any
+>Comp : (p: Prop) => any
 
 let k3 = <Comp a={10} b="hi">    <Button />
->k3 : JSX.Element
-><Comp a={10} b="hi">    <Button />    <AnotherButton /></Comp> : JSX.Element
->Comp : (p: Prop) => JSX.Element
->a : number
+>k3 : any
+><Comp a={10} b="hi">    <Button />    <AnotherButton /></Comp> : any
+>Comp : (p: Prop) => any
+>a : any
 >10 : 10
->b : string
-><Button /> : JSX.Element
+>b : any
+><Button /> : any
 >Button : typeof Button
 
     <AnotherButton /></Comp>;
-><AnotherButton /> : JSX.Element
->AnotherButton : (p: any) => JSX.Element
->Comp : (p: Prop) => JSX.Element
+><AnotherButton /> : any
+>AnotherButton : (p: any) => any
+>Comp : (p: Prop) => any
 
