--- old.contextuallyTypedStringLiteralsInJsxAttributes02.types
+++ new.contextuallyTypedStringLiteralsInJsxAttributes02.types
@@= skipped -1, +1 lines =@@
 
 === file.tsx ===
 import React = require('react')
->React : typeof React
+>React : any
 
 export interface ClickableProps {
     children?: string;
@@= skipped -18, +18 lines =@@
 
 export interface LinkProps extends ClickableProps {
     goTo: "home" | "contact";
->goTo : "home" | "contact"
+>goTo : "contact" | "home"
 }
 
 export function MainButton(buttonProps: ButtonProps): JSX.Element;
->MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; }
+>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; }
 >buttonProps : ButtonProps
 >JSX : any
 
 export function MainButton(linkProps: LinkProps): JSX.Element;
->MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; }
+>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; }
 >linkProps : LinkProps
 >JSX : any
 
 export function MainButton(props: ButtonProps | LinkProps): JSX.Element {
->MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; }
+>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; }
 >props : ButtonProps | LinkProps
 >JSX : any
 
@@= skipped -24, +24 lines =@@
 >props : ButtonProps | LinkProps
 
     if(linkProps.goTo) {
->linkProps.goTo : "home" | "contact"
+>linkProps.goTo : "contact" | "home"
 >linkProps : LinkProps
->goTo : "home" | "contact"
+>goTo : "contact" | "home"
 
         return this._buildMainLink(props);
 >this._buildMainLink(props) : any
@@= skipped -21, +21 lines =@@
 }
 
 const b0 = <MainButton {...{onClick: (k) => {console.log(k)}}} extra />;  // k has type "left" | "right"
->b0 : JSX.Element
-><MainButton {...{onClick: (k) => {console.log(k)}}} extra /> : JSX.Element
->MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; }
->{onClick: (k) => {console.log(k)}} : { onClick: (k: "left" | "right") => void; }
->onClick : (k: "left" | "right") => void
->(k) => {console.log(k)} : (k: "left" | "right") => void
->k : "left" | "right"
->console.log(k) : void
->console.log : (message?: any, ...optionalParams: any[]) => void
->console : Console
->log : (message?: any, ...optionalParams: any[]) => void
->k : "left" | "right"
->extra : true
+>b0 : any
+><MainButton {...{onClick: (k) => {console.log(k)}}} extra /> : any
+>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; }
+>{onClick: (k) => {console.log(k)}} : { onClick: (k: any) => void; }
+>onClick : (k: any) => void
+>(k) => {console.log(k)} : (k: any) => void
+>k : any
+>console.log(k) : any
+>console.log : any
+>console : any
+>log : any
+>k : any
+>extra : any
 
 const b2 = <MainButton onClick={(k)=>{console.log(k)}} extra />;  // k has type "left" | "right"
->b2 : JSX.Element
-><MainButton onClick={(k)=>{console.log(k)}} extra /> : JSX.Element
->MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; }
->onClick : (k: "left" | "right") => void
->(k)=>{console.log(k)} : (k: "left" | "right") => void
->k : "left" | "right"
->console.log(k) : void
->console.log : (message?: any, ...optionalParams: any[]) => void
->console : Console
->log : (message?: any, ...optionalParams: any[]) => void
->k : "left" | "right"
->extra : true
+>b2 : any
+><MainButton onClick={(k)=>{console.log(k)}} extra /> : any
+>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; }
+>onClick : any
+>(k)=>{console.log(k)} : (k: any) => void
+>k : any
+>console.log(k) : any
+>console.log : any
+>console : any
+>log : any
+>k : any
+>extra : any
 
 const b3 = <MainButton {...{goTo:"home"}} extra />;  // goTo has type"home" | "contact"
->b3 : JSX.Element
-><MainButton {...{goTo:"home"}} extra /> : JSX.Element
->MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; }
->{goTo:"home"} : { goTo: "home"; }
->goTo : "home"
+>b3 : any
+><MainButton {...{goTo:"home"}} extra /> : any
+>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; }
+>{goTo:"home"} : { goTo: string; }
+>goTo : string
 >"home" : "home"
->extra : true
+>extra : any
 
 const b4 = <MainButton goTo="home" extra />;  // goTo has type "home" | "contact"
->b4 : JSX.Element
-><MainButton goTo="home" extra /> : JSX.Element
->MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; }
->goTo : "home"
->extra : true
+>b4 : any
+><MainButton goTo="home" extra /> : any
+>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; }
+>goTo : any
+>extra : any
 
 export function NoOverload(buttonProps: ButtonProps): JSX.Element { return undefined }
->NoOverload : (buttonProps: ButtonProps) => JSX.Element
+>NoOverload : (buttonProps: ButtonProps) => Element
 >buttonProps : ButtonProps
 >JSX : any
 >undefined : undefined
 
 const c1 = <NoOverload  {...{onClick: (k) => {console.log(k)}}} extra />;  // k has type any
->c1 : JSX.Element
-><NoOverload  {...{onClick: (k) => {console.log(k)}}} extra /> : JSX.Element
->NoOverload : (buttonProps: ButtonProps) => JSX.Element
->{onClick: (k) => {console.log(k)}} : { onClick: (k: "left" | "right") => void; }
->onClick : (k: "left" | "right") => void
->(k) => {console.log(k)} : (k: "left" | "right") => void
->k : "left" | "right"
->console.log(k) : void
->console.log : (message?: any, ...optionalParams: any[]) => void
->console : Console
->log : (message?: any, ...optionalParams: any[]) => void
->k : "left" | "right"
->extra : true
+>c1 : any
+><NoOverload  {...{onClick: (k) => {console.log(k)}}} extra /> : any
+>NoOverload : (buttonProps: ButtonProps) => Element
+>{onClick: (k) => {console.log(k)}} : { onClick: (k: any) => void; }
+>onClick : (k: any) => void
+>(k) => {console.log(k)} : (k: any) => void
+>k : any
+>console.log(k) : any
+>console.log : any
+>console : any
+>log : any
+>k : any
+>extra : any
 
 export function NoOverload1(linkProps: LinkProps): JSX.Element { return undefined }
->NoOverload1 : (linkProps: LinkProps) => JSX.Element
+>NoOverload1 : (linkProps: LinkProps) => Element
 >linkProps : LinkProps
 >JSX : any
 >undefined : undefined
 
 const d1 = <NoOverload1 {...{goTo:"home"}} extra  />;  // goTo has type "home" | "contact"
->d1 : JSX.Element
-><NoOverload1 {...{goTo:"home"}} extra  /> : JSX.Element
->NoOverload1 : (linkProps: LinkProps) => JSX.Element
->{goTo:"home"} : { goTo: "home"; }
->goTo : "home"
+>d1 : any
+><NoOverload1 {...{goTo:"home"}} extra  /> : any
+>NoOverload1 : (linkProps: LinkProps) => Element
+>{goTo:"home"} : { goTo: string; }
+>goTo : string
 >"home" : "home"
->extra : true
+>extra : any
 
