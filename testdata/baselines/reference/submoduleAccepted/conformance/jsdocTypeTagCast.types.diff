--- old.jsdocTypeTagCast.types
+++ new.jsdocTypeTagCast.types
@@= skipped -7, +7 lines =@@
 // @ts-check
 var W = /** @type {string} */(/** @type {*} */ (4));
 >W : string
->(/** @type {*} */ (4)) : string
->(4) : any
+>(/** @type {*} */ (4)) : 4
+>(4) : 4
 >4 : 4
 
 var W = /** @type {string} */(4); // Error
 >W : string
->(4) : string
+>(4) : 4
 >4 : 4
 
 /** @type {*} */
@@= skipped -15, +15 lines =@@
 
 /** @type {string} */
 var s;
->s : string
+>s : any
 
 var a = /** @type {*} */("" + 4);
 >a : any
->("" + 4) : any
+>("" + 4) : string
 >"" + 4 : string
 >"" : ""
 >4 : 4
 
 var s = "" + /** @type {*} */(4);
->s : string
+>s : any
 >"" + /** @type {*} */(4) : string
 >"" : ""
->(4) : any
+>(4) : 4
 >4 : 4
 
 class SomeBase {
@@= skipped -59, +59 lines =@@
 }
 
 function SomeFakeClass() {
->SomeFakeClass : typeof SomeFakeClass
+>SomeFakeClass : () => void
 
     /** @type {string|number} */
     this.p = "bar";
 >this.p = "bar" : "bar"
->this.p : string | number
->this : this
->p : string | number
+>this.p : any
+>this : any
+>p : any
 >"bar" : "bar"
 }
 
@@= skipped -28, +28 lines =@@
 >SomeOther : typeof SomeOther
 
 var someFakeClass = new SomeFakeClass();
->someFakeClass : SomeFakeClass
->new SomeFakeClass() : SomeFakeClass
->SomeFakeClass : typeof SomeFakeClass
+>someFakeClass : any
+>new SomeFakeClass() : any
+>SomeFakeClass : () => void
 
 someBase = /** @type {SomeBase} */(someDerived);
->someBase = /** @type {SomeBase} */(someDerived) : SomeBase
+>someBase = /** @type {SomeBase} */(someDerived) : SomeDerived
 >someBase : SomeBase
->(someDerived) : SomeBase
+>(someDerived) : SomeDerived
 >someDerived : SomeDerived
 
 someBase = /** @type {SomeBase} */(someBase);
@@= skipped -17, +17 lines =@@
 >someBase : SomeBase
 
 someBase = /** @type {SomeBase} */(someOther); // Error
->someBase = /** @type {SomeBase} */(someOther) : SomeBase
+>someBase = /** @type {SomeBase} */(someOther) : SomeOther
 >someBase : SomeBase
->(someOther) : SomeBase
+>(someOther) : SomeOther
 >someOther : SomeOther
 
 someDerived = /** @type {SomeDerived} */(someDerived);
@@= skipped -12, +12 lines =@@
 >someDerived : SomeDerived
 
 someDerived = /** @type {SomeDerived} */(someBase);
->someDerived = /** @type {SomeDerived} */(someBase) : SomeDerived
+>someDerived = /** @type {SomeDerived} */(someBase) : SomeBase
 >someDerived : SomeDerived
->(someBase) : SomeDerived
+>(someBase) : SomeBase
 >someBase : SomeBase
 
 someDerived = /** @type {SomeDerived} */(someOther); // Error
->someDerived = /** @type {SomeDerived} */(someOther) : SomeDerived
+>someDerived = /** @type {SomeDerived} */(someOther) : SomeOther
 >someDerived : SomeDerived
->(someOther) : SomeDerived
+>(someOther) : SomeOther
 >someOther : SomeOther
 
 someOther = /** @type {SomeOther} */(someDerived); // Error
->someOther = /** @type {SomeOther} */(someDerived) : SomeOther
+>someOther = /** @type {SomeOther} */(someDerived) : SomeDerived
 >someOther : SomeOther
->(someDerived) : SomeOther
+>(someDerived) : SomeDerived
 >someDerived : SomeDerived
 
 someOther = /** @type {SomeOther} */(someBase); // Error
->someOther = /** @type {SomeOther} */(someBase) : SomeOther
+>someOther = /** @type {SomeOther} */(someBase) : SomeBase
 >someOther : SomeOther
->(someBase) : SomeOther
+>(someBase) : SomeBase
 >someBase : SomeBase
 
 someOther = /** @type {SomeOther} */(someOther);
@@= skipped -31, +31 lines =@@
 
 someFakeClass = someBase;
 >someFakeClass = someBase : SomeBase
->someFakeClass : SomeFakeClass
+>someFakeClass : any
 >someBase : SomeBase
 
 someFakeClass = someDerived;
 >someFakeClass = someDerived : SomeDerived
->someFakeClass : SomeFakeClass
+>someFakeClass : any
 >someDerived : SomeDerived
 
 someBase = someFakeClass; // Error
->someBase = someFakeClass : SomeFakeClass
+>someBase = someFakeClass : any
 >someBase : SomeBase
->someFakeClass : SomeFakeClass
+>someFakeClass : any
 
 someBase = /** @type {SomeBase} */(someFakeClass);
->someBase = /** @type {SomeBase} */(someFakeClass) : SomeBase
+>someBase = /** @type {SomeBase} */(someFakeClass) : any
 >someBase : SomeBase
->(someFakeClass) : SomeBase
->someFakeClass : SomeFakeClass
+>(someFakeClass) : any
+>someFakeClass : any
 
 // Type assertion cannot be a type-predicate type
 /** @type {number | string} */
 var numOrStr;
->numOrStr : string | number
+>numOrStr : any
 
 /** @type {string} */
 var str;
->str : string
+>str : any
 
 if(/** @type {numOrStr is string} */(numOrStr === undefined)) { // Error
 >(numOrStr === undefined) : boolean
 >numOrStr === undefined : boolean
->numOrStr : string | number
+>numOrStr : any
 >undefined : undefined
 
 	str = numOrStr; // Error, no narrowing occurred
->str = numOrStr : string | number
->str : string
->numOrStr : string | number
+>str = numOrStr : any
+>str : any
+>numOrStr : any
 }
 
 
 var asConst1 = /** @type {const} */(1);
->asConst1 : 1
+>asConst1 : number
 >(1) : 1
 >1 : 1
 
 var asConst2 = /** @type {const} */({
->asConst2 : { readonly x: 1; }
->({    x: 1}) : { readonly x: 1; }
->{    x: 1} : { readonly x: 1; }
+>asConst2 : { x: number; }
+>({    x: 1}) : { x: number; }
+>{    x: 1} : { x: number; }
 
     x: 1
->x : 1
+>x : number
 >1 : 1
 
 });
