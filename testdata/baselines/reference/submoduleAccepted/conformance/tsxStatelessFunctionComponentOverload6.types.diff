--- old.tsxStatelessFunctionComponentOverload6.types
+++ new.tsxStatelessFunctionComponentOverload6.types
@@= skipped -1, +1 lines =@@
 
 === file.tsx ===
 import React = require('react')
->React : typeof React
+>React : any
 
 export interface ClickableProps {
     children?: string;
@@= skipped -12, +12 lines =@@
 
 export interface ButtonProps extends ClickableProps {
     onClick: React.MouseEventHandler<any>;
->onClick : React.MouseEventHandler<any>
+>onClick : MouseEventHandler<any>
 >React : any
 }
 
@@= skipped -39, +39 lines =@@
 }
 
 export function MainButton(buttonProps: ButtonProps): JSX.Element;
->MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
+>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
 >buttonProps : ButtonProps
 >JSX : any
 
 export function MainButton(linkProps: LinkProps): JSX.Element;
->MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
+>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
 >linkProps : LinkProps
 >JSX : any
 
 export function MainButton(hyphenProps: HyphenProps): JSX.Element;
->MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
+>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
 >hyphenProps : HyphenProps
 >JSX : any
 
 export function MainButton(props: ButtonProps | LinkProps | HyphenProps): JSX.Element {
->MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
->props : ButtonProps | LinkProps | HyphenProps
+>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
+>props : ButtonProps | HyphenProps | LinkProps
 >JSX : any
 
     const linkProps = props as LinkProps;
 >linkProps : LinkProps
 >props as LinkProps : LinkProps
->props : ButtonProps | LinkProps | HyphenProps
+>props : ButtonProps | HyphenProps | LinkProps
 
     if(linkProps.to) {
 >linkProps.to : string
@@= skipped -34, +34 lines =@@
 >this._buildMainLink : any
 >this : any
 >_buildMainLink : any
->props : ButtonProps | LinkProps | HyphenProps
+>props : ButtonProps | HyphenProps | LinkProps
     }
 
     return this._buildMainButton(props);
@@= skipped -8, +8 lines =@@
 >this._buildMainButton : any
 >this : any
 >_buildMainButton : any
->props : ButtonProps | LinkProps | HyphenProps
+>props : ButtonProps | HyphenProps | LinkProps
 }
 
 // OK
 const b0 = <MainButton to='/some/path'>GO</MainButton>;
->b0 : JSX.Element
-><MainButton to='/some/path'>GO</MainButton> : JSX.Element
->MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
->to : string
->MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
+>b0 : any
+><MainButton to='/some/path'>GO</MainButton> : any
+>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
+>to : any
+>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
 
 const b1 = <MainButton onClick={(e) => {}}>Hello world</MainButton>;
->b1 : JSX.Element
-><MainButton onClick={(e) => {}}>Hello world</MainButton> : JSX.Element
->MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
->onClick : (e: React.MouseEvent<any>) => void
->(e) => {} : (e: React.MouseEvent<any>) => void
->e : React.MouseEvent<any>
->MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
+>b1 : any
+><MainButton onClick={(e) => {}}>Hello world</MainButton> : any
+>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
+>onClick : any
+>(e) => {} : (e: any) => void
+>e : any
+>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
 
 const b2 = <MainButton {...obj} />;
->b2 : JSX.Element
-><MainButton {...obj} /> : JSX.Element
->MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
+>b2 : any
+><MainButton {...obj} /> : any
+>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
 >obj : { children: string; to: string; }
 
 const b3 = <MainButton {...{to: 10000}} {...obj} />;
->b3 : JSX.Element
-><MainButton {...{to: 10000}} {...obj} /> : JSX.Element
->MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
+>b3 : any
+><MainButton {...{to: 10000}} {...obj} /> : any
+>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
 >{to: 10000} : { to: number; }
 >to : number
 >10000 : 10000
 >obj : { children: string; to: string; }
 
 const b4 = <MainButton {...obj1} />;  // any; just pick the first overload
->b4 : JSX.Element
-><MainButton {...obj1} /> : JSX.Element
->MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
+>b4 : any
+><MainButton {...obj1} /> : any
+>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
 >obj1 : any
 
 const b5 = <MainButton {...obj1} to="/to/somewhere" />;  // should pick the second overload
->b5 : JSX.Element
-><MainButton {...obj1} to="/to/somewhere" /> : JSX.Element
->MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
+>b5 : any
+><MainButton {...obj1} to="/to/somewhere" /> : any
+>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
 >obj1 : any
->to : string
+>to : any
 
 const b6 = <MainButton {...obj2} />;
->b6 : JSX.Element
-><MainButton {...obj2} /> : JSX.Element
->MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
+>b6 : any
+><MainButton {...obj2} /> : any
+>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
 >obj2 : { onClick: () => void; }
 
 const b7 = <MainButton {...{onClick: () => { console.log("hi") }}} />;
->b7 : JSX.Element
-><MainButton {...{onClick: () => { console.log("hi") }}} /> : JSX.Element
->MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
+>b7 : any
+><MainButton {...{onClick: () => { console.log("hi") }}} /> : any
+>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
 >{onClick: () => { console.log("hi") }} : { onClick: () => void; }
 >onClick : () => void
 >() => { console.log("hi") } : () => void
->console.log("hi") : void
->console.log : (message?: any, ...optionalParams: any[]) => void
->console : Console
->log : (message?: any, ...optionalParams: any[]) => void
+>console.log("hi") : any
+>console.log : any
+>console : any
+>log : any
 >"hi" : "hi"
 
 const b8 = <MainButton {...{onClick() {}}} />;  // OK; method declaration get retained (See GitHub #13365)
->b8 : JSX.Element
-><MainButton {...{onClick() {}}} /> : JSX.Element
->MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
->{onClick() {}} : { onClick(): void; }
+>b8 : any
+><MainButton {...{onClick() {}}} /> : any
+>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
+>{onClick() {}} : { onClick: () => void; }
 >onClick : () => void
 
 const b9 = <MainButton to='/some/path' extra-prop>GO</MainButton>;
->b9 : JSX.Element
-><MainButton to='/some/path' extra-prop>GO</MainButton> : JSX.Element
->MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
->to : string
->extra-prop : true
->MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
+>b9 : any
+><MainButton to='/some/path' extra-prop>GO</MainButton> : any
+>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
+>to : any
+>extra-prop : any
+>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
 
 const b10 = <MainButton to='/some/path' children="hi" ></MainButton>;
->b10 : JSX.Element
-><MainButton to='/some/path' children="hi" ></MainButton> : JSX.Element
->MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
->to : string
->children : string
->MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
+>b10 : any
+><MainButton to='/some/path' children="hi" ></MainButton> : any
+>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
+>to : any
+>children : any
+>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
 
 const b11 = <MainButton onClick={(e) => {}} className="hello" data-format>Hello world</MainButton>;
->b11 : JSX.Element
-><MainButton onClick={(e) => {}} className="hello" data-format>Hello world</MainButton> : JSX.Element
->MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
->onClick : (e: React.MouseEvent<any>) => void
->(e) => {} : (e: React.MouseEvent<any>) => void
->e : React.MouseEvent<any>
->className : string
->data-format : true
->MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
+>b11 : any
+><MainButton onClick={(e) => {}} className="hello" data-format>Hello world</MainButton> : any
+>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
+>onClick : any
+>(e) => {} : (e: any) => void
+>e : any
+>className : any
+>data-format : any
+>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
 
 const b12 = <MainButton data-format="Hello world" />
->b12 : JSX.Element
-><MainButton data-format="Hello world" /> : JSX.Element
->MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
->data-format : string
+>b12 : any
+><MainButton data-format="Hello world" /> : any
+>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
+>data-format : any
 
 
 
