--- old.typeFromContextualThisType.types
+++ new.typeFromContextualThisType.types
@@= skipped -2, +2 lines =@@
 === bug25926.js ===
 /** @type {{ a(): void; b?(n: number): number; }} */
 const o1 = {
->o1 : { a(): void; b?(n: number): number; }
->{    a() {        this.b = n => n;    }} : { a(): void; }
+>o1 : { a: () => void; }
+>{    a() {        this.b = n => n;    }} : { a: () => void; }
 
     a() {
 >a : () => void
 
         this.b = n => n;
->this.b = n => n : (n: number) => number
->this.b : ((n: number) => number) | undefined
->this : { a(): void; b?(n: number): number; }
->b : ((n: number) => number) | undefined
->n => n : (n: number) => number
->n : number
->n : number
+>this.b = n => n : (n: any) => any
+>this.b : any
+>this : { a: () => void; }
+>b : any
+>n => n : (n: any) => any
+>n : any
+>n : any
     }
 };
 
 /** @type {{ d(): void; e?(n: number): number; f?(n: number): number; g?: number }} */
 const o2 = {
->o2 : { d(): void; e?(n: number): number; f?(n: number): number; g?: number; }
->{    d() {        this.e = this.f = m => this.g || m;    }} : { d(): void; }
+>o2 : { d: () => void; }
+>{    d() {        this.e = this.f = m => this.g || m;    }} : { d: () => void; }
 
     d() {
 >d : () => void
 
         this.e = this.f = m => this.g || m;
->this.e = this.f = m => this.g || m : (m: number) => number
->this.e : ((n: number) => number) | undefined
->this : { d(): void; e?(n: number): number; f?(n: number): number; g?: number; }
->e : ((n: number) => number) | undefined
->this.f = m => this.g || m : (m: number) => number
->this.f : ((n: number) => number) | undefined
->this : { d(): void; e?(n: number): number; f?(n: number): number; g?: number; }
->f : ((n: number) => number) | undefined
->m => this.g || m : (m: number) => number
->m : number
->this.g || m : number
->this.g : number | undefined
->this : { d(): void; e?(n: number): number; f?(n: number): number; g?: number; }
->g : number | undefined
->m : number
+>this.e = this.f = m => this.g || m : (m: any) => any
+>this.e : any
+>this : { d: () => void; }
+>e : any
+>this.f = m => this.g || m : (m: any) => any
+>this.f : any
+>this : { d: () => void; }
+>f : any
+>m => this.g || m : (m: any) => any
+>m : any
+>this.g || m : any
+>this.g : any
+>this : { d: () => void; }
+>g : any
+>m : any
     }
 };
 
