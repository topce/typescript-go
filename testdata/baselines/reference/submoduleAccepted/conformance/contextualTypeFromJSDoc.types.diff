--- old.contextualTypeFromJSDoc.types
+++ new.contextualTypeFromJSDoc.types
@@= skipped -2, +2 lines =@@
 === index.js ===
 /** @type {Array<[string, {x?:number, y?:number}]>} */
 const arr = [
->arr : [string, { x?: number; y?: number; }][]
->[    ['a', { x: 1 }],    ['b', { y: 2 }]] : ([string, { x: number; }] | [string, { y: number; }])[]
+>arr : ((string | { x: number; })[] | (string | { y: number; })[])[]
+>[    ['a', { x: 1 }],    ['b', { y: 2 }]] : ((string | { x: number; })[] | (string | { y: number; })[])[]
 
     ['a', { x: 1 }],
->['a', { x: 1 }] : [string, { x: number; }]
+>['a', { x: 1 }] : (string | { x: number; })[]
 >'a' : "a"
 >{ x: 1 } : { x: number; }
 >x : number
 >1 : 1
 
     ['b', { y: 2 }]
->['b', { y: 2 }] : [string, { y: number; }]
+>['b', { y: 2 }] : (string | { y: number; })[]
 >'b' : "b"
 >{ y: 2 } : { y: number; }
 >y : number
@@= skipped -21, +21 lines =@@
 
 /** @return {Array<[string, {x?:number, y?:number}]>} */
 function f() {
->f : () => Array<[string, { x?: number; y?: number; }]>
+>f : () => ((string | { x: number; })[] | (string | { y: number; })[])[]
 
     return [
->[        ['a', { x: 1 }],        ['b', { y: 2 }]    ] : ([string, { x: number; }] | [string, { y: number; }])[]
+>[        ['a', { x: 1 }],        ['b', { y: 2 }]    ] : ((string | { x: number; })[] | (string | { y: number; })[])[]
 
         ['a', { x: 1 }],
->['a', { x: 1 }] : [string, { x: number; }]
+>['a', { x: 1 }] : (string | { x: number; })[]
 >'a' : "a"
 >{ x: 1 } : { x: number; }
 >x : number
 >1 : 1
 
         ['b', { y: 2 }]
->['b', { y: 2 }] : [string, { y: number; }]
+>['b', { y: 2 }] : (string | { y: number; })[]
 >'b' : "b"
 >{ y: 2 } : { y: number; }
 >y : number
@@= skipped -27, +27 lines =@@
 
     /** @param {Array<[string, {x?:number, y?:number}]>} value */
     set x(value) { }
->x : [string, { x?: number; y?: number; }][]
->value : [string, { x?: number; y?: number; }][]
+>x : ((string | { x: number; })[] | (string | { y: number; })[])[]
+>value : ((string | { x: number; })[] | (string | { y: number; })[])[]
 
     get x() {
->x : [string, { x?: number; y?: number; }][]
+>x : ((string | { x: number; })[] | (string | { y: number; })[])[]
 
         return [
->[            ['a', { x: 1 }],            ['b', { y: 2 }]        ] : ([string, { x: number; }] | [string, { y: number; }])[]
+>[            ['a', { x: 1 }],            ['b', { y: 2 }]        ] : ((string | { x: number; })[] | (string | { y: number; })[])[]
 
             ['a', { x: 1 }],
->['a', { x: 1 }] : [string, { x: number; }]
+>['a', { x: 1 }] : (string | { x: number; })[]
 >'a' : "a"
 >{ x: 1 } : { x: number; }
 >x : number
 >1 : 1
 
             ['b', { y: 2 }]
->['b', { y: 2 }] : [string, { y: number; }]
+>['b', { y: 2 }] : (string | { y: number; })[]
 >'b' : "b"
 >{ y: 2 } : { y: number; }
 >y : number
