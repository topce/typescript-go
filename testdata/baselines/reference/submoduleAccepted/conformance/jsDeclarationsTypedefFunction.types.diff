--- old.jsDeclarationsTypedefFunction.types
+++ new.jsDeclarationsTypedefFunction.types
@@= skipped -15, +15 lines =@@
  * @returns {Promise<any>}
  */
 const send = handlers => new Promise((resolve, reject) => {
->send : (handlers: ResolveRejectMap) => Promise<any>
->handlers => new Promise((resolve, reject) => {  handlers[++id] = [resolve, reject]}) : (handlers: ResolveRejectMap) => Promise<any>
->handlers : ResolveRejectMap
->new Promise((resolve, reject) => {  handlers[++id] = [resolve, reject]}) : Promise<any>
+>send : (handlers: any) => Promise<unknown>
+>handlers => new Promise((resolve, reject) => {  handlers[++id] = [resolve, reject]}) : (handlers: any) => Promise<unknown>
+>handlers : any
+>new Promise((resolve, reject) => {  handlers[++id] = [resolve, reject]}) : Promise<unknown>
 >Promise : PromiseConstructor
->(resolve, reject) => {  handlers[++id] = [resolve, reject]} : (resolve: (value: any) => void, reject: (reason?: any) => void) => void
->resolve : (value: any) => void
+>(resolve, reject) => {  handlers[++id] = [resolve, reject]} : (resolve: (value: unknown) => void, reject: (reason?: any) => void) => void
+>resolve : (value: unknown) => void
 >reject : (reason?: any) => void
 
   handlers[++id] = [resolve, reject]
->handlers[++id] = [resolve, reject] : [(value: any) => void, (reason?: any) => void]
->handlers[++id] : [Function, Function]
->handlers : ResolveRejectMap
+>handlers[++id] = [resolve, reject] : (value: unknown) => void[]
+>handlers[++id] : any
+>handlers : any
 >++id : number
 >id : number
->[resolve, reject] : [(value: any) => void, (reason?: any) => void]
->resolve : (value: any) => void
+>[resolve, reject] : (value: unknown) => void[]
+>resolve : (value: unknown) => void
 >reject : (reason?: any) => void
 
 })
