--- old.jsDeclarationsFunctions.types
+++ new.jsDeclarationsFunctions.types
@@= skipped -4, +4 lines =@@
 >a : () => void
 
 export function b() {}
->b : typeof b
+>b : { (): void; cat: string; }
 
 b.cat = "cat";
 >b.cat = "cat" : "cat"
 >b.cat : string
->b : typeof b
+>b : { (): void; cat: string; }
 >cat : string
 >"cat" : "cat"
 
 export function c() {}
->c : typeof c
+>c : { (): void; Cls: typeof Cls; }
 
 c.Cls = class {}
 >c.Cls = class {} : typeof Cls
 >c.Cls : typeof Cls
->c : typeof c
+>c : { (): void; Cls: typeof Cls; }
 >Cls : typeof Cls
 >class {} : typeof Cls
 
@@= skipped -25, +25 lines =@@
  * @return {string} 
  */
 export function d(a, b) { return /** @type {*} */(null); }
->d : (a: number, b: number) => string
->a : number
->b : number
->(null) : any
+>d : (a: any, b: any) => any
+>a : any
+>b : any
+>(null) : null
 
 /**
  * @template T,U
@@= skipped -12, +12 lines =@@
  * @return {T & U} 
  */
 export function e(a, b) { return /** @type {*} */(null); }
->e : <T, U>(a: T, b: U) => T & U
->a : T
->b : U
->(null) : any
+>e : (a: any, b: any) => any
+>a : any
+>b : any
+>(null) : null
 
 /**
  * @template T
  * @param {T} a
  */
 export function f(a) {
->f : typeof f
->a : T
+>f : { (a: any): any; self: ???; }
+>a : any
 
     return a;
->a : T
+>a : any
 }
 f.self = f;
->f.self = f : typeof f
->f.self : typeof f
->f : typeof f
->self : typeof f
->f : typeof f
+>f.self = f : { (a: any): any; self: ???; }
+>f.self : { (a: any): any; self: ???; }
+>f : { (a: any): any; self: ???; }
+>self : { (a: any): any; self: ???; }
+>f : { (a: any): any; self: ???; }
 
 /**
  * @param {{x: string}} a
  * @param {{y: typeof b}} b
  */
 function g(a, b) {
->g : (a: { x: string; }, b: { y: typeof import("index").b; }) => void
->a : { x: string; }
->b : { y: typeof import("index").b; }
+>g : (a: any, b: any) => any
+>a : any
+>b : any
 
     return a.x && b.y();
->a.x && b.y() : void
->a.x : string
->a : { x: string; }
->x : string
->b.y() : void
->b.y : typeof import("index").b
->b : { y: typeof import("index").b; }
->y : typeof import("index").b
+>a.x && b.y() : any
+>a.x : any
+>a : any
+>x : any
+>b.y() : any
+>b.y : any
+>b : any
+>y : any
 }
 
 export { g };
->g : (a: { x: string; }, b: { y: typeof import("index").b; }) => void
+>g : (a: any, b: any) => any
 
 /**
  * @param {{x: string}} a
  * @param {{y: typeof b}} b
  */
 function hh(a, b) {
->hh : (a: { x: string; }, b: { y: typeof import("index").b; }) => void
->a : { x: string; }
->b : { y: typeof import("index").b; }
+>hh : (a: any, b: any) => any
+>a : any
+>b : any
 
     return a.x && b.y();
->a.x && b.y() : void
->a.x : string
->a : { x: string; }
->x : string
->b.y() : void
->b.y : typeof import("index").b
->b : { y: typeof import("index").b; }
->y : typeof import("index").b
+>a.x && b.y() : any
+>a.x : any
+>a : any
+>x : any
+>b.y() : any
+>b.y : any
+>b : any
+>y : any
 }
 
 export { hh as h };
->hh : (a: { x: string; }, b: { y: typeof import("index").b; }) => void
->h : (a: { x: string; }, b: { y: typeof import("index").b; }) => void
+>hh : (a: any, b: any) => any
+>h : (a: any, b: any) => any
 
 export function i() {}
 >i : () => void
