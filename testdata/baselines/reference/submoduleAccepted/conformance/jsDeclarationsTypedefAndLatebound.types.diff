--- old.jsDeclarationsTypedefAndLatebound.types
+++ new.jsDeclarationsTypedefAndLatebound.types
@@= skipped -1, +1 lines =@@
 
 === index.js ===
 const LazySet = require("./LazySet");
->LazySet : typeof LazySet
->require("./LazySet") : typeof LazySet
+>LazySet : any
+>require("./LazySet") : any
 >require : any
 >"./LazySet" : "./LazySet"
 
 /** @type {LazySet} */
 const stringSet = undefined;
->stringSet : LazySet
+>stringSet : any
 >undefined : undefined
 
 stringSet.addAll(stringSet);
->stringSet.addAll(stringSet) : void
->stringSet.addAll : (iterable: LazySet) => void
->stringSet : LazySet
->addAll : (iterable: LazySet) => void
->stringSet : LazySet
+>stringSet.addAll(stringSet) : any
+>stringSet.addAll : any
+>stringSet : any
+>addAll : any
+>stringSet : any
 
 
 === LazySet.js ===
@@= skipped -30, +30 lines =@@
      * @param {LazySet} iterable
      */
     addAll(iterable) {}
->addAll : (iterable: LazySet) => void
->iterable : import("LazySet")
+>addAll : (iterable: any) => void
+>iterable : any
 
     [Symbol.iterator]() {}
 >[Symbol.iterator] : () => void
@@= skipped -11, +11 lines =@@
 }
 
 module.exports = LazySet;
->module.exports = LazySet : typeof LazySet
->module.exports : typeof LazySet
->module : { exports: typeof LazySet; }
->exports : typeof LazySet
->LazySet : typeof LazySet
+>module.exports = LazySet : any
+>module.exports : any
+>module : any
+>exports : any
+>LazySet : any
 
