--- old.assertionsAndNonReturningFunctions.types
+++ new.assertionsAndNonReturningFunctions.types
@@= skipped -4, +4 lines =@@
 
 /** @type {AssertFunc} */
 const assert = check => {
->assert : AssertFunc
->check => {    if (!check) throw new Error();} : (check: boolean) => asserts check
->check : boolean
+>assert : (check: any) => void
+>check => {    if (!check) throw new Error();} : (check: any) => void
+>check : any
 
     if (!check) throw new Error();
 >!check : boolean
->check : boolean
+>check : any
 >new Error() : Error
 >Error : ErrorConstructor
 }
 
 /** @type {(x: unknown) => asserts x is string } */
 function assertIsString(x) {
->assertIsString : (x: unknown) => asserts x is string
->x : unknown
+>assertIsString : (x: any) => void
+>x : any
 
     if (!(typeof x === "string")) throw new Error();
 >!(typeof x === "string") : boolean
 >(typeof x === "string") : boolean
 >typeof x === "string" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->x : unknown
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
+>x : any
 >"string" : "string"
 >new Error() : Error
 >Error : ErrorConstructor
@@= skipped -32, +32 lines =@@
  * @returns {asserts check}
 */
 function assert2(check) {
->assert2 : (check: boolean) => asserts check
->check : boolean
+>assert2 : (check: any) => void
+>check : any
 
     if (!check) throw new Error();
 >!check : boolean
->check : boolean
+>check : any
 >new Error() : Error
 >Error : ErrorConstructor
 }
@@= skipped -14, +14 lines =@@
  * @returns {never}
  */
 function fail() {
->fail : () => never
+>fail : () => void
 
     throw new Error();
 >new Error() : Error
@@= skipped -21, +21 lines =@@
 
         assert(typeof x === "string");
 >assert(typeof x === "string") : void
->assert : AssertFunc
+>assert : (check: any) => void
 >typeof x === "string" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : any
 >"string" : "string"
 
         x.length;
->x.length : number
->x : string
->length : number
+>x.length : any
+>x : any
+>length : any
     }
     if (!!true) {
 >!!true : boolean
@@= skipped -18, +18 lines =@@
 
         assert2(typeof x === "string");
 >assert2(typeof x === "string") : void
->assert2 : (check: boolean) => asserts check
+>assert2 : (check: any) => void
 >typeof x === "string" : boolean
->typeof x : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
+>typeof x : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
 >x : any
 >"string" : "string"
 
         x.length;
->x.length : number
->x : string
->length : number
+>x.length : any
+>x : any
+>length : any
     }
     if (!!true) {
 >!!true : boolean
@@= skipped -18, +18 lines =@@
 
         assertIsString(x);
 >assertIsString(x) : void
->assertIsString : (x: unknown) => asserts x is string
+>assertIsString : (x: any) => void
 >x : any
 
         x.length;
->x.length : number
->x : string
->length : number
+>x.length : any
+>x : any
+>length : any
     }
     if (!!true) {
 >!!true : boolean
@@= skipped -14, +14 lines =@@
 >true : true
 
         fail();
->fail() : never
->fail : () => never
+>fail() : void
+>fail : () => void
 
         x;  // Unreachable
 >x : any
@@= skipped -12, +12 lines =@@
  * @param {boolean} b 
  */
 function f2(b) {
->f2 : (b: boolean) => 1 | 0
->b : boolean
+>f2 : (b: any) => 0 | 1
+>b : any
 
     switch (b) {
->b : boolean
+>b : any
 
         case true: return 1;
 >true : true
@@= skipped -15, +15 lines =@@
 >0 : 0
     }
     b;  // Unreachable
->b : never
+>b : any
 }
 
