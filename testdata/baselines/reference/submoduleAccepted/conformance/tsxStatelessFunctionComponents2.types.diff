--- old.tsxStatelessFunctionComponents2.types
+++ new.tsxStatelessFunctionComponents2.types
@@= skipped -1, +1 lines =@@
 
 === file.tsx ===
 import React = require('react');
->React : typeof React
+>React : any
 
 function Greet(x: {name?: string}) {
->Greet : (x: { name?: string; }) => JSX.Element
+>Greet : (x: { name?: string; }) => any
 >x : { name?: string; }
 >name : string
 
 	return <div>Hello, {x}</div>;
-><div>Hello, {x}</div> : JSX.Element
+><div>Hello, {x}</div> : any
 >div : any
 >x : { name?: string; }
 >div : any
@@= skipped -16, +16 lines =@@
 
 class BigGreeter extends React.Component<{ name?: string }, {}> {
 >BigGreeter : BigGreeter
->React.Component : React.Component<{ name?: string; }, {}>
->React : typeof React
->Component : typeof React.Component
+>React.Component : any
+>React : any
+>Component : any
 >name : string
 
 	render() {
->render : () => JSX.Element
+>render : () => any
 
 		return <div></div>;
-><div></div> : JSX.Element
+><div></div> : any
 >div : any
 >div : any
 	}
@@= skipped -19, +19 lines =@@
 
 // OK
 let a = <Greet />;
->a : JSX.Element
-><Greet /> : JSX.Element
->Greet : (x: { name?: string; }) => JSX.Element
+>a : any
+><Greet /> : any
+>Greet : (x: { name?: string; }) => any
 
 // OK - always valid to specify 'key'
 let b = <Greet key="k" />;
->b : JSX.Element
-><Greet key="k" /> : JSX.Element
->Greet : (x: { name?: string; }) => JSX.Element
->key : string
+>b : any
+><Greet key="k" /> : any
+>Greet : (x: { name?: string; }) => any
+>key : any
 
 // Error - not allowed to specify 'ref' on SFCs
 let c = <Greet ref="myRef" />;
->c : JSX.Element
-><Greet ref="myRef" /> : JSX.Element
->Greet : (x: { name?: string; }) => JSX.Element
->ref : string
+>c : any
+><Greet ref="myRef" /> : any
+>Greet : (x: { name?: string; }) => any
+>ref : any
 
 
 // OK - ref is valid for classes
 let d = <BigGreeter ref={x => x.greeting.substr(10)} />;
->d : JSX.Element
-><BigGreeter ref={x => x.greeting.substr(10)} /> : JSX.Element
+>d : any
+><BigGreeter ref={x => x.greeting.substr(10)} /> : any
 >BigGreeter : typeof BigGreeter
->ref : (x: BigGreeter) => string
->x => x.greeting.substr(10) : (x: BigGreeter) => string
->x : BigGreeter
->x.greeting.substr(10) : string
->x.greeting.substr : (from: number, length?: number) => string
->x.greeting : string
->x : BigGreeter
->greeting : string
->substr : (from: number, length?: number) => string
+>ref : any
+>x => x.greeting.substr(10) : (x: any) => any
+>x : any
+>x.greeting.substr(10) : any
+>x.greeting.substr : any
+>x.greeting : any
+>x : any
+>greeting : any
+>substr : any
 >10 : 10
 
 // Error ('subtr' not on string)
 let e = <BigGreeter ref={x => x.greeting.subtr(10)} />;
->e : JSX.Element
-><BigGreeter ref={x => x.greeting.subtr(10)} /> : JSX.Element
+>e : any
+><BigGreeter ref={x => x.greeting.subtr(10)} /> : any
 >BigGreeter : typeof BigGreeter
->ref : (x: BigGreeter) => any
->x => x.greeting.subtr(10) : (x: BigGreeter) => any
->x : BigGreeter
+>ref : any
+>x => x.greeting.subtr(10) : (x: any) => any
+>x : any
 >x.greeting.subtr(10) : any
 >x.greeting.subtr : any
->x.greeting : string
->x : BigGreeter
->greeting : string
+>x.greeting : any
+>x : any
+>greeting : any
 >subtr : any
 >10 : 10
 
 // Error (ref callback is contextually typed)
 let f = <BigGreeter ref={x => x.notARealProperty} />;
->f : JSX.Element
-><BigGreeter ref={x => x.notARealProperty} /> : JSX.Element
+>f : any
+><BigGreeter ref={x => x.notARealProperty} /> : any
 >BigGreeter : typeof BigGreeter
->ref : (x: BigGreeter) => any
->x => x.notARealProperty : (x: BigGreeter) => any
->x : BigGreeter
+>ref : any
+>x => x.notARealProperty : (x: any) => any
+>x : any
 >x.notARealProperty : any
->x : BigGreeter
+>x : any
 >notARealProperty : any
 
 // OK - key is always valid
 let g = <BigGreeter key={100} />;
->g : JSX.Element
-><BigGreeter key={100} /> : JSX.Element
+>g : any
+><BigGreeter key={100} /> : any
 >BigGreeter : typeof BigGreeter
->key : number
+>key : any
 >100 : 100
 
 // OK - contextually typed intrinsic ref callback parameter
 let h = <div ref={x => x.innerText} />;
->h : JSX.Element
-><div ref={x => x.innerText} /> : JSX.Element
+>h : any
+><div ref={x => x.innerText} /> : any
 >div : any
->ref : (x: HTMLDivElement) => string
->x => x.innerText : (x: HTMLDivElement) => string
->x : HTMLDivElement
->x.innerText : string
->x : HTMLDivElement
->innerText : string
+>ref : any
+>x => x.innerText : (x: any) => any
+>x : any
+>x.innerText : any
+>x : any
+>innerText : any
 
 // Error - property not on ontextually typed intrinsic ref callback parameter
 let i = <div ref={x => x.propertyNotOnHtmlDivElement} />;
->i : JSX.Element
-><div ref={x => x.propertyNotOnHtmlDivElement} /> : JSX.Element
+>i : any
+><div ref={x => x.propertyNotOnHtmlDivElement} /> : any
 >div : any
->ref : (x: HTMLDivElement) => any
->x => x.propertyNotOnHtmlDivElement : (x: HTMLDivElement) => any
->x : HTMLDivElement
+>ref : any
+>x => x.propertyNotOnHtmlDivElement : (x: any) => any
+>x : any
 >x.propertyNotOnHtmlDivElement : any
->x : HTMLDivElement
+>x : any
 >propertyNotOnHtmlDivElement : any
 
 
