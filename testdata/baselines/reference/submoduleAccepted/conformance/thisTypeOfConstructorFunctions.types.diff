--- old.thisTypeOfConstructorFunctions.types
+++ new.thisTypeOfConstructorFunctions.types
@@= skipped -6, +6 lines =@@
  * @param {T} t
  */
 function Cp(t) {
->Cp : typeof Cp
->t : T
+>Cp : { (t: any): void; prototype: { m4: () => any; }; }
+>t : any
 
     /** @type {this} */
     this.dit = this
->this.dit = this : this
->this.dit : this
->this : this
->dit : this
->this : this
+>this.dit = this : any
+>this.dit : any
+>this : any
+>dit : any
+>this : any
 
     this.y = t
->this.y = t : T
+>this.y = t : any
 >this.y : any
->this : this
+>this : any
 >y : any
->t : T
+>t : any
 
     /** @return {this} */
     this.m3 = () => this
->this.m3 = () => this : () => this
+>this.m3 = () => this : () => any
 >this.m3 : any
->this : this
+>this : any
 >m3 : any
->() => this : () => this
->this : this
+>() => this : () => any
+>this : any
 }
 
 Cp.prototype = {
->Cp.prototype = {    /** @return {this} */    m4() {        this.z = this.y; return this    }} : { m4(): this; }
->Cp.prototype : { m4(): this; }
->Cp : typeof Cp
->prototype : { m4(): this; }
->{    /** @return {this} */    m4() {        this.z = this.y; return this    }} : { m4(): this; }
+>Cp.prototype = {    /** @return {this} */    m4() {        this.z = this.y; return this    }} : { m4: () => any; }
+>Cp.prototype : { m4: () => any; }
+>Cp : { (t: any): void; prototype: { m4: () => any; }; }
+>prototype : { m4: () => any; }
+>{    /** @return {this} */    m4() {        this.z = this.y; return this    }} : { m4: () => any; }
 
     /** @return {this} */
     m4() {
->m4 : () => this
+>m4 : () => any
 
         this.z = this.y; return this
->this.z = this.y : T
->this.z : T
->this : this
->z : T
->this.y : T
->this : this
->y : T
->this : this
+>this.z = this.y : any
+>this.z : any
+>this : any
+>z : any
+>this.y : any
+>this : any
+>y : any
+>this : any
     }
 }
 
@@= skipped -57, +57 lines =@@
  * @param {T} t
  */
 function Cpp(t) {
->Cpp : typeof Cpp
->t : T
+>Cpp : (t: any) => void
+>t : any
 
     this.y = t
->this.y = t : T
+>this.y = t : any
 >this.y : any
->this : this
+>this : any
 >y : any
->t : T
+>t : any
 }
 /** @return {this} */
 Cpp.prototype.m2 = function () {
->Cpp.prototype.m2 = function () {    this.z = this.y; return this} : () => this
+>Cpp.prototype.m2 = function () {    this.z = this.y; return this} : () => any
 >Cpp.prototype.m2 : any
 >Cpp.prototype : any
->Cpp : typeof Cpp
+>Cpp : (t: any) => void
 >prototype : any
 >m2 : any
->function () {    this.z = this.y; return this} : () => this
+>function () {    this.z = this.y; return this} : () => any
 
     this.z = this.y; return this
->this.z = this.y : T
->this.z : T
->this : this
->z : T
->this.y : T
->this : this
->y : T
->this : this
+>this.z = this.y : any
+>this.z : any
+>this : any
+>z : any
+>this.y : any
+>this : any
+>y : any
+>this : any
 }
 
 var cp = new Cp(1)
->cp : Cp<number>
->new Cp(1) : Cp<number>
->Cp : typeof Cp
+>cp : any
+>new Cp(1) : any
+>Cp : { (t: any): void; prototype: { m4: () => any; }; }
 >1 : 1
 
 var cpp = new Cpp(2)
->cpp : Cpp<number>
->new Cpp(2) : Cpp<number>
->Cpp : typeof Cpp
+>cpp : any
+>new Cpp(2) : any
+>Cpp : (t: any) => void
 >2 : 2
 
 cp.dit
->cp.dit : Cp<number>
->cp : Cp<number>
->dit : Cp<number>
+>cp.dit : any
+>cp : any
+>dit : any
 
 /** @type {Cpp<number>} */
 var cppn = cpp.m2()
->cppn : Cpp<number>
->cpp.m2() : Cpp<number>
->cpp.m2 : () => Cpp<number>
->cpp : Cpp<number>
->m2 : () => Cpp<number>
+>cppn : any
+>cpp.m2() : any
+>cpp.m2 : any
+>cpp : any
+>m2 : any
 
 /** @type {Cp<number>} */
 var cpn = cp.m3()
->cpn : Cp<number>
->cp.m3() : Cp<number>
->cp.m3 : () => Cp<number>
->cp : Cp<number>
->m3 : () => Cp<number>
+>cpn : any
+>cp.m3() : any
+>cp.m3 : any
+>cp : any
+>m3 : any
 
 /** @type {Cp<number>} */
 var cpn = cp.m4()
->cpn : Cp<number>
->cp.m4() : Cp<number>
->cp.m4 : () => Cp<number>
->cp : Cp<number>
->m4 : () => Cp<number>
+>cpn : any
+>cp.m4() : any
+>cp.m4 : any
+>cp : any
+>m4 : any
 
 
