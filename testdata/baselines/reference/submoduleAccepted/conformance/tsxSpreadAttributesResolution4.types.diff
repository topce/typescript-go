--- old.tsxSpreadAttributesResolution4.types
+++ new.tsxSpreadAttributesResolution4.types
@@= skipped -1, +1 lines =@@
 
 === file.tsx ===
 import React = require('react');
->React : typeof React
+>React : any
 
 interface PoisonedProp {
     x: string;
@@= skipped -12, +12 lines =@@
 
 class Poisoned extends React.Component<PoisonedProp, {}> {
 >Poisoned : Poisoned
->React.Component : React.Component<PoisonedProp, {}>
->React : typeof React
->Component : typeof React.Component
+>React.Component : any
+>React : any
+>Component : any
 
     render() {
->render : () => JSX.Element
+>render : () => any
 
         return <div>Hello</div>;
-><div>Hello</div> : JSX.Element
+><div>Hello</div> : any
 >div : any
 >div : any
     }
@@= skipped -30, +30 lines =@@
 
 // OK
 let p = <Poisoned {...obj} />;
->p : JSX.Element
-><Poisoned {...obj} /> : JSX.Element
+>p : any
+><Poisoned {...obj} /> : any
 >Poisoned : typeof Poisoned
 >obj : PoisonedProp
 
 class EmptyProp extends React.Component<{}, {}> {
 >EmptyProp : EmptyProp
->React.Component : React.Component<{}, {}>
->React : typeof React
->Component : typeof React.Component
+>React.Component : any
+>React : any
+>Component : any
 
     render() {
->render : () => JSX.Element
+>render : () => any
 
         return <div>Default hi</div>;
-><div>Default hi</div> : JSX.Element
+><div>Default hi</div> : any
 >div : any
 >div : any
     }
@@= skipped -26, +26 lines =@@
 >j : any
 
 let e1 = <EmptyProp {...{}} />;
->e1 : JSX.Element
-><EmptyProp {...{}} /> : JSX.Element
+>e1 : any
+><EmptyProp {...{}} /> : any
 >EmptyProp : typeof EmptyProp
 >{} : {}
 
 let e2 = <EmptyProp {...j} />
->e2 : JSX.Element
-><EmptyProp {...j} /> : JSX.Element
+>e2 : any
+><EmptyProp {...j} /> : any
 >EmptyProp : typeof EmptyProp
 >j : any
 
 let e3 = <EmptyProp {...{ ref: (input) => { this.textInput = input; } }} />
->e3 : JSX.Element
-><EmptyProp {...{ ref: (input) => { this.textInput = input; } }} /> : JSX.Element
+>e3 : any
+><EmptyProp {...{ ref: (input) => { this.textInput = input; } }} /> : any
 >EmptyProp : typeof EmptyProp
->{ ref: (input) => { this.textInput = input; } } : { ref: (input: EmptyProp) => void; }
->ref : (input: EmptyProp) => void
->(input) => { this.textInput = input; } : (input: EmptyProp) => void
->input : EmptyProp
->this.textInput = input : EmptyProp
+>{ ref: (input) => { this.textInput = input; } } : { ref: (input: any) => void; }
+>ref : (input: any) => void
+>(input) => { this.textInput = input; } : (input: any) => void
+>input : any
+>this.textInput = input : any
 >this.textInput : any
 >this : undefined
 >textInput : any
->input : EmptyProp
+>input : any
 
 let e4 = <EmptyProp data-prop />
->e4 : JSX.Element
-><EmptyProp data-prop /> : JSX.Element
+>e4 : any
+><EmptyProp data-prop /> : any
 >EmptyProp : typeof EmptyProp
->data-prop : true
+>data-prop : any
 
 let e5 = <EmptyProp {...{ "data-prop": true}} />
->e5 : JSX.Element
-><EmptyProp {...{ "data-prop": true}} /> : JSX.Element
+>e5 : any
+><EmptyProp {...{ "data-prop": true}} /> : any
 >EmptyProp : typeof EmptyProp
 >{ "data-prop": true} : { "data-prop": boolean; }
 >"data-prop" : boolean
