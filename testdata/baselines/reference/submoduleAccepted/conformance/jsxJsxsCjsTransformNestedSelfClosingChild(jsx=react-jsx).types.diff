--- old.jsxJsxsCjsTransformNestedSelfClosingChild(jsx=react-jsx).types
+++ new.jsxJsxsCjsTransformNestedSelfClosingChild(jsx=react-jsx).types
@@= skipped -2, +2 lines =@@
 === jsxJsxsCjsTransformNestedSelfClosingChild.tsx ===
 /// <reference path="react16.d.ts" />
 import type * as React from 'react';
->React : typeof React
+>React : any
 
 console.log(
 >console.log(  <div>    <div />  </div>) : void
@@= skipped -9, +9 lines =@@
 >log : (...data: any[]) => void
 
   <div>
-><div>    <div />  </div> : JSX.Element
+><div>    <div />  </div> : any
 >div : any
 
     <div />
-><div /> : JSX.Element
+><div /> : any
 >div : any
 
   </div>
@@= skipped -19, +19 lines =@@
 >log : (...data: any[]) => void
 
   <div>
-><div>    <div />    <div />  </div> : JSX.Element
+><div>    <div />    <div />  </div> : any
 >div : any
 
     <div />
-><div /> : JSX.Element
+><div /> : any
 >div : any
 
     <div />
-><div /> : JSX.Element
+><div /> : any
 >div : any
 
   </div>
@@= skipped -23, +23 lines =@@
 >log : (...data: any[]) => void
 
   <div>
-><div>    {[1, 2].map(i => <div key={i}>{i}</div>)}  </div> : JSX.Element
+><div>    {[1, 2].map(i => <div key={i}>{i}</div>)}  </div> : any
 >div : any
 
     {[1, 2].map(i => <div key={i}>{i}</div>)}
->[1, 2].map(i => <div key={i}>{i}</div>) : JSX.Element[]
+>[1, 2].map(i => <div key={i}>{i}</div>) : any[]
 >[1, 2].map : <U>(callbackfn: (value: number, index: number, array: number[]) => U, thisArg?: any) => U[]
 >[1, 2] : number[]
 >1 : 1
 >2 : 2
 >map : <U>(callbackfn: (value: number, index: number, array: number[]) => U, thisArg?: any) => U[]
->i => <div key={i}>{i}</div> : (i: number) => JSX.Element
+>i => <div key={i}>{i}</div> : (i: number) => any
 >i : number
-><div key={i}>{i}</div> : JSX.Element
+><div key={i}>{i}</div> : any
 >div : any
->key : number
+>key : any
 >i : number
 >i : number
 >div : any
