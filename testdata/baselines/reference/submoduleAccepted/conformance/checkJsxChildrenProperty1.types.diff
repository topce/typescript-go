--- old.checkJsxChildrenProperty1.types
+++ new.checkJsxChildrenProperty1.types
@@= skipped -1, +1 lines =@@
 
 === file.tsx ===
 import React = require('react');
->React : typeof React
+>React : any
 
 interface Prop {
     a: number,
@@= skipped -10, +10 lines =@@
 >b : string
 
     children: string | JSX.Element
->children : string | JSX.Element
+>children : any
 >JSX : any
 }
 
 function Comp(p: Prop) {
->Comp : (p: Prop) => JSX.Element
+>Comp : (p: Prop) => any
 >p : Prop
 
     return <div>{p.b}</div>;
-><div>{p.b}</div> : JSX.Element
+><div>{p.b}</div> : any
 >div : any
 >p.b : string
 >p : Prop
@@= skipped -19, +19 lines =@@
 
 // OK
 let k = <Comp a={10} b="hi" children ="lol" />;
->k : JSX.Element
-><Comp a={10} b="hi" children ="lol" /> : JSX.Element
->Comp : (p: Prop) => JSX.Element
->a : number
+>k : any
+><Comp a={10} b="hi" children ="lol" /> : any
+>Comp : (p: Prop) => any
+>a : any
 >10 : 10
->b : string
->children : string
+>b : any
+>children : any
 
 let k1 =
->k1 : JSX.Element
+>k1 : any
 
     <Comp a={10} b="hi">
-><Comp a={10} b="hi">        hi hi hi!    </Comp> : JSX.Element
->Comp : (p: Prop) => JSX.Element
->a : number
+><Comp a={10} b="hi">        hi hi hi!    </Comp> : any
+>Comp : (p: Prop) => any
+>a : any
 >10 : 10
->b : string
+>b : any
 
         hi hi hi!
     </Comp>;
->Comp : (p: Prop) => JSX.Element
+>Comp : (p: Prop) => any
 
 let k2 =
->k2 : JSX.Element
+>k2 : any
 
     <Comp a={10} b="hi">
-><Comp a={10} b="hi">        <div>hi hi hi!</div>    </Comp> : JSX.Element
->Comp : (p: Prop) => JSX.Element
->a : number
+><Comp a={10} b="hi">        <div>hi hi hi!</div>    </Comp> : any
+>Comp : (p: Prop) => any
+>a : any
 >10 : 10
->b : string
+>b : any
 
         <div>hi hi hi!</div>
-><div>hi hi hi!</div> : JSX.Element
+><div>hi hi hi!</div> : any
 >div : any
 >div : any
 
     </Comp>;
->Comp : (p: Prop) => JSX.Element
+>Comp : (p: Prop) => any
 
