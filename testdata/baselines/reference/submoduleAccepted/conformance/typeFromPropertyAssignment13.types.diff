--- old.typeFromPropertyAssignment13.types
+++ new.typeFromPropertyAssignment13.types
@@= skipped -1, +1 lines =@@
 
 === module.js ===
 var Outer = {}
->Outer : typeof Outer
+>Outer : {}
 >{} : {}
 
 Outer.Inner = function() {}
->Outer.Inner = function() {} : typeof Inner
->Outer.Inner : typeof Inner
->Outer : typeof Outer
->Inner : typeof Inner
->function() {} : typeof Inner
+>Outer.Inner = function() {} : () => void
+>Outer.Inner : any
+>Outer : {}
+>Inner : any
+>function() {} : () => void
 
 Outer.Inner.prototype = {
->Outer.Inner.prototype = {    m() { },    i: 1} : { m(): void; i: number; }
->Outer.Inner.prototype : { m(): void; i: number; }
->Outer.Inner : typeof Inner
->Outer : typeof Outer
->Inner : typeof Inner
->prototype : { m(): void; i: number; }
->{    m() { },    i: 1} : { m(): void; i: number; }
+>Outer.Inner.prototype = {    m() { },    i: 1} : { m: () => void; i: number; }
+>Outer.Inner.prototype : any
+>Outer.Inner : any
+>Outer : {}
+>Inner : any
+>prototype : any
+>{    m() { },    i: 1} : { m: () => void; i: number; }
 
     m() { },
 >m : () => void
@@= skipped -30, +30 lines =@@
 Outer.Inner.prototype.j = 2
 >Outer.Inner.prototype.j = 2 : 2
 >Outer.Inner.prototype.j : any
->Outer.Inner.prototype : { m(): void; i: number; }
->Outer.Inner : typeof Inner
->Outer : typeof Outer
->Inner : typeof Inner
->prototype : { m(): void; i: number; }
+>Outer.Inner.prototype : any
+>Outer.Inner : any
+>Outer : {}
+>Inner : any
+>prototype : any
 >j : any
 >2 : 2
 
 /** @type {string} */
 Outer.Inner.prototype.k;
 >Outer.Inner.prototype.k : any
->Outer.Inner.prototype : { m(): void; i: number; }
->Outer.Inner : typeof Inner
->Outer : typeof Outer
->Inner : typeof Inner
->prototype : { m(): void; i: number; }
+>Outer.Inner.prototype : any
+>Outer.Inner : any
+>Outer : {}
+>Inner : any
+>prototype : any
 >k : any
 
 var inner = new Outer.Inner()
->inner : Inner
->new Outer.Inner() : Inner
->Outer.Inner : typeof Inner
->Outer : typeof Outer
->Inner : typeof Inner
+>inner : any
+>new Outer.Inner() : any
+>Outer.Inner : any
+>Outer : {}
+>Inner : any
 
 inner.m()
->inner.m() : void
->inner.m : () => void
->inner : Inner
->m : () => void
+>inner.m() : any
+>inner.m : any
+>inner : any
+>m : any
 
 inner.i
->inner.i : number
->inner : Inner
->i : number
+>inner.i : any
+>inner : any
+>i : any
 
 inner.j
->inner.j : number
->inner : Inner
->j : number
+>inner.j : any
+>inner : any
+>j : any
 
 inner.k
->inner.k : string
->inner : Inner
->k : string
+>inner.k : any
+>inner : any
+>k : any
 
