--- old.methodsReturningThis.types
+++ new.methodsReturningThis.types
@@= skipped -1, +1 lines =@@
 
 === input.js ===
 function Class()
->Class : typeof Class
+>Class : () => void
 {
 }
 
@@= skipped -9, +9 lines =@@
 >Class.prototype.containsError = function () { return this.notPresent; } : () => any
 >Class.prototype.containsError : any
 >Class.prototype : any
->Class : typeof Class
+>Class : () => void
 >prototype : any
 >containsError : any
 >function () { return this.notPresent; } : () => any
->this.notPresent : error
->this : this
+>this.notPresent : any
+>this : any
 >notPresent : any
 
 // lots of methods that return this, which caused out-of-memory in #9527
 Class.prototype.m1 = function (a, b, c, d, tx, ty) { return this; };
->Class.prototype.m1 = function (a, b, c, d, tx, ty) { return this; } : (a: any, b: any, c: any, d: any, tx: any, ty: any) => this
+>Class.prototype.m1 = function (a, b, c, d, tx, ty) { return this; } : (a: any, b: any, c: any, d: any, tx: any, ty: any) => any
 >Class.prototype.m1 : any
 >Class.prototype : any
->Class : typeof Class
+>Class : () => void
 >prototype : any
 >m1 : any
->function (a, b, c, d, tx, ty) { return this; } : (a: any, b: any, c: any, d: any, tx: any, ty: any) => this
+>function (a, b, c, d, tx, ty) { return this; } : (a: any, b: any, c: any, d: any, tx: any, ty: any) => any
 >a : any
 >b : any
 >c : any
 >d : any
 >tx : any
 >ty : any
->this : this
+>this : any
 
 Class.prototype.m2 = function (x, y) { return this; };
->Class.prototype.m2 = function (x, y) { return this; } : (x: any, y: any) => this
+>Class.prototype.m2 = function (x, y) { return this; } : (x: any, y: any) => any
 >Class.prototype.m2 : any
 >Class.prototype : any
->Class : typeof Class
+>Class : () => void
 >prototype : any
 >m2 : any
->function (x, y) { return this; } : (x: any, y: any) => this
+>function (x, y) { return this; } : (x: any, y: any) => any
 >x : any
 >y : any
->this : this
+>this : any
 
 Class.prototype.m3 = function (x, y) { return this; };
->Class.prototype.m3 = function (x, y) { return this; } : (x: any, y: any) => this
+>Class.prototype.m3 = function (x, y) { return this; } : (x: any, y: any) => any
 >Class.prototype.m3 : any
 >Class.prototype : any
->Class : typeof Class
+>Class : () => void
 >prototype : any
 >m3 : any
->function (x, y) { return this; } : (x: any, y: any) => this
+>function (x, y) { return this; } : (x: any, y: any) => any
 >x : any
 >y : any
->this : this
+>this : any
 
 Class.prototype.m4 = function (angle) { return this; };
->Class.prototype.m4 = function (angle) { return this; } : (angle: any) => this
+>Class.prototype.m4 = function (angle) { return this; } : (angle: any) => any
 >Class.prototype.m4 : any
 >Class.prototype : any
->Class : typeof Class
+>Class : () => void
 >prototype : any
 >m4 : any
->function (angle) { return this; } : (angle: any) => this
+>function (angle) { return this; } : (angle: any) => any
 >angle : any
->this : this
+>this : any
 
 Class.prototype.m5 = function (matrix) { return this; };
->Class.prototype.m5 = function (matrix) { return this; } : (matrix: any) => this
+>Class.prototype.m5 = function (matrix) { return this; } : (matrix: any) => any
 >Class.prototype.m5 : any
 >Class.prototype : any
->Class : typeof Class
+>Class : () => void
 >prototype : any
 >m5 : any
->function (matrix) { return this; } : (matrix: any) => this
+>function (matrix) { return this; } : (matrix: any) => any
 >matrix : any
->this : this
+>this : any
 
 Class.prototype.m6 = function (x, y, pivotX, pivotY, scaleX, scaleY, rotation, skewX, skewY) { return this; };
->Class.prototype.m6 = function (x, y, pivotX, pivotY, scaleX, scaleY, rotation, skewX, skewY) { return this; } : (x: any, y: any, pivotX: any, pivotY: any, scaleX: any, scaleY: any, rotation: any, skewX: any, skewY: any) => this
+>Class.prototype.m6 = function (x, y, pivotX, pivotY, scaleX, scaleY, rotation, skewX, skewY) { return this; } : (x: any, y: any, pivotX: any, pivotY: any, scaleX: any, scaleY: any, rotation: any, skewX: any, skewY: any) => any
 >Class.prototype.m6 : any
 >Class.prototype : any
->Class : typeof Class
+>Class : () => void
 >prototype : any
 >m6 : any
->function (x, y, pivotX, pivotY, scaleX, scaleY, rotation, skewX, skewY) { return this; } : (x: any, y: any, pivotX: any, pivotY: any, scaleX: any, scaleY: any, rotation: any, skewX: any, skewY: any) => this
+>function (x, y, pivotX, pivotY, scaleX, scaleY, rotation, skewX, skewY) { return this; } : (x: any, y: any, pivotX: any, pivotY: any, scaleX: any, scaleY: any, rotation: any, skewX: any, skewY: any) => any
 >x : any
 >y : any
 >pivotX : any
@@= skipped -88, +88 lines =@@
 >rotation : any
 >skewX : any
 >skewY : any
->this : this
+>this : any
 
 Class.prototype.m7 = function(matrix) { return this; };
->Class.prototype.m7 = function(matrix) { return this; } : (matrix: any) => this
+>Class.prototype.m7 = function(matrix) { return this; } : (matrix: any) => any
 >Class.prototype.m7 : any
 >Class.prototype : any
->Class : typeof Class
+>Class : () => void
 >prototype : any
 >m7 : any
->function(matrix) { return this; } : (matrix: any) => this
+>function(matrix) { return this; } : (matrix: any) => any
 >matrix : any
->this : this
+>this : any
 
 Class.prototype.m8 = function() { return this; };
->Class.prototype.m8 = function() { return this; } : () => this
+>Class.prototype.m8 = function() { return this; } : () => any
 >Class.prototype.m8 : any
 >Class.prototype : any
->Class : typeof Class
+>Class : () => void
 >prototype : any
 >m8 : any
->function() { return this; } : () => this
->this : this
+>function() { return this; } : () => any
+>this : any
 
 Class.prototype.m9 = function () { return this; };
->Class.prototype.m9 = function () { return this; } : () => this
+>Class.prototype.m9 = function () { return this; } : () => any
 >Class.prototype.m9 : any
 >Class.prototype : any
->Class : typeof Class
+>Class : () => void
 >prototype : any
 >m9 : any
->function () { return this; } : () => this
->this : this
+>function () { return this; } : () => any
+>this : any
 
 
