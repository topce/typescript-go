--- old.typeFromPropertyAssignment9.types
+++ new.typeFromPropertyAssignment9.types
@@= skipped -1, +1 lines =@@
 
 === a.js ===
 var my = my || {};
->my : typeof my
->my || {} : typeof my | {}
->my : typeof my
+>my : any
+>my || {} : any
+>my : any
 >{} : {}
 
 /** @param {number} n */
 my.method = function(n) {
->my.method = function(n) {    return n + 1;} : (n: number) => number
->my.method : (n: number) => number
->my : typeof my
->method : (n: number) => number
->function(n) {    return n + 1;} : (n: number) => number
->n : number
+>my.method = function(n) {    return n + 1;} : (n: any) => any
+>my.method : any
+>my : any
+>method : any
+>function(n) {    return n + 1;} : (n: any) => any
+>n : any
 
     return n + 1;
->n + 1 : number
->n : number
+>n + 1 : any
+>n : any
 >1 : 1
 }
 my.number = 1;
 >my.number = 1 : 1
->my.number : number
->my : typeof my
->number : number
+>my.number : any
+>my : any
+>number : any
 >1 : 1
 
 my.object = {};
 >my.object = {} : {}
->my.object : {}
->my : typeof my
->object : {}
+>my.object : any
+>my : any
+>object : any
 >{} : {}
 
 my.predicate = my.predicate || {};
->my.predicate = my.predicate || {} : typeof my.predicate
->my.predicate : typeof my.predicate
->my : typeof my
->predicate : typeof my.predicate
->my.predicate || {} : {}
->my.predicate : typeof my.predicate
->my : typeof my
->predicate : typeof my.predicate
+>my.predicate = my.predicate || {} : any
+>my.predicate : any
+>my : any
+>predicate : any
+>my.predicate || {} : any
+>my.predicate : any
+>my : any
+>predicate : any
 >{} : {}
 
 my.predicate.query = function () {
->my.predicate.query = function () {    var me = this;    me.property = false;} : typeof query
->my.predicate.query : typeof query
->my.predicate : typeof my.predicate
->my : typeof my
->predicate : typeof my.predicate
->query : typeof query
->function () {    var me = this;    me.property = false;} : typeof query
+>my.predicate.query = function () {    var me = this;    me.property = false;} : () => void
+>my.predicate.query : any
+>my.predicate : any
+>my : any
+>predicate : any
+>query : any
+>function () {    var me = this;    me.property = false;} : () => void
 
     var me = this;
->me : this
->this : this
+>me : any
+>this : any
 
     me.property = false;
 >me.property = false : false
 >me.property : any
->me : this
+>me : any
 >property : any
 >false : false
 
 };
 var q = new my.predicate.query();
->q : query
->new my.predicate.query() : query
->my.predicate.query : typeof query
->my.predicate : typeof my.predicate
->my : typeof my
->predicate : typeof my.predicate
->query : typeof query
+>q : any
+>new my.predicate.query() : any
+>my.predicate.query : any
+>my.predicate : any
+>my : any
+>predicate : any
+>query : any
 
 my.predicate.query.another = function () {
 >my.predicate.query.another = function () {    return 1;} : () => number
->my.predicate.query.another : () => number
->my.predicate.query : typeof query
->my.predicate : typeof my.predicate
->my : typeof my
->predicate : typeof my.predicate
->query : typeof query
->another : () => number
+>my.predicate.query.another : any
+>my.predicate.query : any
+>my.predicate : any
+>my : any
+>predicate : any
+>query : any
+>another : any
 >function () {    return 1;} : () => number
 
     return 1;
@@= skipped -90, +90 lines =@@
 }
 my.predicate.query.result = 'none'
 >my.predicate.query.result = 'none' : "none"
->my.predicate.query.result : string
->my.predicate.query : typeof query
->my.predicate : typeof my.predicate
->my : typeof my
->predicate : typeof my.predicate
->query : typeof query
->result : string
+>my.predicate.query.result : any
+>my.predicate.query : any
+>my.predicate : any
+>my : any
+>predicate : any
+>query : any
+>result : any
 >'none' : "none"
 
 /** @param {number} first
  *  @param {number} second
  */
 my.predicate.sort = my.predicate.sort || function (first, second) {
->my.predicate.sort = my.predicate.sort || function (first, second) {    return first > second ? first : second;} : (first: number, second: number) => number
->my.predicate.sort : (first: number, second: number) => number
->my.predicate : typeof my.predicate
->my : typeof my
->predicate : typeof my.predicate
->sort : (first: number, second: number) => number
->my.predicate.sort || function (first, second) {    return first > second ? first : second;} : (first: number, second: number) => number
->my.predicate.sort : (first: number, second: number) => number
->my.predicate : typeof my.predicate
->my : typeof my
->predicate : typeof my.predicate
->sort : (first: number, second: number) => number
->function (first, second) {    return first > second ? first : second;} : (first: number, second: number) => number
->first : number
->second : number
+>my.predicate.sort = my.predicate.sort || function (first, second) {    return first > second ? first : second;} : any
+>my.predicate.sort : any
+>my.predicate : any
+>my : any
+>predicate : any
+>sort : any
+>my.predicate.sort || function (first, second) {    return first > second ? first : second;} : any
+>my.predicate.sort : any
+>my.predicate : any
+>my : any
+>predicate : any
+>sort : any
+>function (first, second) {    return first > second ? first : second;} : (first: any, second: any) => any
+>first : any
+>second : any
 
     return first > second ? first : second;
->first > second ? first : second : number
+>first > second ? first : second : any
 >first > second : boolean
->first : number
->second : number
->first : number
->second : number
+>first : any
+>second : any
+>first : any
+>second : any
 }
 my.predicate.type = class {
 >my.predicate.type = class {    m() { return 101; }} : typeof type
->my.predicate.type : typeof type
->my.predicate : typeof my.predicate
->my : typeof my
->predicate : typeof my.predicate
->type : typeof type
+>my.predicate.type : any
+>my.predicate : any
+>my : any
+>predicate : any
+>type : any
 >class {    m() { return 101; }} : typeof type
 
     m() { return 101; }
@@= skipped -54, +54 lines =@@
 
 // global-ish prefixes
 var min = window.min || {};
->min : typeof min
->window.min || {} : typeof min | {}
->window.min : typeof min
+>min : any
+>window.min || {} : any
+>window.min : any
 >window : Window & typeof globalThis
->min : typeof min
+>min : any
 >{} : {}
 
 min.nest = this.min.nest || function () { };
->min.nest = this.min.nest || function () { } : { (): void; other: typeof other; }
->min.nest : { (): void; other: typeof other; }
->min : typeof min
->nest : { (): void; other: typeof other; }
->this.min.nest || function () { } : { (): void; other: typeof other; }
->this.min.nest : { (): void; other: typeof other; }
->this.min : typeof min
+>min.nest = this.min.nest || function () { } : any
+>min.nest : any
+>min : any
+>nest : any
+>this.min.nest || function () { } : any
+>this.min.nest : any
+>this.min : any
 >this : typeof globalThis
->min : typeof min
->nest : { (): void; other: typeof other; }
->function () { } : { (): void; other: typeof other; }
+>min : any
+>nest : any
+>function () { } : () => void
 
 min.nest.other = self.min.nest.other || class { };
->min.nest.other = self.min.nest.other || class { } : typeof other
->min.nest.other : typeof other
->min.nest : { (): void; other: typeof other; }
->min : typeof min
->nest : { (): void; other: typeof other; }
->other : typeof other
->self.min.nest.other || class { } : typeof other
->self.min.nest.other : typeof other
->self.min.nest : { (): void; other: typeof other; }
->self.min : typeof min
+>min.nest.other = self.min.nest.other || class { } : any
+>min.nest.other : any
+>min.nest : any
+>min : any
+>nest : any
+>other : any
+>self.min.nest.other || class { } : any
+>self.min.nest.other : any
+>self.min.nest : any
+>self.min : any
 >self : Window & typeof globalThis
->min : typeof min
->nest : { (): void; other: typeof other; }
->other : typeof other
+>min : any
+>nest : any
+>other : any
 >class { } : typeof other
 
 min.property = global.min.property || {};
->min.property = global.min.property || {} : {}
->min.property : {}
->min : typeof min
->property : {}
->global.min.property || {} : {}
->global.min.property : error
+>min.property = global.min.property || {} : any
+>min.property : any
+>min : any
+>property : any
+>global.min.property || {} : any
+>global.min.property : any
 >global.min : any
 >global : any
 >min : any
