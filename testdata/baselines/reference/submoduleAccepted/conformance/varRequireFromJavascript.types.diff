--- old.varRequireFromJavascript.types
+++ new.varRequireFromJavascript.types
@@= skipped -1, +1 lines =@@
 
 === use.js ===
 var ex = require('./ex')
->ex : typeof ex
->require('./ex') : typeof ex
+>ex : any
+>require('./ex') : any
 >require : any
 >'./ex' : "./ex"
 
 // values work
 var crunch = new ex.Crunch(1);
->crunch : ex.Crunch
->new ex.Crunch(1) : ex.Crunch
->ex.Crunch : typeof ex.Crunch
->ex : typeof ex
->Crunch : typeof ex.Crunch
+>crunch : any
+>new ex.Crunch(1) : any
+>ex.Crunch : any
+>ex : any
+>Crunch : any
 >1 : 1
 
 crunch.n
->crunch.n : number
->crunch : ex.Crunch
->n : number
+>crunch.n : any
+>crunch : any
+>n : any
 
 
 // types work
@@= skipped -25, +25 lines =@@
  * @param {ex.Crunch} wrap
  */
 function f(wrap) {
->f : (wrap: ex.Crunch) => void
->wrap : ex.Crunch
+>f : (wrap: any) => void
+>wrap : any
 
     wrap.n
->wrap.n : number
->wrap : ex.Crunch
->n : number
-}
-
-=== ex.js ===
-export class Crunch {
->Crunch : Crunch
-
-    /** @param {number} n */
-    constructor(n) {
->n : number
-
-        this.n = n
->this.n = n : number
->this.n : any
->this : this
+>wrap.n : any
+>wrap : any
 >n : any
->n : number
-    }
-    m() {
->m : () => number
-
-        return this.n
->this.n : number
->this : this
->n : number
-    }
 }
 
