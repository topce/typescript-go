--- old.jsDeclarationsImportAliasExposedWithinNamespaceCjs.types
+++ new.jsDeclarationsImportAliasExposedWithinNamespaceCjs.types
@@= skipped -1, +1 lines =@@
 
 === file2.js ===
 const {myTypes} = require('./file.js');
->myTypes : { [x: string]: any; }
->require('./file.js') : typeof import("file")
+>myTypes : any
+>require('./file.js') : any
 >require : any
 >'./file.js' : "./file.js"
 
@@= skipped -11, +11 lines =@@
  * @type {Object<string,*>}
  */
 const testFnTypes = {
->testFnTypes : { [x: string]: any; }
+>testFnTypes : {}
 >{    // SOME PROPS HERE} : {}
 
     // SOME PROPS HERE
@@= skipped -15, +15 lines =@@
  * @returns {number|null} Result.
  */
 function testFn(input) {
->testFn : (input: testFnTypes.input) => number | null
->input : boolean | myTypes.typeC
+>testFn : (input: any) => number
+>input : any
 
     if (typeof input === 'number') {
 >typeof input === 'number' : boolean
->typeof input : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
->input : boolean | myTypes.typeC
+>typeof input : "bigint" | "boolean" | "function" | "number" | "object" | "string" | "symbol" | "undefined"
+>input : any
 >'number' : "number"
 
         return 2 * input;
 >2 * input : number
 >2 : 2
->input : never
+>input : number
 
     } else {
         return null;
@@= skipped -20, +20 lines =@@
 }
 
 module.exports = {testFn, testFnTypes};
->module.exports = {testFn, testFnTypes} : typeof module.exports
->module.exports : typeof module.exports
->module : { exports: typeof module.exports; }
->exports : typeof module.exports
->{testFn, testFnTypes} : { testFn: (input: testFnTypes.input) => number | null; testFnTypes: { [x: string]: any; }; }
->testFn : (input: testFnTypes.input) => number | null
->testFnTypes : { [x: string]: any; }
+>module.exports = {testFn, testFnTypes} : { testFn: (input: any) => number; testFnTypes: {}; }
+>module.exports : any
+>module : any
+>exports : any
+>{testFn, testFnTypes} : { testFn: (input: any) => number; testFnTypes: {}; }
+>testFn : (input: any) => number
+>testFnTypes : {}
 
-=== file.js ===
-/**
- * @namespace myTypes
- * @global
- * @type {Object<string,*>}
- */
-const myTypes = {
->myTypes : { [x: string]: any; }
->{    // SOME PROPS HERE} : {}
-
-    // SOME PROPS HERE
-};
-
-/** @typedef {string|RegExp|Array<string|RegExp>} myTypes.typeA */
-
-/**
- * @typedef myTypes.typeB
- * @property {myTypes.typeA}    prop1 - Prop 1.
- * @property {string}           prop2 - Prop 2.
- */
-
-/** @typedef {myTypes.typeB|Function} myTypes.typeC */
-
-exports.myTypes = myTypes;
->exports.myTypes = myTypes : { [x: string]: any; }
->exports.myTypes : { [x: string]: any; }
->exports : typeof import("file")
->myTypes : { [x: string]: any; }
->myTypes : { [x: string]: any; }
-
