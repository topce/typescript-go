--- old.tsxStatelessFunctionComponentsWithTypeArguments1.types
+++ new.tsxStatelessFunctionComponentsWithTypeArguments1.types
@@= skipped -1, +1 lines =@@
 
 === file.tsx ===
 import React = require('react')
->React : typeof React
+>React : any
 
 declare function ComponentWithTwoAttributes<K,V>(l: {key1: K, value: V}): JSX.Element;
->ComponentWithTwoAttributes : <K, V>(l: { key1: K; value: V; }) => JSX.Element
+>ComponentWithTwoAttributes : <K, V>(l: { key1: K; value: V; }) => Element
 >l : { key1: K; value: V; }
 >key1 : K
 >value : V
@@= skipped -16, +16 lines =@@
 >value : U
 
     let a0 = <ComponentWithTwoAttributes key1={key1} value={value} />
->a0 : JSX.Element
-><ComponentWithTwoAttributes key1={key1} value={value} /> : JSX.Element
->ComponentWithTwoAttributes : <K, V>(l: { key1: K; value: V; }) => JSX.Element
+>a0 : any
+><ComponentWithTwoAttributes key1={key1} value={value} /> : any
+>ComponentWithTwoAttributes : <K, V>(l: { key1: K; value: V; }) => Element
+>key1 : any
 >key1 : T
->key1 : T
+>value : any
 >value : U
->value : U
 
     let a1 = <ComponentWithTwoAttributes {...{key1, value: value}} key="Component" />
->a1 : JSX.Element
-><ComponentWithTwoAttributes {...{key1, value: value}} key="Component" /> : JSX.Element
->ComponentWithTwoAttributes : <K, V>(l: { key1: K; value: V; }) => JSX.Element
+>a1 : any
+><ComponentWithTwoAttributes {...{key1, value: value}} key="Component" /> : any
+>ComponentWithTwoAttributes : <K, V>(l: { key1: K; value: V; }) => Element
 >{key1, value: value} : { key1: T; value: U; }
 >key1 : T
 >value : U
 >value : U
->key : string
+>key : any
 }
 
 declare function Link<U>(l: {func: (arg: U)=>void}): JSX.Element;
->Link : <U>(l: { func: (arg: U) => void; }) => JSX.Element
+>Link : <U>(l: { func: (arg: U) => void; }) => Element
 >l : { func: (arg: U) => void; }
 >func : (arg: U) => void
 >arg : U
@@= skipped -33, +33 lines =@@
 >a : number
 
     let o = <Link func={func} />
->o : JSX.Element
-><Link func={func} /> : JSX.Element
->Link : <U>(l: { func: (arg: U) => void; }) => JSX.Element
+>o : any
+><Link func={func} /> : any
+>Link : <U>(l: { func: (arg: U) => void; }) => Element
+>func : any
 >func : (a: number) => void
->func : (a: number) => void
 }
 
 function createLink1(func: (a: number)=>boolean) {
@@= skipped -13, +13 lines =@@
 >a : number
 
     let o = <Link func={func} />
->o : JSX.Element
-><Link func={func} /> : JSX.Element
->Link : <U>(l: { func: (arg: U) => void; }) => JSX.Element
+>o : any
+><Link func={func} /> : any
+>Link : <U>(l: { func: (arg: U) => void; }) => Element
+>func : any
 >func : (a: number) => boolean
->func : (a: number) => boolean
 }
 
 interface InferParamProp<T> {
     values: Array<T>;
->values : T[]
+>values : Array<T>
 
     selectHandler: (selectedVal: T) => void;
 >selectHandler : (selectedVal: T) => void
@@= skipped -17, +17 lines =@@
 }
 
 declare function InferParamComponent<T>(attr: InferParamProp<T>): JSX.Element;
->InferParamComponent : <T>(attr: InferParamProp<T>) => JSX.Element
+>InferParamComponent : <T>(attr: InferParamProp<T>) => Element
 >attr : InferParamProp<T>
 >JSX : any
 
 // OK
 let i = <InferParamComponent values={[1, 2, 3, 4]} selectHandler={(val) => { }} />;
->i : JSX.Element
-><InferParamComponent values={[1, 2, 3, 4]} selectHandler={(val) => { }} /> : JSX.Element
->InferParamComponent : <T>(attr: InferParamProp<T>) => JSX.Element
->values : number[]
->[1, 2, 3, 4] : number[]
+>i : any
+><InferParamComponent values={[1, 2, 3, 4]} selectHandler={(val) => { }} /> : any
+>InferParamComponent : <T>(attr: InferParamProp<T>) => Element
+>values : any
+>[1, 2, 3, 4] : {}
 >1 : 1
 >2 : 2
 >3 : 3
 >4 : 4
->selectHandler : (val: number) => void
->(val) => { } : (val: number) => void
->val : number
+>selectHandler : any
+>(val) => { } : (val: any) => void
+>val : any
 
