--- old.tsxGenericAttributesType7.types
+++ new.tsxGenericAttributesType7.types
@@= skipped -1, +1 lines =@@
 
 === file.tsx ===
 import React = require('react');
->React : typeof React
+>React : any
 
 declare function Component<T>(props: T) : JSX.Element;
->Component : <T>(props: T) => JSX.Element
+>Component : <T>(props: T) => Element
 >props : T
 >JSX : any
 
 const decorator = function <U>(props: U) {
->decorator : <U>(props: U) => JSX.Element
->function <U>(props: U) {    return <Component {...props} />;} : <U>(props: U) => JSX.Element
+>decorator : <U>(props: U) => any
+>function <U>(props: U) {    return <Component {...props} />;} : <U>(props: U) => any
 >props : U
 
     return <Component {...props} />;
-><Component {...props} /> : JSX.Element
->Component : <T>(props: T) => JSX.Element
+><Component {...props} /> : any
+>Component : <T>(props: T) => Element
 >props : U
 }
 
 const decorator1 = function <U extends {x: string}>(props: U) {
->decorator1 : <U extends { x: string; }>(props: U) => JSX.Element
->function <U extends {x: string}>(props: U) {    return <Component {...props} x="hi"/>;} : <U extends { x: string; }>(props: U) => JSX.Element
+>decorator1 : <U extends { x: string; }>(props: U) => any
+>function <U extends {x: string}>(props: U) {    return <Component {...props} x="hi"/>;} : <U extends { x: string; }>(props: U) => any
 >x : string
 >props : U
 
     return <Component {...props} x="hi"/>;
-><Component {...props} x="hi"/> : JSX.Element
->Component : <T>(props: T) => JSX.Element
+><Component {...props} x="hi"/> : any
+>Component : <T>(props: T) => Element
 >props : U
->x : string
+>x : any
 }
