--- old.callbackTag2.types
+++ new.callbackTag2.types
@@= skipped -11, +11 lines =@@
 
 /** @type {Id<string>} I actually wanted to write `const "120"` */
 var one_twenty = s => "120";
->one_twenty : Id<string>
->s => "120" : (s: string) => string
->s : string
+>one_twenty : (s: any) => string
+>s => "120" : (s: any) => string
+>s : any
 >"120" : "120"
 
 /** @template S
@@= skipped -16, +16 lines =@@
     constructor() {
         /** @type {SharedId<S>} */
         this.id;
->this.id : SharedId<S>
+>this.id : any
 >this : this
->id : SharedId<S>
+>id : any
     }
 }
 /** @type {SharedId<number>} */
 var outside = n => n + 1;
->outside : SharedId<number>
->n => n + 1 : (n: number) => number
->n : number
->n + 1 : number
->n : number
+>outside : (n: any) => any
+>n => n + 1 : (n: any) => any
+>n : any
+>n + 1 : any
+>n : any
 >1 : 1
 
 /** @type {Final<{ fantasy }, { heroes }>} */
 var noreturn = (barts, tidus, noctis) => "cecil"
->noreturn : Final<{ fantasy: any; }, { heroes: any; }>
->(barts, tidus, noctis) => "cecil" : (barts: { fantasy: any; }, tidus: { heroes: any; }, noctis: { heroes: any; } & { fantasy: any; }) => "cecil" | "zidane"
->barts : { fantasy: any; }
->tidus : { heroes: any; }
->noctis : { heroes: any; } & { fantasy: any; }
+>noreturn : (barts: any, tidus: any, noctis: any) => string
+>(barts, tidus, noctis) => "cecil" : (barts: any, tidus: any, noctis: any) => string
+>barts : any
+>tidus : any
+>noctis : any
 >"cecil" : "cecil"
 
 /**
