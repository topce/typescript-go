--- old.tsxStatelessFunctionComponentOverload5.types
+++ new.tsxStatelessFunctionComponentOverload5.types
@@= skipped -1, +1 lines =@@
 
 === file.tsx ===
 import React = require('react')
->React : typeof React
+>React : any
 
 export interface ClickableProps {
     children?: string;
@@= skipped -12, +12 lines =@@
 
 export interface ButtonProps extends ClickableProps {
     onClick: React.MouseEventHandler<any>;
->onClick : React.MouseEventHandler<any>
+>onClick : MouseEventHandler<any>
 >React : any
 }
 
@@= skipped -50, +50 lines =@@
 >obj3 : any
 
 export function MainButton(buttonProps: ButtonProps): JSX.Element;
->MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
+>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
 >buttonProps : ButtonProps
 >JSX : any
 
 export function MainButton(linkProps: LinkProps): JSX.Element;
->MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
+>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
 >linkProps : LinkProps
 >JSX : any
 
 export function MainButton(hyphenProps: HyphenProps): JSX.Element;
->MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
+>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
 >hyphenProps : HyphenProps
 >JSX : any
 
 export function MainButton(props: ButtonProps | LinkProps | HyphenProps): JSX.Element {
->MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
->props : ButtonProps | LinkProps | HyphenProps
+>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
+>props : ButtonProps | HyphenProps | LinkProps
 >JSX : any
 
     const linkProps = props as LinkProps;
 >linkProps : LinkProps
 >props as LinkProps : LinkProps
->props : ButtonProps | LinkProps | HyphenProps
+>props : ButtonProps | HyphenProps | LinkProps
 
     if(linkProps.to) {
 >linkProps.to : string
@@= skipped -34, +34 lines =@@
 >this._buildMainLink : any
 >this : any
 >_buildMainLink : any
->props : ButtonProps | LinkProps | HyphenProps
+>props : ButtonProps | HyphenProps | LinkProps
     }
 
     return this._buildMainButton(props);
@@= skipped -8, +8 lines =@@
 >this._buildMainButton : any
 >this : any
 >_buildMainButton : any
->props : ButtonProps | LinkProps | HyphenProps
+>props : ButtonProps | HyphenProps | LinkProps
 }
 
 // Error
 const b0 = <MainButton to='/some/path' onClick={(e)=>{}}>GO</MainButton>;  // extra property;
->b0 : JSX.Element
-><MainButton to='/some/path' onClick={(e)=>{}}>GO</MainButton> : JSX.Element
->MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
->to : string
->onClick : (e: React.MouseEvent<any>) => void
->(e)=>{} : (e: React.MouseEvent<any>) => void
->e : React.MouseEvent<any>
->MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
+>b0 : any
+><MainButton to='/some/path' onClick={(e)=>{}}>GO</MainButton> : any
+>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
+>to : any
+>onClick : any
+>(e)=>{} : (e: any) => void
+>e : any
+>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
 
 const b1 = <MainButton onClick={(e: any)=> {}} {...obj0}>Hello world</MainButton>;  // extra property;
->b1 : JSX.Element
-><MainButton onClick={(e: any)=> {}} {...obj0}>Hello world</MainButton> : JSX.Element
->MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
->onClick : (e: any) => void
+>b1 : any
+><MainButton onClick={(e: any)=> {}} {...obj0}>Hello world</MainButton> : any
+>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
+>onClick : any
 >(e: any)=> {} : (e: any) => void
 >e : any
 >obj0 : { to: string; }
->MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
+>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
 
 const b2 = <MainButton {...{to: "10000"}} {...obj2} />;  // extra property
->b2 : JSX.Element
-><MainButton {...{to: "10000"}} {...obj2} /> : JSX.Element
->MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
+>b2 : any
+><MainButton {...{to: "10000"}} {...obj2} /> : any
+>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
 >{to: "10000"} : { to: string; }
 >to : string
 >"10000" : "10000"
 >obj2 : { onClick: () => void; }
 
 const b3 = <MainButton {...{to: "10000"}} {...{onClick: (k) => {}}} />;  // extra property
->b3 : JSX.Element
-><MainButton {...{to: "10000"}} {...{onClick: (k) => {}}} /> : JSX.Element
->MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
+>b3 : any
+><MainButton {...{to: "10000"}} {...{onClick: (k) => {}}} /> : any
+>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
 >{to: "10000"} : { to: string; }
 >to : string
 >"10000" : "10000"
->{onClick: (k) => {}} : { onClick: (k: React.MouseEvent<any>) => void; }
->onClick : (k: React.MouseEvent<any>) => void
->(k) => {} : (k: React.MouseEvent<any>) => void
->k : React.MouseEvent<any>
+>{onClick: (k) => {}} : { onClick: (k: any) => void; }
+>onClick : (k: any) => void
+>(k) => {} : (k: any) => void
+>k : any
 
 const b4 = <MainButton {...obj3} to />;  // Should error because Incorrect type; but attributes are any so everything is allowed
->b4 : JSX.Element
-><MainButton {...obj3} to /> : JSX.Element
->MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
+>b4 : any
+><MainButton {...obj3} to /> : any
+>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
 >obj3 : any
->to : true
+>to : any
 
 const b5 = <MainButton {...{ onClick(e: any) { } }} {...obj0} />;  // Spread retain method declaration (see GitHub #13365), so now there is an extra attributes
->b5 : JSX.Element
-><MainButton {...{ onClick(e: any) { } }} {...obj0} /> : JSX.Element
->MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
->{ onClick(e: any) { } } : { onClick(e: any): void; }
+>b5 : any
+><MainButton {...{ onClick(e: any) { } }} {...obj0} /> : any
+>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
+>{ onClick(e: any) { } } : { onClick: (e: any) => void; }
 >onClick : (e: any) => void
 >e : any
 >obj0 : { to: string; }
 
 const b6 = <MainButton {...{ onClick(e: any){} }} children={10} />;  // incorrect type for optional attribute
->b6 : JSX.Element
-><MainButton {...{ onClick(e: any){} }} children={10} /> : JSX.Element
->MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
->{ onClick(e: any){} } : { onClick(e: any): void; }
+>b6 : any
+><MainButton {...{ onClick(e: any){} }} children={10} /> : any
+>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
+>{ onClick(e: any){} } : { onClick: (e: any) => void; }
 >onClick : (e: any) => void
 >e : any
->children : number
+>children : any
 >10 : 10
 
 const b7 = <MainButton {...{ onClick(e: any){} }} children="hello" className />;  // incorrect type for optional attribute
->b7 : JSX.Element
-><MainButton {...{ onClick(e: any){} }} children="hello" className /> : JSX.Element
->MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
->{ onClick(e: any){} } : { onClick(e: any): void; }
+>b7 : any
+><MainButton {...{ onClick(e: any){} }} children="hello" className /> : any
+>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
+>{ onClick(e: any){} } : { onClick: (e: any) => void; }
 >onClick : (e: any) => void
 >e : any
->children : string
->className : true
+>children : any
+>className : any
 
 const b8 = <MainButton data-format />;  // incorrect type for specified hyphanated name
->b8 : JSX.Element
-><MainButton data-format /> : JSX.Element
->MainButton : { (buttonProps: ButtonProps): JSX.Element; (linkProps: LinkProps): JSX.Element; (hyphenProps: HyphenProps): JSX.Element; }
->data-format : true
+>b8 : any
+><MainButton data-format /> : any
+>MainButton : { (buttonProps: ButtonProps): Element; (linkProps: LinkProps): Element; (hyphenProps: HyphenProps): Element; }
+>data-format : any
 
