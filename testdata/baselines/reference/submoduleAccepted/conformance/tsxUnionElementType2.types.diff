--- old.tsxUnionElementType2.types
+++ new.tsxUnionElementType2.types
@@= skipped -1, +1 lines =@@
 
 === file.tsx ===
 import React = require('react');
->React : typeof React
+>React : any
 
 function SFC1(prop: { x: number }) {
->SFC1 : (prop: { x: number; }) => JSX.Element
+>SFC1 : (prop: { x: number; }) => any
 >prop : { x: number; }
 >x : number
 
     return <div>hello</div>;
-><div>hello</div> : JSX.Element
+><div>hello</div> : any
 >div : any
 >div : any
 
 };
 
 function SFC2(prop: { x: boolean }) {
->SFC2 : (prop: { x: boolean; }) => JSX.Element
+>SFC2 : (prop: { x: boolean; }) => any
 >prop : { x: boolean; }
 >x : boolean
 
     return <h1>World </h1>;
-><h1>World </h1> : JSX.Element
+><h1>World </h1> : any
 >h1 : any
 >h1 : any
 }
 
 var SFCComp = SFC1 || SFC2;
->SFCComp : ((prop: { x: number; }) => JSX.Element) | ((prop: { x: boolean; }) => JSX.Element)
->SFC1 || SFC2 : ((prop: { x: number; }) => JSX.Element) | ((prop: { x: boolean; }) => JSX.Element)
->SFC1 : (prop: { x: number; }) => JSX.Element
->SFC2 : (prop: { x: boolean; }) => JSX.Element
+>SFCComp : ((prop: { x: number; }) => any) | ((prop: { x: boolean; }) => any)
+>SFC1 || SFC2 : ((prop: { x: number; }) => any) | ((prop: { x: boolean; }) => any)
+>SFC1 : (prop: { x: number; }) => any
+>SFC2 : (prop: { x: boolean; }) => any
 
 <SFCComp x={"hi"}/>
-><SFCComp x={"hi"}/> : JSX.Element
->SFCComp : ((prop: { x: number; }) => JSX.Element) | ((prop: { x: boolean; }) => JSX.Element)
->x : string
+><SFCComp x={"hi"}/> : any
+>SFCComp : ((prop: { x: number; }) => any) | ((prop: { x: boolean; }) => any)
+>x : any
 >"hi" : "hi"
 
