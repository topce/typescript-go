--- old.typeFromPropertyAssignment24.types
+++ new.typeFromPropertyAssignment24.types
@@= skipped -3, +3 lines =@@
 // note that usage is first in the compilation
 Outer.Inner.Message = function() {
 >Outer.Inner.Message = function() {} : () => void
->Outer.Inner.Message : () => void
->Outer.Inner : typeof Inner
->Outer : typeof Outer
->Inner : typeof Inner
->Message : () => void
+>Outer.Inner.Message : any
+>Outer.Inner : any
+>Outer : {}
+>Inner : any
+>Message : any
 >function() {} : () => void
 
 };
 
 var y = new Outer.Inner()
->y : Inner
->new Outer.Inner() : Inner
->Outer.Inner : typeof Inner
->Outer : typeof Outer
->Inner : typeof Inner
+>y : any
+>new Outer.Inner() : any
+>Outer.Inner : any
+>Outer : {}
+>Inner : any
 
 y.name
->y.name : () => string
->y : Inner
->name : () => string
+>y.name : any
+>y : any
+>name : any
 
 /** @type {Outer.Inner} should be instance type, not static type */
 var x;
->x : Inner
+>x : any
 
 x.name
->x.name : () => string
->x : Inner
->name : () => string
+>x.name : any
+>x : any
+>name : any
 
 === def.js ===
 var Outer = {}
->Outer : typeof Outer
+>Outer : {}
 >{} : {}
 
 Outer.Inner = class {
 >Outer.Inner = class {  name() {    return 'hi'  }} : typeof Inner
->Outer.Inner : typeof Inner
->Outer : typeof Outer
->Inner : typeof Inner
+>Outer.Inner : any
+>Outer : {}
+>Inner : any
 >class {  name() {    return 'hi'  }} : typeof Inner
 
   name() {
