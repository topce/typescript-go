--- old.tsxSpreadAttributesResolution11.types
+++ new.tsxSpreadAttributesResolution11.types
@@= skipped -1, +1 lines =@@
 
 === file.tsx ===
 import React = require('react');
->React : typeof React
+>React : any
 
 const obj = {};
 >obj : {}
@@= skipped -45, +45 lines =@@
 
 class OverWriteAttr extends React.Component<Prop, {}> {
 >OverWriteAttr : OverWriteAttr
->React.Component : React.Component<Prop, {}>
->React : typeof React
->Component : typeof React.Component
+>React.Component : any
+>React : any
+>Component : any
 
     render() {
->render : () => JSX.Element
+>render : () => any
 
         return <div>Hello</div>;
-><div>Hello</div> : JSX.Element
+><div>Hello</div> : any
 >div : any
 >div : any
     }
@@= skipped -19, +19 lines =@@
 
 // OK
 let x = <OverWriteAttr {...obj} y overwrite="hi" {...obj1} />
->x : JSX.Element
-><OverWriteAttr {...obj} y overwrite="hi" {...obj1} /> : JSX.Element
+>x : any
+><OverWriteAttr {...obj} y overwrite="hi" {...obj1} /> : any
 >OverWriteAttr : typeof OverWriteAttr
 >obj : {}
->y : true
->overwrite : string
+>y : any
+>overwrite : any
 >obj1 : { x: 2; }
 
 let x1 = <OverWriteAttr {...obj1} {...obj3} />
->x1 : JSX.Element
-><OverWriteAttr {...obj1} {...obj3} /> : JSX.Element
+>x1 : any
+><OverWriteAttr {...obj1} {...obj3} /> : any
 >OverWriteAttr : typeof OverWriteAttr
 >obj1 : { x: 2; }
 >obj3 : { y: true; overwrite: string; }
 
 let x2 = <OverWriteAttr x={3} overwrite="hi" {...obj1} {...{y: true}} />
->x2 : JSX.Element
-><OverWriteAttr x={3} overwrite="hi" {...obj1} {...{y: true}} /> : JSX.Element
+>x2 : any
+><OverWriteAttr x={3} overwrite="hi" {...obj1} {...{y: true}} /> : any
 >OverWriteAttr : typeof OverWriteAttr
->x : 3
+>x : any
 >3 : 3
->overwrite : string
+>overwrite : any
 >obj1 : { x: 2; }
->{y: true} : { y: true; }
->y : true
+>{y: true} : { y: boolean; }
+>y : boolean
 >true : true
 
 let x3 = <OverWriteAttr overwrite="hi" {...obj1} x={3} {...{y: true, x: 2, overwrite:"world"}} />
->x3 : JSX.Element
-><OverWriteAttr overwrite="hi" {...obj1} x={3} {...{y: true, x: 2, overwrite:"world"}} /> : JSX.Element
+>x3 : any
+><OverWriteAttr overwrite="hi" {...obj1} x={3} {...{y: true, x: 2, overwrite:"world"}} /> : any
 >OverWriteAttr : typeof OverWriteAttr
->overwrite : string
+>overwrite : any
 >obj1 : { x: 2; }
->x : 3
+>x : any
 >3 : 3
->{y: true, x: 2, overwrite:"world"} : { y: true; x: 2; overwrite: string; }
->y : true
+>{y: true, x: 2, overwrite:"world"} : { y: boolean; x: number; overwrite: string; }
+>y : boolean
 >true : true
->x : 2
+>x : number
 >2 : 2
 >overwrite : string
 >"world" : "world"
 
 let x4 = <OverWriteAttr {...{x: 2}} {...{overwrite: "world"}} {...{y: true}} />
->x4 : JSX.Element
-><OverWriteAttr {...{x: 2}} {...{overwrite: "world"}} {...{y: true}} /> : JSX.Element
+>x4 : any
+><OverWriteAttr {...{x: 2}} {...{overwrite: "world"}} {...{y: true}} /> : any
 >OverWriteAttr : typeof OverWriteAttr
->{x: 2} : { x: 2; }
->x : 2
+>{x: 2} : { x: number; }
+>x : number
 >2 : 2
 >{overwrite: "world"} : { overwrite: string; }
 >overwrite : string
 >"world" : "world"
->{y: true} : { y: true; }
->y : true
+>{y: true} : { y: boolean; }
+>y : boolean
 >true : true
 
 let x5 = <OverWriteAttr {...anyobj} />
->x5 : JSX.Element
-><OverWriteAttr {...anyobj} /> : JSX.Element
+>x5 : any
+><OverWriteAttr {...anyobj} /> : any
 >OverWriteAttr : typeof OverWriteAttr
 >anyobj : any
 
