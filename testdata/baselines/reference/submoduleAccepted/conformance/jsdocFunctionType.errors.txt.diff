--- old.jsdocFunctionType.errors.txt
+++ new.jsdocFunctionType.errors.txt
@@= skipped -0, +0 lines =@@
-functions.js(65,14): error TS2345: Argument of type 'typeof E' is not assignable to parameter of type 'new (arg1: number) => { length: number; }'.
-  Property 'length' is missing in type 'E' but required in type '{ length: number; }'.
+functions.js(5,14): error TS7006: Parameter 'c' implicitly has an 'any' type.
+functions.js(9,23): error TS7006: Parameter 'n' implicitly has an 'any' type.
+functions.js(15,14): error TS7006: Parameter 'c' implicitly has an 'any' type.
+functions.js(21,17): error TS7006: Parameter 'n' implicitly has an 'any' type.
+functions.js(22,14): error TS2339: Property 'length' does not exist on type 'C'.
+functions.js(31,19): error TS7006: Parameter 'ab' implicitly has an 'any' type.
+functions.js(31,23): error TS7006: Parameter 'onetwo' implicitly has an 'any' type.
+functions.js(38,12): error TS7006: Parameter 'n' implicitly has an 'any' type.
+functions.js(51,26): error TS7006: Parameter 'dref' implicitly has an 'any' type.
+functions.js(60,18): error TS7006: Parameter 'n' implicitly has an 'any' type.
+functions.js(72,14): error TS7019: Rest parameter 'args' implicitly has an 'any[]' type.
 
 
-==== functions.js (1 errors) ====
+==== functions.js (11 errors) ====
     /**
      * @param {function(this: string, number): number} c is just passing on through
      * @return {function(this: string, number): number}
      */
     function id1(c) {
+                 ~
+!!! error TS7006: Parameter 'c' implicitly has an 'any' type.
         return c
     }
     
     var x = id1(function (n) { return this.length + n });
+                          ~
+!!! error TS7006: Parameter 'n' implicitly has an 'any' type.
     
     /**
      * @param {function(new: { length: number }, number): number} c is just passing on through
      * @return {function(new: { length: number }, number): number}
      */
     function id2(c) {
+                 ~
+!!! error TS7006: Parameter 'c' implicitly has an 'any' type.
         return c
     }
     
     class C {
         /** @param {number} n */
         constructor(n) {
+                    ~
+!!! error TS7006: Parameter 'n' implicitly has an 'any' type.
             this.length = n;
+                 ~~~~~~
+!!! error TS2339: Property 'length' does not exist on type 'C'.
         }
     }
     
@@= skipped -33, +52 lines =@@
     
     /** @type {function ("a" | "b", 1 | 2): 3 | 4} */
     var f = function (ab, onetwo) { return ab === "a" ? 3 : 4;  }
+                      ~~
+!!! error TS7006: Parameter 'ab' implicitly has an 'any' type.
+                          ~~~~~~
+!!! error TS7006: Parameter 'onetwo' implicitly has an 'any' type.
     
     
     /** 
@@= skipped -7, +11 lines =@@
      * @param {number} n
      */
     function D(n) {
+               ~
+!!! error TS7006: Parameter 'n' implicitly has an 'any' type.
       this.length = n;
     }
     
@@= skipped -13, +15 lines =@@
      * @return {D}
      */
     var construct = function(dref) { return new dref(33); }
+                             ~~~~
+!!! error TS7006: Parameter 'dref' implicitly has an 'any' type.
     var z3 = construct(D);
     z3.length;
     
@@= skipped -9, +11 lines =@@
      * @param {number} n
      */
     var E = function(n) {
+                     ~
+!!! error TS7006: Parameter 'n' implicitly has an 'any' type.
       this.not_length_on_purpose = n;
     };
     
     
     var y3 = id2(E);
-                 ~
-!!! error TS2345: Argument of type 'typeof E' is not assignable to parameter of type 'new (arg1: number) => { length: number; }'.
-!!! error TS2345:   Property 'length' is missing in type 'E' but required in type '{ length: number; }'.
-!!! related TS2728 functions.js:12:28: 'length' is declared here.
     
     // Repro from #39229
     
@@= skipped -16, +14 lines =@@
      * @type {(...args: [string, string] | [number, string, string]) => void}
      */
     function foo(...args) {
+                 ~~~~~~~
+!!! error TS7019: Rest parameter 'args' implicitly has an 'any[]' type.
       args;
     }
     
