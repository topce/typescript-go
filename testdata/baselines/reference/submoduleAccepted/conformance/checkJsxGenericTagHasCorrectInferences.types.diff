--- old.checkJsxGenericTagHasCorrectInferences.types
+++ new.checkJsxGenericTagHasCorrectInferences.types
@@= skipped -1, +1 lines =@@
 
 === file.tsx ===
 import * as React from "react";
->React : typeof React
+>React : any
 
 interface BaseProps<T> {
   initialValues: T;
@@= skipped -12, +12 lines =@@
 }
 declare class GenericComponent<Props = {}, Values = object> extends React.Component<Props & BaseProps<Values>, {}> {
 >GenericComponent : GenericComponent<Props, Values>
->React.Component : React.Component<Props & BaseProps<Values>, {}>
->React : typeof React
->Component : typeof React.Component
+>React.Component : any
+>React : any
+>Component : any
 
   iv: Values;
 >iv : Values
 }
 
 let a = <GenericComponent initialValues={{ x: "y" }} nextValues={a => a} />; // No error
->a : JSX.Element
-><GenericComponent initialValues={{ x: "y" }} nextValues={a => a} /> : JSX.Element
+>a : any
+><GenericComponent initialValues={{ x: "y" }} nextValues={a => a} /> : any
 >GenericComponent : typeof GenericComponent
->initialValues : { x: string; }
+>initialValues : any
 >{ x: "y" } : { x: string; }
 >x : string
 >"y" : "y"
->nextValues : (a: { x: string; }) => { x: string; }
->a => a : (a: { x: string; }) => { x: string; }
->a : { x: string; }
->a : { x: string; }
+>nextValues : any
+>a => a : (a: any) => any
+>a : any
+>a : any
 
 let b = <GenericComponent initialValues={12} nextValues={a => a} />; // No error - Values should be reinstantiated with `number` (since `object` is a default, not a constraint)
->b : JSX.Element
-><GenericComponent initialValues={12} nextValues={a => a} /> : JSX.Element
+>b : any
+><GenericComponent initialValues={12} nextValues={a => a} /> : any
 >GenericComponent : typeof GenericComponent
->initialValues : number
+>initialValues : any
 >12 : 12
->nextValues : (a: number) => number
->a => a : (a: number) => number
->a : number
->a : number
+>nextValues : any
+>a => a : (a: any) => any
+>a : any
+>a : any
 
 let c = <GenericComponent initialValues={{ x: "y" }} nextValues={a => ({ x: a.x })} />; // No Error
->c : JSX.Element
-><GenericComponent initialValues={{ x: "y" }} nextValues={a => ({ x: a.x })} /> : JSX.Element
+>c : any
+><GenericComponent initialValues={{ x: "y" }} nextValues={a => ({ x: a.x })} /> : any
 >GenericComponent : typeof GenericComponent
->initialValues : { x: string; }
+>initialValues : any
 >{ x: "y" } : { x: string; }
 >x : string
 >"y" : "y"
->nextValues : (a: { x: string; }) => { x: string; }
->a => ({ x: a.x }) : (a: { x: string; }) => { x: string; }
->a : { x: string; }
->({ x: a.x }) : { x: string; }
->{ x: a.x } : { x: string; }
->x : string
->a.x : string
->a : { x: string; }
->x : string
+>nextValues : any
+>a => ({ x: a.x }) : (a: any) => { x: any; }
+>a : any
+>({ x: a.x }) : { x: any; }
+>{ x: a.x } : { x: any; }
+>x : any
+>a.x : any
+>a : any
+>x : any
 
 let d = <GenericComponent initialValues={{ x: "y" }} nextValues={a => a.x} />; // Error - `string` is not assignable to `{x: string}`
->d : JSX.Element
-><GenericComponent initialValues={{ x: "y" }} nextValues={a => a.x} /> : JSX.Element
+>d : any
+><GenericComponent initialValues={{ x: "y" }} nextValues={a => a.x} /> : any
 >GenericComponent : typeof GenericComponent
->initialValues : { x: string; }
+>initialValues : any
 >{ x: "y" } : { x: string; }
 >x : string
 >"y" : "y"
->nextValues : (a: { x: string; }) => string
->a => a.x : (a: { x: string; }) => string
->a : { x: string; }
->a.x : string
->a : { x: string; }
->x : string
+>nextValues : any
+>a => a.x : (a: any) => any
+>a : any
+>a.x : any
+>a : any
+>x : any
 
