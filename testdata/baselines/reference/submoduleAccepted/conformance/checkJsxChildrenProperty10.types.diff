--- old.checkJsxChildrenProperty10.types
+++ new.checkJsxChildrenProperty10.types
@@= skipped -24, +24 lines =@@
 >props : {}
 
     render() {
->render : () => JSX.Element
+>render : () => any
 
         return (<div>My Button</div>)
->(<div>My Button</div>) : JSX.Element
-><div>My Button</div> : JSX.Element
+>(<div>My Button</div>) : any
+><div>My Button</div> : any
 >div : any
 >div : any
     }
@@= skipped -12, +12 lines =@@
 
 // OK
 let k1 = <div> <h2> Hello </h2> <h1> world </h1></div>;
->k1 : JSX.Element
-><div> <h2> Hello </h2> <h1> world </h1></div> : JSX.Element
+>k1 : any
+><div> <h2> Hello </h2> <h1> world </h1></div> : any
 >div : any
-><h2> Hello </h2> : JSX.Element
+><h2> Hello </h2> : any
 >h2 : any
 >h2 : any
-><h1> world </h1> : JSX.Element
+><h1> world </h1> : any
 >h1 : any
 >h1 : any
 >div : any
 
 let k2 = <div> <h2> Hello </h2> {(user: any) => <h2>{user.name}</h2>}</div>;
->k2 : JSX.Element
-><div> <h2> Hello </h2> {(user: any) => <h2>{user.name}</h2>}</div> : JSX.Element
+>k2 : any
+><div> <h2> Hello </h2> {(user: any) => <h2>{user.name}</h2>}</div> : any
 >div : any
-><h2> Hello </h2> : JSX.Element
+><h2> Hello </h2> : any
 >h2 : any
 >h2 : any
->(user: any) => <h2>{user.name}</h2> : (user: any) => JSX.Element
+>(user: any) => <h2>{user.name}</h2> : (user: any) => any
 >user : any
-><h2>{user.name}</h2> : JSX.Element
+><h2>{user.name}</h2> : any
 >h2 : any
 >user.name : any
 >user : any
@@= skipped -29, +29 lines =@@
 >div : any
 
 let k3 = <div> {1} {"That is a number"} </div>;
->k3 : JSX.Element
-><div> {1} {"That is a number"} </div> : JSX.Element
+>k3 : any
+><div> {1} {"That is a number"} </div> : any
 >div : any
 >1 : 1
 >"That is a number" : "That is a number"
 >div : any
 
 let k4 = <Button> <h2> Hello </h2> </Button>;
->k4 : JSX.Element
-><Button> <h2> Hello </h2> </Button> : JSX.Element
+>k4 : any
+><Button> <h2> Hello </h2> </Button> : any
 >Button : typeof Button
-><h2> Hello </h2> : JSX.Element
+><h2> Hello </h2> : any
 >h2 : any
 >h2 : any
 >Button : typeof Button
