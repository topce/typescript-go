--- old.jsxSpreadOverwritesAttributeStrict.types
+++ new.jsxSpreadOverwritesAttributeStrict.types
@@= skipped -1, +1 lines =@@
 
 === file.tsx ===
 import React = require('react');
->React : typeof React
+>React : any
 
 interface Props {
     a: number;
@@= skipped -26, +26 lines =@@
 >1 : 1
 
 const Foo = (props: Props) => <div>{ props.a }</div>;
->Foo : (props: Props) => JSX.Element
->(props: Props) => <div>{ props.a }</div> : (props: Props) => JSX.Element
+>Foo : (props: Props) => any
+>(props: Props) => <div>{ props.a }</div> : (props: Props) => any
 >props : Props
-><div>{ props.a }</div> : JSX.Element
+><div>{ props.a }</div> : any
 >div : any
 >props.a : number
 >props : Props
@@= skipped -12, +12 lines =@@
 
 // ok
 const a1 = <Foo {...props}></Foo>;
->a1 : JSX.Element
-><Foo {...props}></Foo> : JSX.Element
->Foo : (props: Props) => JSX.Element
+>a1 : any
+><Foo {...props}></Foo> : any
+>Foo : (props: Props) => any
 >props : Props
->Foo : (props: Props) => JSX.Element
+>Foo : (props: Props) => any
 
 const a2 = <Foo d={1} {...props}></Foo>;
->a2 : JSX.Element
-><Foo d={1} {...props}></Foo> : JSX.Element
->Foo : (props: Props) => JSX.Element
->d : number
+>a2 : any
+><Foo d={1} {...props}></Foo> : any
+>Foo : (props: Props) => any
+>d : any
 >1 : 1
 >props : Props
->Foo : (props: Props) => JSX.Element
+>Foo : (props: Props) => any
 
 // error
 const b1 = <Foo a={1} {...props}></Foo>;
->b1 : JSX.Element
-><Foo a={1} {...props}></Foo> : JSX.Element
->Foo : (props: Props) => JSX.Element
->a : number
+>b1 : any
+><Foo a={1} {...props}></Foo> : any
+>Foo : (props: Props) => any
+>a : any
 >1 : 1
 >props : Props
->Foo : (props: Props) => JSX.Element
+>Foo : (props: Props) => any
 
 const b2 = <Foo a={1} b={2} {...props}></Foo>;
->b2 : JSX.Element
-><Foo a={1} b={2} {...props}></Foo> : JSX.Element
->Foo : (props: Props) => JSX.Element
->a : number
+>b2 : any
+><Foo a={1} b={2} {...props}></Foo> : any
+>Foo : (props: Props) => any
+>a : any
 >1 : 1
->b : number
+>b : any
 >2 : 2
 >props : Props
->Foo : (props: Props) => JSX.Element
+>Foo : (props: Props) => any
 
 const b3 = <Foo a={1} d={1} {...props} {...{ d: 1 }}></Foo>;
->b3 : JSX.Element
-><Foo a={1} d={1} {...props} {...{ d: 1 }}></Foo> : JSX.Element
->Foo : (props: Props) => JSX.Element
->a : number
+>b3 : any
+><Foo a={1} d={1} {...props} {...{ d: 1 }}></Foo> : any
+>Foo : (props: Props) => any
+>a : any
 >1 : 1
->d : number
+>d : any
 >1 : 1
 >props : Props
 >{ d: 1 } : { d: number; }
 >d : number
 >1 : 1
->Foo : (props: Props) => JSX.Element
+>Foo : (props: Props) => any
 
 const b4 = <Foo a={1} d={1} {...props} {...{ a: 1, d: 1 }}></Foo>;
->b4 : JSX.Element
-><Foo a={1} d={1} {...props} {...{ a: 1, d: 1 }}></Foo> : JSX.Element
->Foo : (props: Props) => JSX.Element
->a : number
+>b4 : any
+><Foo a={1} d={1} {...props} {...{ a: 1, d: 1 }}></Foo> : any
+>Foo : (props: Props) => any
+>a : any
 >1 : 1
->d : number
+>d : any
 >1 : 1
 >props : Props
 >{ a: 1, d: 1 } : { a: number; d: number; }
@@= skipped -64, +64 lines =@@
 >1 : 1
 >d : number
 >1 : 1
->Foo : (props: Props) => JSX.Element
+>Foo : (props: Props) => any
 
