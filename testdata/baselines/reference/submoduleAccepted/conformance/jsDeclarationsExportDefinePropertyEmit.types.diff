--- old.jsDeclarationsExportDefinePropertyEmit.types
+++ new.jsDeclarationsExportDefinePropertyEmit.types
@@= skipped -1, +1 lines =@@
 
 === index.js ===
 Object.defineProperty(module.exports, "a", { value: function a() {} });
->Object.defineProperty(module.exports, "a", { value: function a() {} }) : typeof module.exports
+>Object.defineProperty(module.exports, "a", { value: function a() {} }) : any
 >Object.defineProperty : <T>(o: T, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>) => T
 >Object : ObjectConstructor
 >defineProperty : <T>(o: T, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>) => T
->module.exports : typeof module.exports
->module : { exports: typeof module.exports; }
->exports : typeof module.exports
+>module.exports : any
+>module : any
+>exports : any
 >"a" : "a"
 >{ value: function a() {} } : { value: () => void; }
 >value : () => void
@@= skipped -14, +14 lines =@@
 >a : () => void
 
 Object.defineProperty(module.exports, "b", { value: function b() {} });
->Object.defineProperty(module.exports, "b", { value: function b() {} }) : typeof module.exports
+>Object.defineProperty(module.exports, "b", { value: function b() {} }) : any
 >Object.defineProperty : <T>(o: T, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>) => T
 >Object : ObjectConstructor
 >defineProperty : <T>(o: T, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>) => T
->module.exports : typeof module.exports
->module : { exports: typeof module.exports; }
->exports : typeof module.exports
+>module.exports : any
+>module : any
+>exports : any
 >"b" : "b"
 >{ value: function b() {} } : { value: () => void; }
 >value : () => void
@@= skipped -14, +14 lines =@@
 >b : () => void
 
 Object.defineProperty(module.exports.b, "cat", { value: "cat" });
->Object.defineProperty(module.exports.b, "cat", { value: "cat" }) : () => void
+>Object.defineProperty(module.exports.b, "cat", { value: "cat" }) : any
 >Object.defineProperty : <T>(o: T, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>) => T
 >Object : ObjectConstructor
 >defineProperty : <T>(o: T, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>) => T
->module.exports.b : () => void
->module.exports : typeof module.exports
->module : { exports: typeof module.exports; }
->exports : typeof module.exports
->b : () => void
+>module.exports.b : any
+>module.exports : any
+>module : any
+>exports : any
+>b : any
 >"cat" : "cat"
 >{ value: "cat" } : { value: string; }
 >value : string
@@= skipped -20, +20 lines =@@
  * @return {string} 
  */
 function d(a, b) { return /** @type {*} */(null); }
->d : (a: number, b: number) => string
->a : number
->b : number
->(null) : any
+>d : (a: any, b: any) => any
+>a : any
+>b : any
+>(null) : null
 
 Object.defineProperty(module.exports, "d", { value: d });
->Object.defineProperty(module.exports, "d", { value: d }) : typeof module.exports
+>Object.defineProperty(module.exports, "d", { value: d }) : any
 >Object.defineProperty : <T>(o: T, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>) => T
 >Object : ObjectConstructor
 >defineProperty : <T>(o: T, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>) => T
->module.exports : typeof module.exports
->module : { exports: typeof module.exports; }
->exports : typeof module.exports
+>module.exports : any
+>module : any
+>exports : any
 >"d" : "d"
->{ value: d } : { value: (a: number, b: number) => string; }
->value : (a: number, b: number) => string
->d : (a: number, b: number) => string
+>{ value: d } : { value: (a: any, b: any) => any; }
+>value : (a: any, b: any) => any
+>d : (a: any, b: any) => any
 
 
 /**
@@= skipped -26, +26 lines =@@
  * @return {T & U} 
  */
 function e(a, b) { return /** @type {*} */(null); }
->e : <T, U>(a: T, b: U) => T & U
->a : T
->b : U
->(null) : any
+>e : (a: any, b: any) => any
+>a : any
+>b : any
+>(null) : null
 
 Object.defineProperty(module.exports, "e", { value: e });
->Object.defineProperty(module.exports, "e", { value: e }) : typeof module.exports
+>Object.defineProperty(module.exports, "e", { value: e }) : any
 >Object.defineProperty : <T>(o: T, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>) => T
 >Object : ObjectConstructor
 >defineProperty : <T>(o: T, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>) => T
->module.exports : typeof module.exports
->module : { exports: typeof module.exports; }
->exports : typeof module.exports
+>module.exports : any
+>module : any
+>exports : any
 >"e" : "e"
->{ value: e } : { value: <T, U>(a: T, b: U) => T & U; }
->value : <T, U>(a: T, b: U) => T & U
->e : <T, U>(a: T, b: U) => T & U
+>{ value: e } : { value: (a: any, b: any) => any; }
+>value : (a: any, b: any) => any
+>e : (a: any, b: any) => any
 
 /**
  * @template T
  * @param {T} a
  */
 function f(a) {
->f : <T>(a: T) => T
->a : T
+>f : (a: any) => any
+>a : any
 
     return a;
->a : T
+>a : any
 }
 Object.defineProperty(module.exports, "f", { value: f });
->Object.defineProperty(module.exports, "f", { value: f }) : typeof module.exports
+>Object.defineProperty(module.exports, "f", { value: f }) : any
 >Object.defineProperty : <T>(o: T, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>) => T
 >Object : ObjectConstructor
 >defineProperty : <T>(o: T, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>) => T
->module.exports : typeof module.exports
->module : { exports: typeof module.exports; }
->exports : typeof module.exports
+>module.exports : any
+>module : any
+>exports : any
 >"f" : "f"
->{ value: f } : { value: <T>(a: T) => T; }
->value : <T>(a: T) => T
->f : <T>(a: T) => T
+>{ value: f } : { value: (a: any) => any; }
+>value : (a: any) => any
+>f : (a: any) => any
 
 Object.defineProperty(module.exports.f, "self", { value: module.exports.f });
->Object.defineProperty(module.exports.f, "self", { value: module.exports.f }) : <T>(a: T) => T
+>Object.defineProperty(module.exports.f, "self", { value: module.exports.f }) : any
 >Object.defineProperty : <T>(o: T, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>) => T
 >Object : ObjectConstructor
 >defineProperty : <T>(o: T, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>) => T
->module.exports.f : <T>(a: T) => T
->module.exports : typeof module.exports
->module : { exports: typeof module.exports; }
->exports : typeof module.exports
->f : <T>(a: T) => T
+>module.exports.f : any
+>module.exports : any
+>module : any
+>exports : any
+>f : any
 >"self" : "self"
->{ value: module.exports.f } : { value: <T>(a: T) => T; }
->value : <T>(a: T) => T
->module.exports.f : <T>(a: T) => T
->module.exports : typeof module.exports
->module : { exports: typeof module.exports; }
->exports : typeof module.exports
->f : <T>(a: T) => T
+>{ value: module.exports.f } : { value: any; }
+>value : any
+>module.exports.f : any
+>module.exports : any
+>module : any
+>exports : any
+>f : any
 
 /**
  * @param {{x: string}} a
  * @param {{y: typeof module.exports.b}} b
  */
 function g(a, b) {
->g : (a: { x: string; }, b: { y: () => void; }) => void
->a : { x: string; }
->b : { y: () => void; }
+>g : (a: any, b: any) => any
+>a : any
+>b : any
 
     return a.x && b.y();
->a.x && b.y() : void
->a.x : string
->a : { x: string; }
->x : string
->b.y() : void
->b.y : () => void
->b : { y: () => void; }
->y : () => void
+>a.x && b.y() : any
+>a.x : any
+>a : any
+>x : any
+>b.y() : any
+>b.y : any
+>b : any
+>y : any
 }
 Object.defineProperty(module.exports, "g", { value: g });
->Object.defineProperty(module.exports, "g", { value: g }) : typeof module.exports
+>Object.defineProperty(module.exports, "g", { value: g }) : any
 >Object.defineProperty : <T>(o: T, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>) => T
 >Object : ObjectConstructor
 >defineProperty : <T>(o: T, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>) => T
->module.exports : typeof module.exports
->module : { exports: typeof module.exports; }
->exports : typeof module.exports
+>module.exports : any
+>module : any
+>exports : any
 >"g" : "g"
->{ value: g } : { value: (a: { x: string; }, b: { y: () => void; }) => void; }
->value : (a: { x: string; }, b: { y: () => void; }) => void
->g : (a: { x: string; }, b: { y: () => void; }) => void
+>{ value: g } : { value: (a: any, b: any) => any; }
+>value : (a: any, b: any) => any
+>g : (a: any, b: any) => any
 
 
 /**
@@= skipped -99, +99 lines =@@
  * @param {{y: typeof module.exports.b}} b
  */
 function hh(a, b) {
->hh : (a: { x: string; }, b: { y: () => void; }) => void
->a : { x: string; }
->b : { y: () => void; }
+>hh : (a: any, b: any) => any
+>a : any
+>b : any
 
     return a.x && b.y();
->a.x && b.y() : void
->a.x : string
->a : { x: string; }
->x : string
->b.y() : void
->b.y : () => void
->b : { y: () => void; }
->y : () => void
+>a.x && b.y() : any
+>a.x : any
+>a : any
+>x : any
+>b.y() : any
+>b.y : any
+>b : any
+>y : any
 }
 Object.defineProperty(module.exports, "h", { value: hh });
->Object.defineProperty(module.exports, "h", { value: hh }) : typeof module.exports
+>Object.defineProperty(module.exports, "h", { value: hh }) : any
 >Object.defineProperty : <T>(o: T, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>) => T
 >Object : ObjectConstructor
 >defineProperty : <T>(o: T, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>) => T
->module.exports : typeof module.exports
->module : { exports: typeof module.exports; }
->exports : typeof module.exports
+>module.exports : any
+>module : any
+>exports : any
 >"h" : "h"
->{ value: hh } : { value: (a: { x: string; }, b: { y: () => void; }) => void; }
->value : (a: { x: string; }, b: { y: () => void; }) => void
->hh : (a: { x: string; }, b: { y: () => void; }) => void
+>{ value: hh } : { value: (a: any, b: any) => any; }
+>value : (a: any, b: any) => any
+>hh : (a: any, b: any) => any
 
 Object.defineProperty(module.exports, "i", { value: function i(){} });
->Object.defineProperty(module.exports, "i", { value: function i(){} }) : typeof module.exports
+>Object.defineProperty(module.exports, "i", { value: function i(){} }) : any
 >Object.defineProperty : <T>(o: T, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>) => T
 >Object : ObjectConstructor
 >defineProperty : <T>(o: T, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>) => T
->module.exports : typeof module.exports
->module : { exports: typeof module.exports; }
->exports : typeof module.exports
+>module.exports : any
+>module : any
+>exports : any
 >"i" : "i"
 >{ value: function i(){} } : { value: () => void; }
 >value : () => void
@@= skipped -42, +42 lines =@@
 >i : () => void
 
 Object.defineProperty(module.exports, "ii", { value: module.exports.i });
->Object.defineProperty(module.exports, "ii", { value: module.exports.i }) : typeof module.exports
+>Object.defineProperty(module.exports, "ii", { value: module.exports.i }) : any
 >Object.defineProperty : <T>(o: T, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>) => T
 >Object : ObjectConstructor
 >defineProperty : <T>(o: T, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>) => T
->module.exports : typeof module.exports
->module : { exports: typeof module.exports; }
->exports : typeof module.exports
+>module.exports : any
+>module : any
+>exports : any
 >"ii" : "ii"
->{ value: module.exports.i } : { value: () => void; }
->value : () => void
->module.exports.i : () => void
->module.exports : typeof module.exports
->module : { exports: typeof module.exports; }
->exports : typeof module.exports
->i : () => void
+>{ value: module.exports.i } : { value: any; }
+>value : any
+>module.exports.i : any
+>module.exports : any
+>module : any
+>exports : any
+>i : any
 
 // note that this last one doesn't make much sense in cjs, since exports aren't hoisted bindings
 Object.defineProperty(module.exports, "jj", { value: module.exports.j });
->Object.defineProperty(module.exports, "jj", { value: module.exports.j }) : typeof module.exports
+>Object.defineProperty(module.exports, "jj", { value: module.exports.j }) : any
 >Object.defineProperty : <T>(o: T, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>) => T
 >Object : ObjectConstructor
 >defineProperty : <T>(o: T, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>) => T
->module.exports : typeof module.exports
->module : { exports: typeof module.exports; }
->exports : typeof module.exports
+>module.exports : any
+>module : any
+>exports : any
 >"jj" : "jj"
->{ value: module.exports.j } : { value: () => void; }
->value : () => void
->module.exports.j : () => void
->module.exports : typeof module.exports
->module : { exports: typeof module.exports; }
->exports : typeof module.exports
->j : () => void
+>{ value: module.exports.j } : { value: any; }
+>value : any
+>module.exports.j : any
+>module.exports : any
+>module : any
+>exports : any
+>j : any
 
 Object.defineProperty(module.exports, "j", { value: function j() {} });
->Object.defineProperty(module.exports, "j", { value: function j() {} }) : typeof module.exports
+>Object.defineProperty(module.exports, "j", { value: function j() {} }) : any
 >Object.defineProperty : <T>(o: T, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>) => T
 >Object : ObjectConstructor
 >defineProperty : <T>(o: T, p: PropertyKey, attributes: PropertyDescriptor & ThisType<any>) => T
->module.exports : typeof module.exports
->module : { exports: typeof module.exports; }
->exports : typeof module.exports
+>module.exports : any
+>module : any
+>exports : any
 >"j" : "j"
 >{ value: function j() {} } : { value: () => void; }
 >value : () => void
