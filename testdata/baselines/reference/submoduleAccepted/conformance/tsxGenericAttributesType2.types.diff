--- old.tsxGenericAttributesType2.types
+++ new.tsxGenericAttributesType2.types
@@= skipped -1, +1 lines =@@
 
 === file.tsx ===
 import React = require('react');
->React : typeof React
+>React : any
 
 const decorator4 = function <T extends { x: number }>(Component: React.StatelessComponent<T>): React.StatelessComponent<T> {
->decorator4 : <T extends { x: number; }>(Component: React.StatelessComponent<T>) => React.StatelessComponent<T>
->function <T extends { x: number }>(Component: React.StatelessComponent<T>): React.StatelessComponent<T> {    return (props) => <Component {...props} y={"blah"} ></Component>} : <T extends { x: number; }>(Component: React.StatelessComponent<T>) => React.StatelessComponent<T>
+>decorator4 : <T extends { x: number; }>(Component: StatelessComponent<T>) => StatelessComponent<T>
+>function <T extends { x: number }>(Component: React.StatelessComponent<T>): React.StatelessComponent<T> {    return (props) => <Component {...props} y={"blah"} ></Component>} : <T extends { x: number; }>(Component: StatelessComponent<T>) => StatelessComponent<T>
 >x : number
->Component : React.StatelessComponent<T>
+>Component : StatelessComponent<T>
 >React : any
 >React : any
 
     return (props) => <Component {...props} y={"blah"} ></Component>
->(props) => <Component {...props} y={"blah"} ></Component> : (props: T & { children?: React.ReactNode; }) => JSX.Element
->props : T & { children?: React.ReactNode; }
-><Component {...props} y={"blah"} ></Component> : JSX.Element
->Component : React.StatelessComponent<T>
->props : T & { children?: React.ReactNode; }
->y : string
+>(props) => <Component {...props} y={"blah"} ></Component> : (props: any) => any
+>props : any
+><Component {...props} y={"blah"} ></Component> : any
+>Component : StatelessComponent<T>
+>props : any
+>y : any
 >"blah" : "blah"
->Component : React.StatelessComponent<T>
+>Component : StatelessComponent<T>
 
 };
