--- old.checkJsdocSatisfiesTag2.types
+++ new.checkJsdocSatisfiesTag2.types
@@= skipped -3, +3 lines =@@
 /** @typedef {Object.<string, (n: number) => boolean>} Predicates */
 
 const p = /** @satisfies {Predicates} */ ({
->p : { isEven: (n: number) => boolean; isOdd: (n: number) => boolean; }
->({    isEven: n => n % 2 === 0,    isOdd: n => n % 2 === 1}) : { isEven: (n: number) => boolean; isOdd: (n: number) => boolean; }
->{    isEven: n => n % 2 === 0,    isOdd: n => n % 2 === 1} : { isEven: (n: number) => boolean; isOdd: (n: number) => boolean; }
+>p : { isEven: (n: any) => boolean; isOdd: (n: any) => boolean; }
+>({    isEven: n => n % 2 === 0,    isOdd: n => n % 2 === 1}) : { isEven: (n: any) => boolean; isOdd: (n: any) => boolean; }
+>{    isEven: n => n % 2 === 0,    isOdd: n => n % 2 === 1} : { isEven: (n: any) => boolean; isOdd: (n: any) => boolean; }
 
     isEven: n => n % 2 === 0,
->isEven : (n: number) => boolean
->n => n % 2 === 0 : (n: number) => boolean
->n : number
+>isEven : (n: any) => boolean
+>n => n % 2 === 0 : (n: any) => boolean
+>n : any
 >n % 2 === 0 : boolean
 >n % 2 : number
->n : number
+>n : any
 >2 : 2
 >0 : 0
 
     isOdd: n => n % 2 === 1
->isOdd : (n: number) => boolean
->n => n % 2 === 1 : (n: number) => boolean
->n : number
+>isOdd : (n: any) => boolean
+>n => n % 2 === 1 : (n: any) => boolean
+>n : any
 >n % 2 === 1 : boolean
 >n % 2 : number
->n : number
+>n : any
 >2 : 2
 >1 : 1
 
