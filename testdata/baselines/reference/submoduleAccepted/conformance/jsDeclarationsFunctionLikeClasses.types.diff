--- old.jsDeclarationsFunctionLikeClasses.types
+++ new.jsDeclarationsFunctionLikeClasses.types
@@= skipped -5, +5 lines =@@
  * @param {number} y
  */
 export function Point(x, y) {
->Point : typeof Point
->x : number
->y : number
+>Point : (x: any, y: any) => any
+>x : any
+>y : any
 
     if (!(this instanceof Point)) {
 >!(this instanceof Point) : boolean
 >(this instanceof Point) : boolean
 >this instanceof Point : boolean
->this : this
->Point : typeof Point
+>this : any
+>Point : (x: any, y: any) => any
 
         return new Point(x, y);
->new Point(x, y) : Point
->Point : typeof Point
->x : number
->y : number
+>new Point(x, y) : any
+>Point : (x: any, y: any) => any
+>x : any
+>y : any
     }
     this.x = x;
->this.x = x : number
+>this.x = x : any
 >this.x : any
->this : this
+>this : any
 >x : any
->x : number
+>x : any
 
     this.y = y;
->this.y = y : number
+>this.y = y : any
 >this.y : any
->this : this
+>this : any
 >y : any
->y : number
+>y : any
 }
 
 === referencer.js ===
 import {Point} from "./source";
->Point : typeof Point
+>Point : (x: any, y: any) => any
 
 /**
  * @param {Point} p
  */
 export function magnitude(p) {
->magnitude : (p: Point) => number
->p : Point
+>magnitude : (p: any) => number
+>p : any
 
     return Math.sqrt(p.x ** 2 + p.y ** 2);
 >Math.sqrt(p.x ** 2 + p.y ** 2) : number
@@= skipped -50, +50 lines =@@
 >sqrt : (x: number) => number
 >p.x ** 2 + p.y ** 2 : number
 >p.x ** 2 : number
->p.x : number
->p : Point
->x : number
+>p.x : any
+>p : any
+>x : any
 >2 : 2
 >p.y ** 2 : number
->p.y : number
->p : Point
->y : number
+>p.y : any
+>p : any
+>y : any
 >2 : 2
 }
 
