--- old.checkJsxChildrenProperty6.errors.txt
+++ new.checkJsxChildrenProperty6.errors.txt
@@= skipped -0, +-1 lines =@@
-<no content>
@@= skipped --1, +1 lines =@@
+error TS2318: Cannot find global type 'Array'.
+error TS2318: Cannot find global type 'Function'.
+error TS2318: Cannot find global type 'IArguments'.
+error TS2318: Cannot find global type 'RegExp'.
+error TS2318: Cannot find global type 'String'.
+error TS2552: Cannot find name 'Boolean'. Did you mean 'boolean'?
+error TS2552: Cannot find name 'Number'. Did you mean 'number'?
+error TS2552: Cannot find name 'Object'. Did you mean 'object'?
+file.tsx(1,24): error TS2307: Cannot find module 'react' or its corresponding type declarations.
+file.tsx(6,15): error TS2503: Cannot find namespace 'JSX'.
+file.tsx(6,29): error TS2503: Cannot find namespace 'JSX'.
+
+
+!!! error TS2318: Cannot find global type 'Array'.
+!!! error TS2318: Cannot find global type 'Function'.
+!!! error TS2318: Cannot find global type 'IArguments'.
+!!! error TS2318: Cannot find global type 'RegExp'.
+!!! error TS2318: Cannot find global type 'String'.
+!!! error TS2552: Cannot find name 'Boolean'. Did you mean 'boolean'?
+!!! error TS2552: Cannot find name 'Number'. Did you mean 'number'?
+!!! error TS2552: Cannot find name 'Object'. Did you mean 'object'?
+==== file.tsx (3 errors) ====
+    import React = require('react');
+                           ~~~~~~~
+!!! error TS2307: Cannot find module 'react' or its corresponding type declarations.
+    
+    interface Prop {
+        a: number,
+        b: string,
+        children: JSX.Element | JSX.Element[];
+                  ~~~
+!!! error TS2503: Cannot find namespace 'JSX'.
+                                ~~~
+!!! error TS2503: Cannot find namespace 'JSX'.
+    }
+    
+    class Button extends React.Component<any, any> {
+        render() {
+            return (<div>My Button</div>)
+        }
+    }
+    
+    function AnotherButton(p: any) {
+        return <h1>Just Another Button</h1>;
+    }
+    
+    function Comp(p: Prop) {
+        return <div>{p.b}</div>;
+    }
+    
+    // Ok
+    let k1 =
+        <Comp a={10} b="hi">
+            <Button />
+            <AnotherButton />
+        </Comp>;
+    
+    let k2 =
+        <Comp a={10} b="hi">
+         
+        
+        
+            <Button />
+            <AnotherButton />
+        </Comp>;
+    
+    let k3 = <Comp a={10} b="hi"><Button />  
+    <AnotherButton />
+    </Comp>;
+    
+    let k4 = <Comp a={10} b="hi"><Button /></Comp>;
