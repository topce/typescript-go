--- old.tsxLibraryManagedAttributes.types
+++ new.tsxLibraryManagedAttributes.types
@@= skipped -130, +130 lines =@@
 }
 
 const a = <Component foo={12} bar="yes" baz="yeah" />;
->a : JSX.Element
-><Component foo={12} bar="yes" baz="yeah" /> : JSX.Element
+>a : any
+><Component foo={12} bar="yes" baz="yeah" /> : any
 >Component : typeof Component
->foo : number
+>foo : any
 >12 : 12
->bar : string
->baz : string
+>bar : any
+>baz : any
 
 const b = <Component foo={12} />; // Error, missing required prop bar
->b : JSX.Element
-><Component foo={12} /> : JSX.Element
+>b : any
+><Component foo={12} /> : any
 >Component : typeof Component
->foo : number
+>foo : any
 >12 : 12
 
 const c = <Component bar="yes" baz="yeah" />;
->c : JSX.Element
-><Component bar="yes" baz="yeah" /> : JSX.Element
+>c : any
+><Component bar="yes" baz="yeah" /> : any
 >Component : typeof Component
->bar : string
->baz : string
+>bar : any
+>baz : any
 
 const d = <Component bar="yes" baz="yo" bat="ohno" />; // Error, baz not a valid prop
->d : JSX.Element
-><Component bar="yes" baz="yo" bat="ohno" /> : JSX.Element
+>d : any
+><Component bar="yes" baz="yo" bat="ohno" /> : any
 >Component : typeof Component
->bar : string
->baz : string
->bat : string
+>bar : any
+>baz : any
+>bat : any
 
 const e = <Component foo={12} bar={null} baz="cool" />; // bar is nullable/undefinable since it's not marked `isRequired`
->e : JSX.Element
-><Component foo={12} bar={null} baz="cool" /> : JSX.Element
+>e : any
+><Component foo={12} bar={null} baz="cool" /> : any
 >Component : typeof Component
->foo : number
+>foo : any
 >12 : 12
->bar : null
->baz : string
+>bar : any
+>baz : any
 
 const f = <Component foo={12} bar="yeah" baz={null} />; // Error, baz is _not_ nullable/undefinable since it's marked `isRequired`
->f : JSX.Element
-><Component foo={12} bar="yeah" baz={null} /> : JSX.Element
+>f : any
+><Component foo={12} bar="yeah" baz={null} /> : any
 >Component : typeof Component
->foo : number
+>foo : any
 >12 : 12
->bar : string
->baz : null
+>bar : any
+>baz : any
 
 class JustPropTypes extends ReactComponent {
 >JustPropTypes : JustPropTypes
@@= skipped -74, +74 lines =@@
 }
 
 const g = <JustPropTypes foo={12} bar="ok" />;
->g : JSX.Element
-><JustPropTypes foo={12} bar="ok" /> : JSX.Element
+>g : any
+><JustPropTypes foo={12} bar="ok" /> : any
 >JustPropTypes : typeof JustPropTypes
->foo : number
+>foo : any
 >12 : 12
->bar : string
+>bar : any
 
 const h = <JustPropTypes foo="no" />; // error, wrong type
->h : JSX.Element
-><JustPropTypes foo="no" /> : JSX.Element
+>h : any
+><JustPropTypes foo="no" /> : any
 >JustPropTypes : typeof JustPropTypes
->foo : string
+>foo : any
 
 const i = <JustPropTypes foo={null} bar="ok" />;
->i : JSX.Element
-><JustPropTypes foo={null} bar="ok" /> : JSX.Element
+>i : any
+><JustPropTypes foo={null} bar="ok" /> : any
 >JustPropTypes : typeof JustPropTypes
->foo : null
->bar : string
+>foo : any
+>bar : any
 
 const j = <JustPropTypes foo={12} bar={null} />; // error, bar is required
->j : JSX.Element
-><JustPropTypes foo={12} bar={null} /> : JSX.Element
+>j : any
+><JustPropTypes foo={12} bar={null} /> : any
 >JustPropTypes : typeof JustPropTypes
->foo : number
+>foo : any
 >12 : 12
->bar : null
+>bar : any
 
 class JustDefaultProps extends ReactComponent {
 >JustDefaultProps : JustDefaultProps
@@= skipped -44, +44 lines =@@
 }
 
 const k = <JustDefaultProps foo={12} />;
->k : JSX.Element
-><JustDefaultProps foo={12} /> : JSX.Element
+>k : any
+><JustDefaultProps foo={12} /> : any
 >JustDefaultProps : typeof JustDefaultProps
->foo : number
+>foo : any
 >12 : 12
 
 const l = <JustDefaultProps foo={12} bar="ok" />; // error, no prop named bar
->l : JSX.Element
-><JustDefaultProps foo={12} bar="ok" /> : JSX.Element
+>l : any
+><JustDefaultProps foo={12} bar="ok" /> : any
 >JustDefaultProps : typeof JustDefaultProps
->foo : number
+>foo : any
 >12 : 12
->bar : string
+>bar : any
 
 const m = <JustDefaultProps foo="no" />; // error, wrong type
->m : JSX.Element
-><JustDefaultProps foo="no" /> : JSX.Element
+>m : any
+><JustDefaultProps foo="no" /> : any
 >JustDefaultProps : typeof JustDefaultProps
->foo : string
+>foo : any
 
 interface FooProps {
     foo: string;
@@= skipped -65, +65 lines =@@
     };
 }
 const n = <BothWithSpecifiedGeneric foo="fine" bar="yes" baz={12} />;
->n : JSX.Element
-><BothWithSpecifiedGeneric foo="fine" bar="yes" baz={12} /> : JSX.Element
+>n : any
+><BothWithSpecifiedGeneric foo="fine" bar="yes" baz={12} /> : any
 >BothWithSpecifiedGeneric : typeof BothWithSpecifiedGeneric
->foo : string
->bar : string
->baz : number
+>foo : any
+>bar : any
+>baz : any
 >12 : 12
 
 const o = <BothWithSpecifiedGeneric foo="no" />; // Error, missing required prop bar
->o : JSX.Element
-><BothWithSpecifiedGeneric foo="no" /> : JSX.Element
+>o : any
+><BothWithSpecifiedGeneric foo="no" /> : any
 >BothWithSpecifiedGeneric : typeof BothWithSpecifiedGeneric
->foo : string
+>foo : any
 
 const p = <BothWithSpecifiedGeneric bar="yes" baz={12} />;
->p : JSX.Element
-><BothWithSpecifiedGeneric bar="yes" baz={12} /> : JSX.Element
+>p : any
+><BothWithSpecifiedGeneric bar="yes" baz={12} /> : any
 >BothWithSpecifiedGeneric : typeof BothWithSpecifiedGeneric
->bar : string
->baz : number
+>bar : any
+>baz : any
 >12 : 12
 
 const q = <BothWithSpecifiedGeneric bar="yes" baz={12} bat="ohno" />; // Error, baz not a valid prop
->q : JSX.Element
-><BothWithSpecifiedGeneric bar="yes" baz={12} bat="ohno" /> : JSX.Element
+>q : any
+><BothWithSpecifiedGeneric bar="yes" baz={12} bat="ohno" /> : any
 >BothWithSpecifiedGeneric : typeof BothWithSpecifiedGeneric
->bar : string
->baz : number
+>bar : any
+>baz : any
 >12 : 12
->bat : string
+>bat : any
 
 const r = <BothWithSpecifiedGeneric foo="no" bar={null} baz={0} />; // bar is nullable/undefinable since it's not marked `isRequired`
->r : JSX.Element
-><BothWithSpecifiedGeneric foo="no" bar={null} baz={0} /> : JSX.Element
+>r : any
+><BothWithSpecifiedGeneric foo="no" bar={null} baz={0} /> : any
 >BothWithSpecifiedGeneric : typeof BothWithSpecifiedGeneric
->foo : string
->bar : null
->baz : number
+>foo : any
+>bar : any
+>baz : any
 >0 : 0
 
 const s = <BothWithSpecifiedGeneric foo="eh" bar="yeah" baz={null} />; // Error, baz is _not_ nullable/undefinable since it's marked `isRequired`
->s : JSX.Element
-><BothWithSpecifiedGeneric foo="eh" bar="yeah" baz={null} /> : JSX.Element
+>s : any
+><BothWithSpecifiedGeneric foo="eh" bar="yeah" baz={null} /> : any
 >BothWithSpecifiedGeneric : typeof BothWithSpecifiedGeneric
->foo : string
->bar : string
->baz : null
+>foo : any
+>bar : any
+>baz : any
 
 class JustPropTypesWithSpecifiedGeneric extends ReactComponent<FooProps> {
 >JustPropTypesWithSpecifiedGeneric : JustPropTypesWithSpecifiedGeneric
@@= skipped -73, +73 lines =@@
     };
 }
 const t = <JustPropTypesWithSpecifiedGeneric foo="nice" bar="ok" />;
->t : JSX.Element
-><JustPropTypesWithSpecifiedGeneric foo="nice" bar="ok" /> : JSX.Element
+>t : any
+><JustPropTypesWithSpecifiedGeneric foo="nice" bar="ok" /> : any
 >JustPropTypesWithSpecifiedGeneric : typeof JustPropTypesWithSpecifiedGeneric
->foo : string
->bar : string
+>foo : any
+>bar : any
 
 const u = <JustPropTypesWithSpecifiedGeneric foo={12} />; // error, wrong type
->u : JSX.Element
-><JustPropTypesWithSpecifiedGeneric foo={12} /> : JSX.Element
+>u : any
+><JustPropTypesWithSpecifiedGeneric foo={12} /> : any
 >JustPropTypesWithSpecifiedGeneric : typeof JustPropTypesWithSpecifiedGeneric
->foo : number
+>foo : any
 >12 : 12
 
 const v = <JustPropTypesWithSpecifiedGeneric foo={null} bar="ok" />; // generic overrides propTypes required-ness, null isn't valid
->v : JSX.Element
-><JustPropTypesWithSpecifiedGeneric foo={null} bar="ok" /> : JSX.Element
+>v : any
+><JustPropTypesWithSpecifiedGeneric foo={null} bar="ok" /> : any
 >JustPropTypesWithSpecifiedGeneric : typeof JustPropTypesWithSpecifiedGeneric
->foo : null
->bar : string
+>foo : any
+>bar : any
 
 const w = <JustPropTypesWithSpecifiedGeneric foo="cool" bar={null} />; // error, bar is required
->w : JSX.Element
-><JustPropTypesWithSpecifiedGeneric foo="cool" bar={null} /> : JSX.Element
+>w : any
+><JustPropTypesWithSpecifiedGeneric foo="cool" bar={null} /> : any
 >JustPropTypesWithSpecifiedGeneric : typeof JustPropTypesWithSpecifiedGeneric
->foo : string
->bar : null
+>foo : any
+>bar : any
 
 class JustDefaultPropsWithSpecifiedGeneric extends ReactComponent<FooProps> {
 >JustDefaultPropsWithSpecifiedGeneric : JustDefaultPropsWithSpecifiedGeneric
@@= skipped -43, +43 lines =@@
 }
 
 const x = <JustDefaultPropsWithSpecifiedGeneric foo="eh" />;
->x : JSX.Element
-><JustDefaultPropsWithSpecifiedGeneric foo="eh" /> : JSX.Element
+>x : any
+><JustDefaultPropsWithSpecifiedGeneric foo="eh" /> : any
 >JustDefaultPropsWithSpecifiedGeneric : typeof JustDefaultPropsWithSpecifiedGeneric
->foo : string
+>foo : any
 
 const y = <JustDefaultPropsWithSpecifiedGeneric foo="no" bar="ok" />; // error, no prop named bar
->y : JSX.Element
-><JustDefaultPropsWithSpecifiedGeneric foo="no" bar="ok" /> : JSX.Element
+>y : any
+><JustDefaultPropsWithSpecifiedGeneric foo="no" bar="ok" /> : any
 >JustDefaultPropsWithSpecifiedGeneric : typeof JustDefaultPropsWithSpecifiedGeneric
->foo : string
->bar : string
+>foo : any
+>bar : any
 
 const z = <JustDefaultPropsWithSpecifiedGeneric foo={12} />; // error, wrong type
->z : JSX.Element
-><JustDefaultPropsWithSpecifiedGeneric foo={12} /> : JSX.Element
+>z : any
+><JustDefaultPropsWithSpecifiedGeneric foo={12} /> : any
 >JustDefaultPropsWithSpecifiedGeneric : typeof JustDefaultPropsWithSpecifiedGeneric
->foo : number
+>foo : any
 >12 : 12
 
 const aa = <JustDefaultPropsWithSpecifiedGeneric />;
->aa : JSX.Element
-><JustDefaultPropsWithSpecifiedGeneric /> : JSX.Element
+>aa : any
+><JustDefaultPropsWithSpecifiedGeneric /> : any
 >JustDefaultPropsWithSpecifiedGeneric : typeof JustDefaultPropsWithSpecifiedGeneric
 
