--- old.returnTagTypeGuard.errors.txt
+++ new.returnTagTypeGuard.errors.txt
@@= skipped -0, +-1 lines =@@
-<no content>
@@= skipped --1, +1 lines =@@
+bug25127.js(3,14): error TS2339: Property 'c' does not exist on type 'Entry'.
+bug25127.js(15,14): error TS2339: Property 'd' does not exist on type 'Group'.
+
+
+==== bug25127.js (2 errors) ====
+    class Entry {
+        constructor() {
+            this.c = 1
+                 ~
+!!! error TS2339: Property 'c' does not exist on type 'Entry'.
+        }
+        /**
+         * @param {any} x
+         * @return {this is Entry}
+         */
+        isInit(x) {
+            return true
+        }
+    }
+    class Group {
+        constructor() {
+            this.d = 'no'
+                 ~
+!!! error TS2339: Property 'd' does not exist on type 'Group'.
+        }
+        /**
+         * @param {any} x
+         * @return {false}
+         */
+        isInit(x) {
+            return false
+        }
+    }
+    /** @param {Entry | Group} chunk */
+    function f(chunk) {
+        let x = chunk.isInit(chunk) ? chunk.c : chunk.d
+        return x
+    }
+    
+    /**
+     * @param {any} value
+     * @return {value is boolean}
+     */
+    function isBoolean(value) {
+        return typeof value === "boolean";
+    }
+    
+    /** @param {boolean | number} val */
+    function foo(val) {
+        if (isBoolean(val)) {
+            val;
+        }
+    }
+    
+    /**
+     * @callback Cb
+     * @param {unknown} x
+     * @return {x is number}
+     */
+    
+    /** @type {Cb} */
+    function isNumber(x) { return typeof x === "number" }
+    
+    /** @param {unknown} x */
+    function g(x) {
+        if (isNumber(x)) {
+            x * 2;
+        }
+    }
+    
