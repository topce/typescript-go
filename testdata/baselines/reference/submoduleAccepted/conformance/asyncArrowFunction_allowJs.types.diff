--- old.asyncArrowFunction_allowJs.types
+++ new.asyncArrowFunction_allowJs.types
@@= skipped -3, +3 lines =@@
 // Error (good)
 /** @type {function(): string} */
 const a = () => 0
->a : () => string
->() => 0 : () => string
+>a : () => number
+>() => 0 : () => number
 >0 : 0
 
 // Error (good)
 /** @type {function(): string} */
 const b = async () => 0
->b : () => string
->async () => 0 : () => string
+>b : () => Promise<number>
+>async () => 0 : () => Promise<number>
 >0 : 0
 
 // No error (bad)
 /** @type {function(): string} */
 const c = async () => {
->c : () => string
->async () => {	return 0} : () => string
+>c : () => Promise<number>
+>async () => {	return 0} : () => Promise<number>
 
 	return 0
 >0 : 0
@@= skipped -24, +24 lines =@@
 // Error (good)
 /** @type {function(): string} */
 const d = async () => {
->d : () => string
->async () => {	return ""} : () => string
+>d : () => Promise<string>
+>async () => {	return ""} : () => Promise<string>
 
 	return ""
 >"" : ""
@@= skipped -9, +9 lines =@@
 
 /** @type {function(function(): string): void} */
 const f = (p) => {}
->f : (arg0: () => string) => void
->(p) => {} : (p: () => string) => void
->p : () => string
+>f : (p: any) => void
+>(p) => {} : (p: any) => void
+>p : any
 
 // Error (good)
 f(async () => {
 >f(async () => {	return 0}) : void
->f : (arg0: () => string) => void
+>f : (p: any) => void
 >async () => {	return 0} : () => Promise<number>
 
 	return 0
