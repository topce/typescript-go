--- old.typeFromPropertyAssignment12.types
+++ new.typeFromPropertyAssignment12.types
@@= skipped -1, +1 lines =@@
 
 === module.js ===
 var Outer = function(element, config) {};
->Outer : { (element: any, config: any): void; Pos(line: any, ch: any): void; }
->function(element, config) {} : { (element: any, config: any): void; Pos(line: any, ch: any): void; }
+>Outer : (element: any, config: any) => void
+>function(element, config) {} : (element: any, config: any) => void
 >element : any
 >config : any
 
 === usage.js ===
 /** @constructor */
 Outer.Pos = function (line, ch) {};
->Outer.Pos = function (line, ch) {} : typeof Pos
->Outer.Pos : typeof Pos
->Outer : { (element: any, config: any): void; Pos(line: any, ch: any): void; }
->Pos : typeof Pos
->function (line, ch) {} : typeof Pos
+>Outer.Pos = function (line, ch) {} : (line: any, ch: any) => void
+>Outer.Pos : any
+>Outer : (element: any, config: any) => void
+>Pos : any
+>function (line, ch) {} : (line: any, ch: any) => void
 >line : any
 >ch : any
 
@@= skipped -20, +20 lines =@@
 Outer.Pos.prototype.line;
 >Outer.Pos.prototype.line : any
 >Outer.Pos.prototype : any
->Outer.Pos : typeof Pos
->Outer : { (element: any, config: any): void; Pos(line: any, ch: any): void; }
->Pos : typeof Pos
+>Outer.Pos : any
+>Outer : (element: any, config: any) => void
+>Pos : any
 >prototype : any
 >line : any
 
 var pos = new Outer.Pos(1, 'x');
->pos : Pos
->new Outer.Pos(1, 'x') : Pos
->Outer.Pos : typeof Pos
->Outer : { (element: any, config: any): void; Pos(line: any, ch: any): void; }
->Pos : typeof Pos
+>pos : any
+>new Outer.Pos(1, 'x') : any
+>Outer.Pos : any
+>Outer : (element: any, config: any) => void
+>Pos : any
 >1 : 1
 >'x' : "x"
 
 pos.line;
->pos.line : number
->pos : Pos
->line : number
+>pos.line : any
+>pos : any
+>line : any
 
 
