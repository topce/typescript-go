--- old.tsxAttributeResolution15.types
+++ new.tsxAttributeResolution15.types
@@= skipped -1, +1 lines =@@
 
 === file.tsx ===
 import React = require('react');
->React : typeof React
+>React : any
 
 class BigGreeter extends React.Component<{ }, {}> {
 >BigGreeter : BigGreeter
->React.Component : React.Component<{}, {}>
->React : typeof React
->Component : typeof React.Component
+>React.Component : any
+>React : any
+>Component : any
 
     render() {
->render : () => JSX.Element
+>render : () => any
 
         return <div>Default hi</div>;
-><div>Default hi</div> : JSX.Element
+><div>Default hi</div> : any
 >div : any
 >div : any
     }
@@= skipped -22, +22 lines =@@
 
 // Error
 let a = <BigGreeter prop1="hello" />
->a : JSX.Element
-><BigGreeter prop1="hello" /> : JSX.Element
+>a : any
+><BigGreeter prop1="hello" /> : any
 >BigGreeter : typeof BigGreeter
->prop1 : string
+>prop1 : any
 
 // OK
 let b = <BigGreeter ref={(input) => { this.textInput = input; }} />
->b : JSX.Element
-><BigGreeter ref={(input) => { this.textInput = input; }} /> : JSX.Element
+>b : any
+><BigGreeter ref={(input) => { this.textInput = input; }} /> : any
 >BigGreeter : typeof BigGreeter
->ref : (input: BigGreeter) => void
->(input) => { this.textInput = input; } : (input: BigGreeter) => void
->input : BigGreeter
->this.textInput = input : BigGreeter
+>ref : any
+>(input) => { this.textInput = input; } : (input: any) => void
+>input : any
+>this.textInput = input : any
 >this.textInput : any
 >this : undefined
 >textInput : any
->input : BigGreeter
+>input : any
 
 let c = <BigGreeter data-extra="hi" />
->c : JSX.Element
-><BigGreeter data-extra="hi" /> : JSX.Element
+>c : any
+><BigGreeter data-extra="hi" /> : any
 >BigGreeter : typeof BigGreeter
->data-extra : string
+>data-extra : any
 
