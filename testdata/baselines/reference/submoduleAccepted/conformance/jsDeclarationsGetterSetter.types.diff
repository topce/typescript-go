--- old.jsDeclarationsGetterSetter.types
+++ new.jsDeclarationsGetterSetter.types
@@= skipped -18, +18 lines =@@
      * @param {number} _arg
      */
     set x(_arg) {
->x : number
->_arg : number
+>x : any
+>_arg : any
     }
 }
 
@@= skipped -32, +32 lines =@@
 >D : typeof D
 >prototype : D
 >"x" : "x"
->{    get() {        return 12;    }} : { get(): number; }
+>{    get() {        return 12;    }} : { get: () => number; }
 
     get() {
 >get : () => number
@@= skipped -22, +22 lines =@@
 >E : typeof E
 >prototype : E
 >"x" : "x"
->{    /**     * @param {number} _arg     */    set(_arg) {}} : { set(_arg: number): void; }
+>{    /**     * @param {number} _arg     */    set(_arg) {}} : { set: (_arg: any) => void; }
 
     /**
      * @param {number} _arg
      */
     set(_arg) {}
->set : (_arg: number) => void
->_arg : number
+>set : (_arg: any) => void
+>_arg : any
 
 });
 
@@= skipped -23, +23 lines =@@
 >F : typeof F
 >prototype : F
 >"x" : "x"
->{    get() {        return 12;    },    /**     * @param {number} _arg     */    set(_arg) {}} : { get(): number; set(_arg: number): void; }
+>{    get() {        return 12;    },    /**     * @param {number} _arg     */    set(_arg) {}} : { get: () => number; set: (_arg: any) => void; }
 
     get() {
 >get : () => number
@@= skipped -13, +13 lines =@@
      * @param {number} _arg
      */
     set(_arg) {}
->set : (_arg: number) => void
->_arg : number
+>set : (_arg: any) => void
+>_arg : any
 
 });
 
@@= skipped -17, +17 lines =@@
 >G : typeof G
 >prototype : G
 >"x" : "x"
->{    /**     * @param {number[]} args     */    set(...args) {}} : { set(...args: number[]): void; }
+>{    /**     * @param {number[]} args     */    set(...args) {}} : { set: (...args: [v: any]) => void; }
 
     /**
      * @param {number[]} args
      */
     set(...args) {}
->set : (...args: number[]) => void
->args : number[]
+>set : (...args: [v: any]) => void
+>args : [v: any]
 
 });
 
@@= skipped -23, +23 lines =@@
 >H : typeof H
 >prototype : H
 >"x" : "x"
->{    set() {}} : { set(): void; }
+>{    set() {}} : { set: () => void; }
 
     set() {}
 >set : () => void
@@= skipped -20, +20 lines =@@
 >I : typeof I
 >prototype : I
 >"x" : "x"
->{    /**     * @param {number} v     */    set: (v) => {}} : { set: (v: number) => void; }
+>{    /**     * @param {number} v     */    set: (v) => {}} : { set: (v: any) => void; }
 
     /**
      * @param {number} v
      */
     set: (v) => {}
->set : (v: number) => void
->(v) => {} : (v: number) => void
->v : number
+>set : (v: any) => void
+>(v) => {} : (v: any) => void
+>v : any
 
 });
 
@@= skipped -16, +16 lines =@@
  * @param {number} v
  */
 const jSetter = (v) => {}
->jSetter : (v: number) => void
->(v) => {} : (v: number) => void
->v : number
+>jSetter : (v: any) => void
+>(v) => {} : (v: any) => void
+>v : any
 
 export class J {}
 >J : J
@@= skipped -16, +16 lines =@@
 >J : typeof J
 >prototype : J
 >"x" : "x"
->{    set: jSetter} : { set: (v: number) => void; }
+>{    set: jSetter} : { set: (v: any) => void; }
 
     set: jSetter
->set : (v: number) => void
->jSetter : (v: number) => void
+>set : (v: any) => void
+>jSetter : (v: any) => void
 
 });
 
@@= skipped -12, +12 lines =@@
  * @param {number} v
  */
 const kSetter1 = (v) => {}
->kSetter1 : (v: number) => void
->(v) => {} : (v: number) => void
->v : number
+>kSetter1 : (v: any) => void
+>(v) => {} : (v: any) => void
+>v : any
 
 /**
  * @param {number} v
  */
 const kSetter2 = (v) => {}
->kSetter2 : (v: number) => void
->(v) => {} : (v: number) => void
->v : number
+>kSetter2 : (v: any) => void
+>(v) => {} : (v: any) => void
+>v : any
 
 export class K {}
 >K : K
@@= skipped -24, +24 lines =@@
 >K : typeof K
 >prototype : K
 >"x" : "x"
->{    set: Math.random() ? kSetter1 : kSetter2} : { set: (v: number) => void; }
+>{    set: Math.random() ? kSetter1 : kSetter2} : { set: (v: any) => void; }
 
     set: Math.random() ? kSetter1 : kSetter2
->set : (v: number) => void
->Math.random() ? kSetter1 : kSetter2 : (v: number) => void
+>set : (v: any) => void
+>Math.random() ? kSetter1 : kSetter2 : (v: any) => void
 >Math.random() : number
 >Math.random : () => number
 >Math : Math
 >random : () => number
->kSetter1 : (v: number) => void
->kSetter2 : (v: number) => void
+>kSetter1 : (v: any) => void
+>kSetter2 : (v: any) => void
 
 });
 
@@= skipped -18, +18 lines =@@
  * @param {number} v
  */
 const lSetter1 = (v) => {}
->lSetter1 : (v: number) => void
->(v) => {} : (v: number) => void
->v : number
+>lSetter1 : (v: any) => void
+>(v) => {} : (v: any) => void
+>v : any
 
 /**
  * @param {string} v
  */
 const lSetter2 = (v) => {}
->lSetter2 : (v: string) => void
->(v) => {} : (v: string) => void
->v : string
+>lSetter2 : (v: any) => void
+>(v) => {} : (v: any) => void
+>v : any
 
 export class L {}
 >L : L
@@= skipped -24, +24 lines =@@
 >L : typeof L
 >prototype : L
 >"x" : "x"
->{    set: Math.random() ? lSetter1 : lSetter2} : { set: ((v: number) => void) | ((v: string) => void); }
+>{    set: Math.random() ? lSetter1 : lSetter2} : { set: (v: any) => void; }
 
     set: Math.random() ? lSetter1 : lSetter2
->set : ((v: number) => void) | ((v: string) => void)
->Math.random() ? lSetter1 : lSetter2 : ((v: number) => void) | ((v: string) => void)
+>set : (v: any) => void
+>Math.random() ? lSetter1 : lSetter2 : (v: any) => void
 >Math.random() : number
 >Math.random : () => number
 >Math : Math
 >random : () => number
->lSetter1 : (v: number) => void
->lSetter2 : (v: string) => void
+>lSetter1 : (v: any) => void
+>lSetter2 : (v: any) => void
 
 });
 
@@= skipped -18, +18 lines =@@
  * @param {number | boolean} v
  */
 const mSetter1 = (v) => {}
->mSetter1 : (v: number | boolean) => void
->(v) => {} : (v: number | boolean) => void
->v : number | boolean
+>mSetter1 : (v: any) => void
+>(v) => {} : (v: any) => void
+>v : any
 
 /**
  * @param {string | boolean} v
  */
 const mSetter2 = (v) => {}
->mSetter2 : (v: string | boolean) => void
->(v) => {} : (v: string | boolean) => void
->v : string | boolean
+>mSetter2 : (v: any) => void
+>(v) => {} : (v: any) => void
+>v : any
 
 export class M {}
 >M : M
@@= skipped -24, +24 lines =@@
 >M : typeof M
 >prototype : M
 >"x" : "x"
->{    set: Math.random() ? mSetter1 : mSetter2} : { set: ((v: number | boolean) => void) | ((v: string | boolean) => void); }
+>{    set: Math.random() ? mSetter1 : mSetter2} : { set: (v: any) => void; }
 
     set: Math.random() ? mSetter1 : mSetter2
->set : ((v: number | boolean) => void) | ((v: string | boolean) => void)
->Math.random() ? mSetter1 : mSetter2 : ((v: number | boolean) => void) | ((v: string | boolean) => void)
+>set : (v: any) => void
+>Math.random() ? mSetter1 : mSetter2 : (v: any) => void
 >Math.random() : number
 >Math.random : () => number
 >Math : Math
 >random : () => number
->mSetter1 : (v: number | boolean) => void
->mSetter2 : (v: string | boolean) => void
+>mSetter1 : (v: any) => void
+>mSetter2 : (v: any) => void
 
 });
 
