--- old.intraExpressionInferencesJsx.types
+++ new.intraExpressionInferencesJsx.types
@@= skipped -0, +0 lines =@@
 //// [tests/cases/conformance/types/typeRelationships/typeInference/intraExpressionInferencesJsx.tsx] ////
 
-=== Performance Stats ===
-Assignability cache: 2,500
-Type Count: 10,000
-Instantiation count: 100,000
-Symbol count: 50,000
-
 === intraExpressionInferencesJsx.tsx ===
 /// <reference path="react16.d.ts" />
 
@@= skipped -43, +37 lines =@@
 
     | ({ kind: "a"; func?(): Partial<A> } & A)
 >kind : "a"
->func : (() => Partial<A>) | undefined
+>func : () => Partial<A> | undefined
 
     | ({ kind: "b"; func?(): Partial<B> } & B)
 >kind : "b"
->func : (() => Partial<B>) | undefined
+>func : () => Partial<B> | undefined
 
     | ({ kind: "c"; func?(): Partial<C> } & C)
 >kind : "c"
->func : (() => Partial<C>) | undefined
+>func : () => Partial<C> | undefined
 
   );
 };
@@= skipped -29, +29 lines =@@
 };
 
 const Component = <T extends Animations>({
->Component : <T extends Animations>({ animations, style, }: AnimatedViewProps<T>) => JSX.Element
-><T extends Animations>({  animations,  style,}: AnimatedViewProps<T>) => <></> : <T extends Animations>({ animations, style, }: AnimatedViewProps<T>) => JSX.Element
+>Component : <T extends Animations>(__0: AnimatedViewProps<T>) => any
+><T extends Animations>({  animations,  style,}: AnimatedViewProps<T>) => <></> : <T extends Animations>(__0: AnimatedViewProps<T>) => any
 
   animations,
 >animations : T
@@= skipped -10, +10 lines =@@
 >style : (animationsValues: StyleParam<T>) => string
 
 }: AnimatedViewProps<T>) => <></>;
-><></> : JSX.Element
+><></> : any
 
 <Component
-><Component  animations={{    test: {      kind: "a",      value: 1,      a: true,    },  }}  style={(anim) => {    return "";  }}/> : JSX.Element
->Component : <T extends Animations>({ animations, style, }: AnimatedViewProps<T>) => JSX.Element
+><Component  animations={{    test: {      kind: "a",      value: 1,      a: true,    },  }}  style={(anim) => {    return "";  }}/> : any
+>Component : <T extends Animations>(__0: AnimatedViewProps<T>) => any
 
   animations={{
->animations : { test: { kind: "a"; value: number; a: true; }; }
->{    test: {      kind: "a",      value: 1,      a: true,    },  } : { test: { kind: "a"; value: number; a: true; }; }
+>animations : any
+>{    test: {      kind: "a",      value: 1,      a: true,    },  } : { test: { kind: string; value: number; a: boolean; }; }
 
     test: {
->test : { kind: "a"; value: number; a: true; }
->{      kind: "a",      value: 1,      a: true,    } : { kind: "a"; value: number; a: true; }
+>test : { kind: string; value: number; a: boolean; }
+>{      kind: "a",      value: 1,      a: true,    } : { kind: string; value: number; a: boolean; }
 
       kind: "a",
->kind : "a"
+>kind : string
 >"a" : "a"
 
       value: 1,
@@= skipped -23, +23 lines =@@
 >1 : 1
 
       a: true,
->a : true
+>a : boolean
 >true : true
 
     },
   }}
   style={(anim) => {
->style : (anim: StyleParam<{ test: { kind: "a"; value: number; a: true; }; }>) => string
->(anim) => {    return "";  } : (anim: StyleParam<{ test: { kind: "a"; value: number; a: true; }; }>) => string
->anim : StyleParam<{ test: { kind: "a"; value: number; a: true; }; }>
+>style : any
+>(anim) => {    return "";  } : (anim: any) => string
+>anim : any
 
     return "";
 >"" : ""
@@= skipped -16, +16 lines =@@
   }}
 />;
 <Component
-><Component  animations={{    test: {      kind: "a",      value: 1,      a: true,      func() {        return {          a: true,        };      },    },  }}  style={(anim) => {    return "";  }}/> : JSX.Element
->Component : <T extends Animations>({ animations, style, }: AnimatedViewProps<T>) => JSX.Element
+><Component  animations={{    test: {      kind: "a",      value: 1,      a: true,      func() {        return {          a: true,        };      },    },  }}  style={(anim) => {    return "";  }}/> : any
+>Component : <T extends Animations>(__0: AnimatedViewProps<T>) => any
 
   animations={{
->animations : { test: { kind: "a"; value: number; a: true; func(): { a: true; }; }; }
->{    test: {      kind: "a",      value: 1,      a: true,      func() {        return {          a: true,        };      },    },  } : { test: { kind: "a"; value: number; a: true; func(): { a: true; }; }; }
+>animations : any
+>{    test: {      kind: "a",      value: 1,      a: true,      func() {        return {          a: true,        };      },    },  } : { test: { kind: string; value: number; a: boolean; func: () => { a: boolean; }; }; }
 
     test: {
->test : { kind: "a"; value: number; a: true; func(): { a: true; }; }
->{      kind: "a",      value: 1,      a: true,      func() {        return {          a: true,        };      },    } : { kind: "a"; value: number; a: true; func(): { a: true; }; }
+>test : { kind: string; value: number; a: boolean; func: () => { a: boolean; }; }
+>{      kind: "a",      value: 1,      a: true,      func() {        return {          a: true,        };      },    } : { kind: string; value: number; a: boolean; func: () => { a: boolean; }; }
 
       kind: "a",
->kind : "a"
+>kind : string
 >"a" : "a"
 
       value: 1,
@@= skipped -20, +20 lines =@@
 >1 : 1
 
       a: true,
->a : true
+>a : boolean
 >true : true
 
       func() {
->func : () => { a: true; }
+>func : () => { a: boolean; }
 
         return {
->{          a: true,        } : { a: true; }
+>{          a: true,        } : { a: boolean; }
 
           a: true,
->a : true
+>a : boolean
 >true : true
 
         };
@@= skipped -18, +18 lines =@@
     },
   }}
   style={(anim) => {
->style : (anim: StyleParam<{ test: { kind: "a"; value: number; a: true; func(): { a: true; }; }; }>) => string
->(anim) => {    return "";  } : (anim: StyleParam<{ test: { kind: "a"; value: number; a: true; func(): { a: true; }; }; }>) => string
->anim : StyleParam<{ test: { kind: "a"; value: number; a: true; func(): { a: true; }; }; }>
+>style : any
+>(anim) => {    return "";  } : (anim: any) => string
+>anim : any
 
     return "";
 >"" : ""
@@= skipped -10, +10 lines =@@
   }}
 />;
 <Component
-><Component  animations={{    test: {      kind: "a",      value: 1,      a: true,      func: () => {        return {          a: true,        };      },    },  }}  style={(anim) => {    return "";  }}/> : JSX.Element
->Component : <T extends Animations>({ animations, style, }: AnimatedViewProps<T>) => JSX.Element
+><Component  animations={{    test: {      kind: "a",      value: 1,      a: true,      func: () => {        return {          a: true,        };      },    },  }}  style={(anim) => {    return "";  }}/> : any
+>Component : <T extends Animations>(__0: AnimatedViewProps<T>) => any
 
   animations={{
->animations : { test: { kind: "a"; value: number; a: true; func: () => { a: true; }; }; }
->{    test: {      kind: "a",      value: 1,      a: true,      func: () => {        return {          a: true,        };      },    },  } : { test: { kind: "a"; value: number; a: true; func: () => { a: true; }; }; }
+>animations : any
+>{    test: {      kind: "a",      value: 1,      a: true,      func: () => {        return {          a: true,        };      },    },  } : { test: { kind: string; value: number; a: boolean; func: () => { a: boolean; }; }; }
 
     test: {
->test : { kind: "a"; value: number; a: true; func: () => { a: true; }; }
->{      kind: "a",      value: 1,      a: true,      func: () => {        return {          a: true,        };      },    } : { kind: "a"; value: number; a: true; func: () => { a: true; }; }
+>test : { kind: string; value: number; a: boolean; func: () => { a: boolean; }; }
+>{      kind: "a",      value: 1,      a: true,      func: () => {        return {          a: true,        };      },    } : { kind: string; value: number; a: boolean; func: () => { a: boolean; }; }
 
       kind: "a",
->kind : "a"
+>kind : string
 >"a" : "a"
 
       value: 1,
@@= skipped -20, +20 lines =@@
 >1 : 1
 
       a: true,
->a : true
+>a : boolean
 >true : true
 
       func: () => {
->func : () => { a: true; }
->() => {        return {          a: true,        };      } : () => { a: true; }
+>func : () => { a: boolean; }
+>() => {        return {          a: true,        };      } : () => { a: boolean; }
 
         return {
->{          a: true,        } : { a: true; }
+>{          a: true,        } : { a: boolean; }
 
           a: true,
->a : true
+>a : boolean
 >true : true
 
         };
@@= skipped -19, +19 lines =@@
     },
   }}
   style={(anim) => {
->style : (anim: StyleParam<{ test: { kind: "a"; value: number; a: true; func: () => { a: true; }; }; }>) => string
->(anim) => {    return "";  } : (anim: StyleParam<{ test: { kind: "a"; value: number; a: true; func: () => { a: true; }; }; }>) => string
->anim : StyleParam<{ test: { kind: "a"; value: number; a: true; func: () => { a: true; }; }; }>
+>style : any
+>(anim) => {    return "";  } : (anim: any) => string
+>anim : any
 
     return "";
 >"" : ""
@@= skipped -23, +23 lines =@@
 }
 
 function Foo<T>(props: Props<T>) {
->Foo : <T>(props: Props<T>) => JSX.Element
+>Foo : <T>(props: Props<T>) => any
 >props : Props<T>
 
   return <div />;
-><div /> : JSX.Element
+><div /> : any
 >div : any
 }
 
 <Foo
-><Foo  a={() => 10}  b={(arg) => { arg.toString(); }}/> : JSX.Element
->Foo : <T>(props: Props<T>) => JSX.Element
+><Foo  a={() => 10}  b={(arg) => { arg.toString(); }}/> : any
+>Foo : <T>(props: Props<T>) => any
 
   a={() => 10}
->a : () => number
+>a : any
 >() => 10 : () => number
 >10 : 10
 
   b={(arg) => { arg.toString(); }}
->b : (arg: number) => void
->(arg) => { arg.toString(); } : (arg: number) => void
->arg : number
->arg.toString() : string
->arg.toString : (radix?: number) => string
->arg : number
->toString : (radix?: number) => string
+>b : any
+>(arg) => { arg.toString(); } : (arg: any) => void
+>arg : any
+>arg.toString() : any
+>arg.toString : any
+>arg : any
+>toString : any
 
 />;
 
 <Foo
-><Foo  a={(x) => 10}  b={(arg) => { arg.toString(); }}/> : JSX.Element
->Foo : <T>(props: Props<T>) => JSX.Element
+><Foo  a={(x) => 10}  b={(arg) => { arg.toString(); }}/> : any
+>Foo : <T>(props: Props<T>) => any
 
   a={(x) => 10}
->a : (x: string) => number
->(x) => 10 : (x: string) => number
->x : string
+>a : any
+>(x) => 10 : (x: any) => number
+>x : any
 >10 : 10
 
   b={(arg) => { arg.toString(); }}
->b : (arg: number) => void
->(arg) => { arg.toString(); } : (arg: number) => void
->arg : number
->arg.toString() : string
->arg.toString : (radix?: number) => string
->arg : number
->toString : (radix?: number) => string
+>b : any
+>(arg) => { arg.toString(); } : (arg: any) => void
+>arg : any
+>arg.toString() : any
+>arg.toString : any
+>arg : any
+>toString : any
 
 />;
 
 <Foo {...{
-><Foo {...{  a: (x) => 10,  b: (arg) => { arg.toString(); },}} /> : JSX.Element
->Foo : <T>(props: Props<T>) => JSX.Element
->{  a: (x) => 10,  b: (arg) => { arg.toString(); },} : { a: (x: string) => number; b: (arg: number) => void; }
+><Foo {...{  a: (x) => 10,  b: (arg) => { arg.toString(); },}} /> : any
+>Foo : <T>(props: Props<T>) => any
+>{  a: (x) => 10,  b: (arg) => { arg.toString(); },} : { a: (x: any) => number; b: (arg: any) => void; }
 
   a: (x) => 10,
->a : (x: string) => number
->(x) => 10 : (x: string) => number
->x : string
+>a : (x: any) => number
+>(x) => 10 : (x: any) => number
+>x : any
 >10 : 10
 
   b: (arg) => { arg.toString(); },
->b : (arg: number) => void
->(arg) => { arg.toString(); } : (arg: number) => void
->arg : number
->arg.toString() : string
->arg.toString : (radix?: number) => string
->arg : number
->toString : (radix?: number) => string
+>b : (arg: any) => void
+>(arg) => { arg.toString(); } : (arg: any) => void
+>arg : any
+>arg.toString() : any
+>arg.toString : any
+>arg : any
+>toString : any
 
 }} />;
 
