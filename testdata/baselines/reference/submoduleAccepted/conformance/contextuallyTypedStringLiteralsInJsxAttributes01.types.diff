--- old.contextuallyTypedStringLiteralsInJsxAttributes01.types
+++ new.contextuallyTypedStringLiteralsInJsxAttributes01.types
@@= skipped -12, +12 lines =@@
 }
 
 const FooComponent = (props: { foo: "A" | "B" | "C" }) => <span>{props.foo}</span>;
->FooComponent : (props: { foo: "A" | "B" | "C"; }) => JSX.Element
->(props: { foo: "A" | "B" | "C" }) => <span>{props.foo}</span> : (props: { foo: "A" | "B" | "C"; }) => JSX.Element
+>FooComponent : (props: { foo: "A" | "B" | "C"; }) => any
+>(props: { foo: "A" | "B" | "C" }) => <span>{props.foo}</span> : (props: { foo: "A" | "B" | "C"; }) => any
 >props : { foo: "A" | "B" | "C"; }
 >foo : "A" | "B" | "C"
-><span>{props.foo}</span> : JSX.Element
+><span>{props.foo}</span> : any
 >span : any
 >props.foo : "A" | "B" | "C"
 >props : { foo: "A" | "B" | "C"; }
@@= skipped -12, +12 lines =@@
 >span : any
 
 <FooComponent foo={"A"} />;
-><FooComponent foo={"A"} /> : JSX.Element
->FooComponent : (props: { foo: "A" | "B" | "C"; }) => JSX.Element
->foo : "A"
+><FooComponent foo={"A"} /> : any
+>FooComponent : (props: { foo: "A" | "B" | "C"; }) => any
+>foo : any
 >"A" : "A"
 
 <FooComponent foo="A"   />;
-><FooComponent foo="A"   /> : JSX.Element
->FooComponent : (props: { foo: "A" | "B" | "C"; }) => JSX.Element
->foo : "A"
+><FooComponent foo="A"   /> : any
+>FooComponent : (props: { foo: "A" | "B" | "C"; }) => any
+>foo : any
 
 <FooComponent foo={"f"} />;
-><FooComponent foo={"f"} /> : JSX.Element
->FooComponent : (props: { foo: "A" | "B" | "C"; }) => JSX.Element
->foo : "f"
+><FooComponent foo={"f"} /> : any
+>FooComponent : (props: { foo: "A" | "B" | "C"; }) => any
+>foo : any
 >"f" : "f"
 
 <FooComponent foo="f"   />;
-><FooComponent foo="f"   /> : JSX.Element
->FooComponent : (props: { foo: "A" | "B" | "C"; }) => JSX.Element
->foo : "f"
+><FooComponent foo="f"   /> : any
+>FooComponent : (props: { foo: "A" | "B" | "C"; }) => any
+>foo : any
 
