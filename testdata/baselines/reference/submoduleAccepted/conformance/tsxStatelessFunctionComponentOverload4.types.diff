--- old.tsxStatelessFunctionComponentOverload4.types
+++ new.tsxStatelessFunctionComponentOverload4.types
@@= skipped -1, +1 lines =@@
 
 === file.tsx ===
 import React = require('react')
->React : typeof React
+>React : any
 
 declare function OneThing(): JSX.Element;
->OneThing : { (): JSX.Element; (l: { yy: number; yy1: string; }): JSX.Element; }
+>OneThing : { (): Element; (l: { yy: number; yy1: string; }): Element; }
 >JSX : any
 
 declare function OneThing(l: {yy: number, yy1: string}): JSX.Element;
->OneThing : { (): JSX.Element; (l: { yy: number; yy1: string; }): JSX.Element; }
+>OneThing : { (): Element; (l: { yy: number; yy1: string; }): Element; }
 >l : { yy: number; yy1: string; }
 >yy : number
 >yy1 : string
@@= skipped -30, +30 lines =@@
 
 // Error
 const c0 = <OneThing extraProp />;  // extra property;
->c0 : JSX.Element
-><OneThing extraProp /> : JSX.Element
->OneThing : { (): JSX.Element; (l: { yy: number; yy1: string; }): JSX.Element; }
->extraProp : true
+>c0 : any
+><OneThing extraProp /> : any
+>OneThing : { (): Element; (l: { yy: number; yy1: string; }): Element; }
+>extraProp : any
 
 const c1 = <OneThing yy={10}/>;  // missing property;
->c1 : JSX.Element
-><OneThing yy={10}/> : JSX.Element
->OneThing : { (): JSX.Element; (l: { yy: number; yy1: string; }): JSX.Element; }
->yy : number
+>c1 : any
+><OneThing yy={10}/> : any
+>OneThing : { (): Element; (l: { yy: number; yy1: string; }): Element; }
+>yy : any
 >10 : 10
 
 const c2 = <OneThing {...obj} yy1 />; // type incompatible;
->c2 : JSX.Element
-><OneThing {...obj} yy1 /> : JSX.Element
->OneThing : { (): JSX.Element; (l: { yy: number; yy1: string; }): JSX.Element; }
+>c2 : any
+><OneThing {...obj} yy1 /> : any
+>OneThing : { (): Element; (l: { yy: number; yy1: string; }): Element; }
 >obj : { yy: number; yy1: string; }
->yy1 : true
+>yy1 : any
 
 const c3 = <OneThing {...obj} {...{extra: "extra attr"}} />;  //  This is OK because all attribute are spread
->c3 : JSX.Element
-><OneThing {...obj} {...{extra: "extra attr"}} /> : JSX.Element
->OneThing : { (): JSX.Element; (l: { yy: number; yy1: string; }): JSX.Element; }
+>c3 : any
+><OneThing {...obj} {...{extra: "extra attr"}} /> : any
+>OneThing : { (): Element; (l: { yy: number; yy1: string; }): Element; }
 >obj : { yy: number; yy1: string; }
 >{extra: "extra attr"} : { extra: string; }
 >extra : string
 >"extra attr" : "extra attr"
 
 const c4 = <OneThing {...obj} y1={10000} />;  // extra property;
->c4 : JSX.Element
-><OneThing {...obj} y1={10000} /> : JSX.Element
->OneThing : { (): JSX.Element; (l: { yy: number; yy1: string; }): JSX.Element; }
+>c4 : any
+><OneThing {...obj} y1={10000} /> : any
+>OneThing : { (): Element; (l: { yy: number; yy1: string; }): Element; }
 >obj : { yy: number; yy1: string; }
->y1 : number
+>y1 : any
 >10000 : 10000
 
 const c5 = <OneThing {...obj} {...{yy: true}} />;  // type incompatible;
->c5 : JSX.Element
-><OneThing {...obj} {...{yy: true}} /> : JSX.Element
->OneThing : { (): JSX.Element; (l: { yy: number; yy1: string; }): JSX.Element; }
+>c5 : any
+><OneThing {...obj} {...{yy: true}} /> : any
+>OneThing : { (): Element; (l: { yy: number; yy1: string; }): Element; }
 >obj : { yy: number; yy1: string; }
 >{yy: true} : { yy: boolean; }
 >yy : boolean
 >true : true
 
 const c6 = <OneThing {...obj2} {...{extra: "extra attr"}} />;  // Should error as there is extra attribute that doesn't match any. Current it is not
->c6 : JSX.Element
-><OneThing {...obj2} {...{extra: "extra attr"}} /> : JSX.Element
->OneThing : { (): JSX.Element; (l: { yy: number; yy1: string; }): JSX.Element; }
+>c6 : any
+><OneThing {...obj2} {...{extra: "extra attr"}} /> : any
+>OneThing : { (): Element; (l: { yy: number; yy1: string; }): Element; }
 >obj2 : any
 >{extra: "extra attr"} : { extra: string; }
 >extra : string
 >"extra attr" : "extra attr"
 
 const c7 = <OneThing {...obj2} yy />;  // Should error as there is extra attribute that doesn't match any. Current it is not
->c7 : JSX.Element
-><OneThing {...obj2} yy /> : JSX.Element
->OneThing : { (): JSX.Element; (l: { yy: number; yy1: string; }): JSX.Element; }
+>c7 : any
+><OneThing {...obj2} yy /> : any
+>OneThing : { (): Element; (l: { yy: number; yy1: string; }): Element; }
 >obj2 : any
->yy : true
+>yy : any
 
 declare function TestingOneThing(j: {"extra-data": string}): JSX.Element;
->TestingOneThing : { (j: { "extra-data": string; }): JSX.Element; (n: { yy: string; direction?: number; }): JSX.Element; }
+>TestingOneThing : { (j: { "extra-data": string; }): Element; (n: { yy: string; direction?: number; }): Element; }
 >j : { "extra-data": string; }
 >"extra-data" : string
 >JSX : any
 
 declare function TestingOneThing(n: {yy: string, direction?: number}): JSX.Element;
->TestingOneThing : { (j: { "extra-data": string; }): JSX.Element; (n: { yy: string; direction?: number; }): JSX.Element; }
+>TestingOneThing : { (j: { "extra-data": string; }): Element; (n: { yy: string; direction?: number; }): Element; }
 >n : { yy: string; direction?: number; }
 >yy : string
 >direction : number
@@= skipped -76, +76 lines =@@
 
 // Error
 const d1 = <TestingOneThing extra-data />
->d1 : JSX.Element
-><TestingOneThing extra-data /> : JSX.Element
->TestingOneThing : { (j: { "extra-data": string; }): JSX.Element; (n: { yy: string; direction?: number; }): JSX.Element; }
->extra-data : true
+>d1 : any
+><TestingOneThing extra-data /> : any
+>TestingOneThing : { (j: { "extra-data": string; }): Element; (n: { yy: string; direction?: number; }): Element; }
+>extra-data : any
 
 const d2 = <TestingOneThing yy="hello" direction="left" />
->d2 : JSX.Element
-><TestingOneThing yy="hello" direction="left" /> : JSX.Element
->TestingOneThing : { (j: { "extra-data": string; }): JSX.Element; (n: { yy: string; direction?: number; }): JSX.Element; }
->yy : string
->direction : string
+>d2 : any
+><TestingOneThing yy="hello" direction="left" /> : any
+>TestingOneThing : { (j: { "extra-data": string; }): Element; (n: { yy: string; direction?: number; }): Element; }
+>yy : any
+>direction : any
 
 declare function TestingOptional(a: {y1?: string, y2?: number}): JSX.Element;
->TestingOptional : { (a: { y1?: string; y2?: number; }): JSX.Element; (a: { y1?: string; y2?: number; children: JSX.Element; }): JSX.Element; (a: { y1: boolean; y2?: number; y3: boolean; }): JSX.Element; }
+>TestingOptional : { (a: { y1?: string; y2?: number; }): Element; (a: { y1?: string; y2?: number; children: Element; }): Element; (a: { y1: boolean; y2?: number; y3: boolean; }): Element; }
 >a : { y1?: string; y2?: number; }
 >y1 : string
 >y2 : number
 >JSX : any
 
 declare function TestingOptional(a: {y1?: string, y2?: number, children: JSX.Element}): JSX.Element;
->TestingOptional : { (a: { y1?: string; y2?: number; }): JSX.Element; (a: { y1?: string; y2?: number; children: JSX.Element; }): JSX.Element; (a: { y1: boolean; y2?: number; y3: boolean; }): JSX.Element; }
->a : { y1?: string; y2?: number; children: JSX.Element; }
+>TestingOptional : { (a: { y1?: string; y2?: number; }): Element; (a: { y1?: string; y2?: number; children: Element; }): Element; (a: { y1: boolean; y2?: number; y3: boolean; }): Element; }
+>a : { y1?: string; y2?: number; children: Element; }
 >y1 : string
 >y2 : number
->children : JSX.Element
+>children : Element
 >JSX : any
 >JSX : any
 
 declare function TestingOptional(a: {y1: boolean, y2?: number, y3: boolean}): JSX.Element;
->TestingOptional : { (a: { y1?: string; y2?: number; }): JSX.Element; (a: { y1?: string; y2?: number; children: JSX.Element; }): JSX.Element; (a: { y1: boolean; y2?: number; y3: boolean; }): JSX.Element; }
+>TestingOptional : { (a: { y1?: string; y2?: number; }): Element; (a: { y1?: string; y2?: number; children: Element; }): Element; (a: { y1: boolean; y2?: number; y3: boolean; }): Element; }
 >a : { y1: boolean; y2?: number; y3: boolean; }
 >y1 : boolean
 >y2 : number
@@= skipped -38, +38 lines =@@
 
 // Error
 const e1 = <TestingOptional y1 y3="hello"/>
->e1 : JSX.Element
-><TestingOptional y1 y3="hello"/> : JSX.Element
->TestingOptional : { (a: { y1?: string; y2?: number; }): JSX.Element; (a: { y1?: string; y2?: number; children: JSX.Element; }): JSX.Element; (a: { y1: boolean; y2?: number; y3: boolean; }): JSX.Element; }
->y1 : true
->y3 : string
+>e1 : any
+><TestingOptional y1 y3="hello"/> : any
+>TestingOptional : { (a: { y1?: string; y2?: number; }): Element; (a: { y1?: string; y2?: number; children: Element; }): Element; (a: { y1: boolean; y2?: number; y3: boolean; }): Element; }
+>y1 : any
+>y3 : any
 
 const e2 = <TestingOptional y1="hello" y2={1000} y3 />
->e2 : JSX.Element
-><TestingOptional y1="hello" y2={1000} y3 /> : JSX.Element
->TestingOptional : { (a: { y1?: string; y2?: number; }): JSX.Element; (a: { y1?: string; y2?: number; children: JSX.Element; }): JSX.Element; (a: { y1: boolean; y2?: number; y3: boolean; }): JSX.Element; }
->y1 : string
->y2 : number
+>e2 : any
+><TestingOptional y1="hello" y2={1000} y3 /> : any
+>TestingOptional : { (a: { y1?: string; y2?: number; }): Element; (a: { y1?: string; y2?: number; children: Element; }): Element; (a: { y1: boolean; y2?: number; y3: boolean; }): Element; }
+>y1 : any
+>y2 : any
 >1000 : 1000
->y3 : true
+>y3 : any
 
 const e3 = <TestingOptional y1="hello" y2={1000} children="hi" />
->e3 : JSX.Element
-><TestingOptional y1="hello" y2={1000} children="hi" /> : JSX.Element
->TestingOptional : { (a: { y1?: string; y2?: number; }): JSX.Element; (a: { y1?: string; y2?: number; children: JSX.Element; }): JSX.Element; (a: { y1: boolean; y2?: number; y3: boolean; }): JSX.Element; }
->y1 : string
->y2 : number
+>e3 : any
+><TestingOptional y1="hello" y2={1000} children="hi" /> : any
+>TestingOptional : { (a: { y1?: string; y2?: number; }): Element; (a: { y1?: string; y2?: number; children: Element; }): Element; (a: { y1: boolean; y2?: number; y3: boolean; }): Element; }
+>y1 : any
+>y2 : any
 >1000 : 1000
->children : string
+>children : any
 
 const e4 = <TestingOptional y1="hello" y2={1000}>Hi</TestingOptional>
->e4 : JSX.Element
-><TestingOptional y1="hello" y2={1000}>Hi</TestingOptional> : JSX.Element
->TestingOptional : { (a: { y1?: string; y2?: number; }): JSX.Element; (a: { y1?: string; y2?: number; children: JSX.Element; }): JSX.Element; (a: { y1: boolean; y2?: number; y3: boolean; }): JSX.Element; }
->y1 : string
->y2 : number
+>e4 : any
+><TestingOptional y1="hello" y2={1000}>Hi</TestingOptional> : any
+>TestingOptional : { (a: { y1?: string; y2?: number; }): Element; (a: { y1?: string; y2?: number; children: Element; }): Element; (a: { y1: boolean; y2?: number; y3: boolean; }): Element; }
+>y1 : any
+>y2 : any
 >1000 : 1000
->TestingOptional : { (a: { y1?: string; y2?: number; }): JSX.Element; (a: { y1?: string; y2?: number; children: JSX.Element; }): JSX.Element; (a: { y1: boolean; y2?: number; y3: boolean; }): JSX.Element; }
+>TestingOptional : { (a: { y1?: string; y2?: number; }): Element; (a: { y1?: string; y2?: number; children: Element; }): Element; (a: { y1: boolean; y2?: number; y3: boolean; }): Element; }
 
